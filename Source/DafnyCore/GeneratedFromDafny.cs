// Dafny program the_program compiled into C#
// To recompile, you will need the libraries
//     System.Runtime.Numerics.dll System.Collections.Immutable.dll
// but the 'dotnet' tool in net6.0 should pick those up automatically.
// Optionally, you may want to include compiler switches like
//     /debug /nowarn:162,164,168,183,219,436,1717,1718

using System;
using System.Numerics;
using System.Collections;
namespace Formatting {

  public partial class __default {
    public static System.String ReindentProgramFromFirstToken(Microsoft.Dafny.IToken firstToken, Formatting.IIndentationFormatter reindent)
    {
      System.String s = default(System.String);
      Microsoft.Dafny.IToken token;
      token = firstToken;
      System.Text.StringBuilder sb;
      System.Text.StringBuilder _nw0 = new System.Text.StringBuilder();
      sb = _nw0;
      while ((token) != (object) ((Microsoft.Dafny.IToken)null)) {
        System.String newLeadingTrivia;
        newLeadingTrivia = (reindent).GetNewLeadingTrivia(token);
        System.String newTrailingTrivia;
        newTrailingTrivia = (reindent).GetNewTrailingTrivia(token);
        (sb).Append(newLeadingTrivia);
        (sb).Append(token.val);
        (sb).Append(newTrailingTrivia);
        token = token.Next;
      }
      System.String _out0;
      _out0 = (sb).ToString().ToString();
      s = _out0;
      return s;
    }
  }

  public interface IIndentationFormatter {
    System.String GetNewLeadingTrivia(Microsoft.Dafny.IToken token);
    System.String GetNewTrailingTrivia(Microsoft.Dafny.IToken token);
  }
  public class _Companion_IIndentationFormatter {
  }
} // end of namespace Formatting


namespace Std.Wrappers {

  public partial class __default {
    public static Std.Wrappers._IOutcomeResult<__E> Need<__E>(bool condition, __E error)
    {
      if (condition) {
        return Std.Wrappers.OutcomeResult<__E>.create_Pass_k();
      } else {
        return Std.Wrappers.OutcomeResult<__E>.create_Fail_k(error);
      }
    }
  }

  public interface _IOption<out T> {
    bool is_None { get; }
    bool is_Some { get; }
    T dtor_value { get; }
    _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0);
    bool IsFailure();
    Std.Wrappers._IOption<__U> PropagateFailure<__U>();
    T Extract();
    Std.Wrappers._IResult<T, __E> ToResult<__E>(__E error);
    Std.Wrappers._IOutcome<__E> ToOutcome<__E>(__E error);
  }
  public abstract class Option<T> : _IOption<T> {
    public Option() {
    }
    public static Std.Wrappers._IOption<T> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOption<T>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOption<T>>(Std.Wrappers.Option<T>.Default());
    }
    public static _IOption<T> create_None() {
      return new Option_None<T>();
    }
    public static _IOption<T> create_Some(T @value) {
      return new Option_Some<T>(@value);
    }
    public bool is_None { get { return this is Option_None<T>; } }
    public bool is_Some { get { return this is Option_Some<T>; } }
    public T dtor_value {
      get {
        var d = this;
        return ((Option_Some<T>)d)._value;
      }
    }
    public abstract _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0);
    public bool IsFailure() {
      return (this).is_None;
    }
    public Std.Wrappers._IOption<__U> PropagateFailure<__U>() {
      return Std.Wrappers.Option<__U>.create_None();
    }
    public T Extract() {
      return (this).dtor_value;
    }
    public static T GetOr(Std.Wrappers._IOption<T> _this, T @default) {
      Std.Wrappers._IOption<T> _source0 = _this;
      if (_source0.is_None) {
        return @default;
      } else {
        T __mcc_h0 = _source0.dtor_value;
        T v = __mcc_h0;
        return v;
      }
    }
    public Std.Wrappers._IResult<T, __E> ToResult<__E>(__E error) {
      Std.Wrappers._IOption<T> _source1 = this;
      if (_source1.is_None) {
        return Std.Wrappers.Result<T, __E>.create_Failure(error);
      } else {
        T __mcc_h0 = _source1.dtor_value;
        T v = __mcc_h0;
        return Std.Wrappers.Result<T, __E>.create_Success(v);
      }
    }
    public Std.Wrappers._IOutcome<__E> ToOutcome<__E>(__E error) {
      Std.Wrappers._IOption<T> _source2 = this;
      if (_source2.is_None) {
        return Std.Wrappers.Outcome<__E>.create_Fail(error);
      } else {
        T __mcc_h0 = _source2.dtor_value;
        T v = __mcc_h0;
        return Std.Wrappers.Outcome<__E>.create_Pass();
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IOption<T> _this, Func<Std.Wrappers._IOption<T>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IOption<T>, __FC>>(rewrap)(_this);
    }
  }
  public class Option_None<T> : Option<T> {
    public Option_None() : base() {
    }
    public override _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOption<__T> dt) { return dt; }
      return new Option_None<__T>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Option_None<T>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Option.None";
      return s;
    }
  }
  public class Option_Some<T> : Option<T> {
    public readonly T _value;
    public Option_Some(T @value) : base() {
      this._value = @value;
    }
    public override _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOption<__T> dt) { return dt; }
      return new Option_Some<__T>(converter0(_value));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Option_Some<T>;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Option.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }

  public interface _IResult<out R, out E> {
    bool is_Success { get; }
    bool is_Failure { get; }
    R dtor_value { get; }
    E dtor_error { get; }
    _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1);
    bool IsFailure();
    Std.Wrappers._IResult<__U, E> PropagateFailure<__U>();
    R Extract();
    Std.Wrappers._IOption<R> ToOption();
    Std.Wrappers._IOutcome<E> ToOutcome();
  }
  public abstract class Result<R, E> : _IResult<R, E> {
    public Result() {
    }
    public static Std.Wrappers._IResult<R, E> Default(R _default_R) {
      return create_Success(_default_R);
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IResult<R, E>> _TypeDescriptor(Dafny.TypeDescriptor<R> _td_R) {
      return new Dafny.TypeDescriptor<Std.Wrappers._IResult<R, E>>(Std.Wrappers.Result<R, E>.Default(_td_R.Default()));
    }
    public static _IResult<R, E> create_Success(R @value) {
      return new Result_Success<R, E>(@value);
    }
    public static _IResult<R, E> create_Failure(E error) {
      return new Result_Failure<R, E>(error);
    }
    public bool is_Success { get { return this is Result_Success<R, E>; } }
    public bool is_Failure { get { return this is Result_Failure<R, E>; } }
    public R dtor_value {
      get {
        var d = this;
        return ((Result_Success<R, E>)d)._value;
      }
    }
    public E dtor_error {
      get {
        var d = this;
        return ((Result_Failure<R, E>)d)._error;
      }
    }
    public abstract _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1);
    public bool IsFailure() {
      return (this).is_Failure;
    }
    public Std.Wrappers._IResult<__U, E> PropagateFailure<__U>() {
      return Std.Wrappers.Result<__U, E>.create_Failure((this).dtor_error);
    }
    public R Extract() {
      return (this).dtor_value;
    }
    public static R GetOr(Std.Wrappers._IResult<R, E> _this, R @default) {
      Std.Wrappers._IResult<R, E> _source3 = _this;
      if (_source3.is_Success) {
        R _10___mcc_h0 = _source3.dtor_value;
        R _11_s = _10___mcc_h0;
        return _11_s;
      } else {
        E _12___mcc_h1 = _source3.dtor_error;
        E _13_e = _12___mcc_h1;
        return @default;
      }
    }
    public Std.Wrappers._IOption<R> ToOption() {
      Std.Wrappers._IResult<R, E> _source4 = this;
      if (_source4.is_Success) {
        R _14___mcc_h0 = _source4.dtor_value;
        R _15_s = _14___mcc_h0;
        return Std.Wrappers.Option<R>.create_Some(_15_s);
      } else {
        E _16___mcc_h1 = _source4.dtor_error;
        E _17_e = _16___mcc_h1;
        return Std.Wrappers.Option<R>.create_None();
      }
    }
    public Std.Wrappers._IOutcome<E> ToOutcome() {
      Std.Wrappers._IResult<R, E> _source5 = this;
      if (_source5.is_Success) {
        R _18___mcc_h0 = _source5.dtor_value;
        R _19_s = _18___mcc_h0;
        return Std.Wrappers.Outcome<E>.create_Pass();
      } else {
        E _20___mcc_h1 = _source5.dtor_error;
        E _21_e = _20___mcc_h1;
        return Std.Wrappers.Outcome<E>.create_Fail(_21_e);
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IResult<R, E> _this, Func<Std.Wrappers._IResult<R, E>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IResult<R, E>, __FC>>(rewrap)(_this);
    }
    public static Std.Wrappers._IResult<R, __NewE> MapFailure<__NewE>(Std.Wrappers._IResult<R, E> _this, Func<E, __NewE> reWrap) {
      Std.Wrappers._IResult<R, E> _source6 = _this;
      if (_source6.is_Success) {
        R _22___mcc_h0 = _source6.dtor_value;
        R _23_s = _22___mcc_h0;
        return Std.Wrappers.Result<R, __NewE>.create_Success(_23_s);
      } else {
        E _24___mcc_h1 = _source6.dtor_error;
        E _25_e = _24___mcc_h1;
        return Std.Wrappers.Result<R, __NewE>.create_Failure(Dafny.Helpers.Id<Func<E, __NewE>>(reWrap)(_25_e));
      }
    }
  }
  public class Result_Success<R, E> : Result<R, E> {
    public readonly R _value;
    public Result_Success(R @value) : base() {
      this._value = @value;
    }
    public override _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1) {
      if (this is _IResult<__R, __E> dt) { return dt; }
      return new Result_Success<__R, __E>(converter0(_value));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Result_Success<R, E>;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Result.Success";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Result_Failure<R, E> : Result<R, E> {
    public readonly E _error;
    public Result_Failure(E error) : base() {
      this._error = error;
    }
    public override _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1) {
      if (this is _IResult<__R, __E> dt) { return dt; }
      return new Result_Failure<__R, __E>(converter1(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Result_Failure<R, E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Result.Failure";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }

  public interface _IOutcome<out E> {
    bool is_Pass { get; }
    bool is_Fail { get; }
    E dtor_error { get; }
    _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0);
    bool IsFailure();
    Std.Wrappers._IOutcome<E> PropagateFailure();
    Std.Wrappers._IOption<__R> ToOption<__R>(__R r);
    Std.Wrappers._IResult<__R, E> ToResult<__R>(__R r);
  }
  public abstract class Outcome<E> : _IOutcome<E> {
    public Outcome() {
    }
    public static Std.Wrappers._IOutcome<E> Default() {
      return create_Pass();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOutcome<E>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOutcome<E>>(Std.Wrappers.Outcome<E>.Default());
    }
    public static _IOutcome<E> create_Pass() {
      return new Outcome_Pass<E>();
    }
    public static _IOutcome<E> create_Fail(E error) {
      return new Outcome_Fail<E>(error);
    }
    public bool is_Pass { get { return this is Outcome_Pass<E>; } }
    public bool is_Fail { get { return this is Outcome_Fail<E>; } }
    public E dtor_error {
      get {
        var d = this;
        return ((Outcome_Fail<E>)d)._error;
      }
    }
    public abstract _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0);
    public bool IsFailure() {
      return (this).is_Fail;
    }
    public Std.Wrappers._IOutcome<E> PropagateFailure() {
      return this;
    }
    public Std.Wrappers._IOption<__R> ToOption<__R>(__R r) {
      Std.Wrappers._IOutcome<E> _source7 = this;
      if (_source7.is_Pass) {
        return Std.Wrappers.Option<__R>.create_Some(r);
      } else {
        E _26___mcc_h0 = _source7.dtor_error;
        E _27_e = _26___mcc_h0;
        return Std.Wrappers.Option<__R>.create_None();
      }
    }
    public Std.Wrappers._IResult<__R, E> ToResult<__R>(__R r) {
      Std.Wrappers._IOutcome<E> _source8 = this;
      if (_source8.is_Pass) {
        return Std.Wrappers.Result<__R, E>.create_Success(r);
      } else {
        E _28___mcc_h0 = _source8.dtor_error;
        E _29_e = _28___mcc_h0;
        return Std.Wrappers.Result<__R, E>.create_Failure(_29_e);
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IOutcome<E> _this, Func<Std.Wrappers._IOutcome<E>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IOutcome<E>, __FC>>(rewrap)(_this);
    }
    public static Std.Wrappers._IResult<__T, __NewE> MapFailure<__T, __NewE>(Std.Wrappers._IOutcome<E> _this, Func<E, __NewE> rewrap, __T @default)
    {
      Std.Wrappers._IOutcome<E> _source9 = _this;
      if (_source9.is_Pass) {
        return Std.Wrappers.Result<__T, __NewE>.create_Success(@default);
      } else {
        E _30___mcc_h0 = _source9.dtor_error;
        E _31_e = _30___mcc_h0;
        return Std.Wrappers.Result<__T, __NewE>.create_Failure(Dafny.Helpers.Id<Func<E, __NewE>>(rewrap)(_31_e));
      }
    }
    public static Std.Wrappers._IOutcome<E> Need(bool condition, E error)
    {
      if (condition) {
        return Std.Wrappers.Outcome<E>.create_Pass();
      } else {
        return Std.Wrappers.Outcome<E>.create_Fail(error);
      }
    }
  }
  public class Outcome_Pass<E> : Outcome<E> {
    public Outcome_Pass() : base() {
    }
    public override _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcome<__E> dt) { return dt; }
      return new Outcome_Pass<__E>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Outcome_Pass<E>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Outcome.Pass";
      return s;
    }
  }
  public class Outcome_Fail<E> : Outcome<E> {
    public readonly E _error;
    public Outcome_Fail(E error) : base() {
      this._error = error;
    }
    public override _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcome<__E> dt) { return dt; }
      return new Outcome_Fail<__E>(converter0(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Outcome_Fail<E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Outcome.Fail";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }

  public interface _IOutcomeResult<out E> {
    bool is_Pass_k { get; }
    bool is_Fail_k { get; }
    E dtor_error { get; }
    _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0);
    bool IsFailure();
    Std.Wrappers._IResult<__U, E> PropagateFailure<__U>();
  }
  public abstract class OutcomeResult<E> : _IOutcomeResult<E> {
    public OutcomeResult() {
    }
    public static Std.Wrappers._IOutcomeResult<E> Default() {
      return create_Pass_k();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOutcomeResult<E>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOutcomeResult<E>>(Std.Wrappers.OutcomeResult<E>.Default());
    }
    public static _IOutcomeResult<E> create_Pass_k() {
      return new OutcomeResult_Pass_k<E>();
    }
    public static _IOutcomeResult<E> create_Fail_k(E error) {
      return new OutcomeResult_Fail_k<E>(error);
    }
    public bool is_Pass_k { get { return this is OutcomeResult_Pass_k<E>; } }
    public bool is_Fail_k { get { return this is OutcomeResult_Fail_k<E>; } }
    public E dtor_error {
      get {
        var d = this;
        return ((OutcomeResult_Fail_k<E>)d)._error;
      }
    }
    public abstract _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0);
    public bool IsFailure() {
      return (this).is_Fail_k;
    }
    public Std.Wrappers._IResult<__U, E> PropagateFailure<__U>() {
      return Std.Wrappers.Result<__U, E>.create_Failure((this).dtor_error);
    }
  }
  public class OutcomeResult_Pass_k<E> : OutcomeResult<E> {
    public OutcomeResult_Pass_k() : base() {
    }
    public override _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcomeResult<__E> dt) { return dt; }
      return new OutcomeResult_Pass_k<__E>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.OutcomeResult_Pass_k<E>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.OutcomeResult.Pass'";
      return s;
    }
  }
  public class OutcomeResult_Fail_k<E> : OutcomeResult<E> {
    public readonly E _error;
    public OutcomeResult_Fail_k(E error) : base() {
      this._error = error;
    }
    public override _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcomeResult<__E> dt) { return dt; }
      return new OutcomeResult_Fail_k<__E>(converter0(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.OutcomeResult_Fail_k<E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.OutcomeResult.Fail'";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }
} // end of namespace Std.Wrappers
namespace Std.Math {

  public partial class __default {
    public static BigInteger Min(BigInteger a, BigInteger b)
    {
      if ((a) < (b)) {
        return a;
      } else {
        return b;
      }
    }
    public static BigInteger Min3(BigInteger a, BigInteger b, BigInteger c)
    {
      return Std.Math.__default.Min(a, Std.Math.__default.Min(b, c));
    }
    public static BigInteger Max(BigInteger a, BigInteger b)
    {
      if ((a) < (b)) {
        return b;
      } else {
        return a;
      }
    }
    public static BigInteger Max3(BigInteger a, BigInteger b, BigInteger c)
    {
      return Std.Math.__default.Max(a, Std.Math.__default.Max(b, c));
    }
    public static BigInteger Abs(BigInteger a) {
      if ((a).Sign == -1) {
        return (BigInteger.Zero) - (a);
      } else {
        return a;
      }
    }
  }
} // end of namespace Std.Math
namespace Std.Collections.Seq {

  public partial class __default {
    public static __T First<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Select(BigInteger.Zero);
    }
    public static Dafny.ISequence<__T> DropFirst<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Drop(BigInteger.One);
    }
    public static __T Last<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Select((new BigInteger((xs).Count)) - (BigInteger.One));
    }
    public static Dafny.ISequence<__T> DropLast<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
    }
    public static __T[] ToArray<__T>(Dafny.ISequence<__T> xs)
    {
      __T[] a = new __T[0];
      Func<BigInteger, __T> _init2 = Dafny.Helpers.Id<Func<Dafny.ISequence<__T>, Func<BigInteger, __T>>>((_75_xs) => ((System.Func<BigInteger, __T>)((_76_i) => {
        return (_75_xs).Select(_76_i);
      })))(xs);
      __T[] _nw3 = new __T[Dafny.Helpers.ToIntChecked(new BigInteger((xs).Count), "array size exceeds memory limit")];
      for (var _i0_2 = 0; _i0_2 < new BigInteger(_nw3.Length); _i0_2++) {
        _nw3[(int)(_i0_2)] = _init2(_i0_2);
      }
      a = _nw3;
      return a;
    }
    public static Dafny.ISet<__T> ToSet<__T>(Dafny.ISequence<__T> xs) {
      return Dafny.Helpers.Id<Func<Dafny.ISequence<__T>, Dafny.ISet<__T>>>((_77_xs) => ((System.Func<Dafny.ISet<__T>>)(() => {
        var _coll0 = new System.Collections.Generic.List<__T>();
        foreach (__T _compr_0 in (_77_xs).CloneAsArray()) {
          __T _78_x = (__T)_compr_0;
          if ((_77_xs).Contains(_78_x)) {
            _coll0.Add(_78_x);
          }
        }
        return Dafny.Set<__T>.FromCollection(_coll0);
      }))())(xs);
    }
    public static BigInteger IndexOf<__T>(Dafny.ISequence<__T> xs, __T v)
    {
      BigInteger _79___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if (object.Equals((xs).Select(BigInteger.Zero), v)) {
        return (BigInteger.Zero) + (_79___accumulator);
      } else {
        _79___accumulator = (_79___accumulator) + (BigInteger.One);
        Dafny.ISequence<__T> _in0 = (xs).Drop(BigInteger.One);
        __T _in1 = v;
        xs = _in0;
        v = _in1;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<BigInteger> IndexOfOption<__T>(Dafny.ISequence<__T> xs, __T v)
    {
      return Std.Collections.Seq.__default.IndexByOption<__T>(xs, Dafny.Helpers.Id<Func<__T, Func<__T, bool>>>((_80_v) => ((System.Func<__T, bool>)((_81_x) => {
        return object.Equals(_81_x, _80_v);
      })))(v));
    }
    public static Std.Wrappers._IOption<BigInteger> IndexByOption<__T>(Dafny.ISequence<__T> xs, Func<__T, bool> p)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Option<BigInteger>.create_None();
      } else if (Dafny.Helpers.Id<Func<__T, bool>>(p)((xs).Select(BigInteger.Zero))) {
        return Std.Wrappers.Option<BigInteger>.create_Some(BigInteger.Zero);
      } else {
        Std.Wrappers._IOption<BigInteger> _82_o_k = Std.Collections.Seq.__default.IndexByOption<__T>((xs).Drop(BigInteger.One), p);
        if ((_82_o_k).is_Some) {
          return Std.Wrappers.Option<BigInteger>.create_Some(((_82_o_k).dtor_value) + (BigInteger.One));
        } else {
          return Std.Wrappers.Option<BigInteger>.create_None();
        }
      }
    }
    public static BigInteger LastIndexOf<__T>(Dafny.ISequence<__T> xs, __T v)
    {
    TAIL_CALL_START: ;
      if (object.Equals((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One)), v)) {
        return (new BigInteger((xs).Count)) - (BigInteger.One);
      } else {
        Dafny.ISequence<__T> _in2 = (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
        __T _in3 = v;
        xs = _in2;
        v = _in3;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<BigInteger> LastIndexOfOption<__T>(Dafny.ISequence<__T> xs, __T v)
    {
      return Std.Collections.Seq.__default.LastIndexByOption<__T>(xs, Dafny.Helpers.Id<Func<__T, Func<__T, bool>>>((_83_v) => ((System.Func<__T, bool>)((_84_x) => {
        return object.Equals(_84_x, _83_v);
      })))(v));
    }
    public static Std.Wrappers._IOption<BigInteger> LastIndexByOption<__T>(Dafny.ISequence<__T> xs, Func<__T, bool> p)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Option<BigInteger>.create_None();
      } else if (Dafny.Helpers.Id<Func<__T, bool>>(p)((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One)))) {
        return Std.Wrappers.Option<BigInteger>.create_Some((new BigInteger((xs).Count)) - (BigInteger.One));
      } else {
        Dafny.ISequence<__T> _in4 = (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
        Func<__T, bool> _in5 = p;
        xs = _in4;
        p = _in5;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Remove<__T>(Dafny.ISequence<__T> xs, BigInteger pos)
    {
      return Dafny.Sequence<__T>.Concat((xs).Take(pos), (xs).Drop((pos) + (BigInteger.One)));
    }
    public static Dafny.ISequence<__T> RemoveValue<__T>(Dafny.ISequence<__T> xs, __T v)
    {
      if (!(xs).Contains(v)) {
        return xs;
      } else {
        BigInteger _85_i = Std.Collections.Seq.__default.IndexOf<__T>(xs, v);
        return Dafny.Sequence<__T>.Concat((xs).Take(_85_i), (xs).Drop((_85_i) + (BigInteger.One)));
      }
    }
    public static Dafny.ISequence<__T> Insert<__T>(Dafny.ISequence<__T> xs, __T a, BigInteger pos)
    {
      return Dafny.Sequence<__T>.Concat(Dafny.Sequence<__T>.Concat((xs).Take(pos), Dafny.Sequence<__T>.FromElements(a)), (xs).Drop(pos));
    }
    public static Dafny.ISequence<__T> Reverse<__T>(Dafny.ISequence<__T> xs) {
      Dafny.ISequence<__T> _86___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((xs).Equals(Dafny.Sequence<__T>.FromElements())) {
        return Dafny.Sequence<__T>.Concat(_86___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _86___accumulator = Dafny.Sequence<__T>.Concat(_86___accumulator, Dafny.Sequence<__T>.FromElements((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One))));
        Dafny.ISequence<__T> _in6 = (xs).Subsequence(BigInteger.Zero, (new BigInteger((xs).Count)) - (BigInteger.One));
        xs = _in6;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Repeat<__T>(__T v, BigInteger length)
    {
      Dafny.ISequence<__T> _87___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((length).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_87___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _87___accumulator = Dafny.Sequence<__T>.Concat(_87___accumulator, Dafny.Sequence<__T>.FromElements(v));
        __T _in7 = v;
        BigInteger _in8 = (length) - (BigInteger.One);
        v = _in7;
        length = _in8;
        goto TAIL_CALL_START;
      }
    }
    public static _System._ITuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>> Unzip<__A, __B>(Dafny.ISequence<_System._ITuple2<__A, __B>> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>>.create(Dafny.Sequence<__A>.FromElements(), Dafny.Sequence<__B>.FromElements());
      } else {
        _System._ITuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>> _let_tmp_rhs0 = Std.Collections.Seq.__default.Unzip<__A, __B>(Std.Collections.Seq.__default.DropLast<_System._ITuple2<__A, __B>>(xs));
        Dafny.ISequence<__A> _88_a = _let_tmp_rhs0.dtor__0;
        Dafny.ISequence<__B> _89_b = _let_tmp_rhs0.dtor__1;
        return _System.Tuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>>.create(Dafny.Sequence<__A>.Concat(_88_a, Dafny.Sequence<__A>.FromElements((Std.Collections.Seq.__default.Last<_System._ITuple2<__A, __B>>(xs)).dtor__0)), Dafny.Sequence<__B>.Concat(_89_b, Dafny.Sequence<__B>.FromElements((Std.Collections.Seq.__default.Last<_System._ITuple2<__A, __B>>(xs)).dtor__1)));
      }
    }
    public static Dafny.ISequence<_System._ITuple2<__A, __B>> Zip<__A, __B>(Dafny.ISequence<__A> xs, Dafny.ISequence<__B> ys)
    {
      Dafny.ISequence<_System._ITuple2<__A, __B>> _90___accumulator = Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<_System._ITuple2<__A, __B>>.Concat(Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements(), _90___accumulator);
      } else {
        _90___accumulator = Dafny.Sequence<_System._ITuple2<__A, __B>>.Concat(Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements(_System.Tuple2<__A, __B>.create(Std.Collections.Seq.__default.Last<__A>(xs), Std.Collections.Seq.__default.Last<__B>(ys))), _90___accumulator);
        Dafny.ISequence<__A> _in9 = Std.Collections.Seq.__default.DropLast<__A>(xs);
        Dafny.ISequence<__B> _in10 = Std.Collections.Seq.__default.DropLast<__B>(ys);
        xs = _in9;
        ys = _in10;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger Max(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)) == (BigInteger.One)) {
        return (xs).Select(BigInteger.Zero);
      } else {
        return Std.Math.__default.Max((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.Max((xs).Drop(BigInteger.One)));
      }
    }
    public static BigInteger Min(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)) == (BigInteger.One)) {
        return (xs).Select(BigInteger.Zero);
      } else {
        return Std.Math.__default.Min((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.Min((xs).Drop(BigInteger.One)));
      }
    }
    public static Dafny.ISequence<__T> Flatten<__T>(Dafny.ISequence<Dafny.ISequence<__T>> xs) {
      Dafny.ISequence<__T> _91___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_91___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _91___accumulator = Dafny.Sequence<__T>.Concat(_91___accumulator, (xs).Select(BigInteger.Zero));
        Dafny.ISequence<Dafny.ISequence<__T>> _in11 = (xs).Drop(BigInteger.One);
        xs = _in11;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> FlattenReverse<__T>(Dafny.ISequence<Dafny.ISequence<__T>> xs) {
      Dafny.ISequence<__T> _92___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(Dafny.Sequence<__T>.FromElements(), _92___accumulator);
      } else {
        _92___accumulator = Dafny.Sequence<__T>.Concat(Std.Collections.Seq.__default.Last<Dafny.ISequence<__T>>(xs), _92___accumulator);
        Dafny.ISequence<Dafny.ISequence<__T>> _in12 = Std.Collections.Seq.__default.DropLast<Dafny.ISequence<__T>>(xs);
        xs = _in12;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Join<__T>(Dafny.ISequence<Dafny.ISequence<__T>> seqs, Dafny.ISequence<__T> separator)
    {
      Dafny.ISequence<__T> _93___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((seqs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_93___accumulator, Dafny.Sequence<__T>.FromElements());
      } else if ((new BigInteger((seqs).Count)) == (BigInteger.One)) {
        return Dafny.Sequence<__T>.Concat(_93___accumulator, (seqs).Select(BigInteger.Zero));
      } else {
        _93___accumulator = Dafny.Sequence<__T>.Concat(_93___accumulator, Dafny.Sequence<__T>.Concat((seqs).Select(BigInteger.Zero), separator));
        Dafny.ISequence<Dafny.ISequence<__T>> _in13 = (seqs).Drop(BigInteger.One);
        Dafny.ISequence<__T> _in14 = separator;
        seqs = _in13;
        separator = _in14;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.ISequence<__T>> Split<__T>(Dafny.ISequence<__T> s, __T delim)
    {
      Dafny.ISequence<Dafny.ISequence<__T>> _94___accumulator = Dafny.Sequence<Dafny.ISequence<__T>>.FromElements();
    TAIL_CALL_START: ;
      Std.Wrappers._IOption<BigInteger> _95_i = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      if ((_95_i).is_Some) {
        _94___accumulator = Dafny.Sequence<Dafny.ISequence<__T>>.Concat(_94___accumulator, Dafny.Sequence<Dafny.ISequence<__T>>.FromElements((s).Take((_95_i).dtor_value)));
        Dafny.ISequence<__T> _in15 = (s).Drop(((_95_i).dtor_value) + (BigInteger.One));
        __T _in16 = delim;
        s = _in15;
        delim = _in16;
        goto TAIL_CALL_START;
      } else {
        return Dafny.Sequence<Dafny.ISequence<__T>>.Concat(_94___accumulator, Dafny.Sequence<Dafny.ISequence<__T>>.FromElements(s));
      }
    }
    public static _System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>> SplitOnce<__T>(Dafny.ISequence<__T> s, __T delim)
    {
      Std.Wrappers._IOption<BigInteger> _96_i = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      return _System.Tuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>.create((s).Take((_96_i).dtor_value), (s).Drop(((_96_i).dtor_value) + (BigInteger.One)));
    }
    public static Std.Wrappers._IOption<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>> SplitOnceOption<__T>(Dafny.ISequence<__T> s, __T delim)
    {
      Std.Wrappers._IOption<BigInteger> _97_valueOrError0 = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      if ((_97_valueOrError0).IsFailure()) {
        return (_97_valueOrError0).PropagateFailure<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>>();
      } else {
        BigInteger _98_i = (_97_valueOrError0).Extract();
        return Std.Wrappers.Option<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>>.create_Some(_System.Tuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>.create((s).Take(_98_i), (s).Drop((_98_i) + (BigInteger.One))));
      }
    }
    public static Dafny.ISequence<__R> Map<__T, __R>(Func<__T, __R> f, Dafny.ISequence<__T> xs)
    {
      Dafny.ISequence<__R> _99___accumulator = Dafny.Sequence<__R>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__R>.Concat(_99___accumulator, Dafny.Sequence<__R>.FromElements());
      } else {
        _99___accumulator = Dafny.Sequence<__R>.Concat(_99___accumulator, Dafny.Sequence<__R>.FromElements(Dafny.Helpers.Id<Func<__T, __R>>(f)((xs).Select(BigInteger.Zero))));
        Func<__T, __R> _in17 = f;
        Dafny.ISequence<__T> _in18 = (xs).Drop(BigInteger.One);
        f = _in17;
        xs = _in18;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IResult<Dafny.ISequence<__R>, __E> MapWithResult<__T, __R, __E>(Func<__T, Std.Wrappers._IResult<__R, __E>> f, Dafny.ISequence<__T> xs)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Result<Dafny.ISequence<__R>, __E>.create_Success(Dafny.Sequence<__R>.FromElements());
      } else {
        Std.Wrappers._IResult<__R, __E> _100_valueOrError0 = Dafny.Helpers.Id<Func<__T, Std.Wrappers._IResult<__R, __E>>>(f)((xs).Select(BigInteger.Zero));
        if ((_100_valueOrError0).IsFailure()) {
          return (_100_valueOrError0).PropagateFailure<Dafny.ISequence<__R>>();
        } else {
          __R _101_head = (_100_valueOrError0).Extract();
          Std.Wrappers._IResult<Dafny.ISequence<__R>, __E> _102_valueOrError1 = Std.Collections.Seq.__default.MapWithResult<__T, __R, __E>(f, (xs).Drop(BigInteger.One));
          if ((_102_valueOrError1).IsFailure()) {
            return (_102_valueOrError1).PropagateFailure<Dafny.ISequence<__R>>();
          } else {
            Dafny.ISequence<__R> _103_tail = (_102_valueOrError1).Extract();
            return Std.Wrappers.Result<Dafny.ISequence<__R>, __E>.create_Success(Dafny.Sequence<__R>.Concat(Dafny.Sequence<__R>.FromElements(_101_head), _103_tail));
          }
        }
      }
    }
    public static Dafny.ISequence<__T> Filter<__T>(Func<__T, bool> f, Dafny.ISequence<__T> xs)
    {
      Dafny.ISequence<__T> _104___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_104___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _104___accumulator = Dafny.Sequence<__T>.Concat(_104___accumulator, ((Dafny.Helpers.Id<Func<__T, bool>>(f)((xs).Select(BigInteger.Zero))) ? (Dafny.Sequence<__T>.FromElements((xs).Select(BigInteger.Zero))) : (Dafny.Sequence<__T>.FromElements())));
        Func<__T, bool> _in19 = f;
        Dafny.ISequence<__T> _in20 = (xs).Drop(BigInteger.One);
        f = _in19;
        xs = _in20;
        goto TAIL_CALL_START;
      }
    }
    public static __A FoldLeft<__A, __T>(Func<__A, __T, __A> f, __A init, Dafny.ISequence<__T> xs)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return init;
      } else {
        Func<__A, __T, __A> _in21 = f;
        __A _in22 = Dafny.Helpers.Id<Func<__A, __T, __A>>(f)(init, (xs).Select(BigInteger.Zero));
        Dafny.ISequence<__T> _in23 = (xs).Drop(BigInteger.One);
        f = _in21;
        init = _in22;
        xs = _in23;
        goto TAIL_CALL_START;
      }
    }
    public static __A FoldRight<__A, __T>(Func<__T, __A, __A> f, Dafny.ISequence<__T> xs, __A init)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return init;
      } else {
        return Dafny.Helpers.Id<Func<__T, __A, __A>>(f)((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.FoldRight<__A, __T>(f, (xs).Drop(BigInteger.One), init));
      }
    }
    public static Dafny.ISequence<__T> SetToSeq<__T>(Dafny.ISet<__T> s)
    {
      Dafny.ISequence<__T> xs = Dafny.Sequence<__T>.Empty;
      xs = Dafny.Sequence<__T>.FromElements();
      Dafny.ISet<__T> _105_left;
      _105_left = s;
      while (!(_105_left).Equals(Dafny.Set<__T>.FromElements())) {
        __T _106_x;
        foreach (__T _assign_such_that_0 in (_105_left).Elements) {
          _106_x = (__T)_assign_such_that_0;
          if ((_105_left).Contains(_106_x)) {
            goto after__ASSIGN_SUCH_THAT_0;
          }
        }
        throw new System.Exception("assign-such-that search produced no value (line 7247)");
      after__ASSIGN_SUCH_THAT_0: ;
        _105_left = Dafny.Set<__T>.Difference(_105_left, Dafny.Set<__T>.FromElements(_106_x));
        xs = Dafny.Sequence<__T>.Concat(xs, Dafny.Sequence<__T>.FromElements(_106_x));
      }
      return xs;
    }
    public static Dafny.ISequence<__T> SetToSortedSeq<__T>(Dafny.ISet<__T> s, Func<__T, __T, bool> R)
    {
      Dafny.ISequence<__T> xs = Dafny.Sequence<__T>.Empty;
      Dafny.ISequence<__T> _out6;
      _out6 = Std.Collections.Seq.__default.SetToSeq<__T>(s);
      xs = _out6;
      xs = Std.Collections.Seq.__default.MergeSortBy<__T>(R, xs);
      return xs;
    }
    public static Dafny.ISequence<__T> MergeSortBy<__T>(Func<__T, __T, bool> lessThanOrEq, Dafny.ISequence<__T> a)
    {
      if ((new BigInteger((a).Count)) <= (BigInteger.One)) {
        return a;
      } else {
        BigInteger _107_splitIndex = Dafny.Helpers.EuclideanDivision(new BigInteger((a).Count), new BigInteger(2));
        Dafny.ISequence<__T> _108_left = (a).Take(_107_splitIndex);
        Dafny.ISequence<__T> _109_right = (a).Drop(_107_splitIndex);
        Dafny.ISequence<__T> _110_leftSorted = Std.Collections.Seq.__default.MergeSortBy<__T>(lessThanOrEq, _108_left);
        Dafny.ISequence<__T> _111_rightSorted = Std.Collections.Seq.__default.MergeSortBy<__T>(lessThanOrEq, _109_right);
        return Std.Collections.Seq.__default.MergeSortedWith<__T>(_110_leftSorted, _111_rightSorted, lessThanOrEq);
      }
    }
    public static Dafny.ISequence<__T> MergeSortedWith<__T>(Dafny.ISequence<__T> left, Dafny.ISequence<__T> right, Func<__T, __T, bool> lessThanOrEq)
    {
      Dafny.ISequence<__T> _112___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((left).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_112___accumulator, right);
      } else if ((new BigInteger((right).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_112___accumulator, left);
      } else if (Dafny.Helpers.Id<Func<__T, __T, bool>>(lessThanOrEq)((left).Select(BigInteger.Zero), (right).Select(BigInteger.Zero))) {
        _112___accumulator = Dafny.Sequence<__T>.Concat(_112___accumulator, Dafny.Sequence<__T>.FromElements((left).Select(BigInteger.Zero)));
        Dafny.ISequence<__T> _in24 = (left).Drop(BigInteger.One);
        Dafny.ISequence<__T> _in25 = right;
        Func<__T, __T, bool> _in26 = lessThanOrEq;
        left = _in24;
        right = _in25;
        lessThanOrEq = _in26;
        goto TAIL_CALL_START;
      } else {
        _112___accumulator = Dafny.Sequence<__T>.Concat(_112___accumulator, Dafny.Sequence<__T>.FromElements((right).Select(BigInteger.Zero)));
        Dafny.ISequence<__T> _in27 = left;
        Dafny.ISequence<__T> _in28 = (right).Drop(BigInteger.One);
        Func<__T, __T, bool> _in29 = lessThanOrEq;
        left = _in27;
        right = _in28;
        lessThanOrEq = _in29;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Collections.Seq
namespace Std.Arithmetic.GeneralInternals {

} // end of namespace Std.Arithmetic.GeneralInternals
namespace Std.Arithmetic.MulInternalsNonlinear {

} // end of namespace Std.Arithmetic.MulInternalsNonlinear
namespace Std.Arithmetic.MulInternals {

  public partial class __default {
    public static BigInteger MulPos(BigInteger x, BigInteger y)
    {
      BigInteger _141___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if ((x).Sign == 0) {
        return (BigInteger.Zero) + (_141___accumulator);
      } else {
        _141___accumulator = (_141___accumulator) + (y);
        BigInteger _in32 = (x) - (BigInteger.One);
        BigInteger _in33 = y;
        x = _in32;
        y = _in33;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger MulRecursive(BigInteger x, BigInteger y)
    {
      if ((x).Sign != -1) {
        return Std.Arithmetic.MulInternals.__default.MulPos(x, y);
      } else {
        return (new BigInteger(-1)) * (Std.Arithmetic.MulInternals.__default.MulPos((new BigInteger(-1)) * (x), y));
      }
    }
  }
} // end of namespace Std.Arithmetic.MulInternals
namespace Std.Arithmetic.Mul {

} // end of namespace Std.Arithmetic.Mul
namespace Std.Arithmetic.ModInternalsNonlinear {

} // end of namespace Std.Arithmetic.ModInternalsNonlinear
namespace Std.Arithmetic.DivInternalsNonlinear {

} // end of namespace Std.Arithmetic.DivInternalsNonlinear
namespace Std.Arithmetic.ModInternals {

  public partial class __default {
    public static BigInteger ModRecursive(BigInteger x, BigInteger d)
    {
    TAIL_CALL_START: ;
      if ((x).Sign == -1) {
        BigInteger _in34 = (d) + (x);
        BigInteger _in35 = d;
        x = _in34;
        d = _in35;
        goto TAIL_CALL_START;
      } else if ((x) < (d)) {
        return x;
      } else {
        BigInteger _in36 = (x) - (d);
        BigInteger _in37 = d;
        x = _in36;
        d = _in37;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.ModInternals
namespace Std.Arithmetic.DivInternals {

  public partial class __default {
    public static BigInteger DivPos(BigInteger x, BigInteger d)
    {
      BigInteger _142___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if ((x).Sign == -1) {
        _142___accumulator = (_142___accumulator) + (new BigInteger(-1));
        BigInteger _in38 = (x) + (d);
        BigInteger _in39 = d;
        x = _in38;
        d = _in39;
        goto TAIL_CALL_START;
      } else if ((x) < (d)) {
        return (BigInteger.Zero) + (_142___accumulator);
      } else {
        _142___accumulator = (_142___accumulator) + (BigInteger.One);
        BigInteger _in40 = (x) - (d);
        BigInteger _in41 = d;
        x = _in40;
        d = _in41;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger DivRecursive(BigInteger x, BigInteger d)
    {
      if ((d).Sign == 1) {
        return Std.Arithmetic.DivInternals.__default.DivPos(x, d);
      } else {
        return (new BigInteger(-1)) * (Std.Arithmetic.DivInternals.__default.DivPos(x, (new BigInteger(-1)) * (d)));
      }
    }
  }
} // end of namespace Std.Arithmetic.DivInternals
namespace Std.Arithmetic.DivMod {

  public partial class __default {
    public static bool MultiplesVanish(BigInteger a, BigInteger b, BigInteger m)
    {
      return (Dafny.Helpers.EuclideanModulus(((m) * (a)) + (b), m)) == (Dafny.Helpers.EuclideanModulus(b, m));
    }
  }
} // end of namespace Std.Arithmetic.DivMod
namespace Std.Arithmetic.Power {

  public partial class __default {
    public static BigInteger Pow(BigInteger b, BigInteger e)
    {
      BigInteger _143___accumulator = BigInteger.One;
    TAIL_CALL_START: ;
      if ((e).Sign == 0) {
        return (BigInteger.One) * (_143___accumulator);
      } else {
        _143___accumulator = (_143___accumulator) * (b);
        BigInteger _in42 = b;
        BigInteger _in43 = (e) - (BigInteger.One);
        b = _in42;
        e = _in43;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.Power
namespace Std.Arithmetic.Logarithm {

  public partial class __default {
    public static BigInteger Log(BigInteger @base, BigInteger pow)
    {
      BigInteger _144___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if ((pow) < (@base)) {
        return (BigInteger.Zero) + (_144___accumulator);
      } else {
        _144___accumulator = (_144___accumulator) + (BigInteger.One);
        BigInteger _in44 = @base;
        BigInteger _in45 = Dafny.Helpers.EuclideanDivision(pow, @base);
        @base = _in44;
        pow = _in45;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.Logarithm
namespace Std.Arithmetic.Power2 {

  public partial class __default {
    public static BigInteger Pow2(BigInteger e) {
      return Std.Arithmetic.Power.__default.Pow(new BigInteger(2), e);
    }
  }
} // end of namespace Std.Arithmetic.Power2
namespace Std.Arithmetic {

} // end of namespace Std.Arithmetic
namespace Std.Strings.HexConversion {

  public partial class __default {
    public static BigInteger BASE() {
      return Std.Strings.HexConversion.__default.@base;
    }
    public static bool IsDigitChar(Dafny.Rune c) {
      return (Std.Strings.HexConversion.__default.charToDigit).Contains(c);
    }
    public static Dafny.ISequence<Dafny.Rune> OfDigits(Dafny.ISequence<BigInteger> digits) {
      Dafny.ISequence<Dafny.Rune> _145___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((digits).Equals(Dafny.Sequence<BigInteger>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(), _145___accumulator);
      } else {
        _145___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.HexConversion.__default.chars).Select((digits).Select(BigInteger.Zero))), _145___accumulator);
        Dafny.ISequence<BigInteger> _in46 = (digits).Drop(BigInteger.One);
        digits = _in46;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.HexConversion.__default.chars).Select(BigInteger.Zero));
      } else {
        return Std.Strings.HexConversion.__default.OfDigits(Std.Strings.HexConversion.__default.FromNat(n));
      }
    }
    public static bool IsNumberStr(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus)
    {
      return !(!(str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) || (((((str).Select(BigInteger.Zero)) == (minus)) || ((Std.Strings.HexConversion.__default.charToDigit).Contains((str).Select(BigInteger.Zero)))) && (Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, bool>>((_146_str) => Dafny.Helpers.Quantifier<Dafny.Rune>(((_146_str).Drop(BigInteger.One)).UniqueElements, true, (((_forall_var_1) => {
        Dafny.Rune _147_c = (Dafny.Rune)_forall_var_1;
        return !(((_146_str).Drop(BigInteger.One)).Contains(_147_c)) || (Std.Strings.HexConversion.__default.IsDigitChar(_147_c));
      }))))(str)));
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n, Dafny.Rune minus)
    {
      if ((n).Sign != -1) {
        return Std.Strings.HexConversion.__default.OfNat(n);
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(minus), Std.Strings.HexConversion.__default.OfNat((BigInteger.Zero) - (n)));
      }
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return BigInteger.Zero;
      } else {
        Dafny.Rune _148_c = (str).Select((new BigInteger((str).Count)) - (BigInteger.One));
        return ((Std.Strings.HexConversion.__default.ToNat((str).Take((new BigInteger((str).Count)) - (BigInteger.One)))) * (Std.Strings.HexConversion.__default.@base)) + (Dafny.Map<Dafny.Rune, BigInteger>.Select(Std.Strings.HexConversion.__default.charToDigit,_148_c));
      }
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus)
    {
      if (Dafny.Sequence<Dafny.Rune>.IsPrefixOf(Dafny.Sequence<Dafny.Rune>.FromElements(minus), str)) {
        return (BigInteger.Zero) - (Std.Strings.HexConversion.__default.ToNat((str).Drop(BigInteger.One)));
      } else {
        return Std.Strings.HexConversion.__default.ToNat(str);
      }
    }
    public static BigInteger ToNatRight(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        return ((Std.Strings.HexConversion.__default.ToNatRight(Std.Collections.Seq.__default.DropFirst<BigInteger>(xs))) * (Std.Strings.HexConversion.__default.BASE())) + (Std.Collections.Seq.__default.First<BigInteger>(xs));
      }
    }
    public static BigInteger ToNatLeft(Dafny.ISequence<BigInteger> xs) {
      BigInteger _149___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return (BigInteger.Zero) + (_149___accumulator);
      } else {
        _149___accumulator = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) * (Std.Arithmetic.Power.__default.Pow(Std.Strings.HexConversion.__default.BASE(), (new BigInteger((xs).Count)) - (BigInteger.One)))) + (_149___accumulator);
        Dafny.ISequence<BigInteger> _in47 = Std.Collections.Seq.__default.DropLast<BigInteger>(xs);
        xs = _in47;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> FromNat(BigInteger n) {
      Dafny.ISequence<BigInteger> _150___accumulator = Dafny.Sequence<BigInteger>.FromElements();
    TAIL_CALL_START: ;
      if ((n).Sign == 0) {
        return Dafny.Sequence<BigInteger>.Concat(_150___accumulator, Dafny.Sequence<BigInteger>.FromElements());
      } else {
        _150___accumulator = Dafny.Sequence<BigInteger>.Concat(_150___accumulator, Dafny.Sequence<BigInteger>.FromElements(Dafny.Helpers.EuclideanModulus(n, Std.Strings.HexConversion.__default.BASE())));
        BigInteger _in48 = Dafny.Helpers.EuclideanDivision(n, Std.Strings.HexConversion.__default.BASE());
        n = _in48;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtend(Dafny.ISequence<BigInteger> xs, BigInteger n)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)) >= (n)) {
        return xs;
      } else {
        Dafny.ISequence<BigInteger> _in49 = Dafny.Sequence<BigInteger>.Concat(xs, Dafny.Sequence<BigInteger>.FromElements(BigInteger.Zero));
        BigInteger _in50 = n;
        xs = _in49;
        n = _in50;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtendMultiple(Dafny.ISequence<BigInteger> xs, BigInteger n)
    {
      BigInteger _151_newLen = ((new BigInteger((xs).Count)) + (n)) - (Dafny.Helpers.EuclideanModulus(new BigInteger((xs).Count), n));
      return Std.Strings.HexConversion.__default.SeqExtend(xs, _151_newLen);
    }
    public static Dafny.ISequence<BigInteger> FromNatWithLen(BigInteger n, BigInteger len)
    {
      return Std.Strings.HexConversion.__default.SeqExtend(Std.Strings.HexConversion.__default.FromNat(n), len);
    }
    public static Dafny.ISequence<BigInteger> SeqZero(BigInteger len) {
      Dafny.ISequence<BigInteger> _152_xs = Std.Strings.HexConversion.__default.FromNatWithLen(BigInteger.Zero, len);
      return _152_xs;
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqAdd(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs1 = Std.Strings.HexConversion.__default.SeqAdd(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _153_zs_k = _let_tmp_rhs1.dtor__0;
        BigInteger _154_cin = _let_tmp_rhs1.dtor__1;
        BigInteger _155_sum = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) + (Std.Collections.Seq.__default.Last<BigInteger>(ys))) + (_154_cin);
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs2 = (((_155_sum) < (Std.Strings.HexConversion.__default.BASE())) ? (_System.Tuple2<BigInteger, BigInteger>.create(_155_sum, BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((_155_sum) - (Std.Strings.HexConversion.__default.BASE()), BigInteger.One)));
        BigInteger _156_sum__out = _let_tmp_rhs2.dtor__0;
        BigInteger _157_cout = _let_tmp_rhs2.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_153_zs_k, Dafny.Sequence<BigInteger>.FromElements(_156_sum__out)), _157_cout);
      }
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqSub(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs3 = Std.Strings.HexConversion.__default.SeqSub(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _158_zs = _let_tmp_rhs3.dtor__0;
        BigInteger _159_cin = _let_tmp_rhs3.dtor__1;
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs4 = (((Std.Collections.Seq.__default.Last<BigInteger>(xs)) >= ((Std.Collections.Seq.__default.Last<BigInteger>(ys)) + (_159_cin))) ? (_System.Tuple2<BigInteger, BigInteger>.create(((Std.Collections.Seq.__default.Last<BigInteger>(xs)) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_159_cin), BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((((Std.Strings.HexConversion.__default.BASE()) + (Std.Collections.Seq.__default.Last<BigInteger>(xs))) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_159_cin), BigInteger.One)));
        BigInteger _160_diff__out = _let_tmp_rhs4.dtor__0;
        BigInteger _161_cout = _let_tmp_rhs4.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_158_zs, Dafny.Sequence<BigInteger>.FromElements(_160_diff__out)), _161_cout);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> HEX__DIGITS { get {
      return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789ABCDEF");
    } }
    public static Dafny.ISequence<Dafny.Rune> chars { get {
      return Std.Strings.HexConversion.__default.HEX__DIGITS;
    } }
    public static BigInteger @base { get {
      return new BigInteger((Std.Strings.HexConversion.__default.chars).Count);
    } }
    public static Dafny.IMap<Dafny.Rune,BigInteger> charToDigit { get {
      return Dafny.Map<Dafny.Rune, BigInteger>.FromElements(new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('0'), BigInteger.Zero), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('1'), BigInteger.One), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('2'), new BigInteger(2)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('3'), new BigInteger(3)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('4'), new BigInteger(4)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('5'), new BigInteger(5)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('6'), new BigInteger(6)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('7'), new BigInteger(7)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('8'), new BigInteger(8)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('9'), new BigInteger(9)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('a'), new BigInteger(10)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('b'), new BigInteger(11)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('c'), new BigInteger(12)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('d'), new BigInteger(13)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('e'), new BigInteger(14)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('f'), new BigInteger(15)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('A'), new BigInteger(10)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('B'), new BigInteger(11)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('C'), new BigInteger(12)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('D'), new BigInteger(13)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('E'), new BigInteger(14)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('F'), new BigInteger(15)));
    } }
  }

  public partial class CharSeq {
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class digit {
    private static readonly Dafny.TypeDescriptor<BigInteger> _TYPE = new Dafny.TypeDescriptor<BigInteger>(BigInteger.Zero);
    public static Dafny.TypeDescriptor<BigInteger> _TypeDescriptor() {
      return _TYPE;
    }
  }
} // end of namespace Std.Strings.HexConversion
namespace Std.Strings.DecimalConversion {

  public partial class __default {
    public static BigInteger BASE() {
      return Std.Strings.DecimalConversion.__default.@base;
    }
    public static bool IsDigitChar(Dafny.Rune c) {
      return (Std.Strings.DecimalConversion.__default.charToDigit).Contains(c);
    }
    public static Dafny.ISequence<Dafny.Rune> OfDigits(Dafny.ISequence<BigInteger> digits) {
      Dafny.ISequence<Dafny.Rune> _162___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((digits).Equals(Dafny.Sequence<BigInteger>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(), _162___accumulator);
      } else {
        _162___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.DecimalConversion.__default.chars).Select((digits).Select(BigInteger.Zero))), _162___accumulator);
        Dafny.ISequence<BigInteger> _in51 = (digits).Drop(BigInteger.One);
        digits = _in51;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.DecimalConversion.__default.chars).Select(BigInteger.Zero));
      } else {
        return Std.Strings.DecimalConversion.__default.OfDigits(Std.Strings.DecimalConversion.__default.FromNat(n));
      }
    }
    public static bool IsNumberStr(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus)
    {
      return !(!(str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) || (((((str).Select(BigInteger.Zero)) == (minus)) || ((Std.Strings.DecimalConversion.__default.charToDigit).Contains((str).Select(BigInteger.Zero)))) && (Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, bool>>((_163_str) => Dafny.Helpers.Quantifier<Dafny.Rune>(((_163_str).Drop(BigInteger.One)).UniqueElements, true, (((_forall_var_2) => {
        Dafny.Rune _164_c = (Dafny.Rune)_forall_var_2;
        return !(((_163_str).Drop(BigInteger.One)).Contains(_164_c)) || (Std.Strings.DecimalConversion.__default.IsDigitChar(_164_c));
      }))))(str)));
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n, Dafny.Rune minus)
    {
      if ((n).Sign != -1) {
        return Std.Strings.DecimalConversion.__default.OfNat(n);
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(minus), Std.Strings.DecimalConversion.__default.OfNat((BigInteger.Zero) - (n)));
      }
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return BigInteger.Zero;
      } else {
        Dafny.Rune _165_c = (str).Select((new BigInteger((str).Count)) - (BigInteger.One));
        return ((Std.Strings.DecimalConversion.__default.ToNat((str).Take((new BigInteger((str).Count)) - (BigInteger.One)))) * (Std.Strings.DecimalConversion.__default.@base)) + (Dafny.Map<Dafny.Rune, BigInteger>.Select(Std.Strings.DecimalConversion.__default.charToDigit,_165_c));
      }
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus)
    {
      if (Dafny.Sequence<Dafny.Rune>.IsPrefixOf(Dafny.Sequence<Dafny.Rune>.FromElements(minus), str)) {
        return (BigInteger.Zero) - (Std.Strings.DecimalConversion.__default.ToNat((str).Drop(BigInteger.One)));
      } else {
        return Std.Strings.DecimalConversion.__default.ToNat(str);
      }
    }
    public static BigInteger ToNatRight(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        return ((Std.Strings.DecimalConversion.__default.ToNatRight(Std.Collections.Seq.__default.DropFirst<BigInteger>(xs))) * (Std.Strings.DecimalConversion.__default.BASE())) + (Std.Collections.Seq.__default.First<BigInteger>(xs));
      }
    }
    public static BigInteger ToNatLeft(Dafny.ISequence<BigInteger> xs) {
      BigInteger _166___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return (BigInteger.Zero) + (_166___accumulator);
      } else {
        _166___accumulator = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) * (Std.Arithmetic.Power.__default.Pow(Std.Strings.DecimalConversion.__default.BASE(), (new BigInteger((xs).Count)) - (BigInteger.One)))) + (_166___accumulator);
        Dafny.ISequence<BigInteger> _in52 = Std.Collections.Seq.__default.DropLast<BigInteger>(xs);
        xs = _in52;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> FromNat(BigInteger n) {
      Dafny.ISequence<BigInteger> _167___accumulator = Dafny.Sequence<BigInteger>.FromElements();
    TAIL_CALL_START: ;
      if ((n).Sign == 0) {
        return Dafny.Sequence<BigInteger>.Concat(_167___accumulator, Dafny.Sequence<BigInteger>.FromElements());
      } else {
        _167___accumulator = Dafny.Sequence<BigInteger>.Concat(_167___accumulator, Dafny.Sequence<BigInteger>.FromElements(Dafny.Helpers.EuclideanModulus(n, Std.Strings.DecimalConversion.__default.BASE())));
        BigInteger _in53 = Dafny.Helpers.EuclideanDivision(n, Std.Strings.DecimalConversion.__default.BASE());
        n = _in53;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtend(Dafny.ISequence<BigInteger> xs, BigInteger n)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)) >= (n)) {
        return xs;
      } else {
        Dafny.ISequence<BigInteger> _in54 = Dafny.Sequence<BigInteger>.Concat(xs, Dafny.Sequence<BigInteger>.FromElements(BigInteger.Zero));
        BigInteger _in55 = n;
        xs = _in54;
        n = _in55;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtendMultiple(Dafny.ISequence<BigInteger> xs, BigInteger n)
    {
      BigInteger _168_newLen = ((new BigInteger((xs).Count)) + (n)) - (Dafny.Helpers.EuclideanModulus(new BigInteger((xs).Count), n));
      return Std.Strings.DecimalConversion.__default.SeqExtend(xs, _168_newLen);
    }
    public static Dafny.ISequence<BigInteger> FromNatWithLen(BigInteger n, BigInteger len)
    {
      return Std.Strings.DecimalConversion.__default.SeqExtend(Std.Strings.DecimalConversion.__default.FromNat(n), len);
    }
    public static Dafny.ISequence<BigInteger> SeqZero(BigInteger len) {
      Dafny.ISequence<BigInteger> _169_xs = Std.Strings.DecimalConversion.__default.FromNatWithLen(BigInteger.Zero, len);
      return _169_xs;
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqAdd(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs5 = Std.Strings.DecimalConversion.__default.SeqAdd(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _170_zs_k = _let_tmp_rhs5.dtor__0;
        BigInteger _171_cin = _let_tmp_rhs5.dtor__1;
        BigInteger _172_sum = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) + (Std.Collections.Seq.__default.Last<BigInteger>(ys))) + (_171_cin);
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs6 = (((_172_sum) < (Std.Strings.DecimalConversion.__default.BASE())) ? (_System.Tuple2<BigInteger, BigInteger>.create(_172_sum, BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((_172_sum) - (Std.Strings.DecimalConversion.__default.BASE()), BigInteger.One)));
        BigInteger _173_sum__out = _let_tmp_rhs6.dtor__0;
        BigInteger _174_cout = _let_tmp_rhs6.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_170_zs_k, Dafny.Sequence<BigInteger>.FromElements(_173_sum__out)), _174_cout);
      }
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqSub(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs7 = Std.Strings.DecimalConversion.__default.SeqSub(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _175_zs = _let_tmp_rhs7.dtor__0;
        BigInteger _176_cin = _let_tmp_rhs7.dtor__1;
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs8 = (((Std.Collections.Seq.__default.Last<BigInteger>(xs)) >= ((Std.Collections.Seq.__default.Last<BigInteger>(ys)) + (_176_cin))) ? (_System.Tuple2<BigInteger, BigInteger>.create(((Std.Collections.Seq.__default.Last<BigInteger>(xs)) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_176_cin), BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((((Std.Strings.DecimalConversion.__default.BASE()) + (Std.Collections.Seq.__default.Last<BigInteger>(xs))) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_176_cin), BigInteger.One)));
        BigInteger _177_diff__out = _let_tmp_rhs8.dtor__0;
        BigInteger _178_cout = _let_tmp_rhs8.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_175_zs, Dafny.Sequence<BigInteger>.FromElements(_177_diff__out)), _178_cout);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> DIGITS { get {
      return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789");
    } }
    public static Dafny.ISequence<Dafny.Rune> chars { get {
      return Std.Strings.DecimalConversion.__default.DIGITS;
    } }
    public static BigInteger @base { get {
      return new BigInteger((Std.Strings.DecimalConversion.__default.chars).Count);
    } }
    public static Dafny.IMap<Dafny.Rune,BigInteger> charToDigit { get {
      return Dafny.Map<Dafny.Rune, BigInteger>.FromElements(new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('0'), BigInteger.Zero), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('1'), BigInteger.One), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('2'), new BigInteger(2)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('3'), new BigInteger(3)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('4'), new BigInteger(4)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('5'), new BigInteger(5)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('6'), new BigInteger(6)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('7'), new BigInteger(7)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('8'), new BigInteger(8)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('9'), new BigInteger(9)));
    } }
  }

  public partial class CharSeq {
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class digit {
    private static readonly Dafny.TypeDescriptor<BigInteger> _TYPE = new Dafny.TypeDescriptor<BigInteger>(BigInteger.Zero);
    public static Dafny.TypeDescriptor<BigInteger> _TypeDescriptor() {
      return _TYPE;
    }
  }
} // end of namespace Std.Strings.DecimalConversion
namespace Std.Strings.CharStrEscaping {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> Escape(Dafny.ISequence<Dafny.Rune> str, Dafny.ISet<Dafny.Rune> mustEscape, Dafny.Rune escape)
    {
      Dafny.ISequence<Dafny.Rune> _179___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_179___accumulator, str);
      } else if ((mustEscape).Contains((str).Select(BigInteger.Zero))) {
        _179___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_179___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements(escape, (str).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in56 = (str).Drop(BigInteger.One);
        Dafny.ISet<Dafny.Rune> _in57 = mustEscape;
        Dafny.Rune _in58 = escape;
        str = _in56;
        mustEscape = _in57;
        escape = _in58;
        goto TAIL_CALL_START;
      } else {
        _179___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_179___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in59 = (str).Drop(BigInteger.One);
        Dafny.ISet<Dafny.Rune> _in60 = mustEscape;
        Dafny.Rune _in61 = escape;
        str = _in59;
        mustEscape = _in60;
        escape = _in61;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> Unescape(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune escape)
    {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(str);
      } else if (((str).Select(BigInteger.Zero)) == (escape)) {
        if ((new BigInteger((str).Count)) > (BigInteger.One)) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _180_valueOrError0 = Std.Strings.CharStrEscaping.__default.Unescape((str).Drop(new BigInteger(2)), escape);
          if ((_180_valueOrError0).IsFailure()) {
            return (_180_valueOrError0).PropagateFailure<Dafny.ISequence<Dafny.Rune>>();
          } else {
            Dafny.ISequence<Dafny.Rune> _181_tl = (_180_valueOrError0).Extract();
            return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.One)), _181_tl));
          }
        } else {
          return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
        }
      } else {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _182_valueOrError1 = Std.Strings.CharStrEscaping.__default.Unescape((str).Drop(BigInteger.One), escape);
        if ((_182_valueOrError1).IsFailure()) {
          return (_182_valueOrError1).PropagateFailure<Dafny.ISequence<Dafny.Rune>>();
        } else {
          Dafny.ISequence<Dafny.Rune> _183_tl = (_182_valueOrError1).Extract();
          return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.Zero)), _183_tl));
        }
      }
    }
  }
} // end of namespace Std.Strings.CharStrEscaping
namespace Std.Strings {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      return Std.Strings.DecimalConversion.__default.OfNat(n);
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n) {
      return Std.Strings.DecimalConversion.__default.OfInt(n, new Dafny.Rune('-'));
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.DecimalConversion.__default.ToNat(str);
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.DecimalConversion.__default.ToInt(str, new Dafny.Rune('-'));
    }
    public static Dafny.ISequence<Dafny.Rune> EscapeQuotes(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.CharStrEscaping.__default.Escape(str, Dafny.Set<Dafny.Rune>.FromElements(new Dafny.Rune('\"'), new Dafny.Rune('\'')), new Dafny.Rune('\\'));
    }
    public static Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> UnescapeQuotes(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.CharStrEscaping.__default.Unescape(str, new Dafny.Rune('\\'));
    }
    public static Dafny.ISequence<Dafny.Rune> OfBool(bool b) {
      if (b) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true");
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false");
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfChar(Dafny.Rune c) {
      return Dafny.Sequence<Dafny.Rune>.FromElements(c);
    }
  }
} // end of namespace Std.Strings

namespace DAST.Format {


  public interface _IUnOpFormat {
    bool is_NoFormat { get; }
    bool is_CombineNotInner { get; }
    _IUnOpFormat DowncastClone();
  }
  public abstract class UnOpFormat : _IUnOpFormat {
    public UnOpFormat() {
    }
    private static readonly DAST.Format._IUnOpFormat theDefault = create_NoFormat();
    public static DAST.Format._IUnOpFormat Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST.Format._IUnOpFormat> _TYPE = new Dafny.TypeDescriptor<DAST.Format._IUnOpFormat>(DAST.Format.UnOpFormat.Default());
    public static Dafny.TypeDescriptor<DAST.Format._IUnOpFormat> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnOpFormat create_NoFormat() {
      return new UnOpFormat_NoFormat();
    }
    public static _IUnOpFormat create_CombineNotInner() {
      return new UnOpFormat_CombineNotInner();
    }
    public bool is_NoFormat { get { return this is UnOpFormat_NoFormat; } }
    public bool is_CombineNotInner { get { return this is UnOpFormat_CombineNotInner; } }
    public static System.Collections.Generic.IEnumerable<_IUnOpFormat> AllSingletonConstructors {
      get {
        yield return UnOpFormat.create_NoFormat();
        yield return UnOpFormat.create_CombineNotInner();
      }
    }
    public abstract _IUnOpFormat DowncastClone();
  }
  public class UnOpFormat_NoFormat : UnOpFormat {
    public UnOpFormat_NoFormat() : base() {
    }
    public override _IUnOpFormat DowncastClone() {
      if (this is _IUnOpFormat dt) { return dt; }
      return new UnOpFormat_NoFormat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.UnOpFormat_NoFormat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.UnOpFormat.NoFormat";
      return s;
    }
  }
  public class UnOpFormat_CombineNotInner : UnOpFormat {
    public UnOpFormat_CombineNotInner() : base() {
    }
    public override _IUnOpFormat DowncastClone() {
      if (this is _IUnOpFormat dt) { return dt; }
      return new UnOpFormat_CombineNotInner();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.UnOpFormat_CombineNotInner;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.UnOpFormat.CombineNotInner";
      return s;
    }
  }

  public interface _IBinOpFormat {
    bool is_NoFormat { get; }
    bool is_ImpliesFormat { get; }
    bool is_Equivalence { get; }
    bool is_ReverseOperands { get; }
    _IBinOpFormat DowncastClone();
  }
  public abstract class BinOpFormat : _IBinOpFormat {
    public BinOpFormat() {
    }
    private static readonly DAST.Format._IBinOpFormat theDefault = create_NoFormat();
    public static DAST.Format._IBinOpFormat Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST.Format._IBinOpFormat> _TYPE = new Dafny.TypeDescriptor<DAST.Format._IBinOpFormat>(DAST.Format.BinOpFormat.Default());
    public static Dafny.TypeDescriptor<DAST.Format._IBinOpFormat> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinOpFormat create_NoFormat() {
      return new BinOpFormat_NoFormat();
    }
    public static _IBinOpFormat create_ImpliesFormat() {
      return new BinOpFormat_ImpliesFormat();
    }
    public static _IBinOpFormat create_Equivalence() {
      return new BinOpFormat_Equivalence();
    }
    public static _IBinOpFormat create_ReverseOperands() {
      return new BinOpFormat_ReverseOperands();
    }
    public bool is_NoFormat { get { return this is BinOpFormat_NoFormat; } }
    public bool is_ImpliesFormat { get { return this is BinOpFormat_ImpliesFormat; } }
    public bool is_Equivalence { get { return this is BinOpFormat_Equivalence; } }
    public bool is_ReverseOperands { get { return this is BinOpFormat_ReverseOperands; } }
    public static System.Collections.Generic.IEnumerable<_IBinOpFormat> AllSingletonConstructors {
      get {
        yield return BinOpFormat.create_NoFormat();
        yield return BinOpFormat.create_ImpliesFormat();
        yield return BinOpFormat.create_Equivalence();
        yield return BinOpFormat.create_ReverseOperands();
      }
    }
    public abstract _IBinOpFormat DowncastClone();
  }
  public class BinOpFormat_NoFormat : BinOpFormat {
    public BinOpFormat_NoFormat() : base() {
    }
    public override _IBinOpFormat DowncastClone() {
      if (this is _IBinOpFormat dt) { return dt; }
      return new BinOpFormat_NoFormat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinOpFormat_NoFormat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.BinOpFormat.NoFormat";
      return s;
    }
  }
  public class BinOpFormat_ImpliesFormat : BinOpFormat {
    public BinOpFormat_ImpliesFormat() : base() {
    }
    public override _IBinOpFormat DowncastClone() {
      if (this is _IBinOpFormat dt) { return dt; }
      return new BinOpFormat_ImpliesFormat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinOpFormat_ImpliesFormat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.BinOpFormat.ImpliesFormat";
      return s;
    }
  }
  public class BinOpFormat_Equivalence : BinOpFormat {
    public BinOpFormat_Equivalence() : base() {
    }
    public override _IBinOpFormat DowncastClone() {
      if (this is _IBinOpFormat dt) { return dt; }
      return new BinOpFormat_Equivalence();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinOpFormat_Equivalence;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.BinOpFormat.Equivalence";
      return s;
    }
  }
  public class BinOpFormat_ReverseOperands : BinOpFormat {
    public BinOpFormat_ReverseOperands() : base() {
    }
    public override _IBinOpFormat DowncastClone() {
      if (this is _IBinOpFormat dt) { return dt; }
      return new BinOpFormat_ReverseOperands();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinOpFormat_ReverseOperands;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.BinOpFormat.ReverseOperands";
      return s;
    }
  }
} // end of namespace DAST.Format
namespace DAST {


  public interface _IModule {
    bool is_Module { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    bool dtor_isExtern { get; }
    Dafny.ISequence<DAST._IModuleItem> dtor_body { get; }
    _IModule DowncastClone();
  }
  public class Module : _IModule {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly bool _isExtern;
    public readonly Dafny.ISequence<DAST._IModuleItem> _body;
    public Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      this._name = name;
      this._isExtern = isExtern;
      this._body = body;
    }
    public _IModule DowncastClone() {
      if (this is _IModule dt) { return dt; }
      return new Module(_name, _isExtern, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Module;
      return oth != null && object.Equals(this._name, oth._name) && this._isExtern == oth._isExtern && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isExtern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Module.Module";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isExtern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IModule theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, false, Dafny.Sequence<DAST._IModuleItem>.Empty);
    public static DAST._IModule Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModule> _TYPE = new Dafny.TypeDescriptor<DAST._IModule>(DAST.Module.Default());
    public static Dafny.TypeDescriptor<DAST._IModule> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModule create(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return new Module(name, isExtern, body);
    }
    public static _IModule create_Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return create(name, isExtern, body);
    }
    public bool is_Module { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public bool dtor_isExtern {
      get {
        return this._isExtern;
      }
    }
    public Dafny.ISequence<DAST._IModuleItem> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IModuleItem {
    bool is_Module { get; }
    bool is_Class { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    bool is_Datatype { get; }
    DAST._IModule dtor_Module_a0 { get; }
    DAST._IClass dtor_Class_a0 { get; }
    DAST._ITrait dtor_Trait_a0 { get; }
    DAST._INewtype dtor_Newtype_a0 { get; }
    DAST._IDatatype dtor_Datatype_a0 { get; }
    _IModuleItem DowncastClone();
  }
  public abstract class ModuleItem : _IModuleItem {
    public ModuleItem() {
    }
    private static readonly DAST._IModuleItem theDefault = create_Module(DAST.Module.Default());
    public static DAST._IModuleItem Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModuleItem> _TYPE = new Dafny.TypeDescriptor<DAST._IModuleItem>(DAST.ModuleItem.Default());
    public static Dafny.TypeDescriptor<DAST._IModuleItem> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModuleItem create_Module(DAST._IModule _a0) {
      return new ModuleItem_Module(_a0);
    }
    public static _IModuleItem create_Class(DAST._IClass _a0) {
      return new ModuleItem_Class(_a0);
    }
    public static _IModuleItem create_Trait(DAST._ITrait _a0) {
      return new ModuleItem_Trait(_a0);
    }
    public static _IModuleItem create_Newtype(DAST._INewtype _a0) {
      return new ModuleItem_Newtype(_a0);
    }
    public static _IModuleItem create_Datatype(DAST._IDatatype _a0) {
      return new ModuleItem_Datatype(_a0);
    }
    public bool is_Module { get { return this is ModuleItem_Module; } }
    public bool is_Class { get { return this is ModuleItem_Class; } }
    public bool is_Trait { get { return this is ModuleItem_Trait; } }
    public bool is_Newtype { get { return this is ModuleItem_Newtype; } }
    public bool is_Datatype { get { return this is ModuleItem_Datatype; } }
    public DAST._IModule dtor_Module_a0 {
      get {
        var d = this;
        return ((ModuleItem_Module)d)._a0;
      }
    }
    public DAST._IClass dtor_Class_a0 {
      get {
        var d = this;
        return ((ModuleItem_Class)d)._a0;
      }
    }
    public DAST._ITrait dtor_Trait_a0 {
      get {
        var d = this;
        return ((ModuleItem_Trait)d)._a0;
      }
    }
    public DAST._INewtype dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Newtype)d)._a0;
      }
    }
    public DAST._IDatatype dtor_Datatype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Datatype)d)._a0;
      }
    }
    public abstract _IModuleItem DowncastClone();
  }
  public class ModuleItem_Module : ModuleItem {
    public readonly DAST._IModule _a0;
    public ModuleItem_Module(DAST._IModule _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Module(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Module;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Module";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Class : ModuleItem {
    public readonly DAST._IClass _a0;
    public ModuleItem_Class(DAST._IClass _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Class(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Class;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Class";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Trait : ModuleItem {
    public readonly DAST._ITrait _a0;
    public ModuleItem_Trait(DAST._ITrait _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Trait(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Trait;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Newtype : ModuleItem {
    public readonly DAST._INewtype _a0;
    public ModuleItem_Newtype(DAST._INewtype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Datatype : ModuleItem {
    public readonly DAST._IDatatype _a0;
    public ModuleItem_Datatype(DAST._IDatatype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Datatype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Datatype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IType {
    bool is_Path { get; }
    bool is_Nullable { get; }
    bool is_Tuple { get; }
    bool is_Array { get; }
    bool is_Seq { get; }
    bool is_Set { get; }
    bool is_Multiset { get; }
    bool is_Map { get; }
    bool is_SetBuilder { get; }
    bool is_MapBuilder { get; }
    bool is_Arrow { get; }
    bool is_Primitive { get; }
    bool is_Passthrough { get; }
    bool is_TypeArg { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    DAST._IResolvedType dtor_resolved { get; }
    DAST._IType dtor_Nullable_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_Tuple_a0 { get; }
    DAST._IType dtor_element { get; }
    BigInteger dtor_dims { get; }
    DAST._IType dtor_key { get; }
    DAST._IType dtor_value { get; }
    Dafny.ISequence<DAST._IType> dtor_args { get; }
    DAST._IType dtor_result { get; }
    DAST._IPrimitive dtor_Primitive_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 { get; }
    _IType DowncastClone();
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly DAST._IType theDefault = create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.ResolvedType.Default());
    public static DAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IType> _TYPE = new Dafny.TypeDescriptor<DAST._IType>(DAST.Type.Default());
    public static Dafny.TypeDescriptor<DAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) {
      return new Type_Path(_a0, typeArgs, resolved);
    }
    public static _IType create_Nullable(DAST._IType _a0) {
      return new Type_Nullable(_a0);
    }
    public static _IType create_Tuple(Dafny.ISequence<DAST._IType> _a0) {
      return new Type_Tuple(_a0);
    }
    public static _IType create_Array(DAST._IType element, BigInteger dims) {
      return new Type_Array(element, dims);
    }
    public static _IType create_Seq(DAST._IType element) {
      return new Type_Seq(element);
    }
    public static _IType create_Set(DAST._IType element) {
      return new Type_Set(element);
    }
    public static _IType create_Multiset(DAST._IType element) {
      return new Type_Multiset(element);
    }
    public static _IType create_Map(DAST._IType key, DAST._IType @value) {
      return new Type_Map(key, @value);
    }
    public static _IType create_SetBuilder(DAST._IType element) {
      return new Type_SetBuilder(element);
    }
    public static _IType create_MapBuilder(DAST._IType key, DAST._IType @value) {
      return new Type_MapBuilder(key, @value);
    }
    public static _IType create_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) {
      return new Type_Arrow(args, result);
    }
    public static _IType create_Primitive(DAST._IPrimitive _a0) {
      return new Type_Primitive(_a0);
    }
    public static _IType create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_Passthrough(_a0);
    }
    public static _IType create_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_TypeArg(_a0);
    }
    public bool is_Path { get { return this is Type_Path; } }
    public bool is_Nullable { get { return this is Type_Nullable; } }
    public bool is_Tuple { get { return this is Type_Tuple; } }
    public bool is_Array { get { return this is Type_Array; } }
    public bool is_Seq { get { return this is Type_Seq; } }
    public bool is_Set { get { return this is Type_Set; } }
    public bool is_Multiset { get { return this is Type_Multiset; } }
    public bool is_Map { get { return this is Type_Map; } }
    public bool is_SetBuilder { get { return this is Type_SetBuilder; } }
    public bool is_MapBuilder { get { return this is Type_MapBuilder; } }
    public bool is_Arrow { get { return this is Type_Arrow; } }
    public bool is_Primitive { get { return this is Type_Primitive; } }
    public bool is_Passthrough { get { return this is Type_Passthrough; } }
    public bool is_TypeArg { get { return this is Type_TypeArg; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 {
      get {
        var d = this;
        return ((Type_Path)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Type_Path)d)._typeArgs;
      }
    }
    public DAST._IResolvedType dtor_resolved {
      get {
        var d = this;
        return ((Type_Path)d)._resolved;
      }
    }
    public DAST._IType dtor_Nullable_a0 {
      get {
        var d = this;
        return ((Type_Nullable)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Type_Tuple)d)._a0;
      }
    }
    public DAST._IType dtor_element {
      get {
        var d = this;
        if (d is Type_Array) { return ((Type_Array)d)._element; }
        if (d is Type_Seq) { return ((Type_Seq)d)._element; }
        if (d is Type_Set) { return ((Type_Set)d)._element; }
        if (d is Type_Multiset) { return ((Type_Multiset)d)._element; }
        return ((Type_SetBuilder)d)._element;
      }
    }
    public BigInteger dtor_dims {
      get {
        var d = this;
        return ((Type_Array)d)._dims;
      }
    }
    public DAST._IType dtor_key {
      get {
        var d = this;
        if (d is Type_Map) { return ((Type_Map)d)._key; }
        return ((Type_MapBuilder)d)._key;
      }
    }
    public DAST._IType dtor_value {
      get {
        var d = this;
        if (d is Type_Map) { return ((Type_Map)d)._value; }
        return ((Type_MapBuilder)d)._value;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_args {
      get {
        var d = this;
        return ((Type_Arrow)d)._args;
      }
    }
    public DAST._IType dtor_result {
      get {
        var d = this;
        return ((Type_Arrow)d)._result;
      }
    }
    public DAST._IPrimitive dtor_Primitive_a0 {
      get {
        var d = this;
        return ((Type_Primitive)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((Type_Passthrough)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 {
      get {
        var d = this;
        return ((Type_TypeArg)d)._a0;
      }
    }
    public abstract _IType DowncastClone();
  }
  public class Type_Path : Type {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly DAST._IResolvedType _resolved;
    public Type_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) : base() {
      this._a0 = _a0;
      this._typeArgs = typeArgs;
      this._resolved = resolved;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Path(_a0, _typeArgs, _resolved);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Path;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._resolved, oth._resolved);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._resolved));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Path";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._resolved);
      s += ")";
      return s;
    }
  }
  public class Type_Nullable : Type {
    public readonly DAST._IType _a0;
    public Type_Nullable(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Nullable(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Nullable;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Nullable";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Tuple : Type {
    public readonly Dafny.ISequence<DAST._IType> _a0;
    public Type_Tuple(Dafny.ISequence<DAST._IType> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Array : Type {
    public readonly DAST._IType _element;
    public readonly BigInteger _dims;
    public Type_Array(DAST._IType element, BigInteger dims) : base() {
      this._element = element;
      this._dims = dims;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Array(_element, _dims);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Array;
      return oth != null && object.Equals(this._element, oth._element) && this._dims == oth._dims;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Array";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dims);
      s += ")";
      return s;
    }
  }
  public class Type_Seq : Type {
    public readonly DAST._IType _element;
    public Type_Seq(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Seq(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Seq;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Seq";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Set : Type {
    public readonly DAST._IType _element;
    public Type_Set(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Set(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Set;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Set";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Multiset : Type {
    public readonly DAST._IType _element;
    public Type_Multiset(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Multiset(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Multiset;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Multiset";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Map : Type {
    public readonly DAST._IType _key;
    public readonly DAST._IType _value;
    public Type_Map(DAST._IType key, DAST._IType @value) : base() {
      this._key = key;
      this._value = @value;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Map(_key, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Map;
      return oth != null && object.Equals(this._key, oth._key) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._key));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Map";
      s += "(";
      s += Dafny.Helpers.ToString(this._key);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Type_SetBuilder : Type {
    public readonly DAST._IType _element;
    public Type_SetBuilder(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_SetBuilder(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_SetBuilder;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.SetBuilder";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_MapBuilder : Type {
    public readonly DAST._IType _key;
    public readonly DAST._IType _value;
    public Type_MapBuilder(DAST._IType key, DAST._IType @value) : base() {
      this._key = key;
      this._value = @value;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_MapBuilder(_key, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_MapBuilder;
      return oth != null && object.Equals(this._key, oth._key) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._key));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.MapBuilder";
      s += "(";
      s += Dafny.Helpers.ToString(this._key);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Type_Arrow : Type {
    public readonly Dafny.ISequence<DAST._IType> _args;
    public readonly DAST._IType _result;
    public Type_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) : base() {
      this._args = args;
      this._result = result;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Arrow(_args, _result);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Arrow;
      return oth != null && object.Equals(this._args, oth._args) && object.Equals(this._result, oth._result);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._result));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Arrow";
      s += "(";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._result);
      s += ")";
      return s;
    }
  }
  public class Type_Primitive : Type {
    public readonly DAST._IPrimitive _a0;
    public Type_Primitive(DAST._IPrimitive _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Primitive(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Primitive;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Primitive";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Passthrough : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TypeArg : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeArg(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_TypeArg;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.TypeArg";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IPrimitive {
    bool is_Int { get; }
    bool is_Real { get; }
    bool is_String { get; }
    bool is_Bool { get; }
    bool is_Char { get; }
    _IPrimitive DowncastClone();
  }
  public abstract class Primitive : _IPrimitive {
    public Primitive() {
    }
    private static readonly DAST._IPrimitive theDefault = create_Int();
    public static DAST._IPrimitive Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IPrimitive> _TYPE = new Dafny.TypeDescriptor<DAST._IPrimitive>(DAST.Primitive.Default());
    public static Dafny.TypeDescriptor<DAST._IPrimitive> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPrimitive create_Int() {
      return new Primitive_Int();
    }
    public static _IPrimitive create_Real() {
      return new Primitive_Real();
    }
    public static _IPrimitive create_String() {
      return new Primitive_String();
    }
    public static _IPrimitive create_Bool() {
      return new Primitive_Bool();
    }
    public static _IPrimitive create_Char() {
      return new Primitive_Char();
    }
    public bool is_Int { get { return this is Primitive_Int; } }
    public bool is_Real { get { return this is Primitive_Real; } }
    public bool is_String { get { return this is Primitive_String; } }
    public bool is_Bool { get { return this is Primitive_Bool; } }
    public bool is_Char { get { return this is Primitive_Char; } }
    public static System.Collections.Generic.IEnumerable<_IPrimitive> AllSingletonConstructors {
      get {
        yield return Primitive.create_Int();
        yield return Primitive.create_Real();
        yield return Primitive.create_String();
        yield return Primitive.create_Bool();
        yield return Primitive.create_Char();
      }
    }
    public abstract _IPrimitive DowncastClone();
  }
  public class Primitive_Int : Primitive {
    public Primitive_Int() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Int";
      return s;
    }
  }
  public class Primitive_Real : Primitive {
    public Primitive_Real() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Real();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Real;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Real";
      return s;
    }
  }
  public class Primitive_String : Primitive {
    public Primitive_String() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_String();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_String;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.String";
      return s;
    }
  }
  public class Primitive_Bool : Primitive {
    public Primitive_Bool() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Bool";
      return s;
    }
  }
  public class Primitive_Char : Primitive {
    public Primitive_Char() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Char();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Char;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Char";
      return s;
    }
  }

  public interface _INewtypeRange {
    bool is_U8 { get; }
    bool is_I8 { get; }
    bool is_U16 { get; }
    bool is_I16 { get; }
    bool is_U32 { get; }
    bool is_I32 { get; }
    bool is_U64 { get; }
    bool is_I64 { get; }
    bool is_U128 { get; }
    bool is_I128 { get; }
    bool is_BigInt { get; }
    bool is_NoRange { get; }
    _INewtypeRange DowncastClone();
  }
  public abstract class NewtypeRange : _INewtypeRange {
    public NewtypeRange() {
    }
    private static readonly DAST._INewtypeRange theDefault = create_U8();
    public static DAST._INewtypeRange Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtypeRange> _TYPE = new Dafny.TypeDescriptor<DAST._INewtypeRange>(DAST.NewtypeRange.Default());
    public static Dafny.TypeDescriptor<DAST._INewtypeRange> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtypeRange create_U8() {
      return new NewtypeRange_U8();
    }
    public static _INewtypeRange create_I8() {
      return new NewtypeRange_I8();
    }
    public static _INewtypeRange create_U16() {
      return new NewtypeRange_U16();
    }
    public static _INewtypeRange create_I16() {
      return new NewtypeRange_I16();
    }
    public static _INewtypeRange create_U32() {
      return new NewtypeRange_U32();
    }
    public static _INewtypeRange create_I32() {
      return new NewtypeRange_I32();
    }
    public static _INewtypeRange create_U64() {
      return new NewtypeRange_U64();
    }
    public static _INewtypeRange create_I64() {
      return new NewtypeRange_I64();
    }
    public static _INewtypeRange create_U128() {
      return new NewtypeRange_U128();
    }
    public static _INewtypeRange create_I128() {
      return new NewtypeRange_I128();
    }
    public static _INewtypeRange create_BigInt() {
      return new NewtypeRange_BigInt();
    }
    public static _INewtypeRange create_NoRange() {
      return new NewtypeRange_NoRange();
    }
    public bool is_U8 { get { return this is NewtypeRange_U8; } }
    public bool is_I8 { get { return this is NewtypeRange_I8; } }
    public bool is_U16 { get { return this is NewtypeRange_U16; } }
    public bool is_I16 { get { return this is NewtypeRange_I16; } }
    public bool is_U32 { get { return this is NewtypeRange_U32; } }
    public bool is_I32 { get { return this is NewtypeRange_I32; } }
    public bool is_U64 { get { return this is NewtypeRange_U64; } }
    public bool is_I64 { get { return this is NewtypeRange_I64; } }
    public bool is_U128 { get { return this is NewtypeRange_U128; } }
    public bool is_I128 { get { return this is NewtypeRange_I128; } }
    public bool is_BigInt { get { return this is NewtypeRange_BigInt; } }
    public bool is_NoRange { get { return this is NewtypeRange_NoRange; } }
    public static System.Collections.Generic.IEnumerable<_INewtypeRange> AllSingletonConstructors {
      get {
        yield return NewtypeRange.create_U8();
        yield return NewtypeRange.create_I8();
        yield return NewtypeRange.create_U16();
        yield return NewtypeRange.create_I16();
        yield return NewtypeRange.create_U32();
        yield return NewtypeRange.create_I32();
        yield return NewtypeRange.create_U64();
        yield return NewtypeRange.create_I64();
        yield return NewtypeRange.create_U128();
        yield return NewtypeRange.create_I128();
        yield return NewtypeRange.create_BigInt();
        yield return NewtypeRange.create_NoRange();
      }
    }
    public abstract _INewtypeRange DowncastClone();
  }
  public class NewtypeRange_U8 : NewtypeRange {
    public NewtypeRange_U8() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U8();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U8;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U8";
      return s;
    }
  }
  public class NewtypeRange_I8 : NewtypeRange {
    public NewtypeRange_I8() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I8();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I8;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I8";
      return s;
    }
  }
  public class NewtypeRange_U16 : NewtypeRange {
    public NewtypeRange_U16() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U16();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U16;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U16";
      return s;
    }
  }
  public class NewtypeRange_I16 : NewtypeRange {
    public NewtypeRange_I16() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I16();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I16;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I16";
      return s;
    }
  }
  public class NewtypeRange_U32 : NewtypeRange {
    public NewtypeRange_U32() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U32();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U32;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U32";
      return s;
    }
  }
  public class NewtypeRange_I32 : NewtypeRange {
    public NewtypeRange_I32() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I32();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I32;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I32";
      return s;
    }
  }
  public class NewtypeRange_U64 : NewtypeRange {
    public NewtypeRange_U64() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U64();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U64;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U64";
      return s;
    }
  }
  public class NewtypeRange_I64 : NewtypeRange {
    public NewtypeRange_I64() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I64();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I64;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I64";
      return s;
    }
  }
  public class NewtypeRange_U128 : NewtypeRange {
    public NewtypeRange_U128() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U128();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U128;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U128";
      return s;
    }
  }
  public class NewtypeRange_I128 : NewtypeRange {
    public NewtypeRange_I128() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I128();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I128;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I128";
      return s;
    }
  }
  public class NewtypeRange_BigInt : NewtypeRange {
    public NewtypeRange_BigInt() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_BigInt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_BigInt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.BigInt";
      return s;
    }
  }
  public class NewtypeRange_NoRange : NewtypeRange {
    public NewtypeRange_NoRange() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_NoRange();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_NoRange;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.NoRange";
      return s;
    }
  }

  public interface _IAttribute {
    bool is_Attribute { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_args { get; }
    _IAttribute DowncastClone();
  }
  public class Attribute : _IAttribute {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _args;
    public Attribute(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> args) {
      this._name = name;
      this._args = args;
    }
    public _IAttribute DowncastClone() {
      if (this is _IAttribute dt) { return dt; }
      return new Attribute(_name, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Attribute;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Attribute.Attribute";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
    private static readonly DAST._IAttribute theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty);
    public static DAST._IAttribute Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IAttribute> _TYPE = new Dafny.TypeDescriptor<DAST._IAttribute>(DAST.Attribute.Default());
    public static Dafny.TypeDescriptor<DAST._IAttribute> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAttribute create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> args) {
      return new Attribute(name, args);
    }
    public static _IAttribute create_Attribute(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> args) {
      return create(name, args);
    }
    public bool is_Attribute { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_args {
      get {
        return this._args;
      }
    }
  }

  public interface _IDatatypeType {
    bool is_DatatypeType { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    Dafny.ISequence<DAST._IAttribute> dtor_attributes { get; }
    _IDatatypeType DowncastClone();
  }
  public class DatatypeType : _IDatatypeType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IAttribute> _attributes;
    public DatatypeType(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IAttribute> attributes) {
      this._path = path;
      this._attributes = attributes;
    }
    public _IDatatypeType DowncastClone() {
      if (this is _IDatatypeType dt) { return dt; }
      return new DatatypeType(_path, _attributes);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.DatatypeType;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._attributes, oth._attributes);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.DatatypeType.DatatypeType";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatypeType theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<DAST._IAttribute>.Empty);
    public static DAST._IDatatypeType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatypeType> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatypeType>(DAST.DatatypeType.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatypeType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatypeType create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IAttribute> attributes) {
      return new DatatypeType(path, attributes);
    }
    public static _IDatatypeType create_DatatypeType(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IAttribute> attributes) {
      return create(path, attributes);
    }
    public bool is_DatatypeType { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        return this._path;
      }
    }
    public Dafny.ISequence<DAST._IAttribute> dtor_attributes {
      get {
        return this._attributes;
      }
    }
  }

  public interface _IResolvedType {
    bool is_Datatype { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    DAST._IDatatypeType dtor_datatypeType { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    Dafny.ISequence<DAST._IAttribute> dtor_attributes { get; }
    DAST._IType dtor_baseType { get; }
    DAST._INewtypeRange dtor_range { get; }
    bool dtor_erase { get; }
    _IResolvedType DowncastClone();
  }
  public abstract class ResolvedType : _IResolvedType {
    public ResolvedType() {
    }
    private static readonly DAST._IResolvedType theDefault = create_Datatype(DAST.DatatypeType.Default());
    public static DAST._IResolvedType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IResolvedType> _TYPE = new Dafny.TypeDescriptor<DAST._IResolvedType>(DAST.ResolvedType.Default());
    public static Dafny.TypeDescriptor<DAST._IResolvedType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IResolvedType create_Datatype(DAST._IDatatypeType datatypeType) {
      return new ResolvedType_Datatype(datatypeType);
    }
    public static _IResolvedType create_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IAttribute> attributes) {
      return new ResolvedType_Trait(path, attributes);
    }
    public static _IResolvedType create_Newtype(DAST._IType baseType, DAST._INewtypeRange range, bool erase, Dafny.ISequence<DAST._IAttribute> attributes) {
      return new ResolvedType_Newtype(baseType, range, erase, attributes);
    }
    public bool is_Datatype { get { return this is ResolvedType_Datatype; } }
    public bool is_Trait { get { return this is ResolvedType_Trait; } }
    public bool is_Newtype { get { return this is ResolvedType_Newtype; } }
    public DAST._IDatatypeType dtor_datatypeType {
      get {
        var d = this;
        return ((ResolvedType_Datatype)d)._datatypeType;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        return ((ResolvedType_Trait)d)._path;
      }
    }
    public Dafny.ISequence<DAST._IAttribute> dtor_attributes {
      get {
        var d = this;
        if (d is ResolvedType_Trait) { return ((ResolvedType_Trait)d)._attributes; }
        return ((ResolvedType_Newtype)d)._attributes;
      }
    }
    public DAST._IType dtor_baseType {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._baseType;
      }
    }
    public DAST._INewtypeRange dtor_range {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._range;
      }
    }
    public bool dtor_erase {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._erase;
      }
    }
    public abstract _IResolvedType DowncastClone();
  }
  public class ResolvedType_Datatype : ResolvedType {
    public readonly DAST._IDatatypeType _datatypeType;
    public ResolvedType_Datatype(DAST._IDatatypeType datatypeType) : base() {
      this._datatypeType = datatypeType;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Datatype(_datatypeType);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Datatype;
      return oth != null && object.Equals(this._datatypeType, oth._datatypeType);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._datatypeType));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._datatypeType);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Trait : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IAttribute> _attributes;
    public ResolvedType_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IAttribute> attributes) : base() {
      this._path = path;
      this._attributes = attributes;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Trait(_path, _attributes);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Trait;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._attributes, oth._attributes);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Newtype : ResolvedType {
    public readonly DAST._IType _baseType;
    public readonly DAST._INewtypeRange _range;
    public readonly bool _erase;
    public readonly Dafny.ISequence<DAST._IAttribute> _attributes;
    public ResolvedType_Newtype(DAST._IType baseType, DAST._INewtypeRange range, bool erase, Dafny.ISequence<DAST._IAttribute> attributes) : base() {
      this._baseType = baseType;
      this._range = range;
      this._erase = erase;
      this._attributes = attributes;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Newtype(_baseType, _range, _erase, _attributes);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Newtype;
      return oth != null && object.Equals(this._baseType, oth._baseType) && object.Equals(this._range, oth._range) && this._erase == oth._erase && object.Equals(this._attributes, oth._attributes);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._baseType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._range));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._erase));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._baseType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._range);
      s += ", ";
      s += Dafny.Helpers.ToString(this._erase);
      s += ", ";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ")";
      return s;
    }
  }

  public interface _IIdent {
    bool is_Ident { get; }
    Dafny.ISequence<Dafny.Rune> dtor_id { get; }
  }
  public class Ident : _IIdent {
    public readonly Dafny.ISequence<Dafny.Rune> _id;
    public Ident(Dafny.ISequence<Dafny.Rune> id) {
      this._id = id;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Ident;
      return oth != null && object.Equals(this._id, oth._id);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._id));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Ident.Ident";
      s += "(";
      s += this._id.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IIdent create(Dafny.ISequence<Dafny.Rune> id) {
      return new Ident(id);
    }
    public static _IIdent create_Ident(Dafny.ISequence<Dafny.Rune> id) {
      return create(id);
    }
    public bool is_Ident { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_id {
      get {
        return this._id;
      }
    }
  }

  public interface _IClass {
    bool is_Class { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IType> dtor_superClasses { get; }
    Dafny.ISequence<DAST._IField> dtor_fields { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    Dafny.ISequence<DAST._IAttribute> dtor_attributes { get; }
    _IClass DowncastClone();
  }
  public class Class : _IClass {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IType> _superClasses;
    public readonly Dafny.ISequence<DAST._IField> _fields;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public readonly Dafny.ISequence<DAST._IAttribute> _attributes;
    public Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body, Dafny.ISequence<DAST._IAttribute> attributes) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._superClasses = superClasses;
      this._fields = fields;
      this._body = body;
      this._attributes = attributes;
    }
    public _IClass DowncastClone() {
      if (this is _IClass dt) { return dt; }
      return new Class(_name, _enclosingModule, _typeParams, _superClasses, _fields, _body, _attributes);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Class;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._superClasses, oth._superClasses) && object.Equals(this._fields, oth._fields) && object.Equals(this._body, oth._body) && object.Equals(this._attributes, oth._attributes);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._superClasses));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Class.Class";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._superClasses);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ")";
      return s;
    }
    private static readonly DAST._IClass theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IField>.Empty, Dafny.Sequence<DAST._IMethod>.Empty, Dafny.Sequence<DAST._IAttribute>.Empty);
    public static DAST._IClass Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IClass> _TYPE = new Dafny.TypeDescriptor<DAST._IClass>(DAST.Class.Default());
    public static Dafny.TypeDescriptor<DAST._IClass> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClass create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body, Dafny.ISequence<DAST._IAttribute> attributes) {
      return new Class(name, enclosingModule, typeParams, superClasses, fields, body, attributes);
    }
    public static _IClass create_Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body, Dafny.ISequence<DAST._IAttribute> attributes) {
      return create(name, enclosingModule, typeParams, superClasses, fields, body, attributes);
    }
    public bool is_Class { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_superClasses {
      get {
        return this._superClasses;
      }
    }
    public Dafny.ISequence<DAST._IField> dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<DAST._IAttribute> dtor_attributes {
      get {
        return this._attributes;
      }
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    Dafny.ISequence<DAST._IAttribute> dtor_attributes { get; }
    _ITrait DowncastClone();
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public readonly Dafny.ISequence<DAST._IAttribute> _attributes;
    public Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body, Dafny.ISequence<DAST._IAttribute> attributes) {
      this._name = name;
      this._typeParams = typeParams;
      this._body = body;
      this._attributes = attributes;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_name, _typeParams, _body, _attributes);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Trait;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._body, oth._body) && object.Equals(this._attributes, oth._attributes);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Trait.Trait";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ")";
      return s;
    }
    private static readonly DAST._ITrait theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IMethod>.Empty, Dafny.Sequence<DAST._IAttribute>.Empty);
    public static DAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ITrait> _TYPE = new Dafny.TypeDescriptor<DAST._ITrait>(DAST.Trait.Default());
    public static Dafny.TypeDescriptor<DAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body, Dafny.ISequence<DAST._IAttribute> attributes) {
      return new Trait(name, typeParams, body, attributes);
    }
    public static _ITrait create_Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body, Dafny.ISequence<DAST._IAttribute> attributes) {
      return create(name, typeParams, body, attributes);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<DAST._IAttribute> dtor_attributes {
      get {
        return this._attributes;
      }
    }
  }

  public interface _IDatatype {
    bool is_Datatype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    bool dtor_isCo { get; }
    Dafny.ISequence<DAST._IAttribute> dtor_attributes { get; }
    _IDatatype DowncastClone();
  }
  public class Datatype : _IDatatype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IDatatypeCtor> _ctors;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public readonly bool _isCo;
    public readonly Dafny.ISequence<DAST._IAttribute> _attributes;
    public Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo, Dafny.ISequence<DAST._IAttribute> attributes) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._ctors = ctors;
      this._body = body;
      this._isCo = isCo;
      this._attributes = attributes;
    }
    public _IDatatype DowncastClone() {
      if (this is _IDatatype dt) { return dt; }
      return new Datatype(_name, _enclosingModule, _typeParams, _ctors, _body, _isCo, _attributes);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Datatype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._ctors, oth._ctors) && object.Equals(this._body, oth._body) && this._isCo == oth._isCo && object.Equals(this._attributes, oth._attributes);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ctors));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Datatype.Datatype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._ctors);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IDatatypeCtor>.Empty, Dafny.Sequence<DAST._IMethod>.Empty, false, Dafny.Sequence<DAST._IAttribute>.Empty);
    public static DAST._IDatatype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatype> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatype>(DAST.Datatype.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo, Dafny.ISequence<DAST._IAttribute> attributes) {
      return new Datatype(name, enclosingModule, typeParams, ctors, body, isCo, attributes);
    }
    public static _IDatatype create_Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo, Dafny.ISequence<DAST._IAttribute> attributes) {
      return create(name, enclosingModule, typeParams, ctors, body, isCo, attributes);
    }
    public bool is_Datatype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors {
      get {
        return this._ctors;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
    public bool dtor_isCo {
      get {
        return this._isCo;
      }
    }
    public Dafny.ISequence<DAST._IAttribute> dtor_attributes {
      get {
        return this._attributes;
      }
    }
  }

  public interface _IDatatypeCtor {
    bool is_DatatypeCtor { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_args { get; }
    bool dtor_hasAnyArgs { get; }
    _IDatatypeCtor DowncastClone();
  }
  public class DatatypeCtor : _IDatatypeCtor {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IFormal> _args;
    public readonly bool _hasAnyArgs;
    public DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      this._name = name;
      this._args = args;
      this._hasAnyArgs = hasAnyArgs;
    }
    public _IDatatypeCtor DowncastClone() {
      if (this is _IDatatypeCtor dt) { return dt; }
      return new DatatypeCtor(_name, _args, _hasAnyArgs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.DatatypeCtor;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._args, oth._args) && this._hasAnyArgs == oth._hasAnyArgs;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasAnyArgs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.DatatypeCtor.DatatypeCtor";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasAnyArgs);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatypeCtor theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, false);
    public static DAST._IDatatypeCtor Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatypeCtor>(DAST.DatatypeCtor.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatypeCtor create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return new DatatypeCtor(name, args, hasAnyArgs);
    }
    public static _IDatatypeCtor create_DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return create(name, args, hasAnyArgs);
    }
    public bool is_DatatypeCtor { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_args {
      get {
        return this._args;
      }
    }
    public bool dtor_hasAnyArgs {
      get {
        return this._hasAnyArgs;
      }
    }
  }

  public interface _INewtype {
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    DAST._IType dtor_base { get; }
    DAST._INewtypeRange dtor_range { get; }
    Dafny.ISequence<DAST._IStatement> dtor_witnessStmts { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_witnessExpr { get; }
    Dafny.ISequence<DAST._IAttribute> dtor_attributes { get; }
    _INewtype DowncastClone();
  }
  public class Newtype : _INewtype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly DAST._IType _base;
    public readonly DAST._INewtypeRange _range;
    public readonly Dafny.ISequence<DAST._IStatement> _witnessStmts;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _witnessExpr;
    public readonly Dafny.ISequence<DAST._IAttribute> _attributes;
    public Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, DAST._INewtypeRange range, Dafny.ISequence<DAST._IStatement> witnessStmts, Std.Wrappers._IOption<DAST._IExpression> witnessExpr, Dafny.ISequence<DAST._IAttribute> attributes) {
      this._name = name;
      this._typeParams = typeParams;
      this._base = @base;
      this._range = range;
      this._witnessStmts = witnessStmts;
      this._witnessExpr = witnessExpr;
      this._attributes = attributes;
    }
    public _INewtype DowncastClone() {
      if (this is _INewtype dt) { return dt; }
      return new Newtype(_name, _typeParams, _base, _range, _witnessStmts, _witnessExpr, _attributes);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Newtype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._base, oth._base) && object.Equals(this._range, oth._range) && object.Equals(this._witnessStmts, oth._witnessStmts) && object.Equals(this._witnessExpr, oth._witnessExpr) && object.Equals(this._attributes, oth._attributes);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._base));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._range));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessStmts));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessExpr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Newtype.Newtype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._base);
      s += ", ";
      s += Dafny.Helpers.ToString(this._range);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessStmts);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessExpr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ")";
      return s;
    }
    private static readonly DAST._INewtype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Type.Default(), DAST.NewtypeRange.Default(), Dafny.Sequence<DAST._IStatement>.Empty, Std.Wrappers.Option<DAST._IExpression>.Default(), Dafny.Sequence<DAST._IAttribute>.Empty);
    public static DAST._INewtype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtype> _TYPE = new Dafny.TypeDescriptor<DAST._INewtype>(DAST.Newtype.Default());
    public static Dafny.TypeDescriptor<DAST._INewtype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, DAST._INewtypeRange range, Dafny.ISequence<DAST._IStatement> witnessStmts, Std.Wrappers._IOption<DAST._IExpression> witnessExpr, Dafny.ISequence<DAST._IAttribute> attributes) {
      return new Newtype(name, typeParams, @base, range, witnessStmts, witnessExpr, attributes);
    }
    public static _INewtype create_Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, DAST._INewtypeRange range, Dafny.ISequence<DAST._IStatement> witnessStmts, Std.Wrappers._IOption<DAST._IExpression> witnessExpr, Dafny.ISequence<DAST._IAttribute> attributes) {
      return create(name, typeParams, @base, range, witnessStmts, witnessExpr, attributes);
    }
    public bool is_Newtype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public DAST._IType dtor_base {
      get {
        return this._base;
      }
    }
    public DAST._INewtypeRange dtor_range {
      get {
        return this._range;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_witnessStmts {
      get {
        return this._witnessStmts;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_witnessExpr {
      get {
        return this._witnessExpr;
      }
    }
    public Dafny.ISequence<DAST._IAttribute> dtor_attributes {
      get {
        return this._attributes;
      }
    }
  }

  public interface _IClassItem {
    bool is_Method { get; }
    DAST._IMethod dtor_Method_a0 { get; }
  }
  public class ClassItem : _IClassItem {
    public readonly DAST._IMethod _a0;
    public ClassItem(DAST._IMethod _a0) {
      this._a0 = _a0;
    }
    public static DAST._IMethod DowncastClone(DAST._IMethod _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ClassItem;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ClassItem.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = DAST.Method.Default();
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClassItem create(DAST._IMethod _a0) {
      return new ClassItem(_a0);
    }
    public static _IClassItem create_Method(DAST._IMethod _a0) {
      return create(_a0);
    }
    public bool is_Method { get { return true; } }
    public DAST._IMethod dtor_Method_a0 {
      get {
        return this._a0;
      }
    }
  }

  public interface _IField {
    bool is_Field { get; }
    DAST._IFormal dtor_formal { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_defaultValue { get; }
    _IField DowncastClone();
  }
  public class Field : _IField {
    public readonly DAST._IFormal _formal;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _defaultValue;
    public Field(DAST._IFormal formal, Std.Wrappers._IOption<DAST._IExpression> defaultValue) {
      this._formal = formal;
      this._defaultValue = defaultValue;
    }
    public _IField DowncastClone() {
      if (this is _IField dt) { return dt; }
      return new Field(_formal, _defaultValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Field;
      return oth != null && object.Equals(this._formal, oth._formal) && object.Equals(this._defaultValue, oth._defaultValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formal));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._defaultValue));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Field.Field";
      s += "(";
      s += Dafny.Helpers.ToString(this._formal);
      s += ", ";
      s += Dafny.Helpers.ToString(this._defaultValue);
      s += ")";
      return s;
    }
    private static readonly DAST._IField theDefault = create(DAST.Formal.Default(), Std.Wrappers.Option<DAST._IExpression>.Default());
    public static DAST._IField Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IField> _TYPE = new Dafny.TypeDescriptor<DAST._IField>(DAST.Field.Default());
    public static Dafny.TypeDescriptor<DAST._IField> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IField create(DAST._IFormal formal, Std.Wrappers._IOption<DAST._IExpression> defaultValue) {
      return new Field(formal, defaultValue);
    }
    public static _IField create_Field(DAST._IFormal formal, Std.Wrappers._IOption<DAST._IExpression> defaultValue) {
      return create(formal, defaultValue);
    }
    public bool is_Field { get { return true; } }
    public DAST._IFormal dtor_formal {
      get {
        return this._formal;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_defaultValue {
      get {
        return this._defaultValue;
      }
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    _IFormal DowncastClone();
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      this._name = name;
      this._typ = typ;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
    private static readonly DAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default());
    public static DAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IFormal> _TYPE = new Dafny.TypeDescriptor<DAST._IFormal>(DAST.Formal.Default());
    public static Dafny.TypeDescriptor<DAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return new Formal(name, typ);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return create(name, typ);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        return this._typ;
      }
    }
  }

  public interface _IMethod {
    bool is_Method { get; }
    bool dtor_isStatic { get; }
    bool dtor_hasBody { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<DAST._IType> dtor_outTypes { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars { get; }
    _IMethod DowncastClone();
  }
  public class Method : _IMethod {
    public readonly bool _isStatic;
    public readonly bool _hasBody;
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _overridingPath;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public readonly Dafny.ISequence<DAST._IType> _outTypes;
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outVars;
    public Method(bool isStatic, bool hasBody, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      this._isStatic = isStatic;
      this._hasBody = hasBody;
      this._overridingPath = overridingPath;
      this._name = name;
      this._typeParams = typeParams;
      this._params = @params;
      this._body = body;
      this._outTypes = outTypes;
      this._outVars = outVars;
    }
    public _IMethod DowncastClone() {
      if (this is _IMethod dt) { return dt; }
      return new Method(_isStatic, _hasBody, _overridingPath, _name, _typeParams, _params, _body, _outTypes, _outVars);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Method;
      return oth != null && this._isStatic == oth._isStatic && this._hasBody == oth._hasBody && object.Equals(this._overridingPath, oth._overridingPath) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._params, oth._params) && object.Equals(this._body, oth._body) && object.Equals(this._outTypes, oth._outTypes) && object.Equals(this._outVars, oth._outVars);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasBody));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._overridingPath));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outTypes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outVars));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Method.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasBody);
      s += ", ";
      s += Dafny.Helpers.ToString(this._overridingPath);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outTypes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outVars);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = create(false, false, Std.Wrappers.Option<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, Dafny.Sequence<DAST._IStatement>.Empty, Dafny.Sequence<DAST._IType>.Empty, Std.Wrappers.Option<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default());
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMethod create(bool isStatic, bool hasBody, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return new Method(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public static _IMethod create_Method(bool isStatic, bool hasBody, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return create(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public bool is_Method { get { return true; } }
    public bool dtor_isStatic {
      get {
        return this._isStatic;
      }
    }
    public bool dtor_hasBody {
      get {
        return this._hasBody;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath {
      get {
        return this._overridingPath;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        return this._params;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_outTypes {
      get {
        return this._outTypes;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars {
      get {
        return this._outVars;
      }
    }
  }

  public interface _ICallName {
    bool is_Name { get; }
    bool is_MapBuilderAdd { get; }
    bool is_MapBuilderBuild { get; }
    bool is_SetBuilderAdd { get; }
    bool is_SetBuilderBuild { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    _ICallName DowncastClone();
  }
  public abstract class CallName : _ICallName {
    public CallName() {
    }
    private static readonly DAST._ICallName theDefault = create_Name(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAST._ICallName Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ICallName> _TYPE = new Dafny.TypeDescriptor<DAST._ICallName>(DAST.CallName.Default());
    public static Dafny.TypeDescriptor<DAST._ICallName> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICallName create_Name(Dafny.ISequence<Dafny.Rune> name) {
      return new CallName_Name(name);
    }
    public static _ICallName create_MapBuilderAdd() {
      return new CallName_MapBuilderAdd();
    }
    public static _ICallName create_MapBuilderBuild() {
      return new CallName_MapBuilderBuild();
    }
    public static _ICallName create_SetBuilderAdd() {
      return new CallName_SetBuilderAdd();
    }
    public static _ICallName create_SetBuilderBuild() {
      return new CallName_SetBuilderBuild();
    }
    public bool is_Name { get { return this is CallName_Name; } }
    public bool is_MapBuilderAdd { get { return this is CallName_MapBuilderAdd; } }
    public bool is_MapBuilderBuild { get { return this is CallName_MapBuilderBuild; } }
    public bool is_SetBuilderAdd { get { return this is CallName_SetBuilderAdd; } }
    public bool is_SetBuilderBuild { get { return this is CallName_SetBuilderBuild; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        return ((CallName_Name)d)._name;
      }
    }
    public abstract _ICallName DowncastClone();
  }
  public class CallName_Name : CallName {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public CallName_Name(Dafny.ISequence<Dafny.Rune> name) : base() {
      this._name = name;
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_Name(_name);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_Name;
      return oth != null && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.Name";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class CallName_MapBuilderAdd : CallName {
    public CallName_MapBuilderAdd() : base() {
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_MapBuilderAdd();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_MapBuilderAdd;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.MapBuilderAdd";
      return s;
    }
  }
  public class CallName_MapBuilderBuild : CallName {
    public CallName_MapBuilderBuild() : base() {
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_MapBuilderBuild();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_MapBuilderBuild;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.MapBuilderBuild";
      return s;
    }
  }
  public class CallName_SetBuilderAdd : CallName {
    public CallName_SetBuilderAdd() : base() {
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_SetBuilderAdd();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_SetBuilderAdd;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.SetBuilderAdd";
      return s;
    }
  }
  public class CallName_SetBuilderBuild : CallName {
    public CallName_SetBuilderBuild() : base() {
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_SetBuilderBuild();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_SetBuilderBuild;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.SetBuilderBuild";
      return s;
    }
  }

  public interface _IStatement {
    bool is_DeclareVar { get; }
    bool is_Assign { get; }
    bool is_If { get; }
    bool is_Labeled { get; }
    bool is_While { get; }
    bool is_Foreach { get; }
    bool is_Call { get; }
    bool is_Return { get; }
    bool is_EarlyReturn { get; }
    bool is_Break { get; }
    bool is_TailRecursive { get; }
    bool is_JumpTailCallStart { get; }
    bool is_Halt { get; }
    bool is_Print { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_maybeValue { get; }
    DAST._IAssignLhs dtor_lhs { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IExpression dtor_cond { get; }
    Dafny.ISequence<DAST._IStatement> dtor_thn { get; }
    Dafny.ISequence<DAST._IStatement> dtor_els { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_boundName { get; }
    DAST._IType dtor_boundType { get; }
    DAST._IExpression dtor_over { get; }
    DAST._IExpression dtor_on { get; }
    DAST._ICallName dtor_callName { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs { get; }
    DAST._IExpression dtor_expr { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_toLabel { get; }
    DAST._IExpression dtor_Print_a0 { get; }
    _IStatement DowncastClone();
  }
  public abstract class Statement : _IStatement {
    public Statement() {
    }
    private static readonly DAST._IStatement theDefault = create_DeclareVar(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default(), Std.Wrappers.Option<DAST._IExpression>.Default());
    public static DAST._IStatement Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IStatement> _TYPE = new Dafny.TypeDescriptor<DAST._IStatement>(DAST.Statement.Default());
    public static Dafny.TypeDescriptor<DAST._IStatement> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStatement create_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, Std.Wrappers._IOption<DAST._IExpression> maybeValue) {
      return new Statement_DeclareVar(name, typ, maybeValue);
    }
    public static _IStatement create_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) {
      return new Statement_Assign(lhs, @value);
    }
    public static _IStatement create_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) {
      return new Statement_If(cond, thn, els);
    }
    public static _IStatement create_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Labeled(lbl, body);
    }
    public static _IStatement create_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_While(cond, body);
    }
    public static _IStatement create_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Foreach(boundName, boundType, over, body);
    }
    public static _IStatement create_Call(DAST._IExpression @on, DAST._ICallName callName, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) {
      return new Statement_Call(@on, callName, typeArgs, args, outs);
    }
    public static _IStatement create_Return(DAST._IExpression expr) {
      return new Statement_Return(expr);
    }
    public static _IStatement create_EarlyReturn() {
      return new Statement_EarlyReturn();
    }
    public static _IStatement create_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> toLabel) {
      return new Statement_Break(toLabel);
    }
    public static _IStatement create_TailRecursive(Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_TailRecursive(body);
    }
    public static _IStatement create_JumpTailCallStart() {
      return new Statement_JumpTailCallStart();
    }
    public static _IStatement create_Halt() {
      return new Statement_Halt();
    }
    public static _IStatement create_Print(DAST._IExpression _a0) {
      return new Statement_Print(_a0);
    }
    public bool is_DeclareVar { get { return this is Statement_DeclareVar; } }
    public bool is_Assign { get { return this is Statement_Assign; } }
    public bool is_If { get { return this is Statement_If; } }
    public bool is_Labeled { get { return this is Statement_Labeled; } }
    public bool is_While { get { return this is Statement_While; } }
    public bool is_Foreach { get { return this is Statement_Foreach; } }
    public bool is_Call { get { return this is Statement_Call; } }
    public bool is_Return { get { return this is Statement_Return; } }
    public bool is_EarlyReturn { get { return this is Statement_EarlyReturn; } }
    public bool is_Break { get { return this is Statement_Break; } }
    public bool is_TailRecursive { get { return this is Statement_TailRecursive; } }
    public bool is_JumpTailCallStart { get { return this is Statement_JumpTailCallStart; } }
    public bool is_Halt { get { return this is Statement_Halt; } }
    public bool is_Print { get { return this is Statement_Print; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._typ;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_maybeValue {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._maybeValue;
      }
    }
    public DAST._IAssignLhs dtor_lhs {
      get {
        var d = this;
        return ((Statement_Assign)d)._lhs;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        return ((Statement_Assign)d)._value;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        if (d is Statement_If) { return ((Statement_If)d)._cond; }
        return ((Statement_While)d)._cond;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_thn {
      get {
        var d = this;
        return ((Statement_If)d)._thn;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_els {
      get {
        var d = this;
        return ((Statement_If)d)._els;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Statement_Labeled)d)._lbl;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        if (d is Statement_Labeled) { return ((Statement_Labeled)d)._body; }
        if (d is Statement_While) { return ((Statement_While)d)._body; }
        if (d is Statement_Foreach) { return ((Statement_Foreach)d)._body; }
        return ((Statement_TailRecursive)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_boundName {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundName;
      }
    }
    public DAST._IType dtor_boundType {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundType;
      }
    }
    public DAST._IExpression dtor_over {
      get {
        var d = this;
        return ((Statement_Foreach)d)._over;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        return ((Statement_Call)d)._on;
      }
    }
    public DAST._ICallName dtor_callName {
      get {
        var d = this;
        return ((Statement_Call)d)._callName;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Statement_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        return ((Statement_Call)d)._args;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs {
      get {
        var d = this;
        return ((Statement_Call)d)._outs;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        return ((Statement_Return)d)._expr;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_toLabel {
      get {
        var d = this;
        return ((Statement_Break)d)._toLabel;
      }
    }
    public DAST._IExpression dtor_Print_a0 {
      get {
        var d = this;
        return ((Statement_Print)d)._a0;
      }
    }
    public abstract _IStatement DowncastClone();
  }
  public class Statement_DeclareVar : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _maybeValue;
    public Statement_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, Std.Wrappers._IOption<DAST._IExpression> maybeValue) : base() {
      this._name = name;
      this._typ = typ;
      this._maybeValue = maybeValue;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_DeclareVar(_name, _typ, _maybeValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_DeclareVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._maybeValue, oth._maybeValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._maybeValue));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.DeclareVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._maybeValue);
      s += ")";
      return s;
    }
  }
  public class Statement_Assign : Statement {
    public readonly DAST._IAssignLhs _lhs;
    public readonly DAST._IExpression _value;
    public Statement_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) : base() {
      this._lhs = lhs;
      this._value = @value;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Assign(_lhs, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Assign;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Assign";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Statement_If : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _thn;
    public readonly Dafny.ISequence<DAST._IStatement> _els;
    public Statement_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_If(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_If;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.If";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Statement_Labeled : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._lbl = lbl;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Labeled(_lbl, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Labeled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Labeled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_While : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._cond = cond;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_While(_cond, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_While;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.While";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Foreach : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _boundName;
    public readonly DAST._IType _boundType;
    public readonly DAST._IExpression _over;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._boundName = boundName;
      this._boundType = boundType;
      this._over = over;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Foreach(_boundName, _boundType, _over, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Foreach;
      return oth != null && object.Equals(this._boundName, oth._boundName) && object.Equals(this._boundType, oth._boundType) && object.Equals(this._over, oth._over) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._over));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Foreach";
      s += "(";
      s += this._boundName.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._boundType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._over);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Call : Statement {
    public readonly DAST._IExpression _on;
    public readonly DAST._ICallName _callName;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outs;
    public Statement_Call(DAST._IExpression @on, DAST._ICallName callName, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) : base() {
      this._on = @on;
      this._callName = callName;
      this._typeArgs = typeArgs;
      this._args = args;
      this._outs = outs;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Call(_on, _callName, _typeArgs, _args, _outs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._callName, oth._callName) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args) && object.Equals(this._outs, oth._outs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._callName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._callName);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outs);
      s += ")";
      return s;
    }
  }
  public class Statement_Return : Statement {
    public readonly DAST._IExpression _expr;
    public Statement_Return(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Return(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Return;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Statement_EarlyReturn : Statement {
    public Statement_EarlyReturn() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_EarlyReturn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_EarlyReturn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.EarlyReturn";
      return s;
    }
  }
  public class Statement_Break : Statement {
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _toLabel;
    public Statement_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> toLabel) : base() {
      this._toLabel = toLabel;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Break(_toLabel);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Break;
      return oth != null && object.Equals(this._toLabel, oth._toLabel);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._toLabel));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._toLabel);
      s += ")";
      return s;
    }
  }
  public class Statement_TailRecursive : Statement {
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_TailRecursive(Dafny.ISequence<DAST._IStatement> body) : base() {
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_TailRecursive(_body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_TailRecursive;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.TailRecursive";
      s += "(";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_JumpTailCallStart : Statement {
    public Statement_JumpTailCallStart() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_JumpTailCallStart();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_JumpTailCallStart;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.JumpTailCallStart";
      return s;
    }
  }
  public class Statement_Halt : Statement {
    public Statement_Halt() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Halt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Halt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Halt";
      return s;
    }
  }
  public class Statement_Print : Statement {
    public readonly DAST._IExpression _a0;
    public Statement_Print(DAST._IExpression _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Print(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Print;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IAssignLhs {
    bool is_Ident { get; }
    bool is_Select { get; }
    bool is_Index { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    DAST._IExpression dtor_expr { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    _IAssignLhs DowncastClone();
  }
  public abstract class AssignLhs : _IAssignLhs {
    public AssignLhs() {
    }
    private static readonly DAST._IAssignLhs theDefault = create_Ident(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAST._IAssignLhs Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IAssignLhs> _TYPE = new Dafny.TypeDescriptor<DAST._IAssignLhs>(DAST.AssignLhs.Default());
    public static Dafny.TypeDescriptor<DAST._IAssignLhs> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignLhs create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new AssignLhs_Ident(_a0);
    }
    public static _IAssignLhs create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) {
      return new AssignLhs_Select(expr, field);
    }
    public static _IAssignLhs create_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) {
      return new AssignLhs_Index(expr, indices);
    }
    public bool is_Ident { get { return this is AssignLhs_Ident; } }
    public bool is_Select { get { return this is AssignLhs_Select; } }
    public bool is_Index { get { return this is AssignLhs_Index; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((AssignLhs_Ident)d)._a0;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is AssignLhs_Select) { return ((AssignLhs_Select)d)._expr; }
        return ((AssignLhs_Index)d)._expr;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((AssignLhs_Select)d)._field;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((AssignLhs_Index)d)._indices;
      }
    }
    public abstract _IAssignLhs DowncastClone();
  }
  public class AssignLhs_Ident : AssignLhs {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public AssignLhs_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Ident";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Select : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public AssignLhs_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._expr = expr;
      this._field = field;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Select(_expr, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Index : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public AssignLhs_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._indices = indices;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Index(_expr, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }

  public interface _ICollKind {
    bool is_Seq { get; }
    bool is_Array { get; }
    bool is_Map { get; }
    _ICollKind DowncastClone();
  }
  public abstract class CollKind : _ICollKind {
    public CollKind() {
    }
    private static readonly DAST._ICollKind theDefault = create_Seq();
    public static DAST._ICollKind Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ICollKind> _TYPE = new Dafny.TypeDescriptor<DAST._ICollKind>(DAST.CollKind.Default());
    public static Dafny.TypeDescriptor<DAST._ICollKind> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICollKind create_Seq() {
      return new CollKind_Seq();
    }
    public static _ICollKind create_Array() {
      return new CollKind_Array();
    }
    public static _ICollKind create_Map() {
      return new CollKind_Map();
    }
    public bool is_Seq { get { return this is CollKind_Seq; } }
    public bool is_Array { get { return this is CollKind_Array; } }
    public bool is_Map { get { return this is CollKind_Map; } }
    public static System.Collections.Generic.IEnumerable<_ICollKind> AllSingletonConstructors {
      get {
        yield return CollKind.create_Seq();
        yield return CollKind.create_Array();
        yield return CollKind.create_Map();
      }
    }
    public abstract _ICollKind DowncastClone();
  }
  public class CollKind_Seq : CollKind {
    public CollKind_Seq() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Seq();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Seq;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Seq";
      return s;
    }
  }
  public class CollKind_Array : CollKind {
    public CollKind_Array() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Array();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Array;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Array";
      return s;
    }
  }
  public class CollKind_Map : CollKind {
    public CollKind_Map() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Map();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Map;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Map";
      return s;
    }
  }

  public interface _IBinOp {
    bool is_Eq { get; }
    bool is_Div { get; }
    bool is_EuclidianDiv { get; }
    bool is_Mod { get; }
    bool is_EuclidianMod { get; }
    bool is_Lt { get; }
    bool is_LtChar { get; }
    bool is_Plus { get; }
    bool is_Minus { get; }
    bool is_Times { get; }
    bool is_BitwiseAnd { get; }
    bool is_BitwiseOr { get; }
    bool is_BitwiseXor { get; }
    bool is_BitwiseShiftRight { get; }
    bool is_BitwiseShiftLeft { get; }
    bool is_And { get; }
    bool is_Or { get; }
    bool is_In { get; }
    bool is_SeqProperPrefix { get; }
    bool is_SeqPrefix { get; }
    bool is_SetMerge { get; }
    bool is_SetSubtraction { get; }
    bool is_SetIntersection { get; }
    bool is_Subset { get; }
    bool is_ProperSubset { get; }
    bool is_SetDisjoint { get; }
    bool is_MapMerge { get; }
    bool is_MapSubtraction { get; }
    bool is_MultisetMerge { get; }
    bool is_MultisetSubtraction { get; }
    bool is_MultisetIntersection { get; }
    bool is_Submultiset { get; }
    bool is_ProperSubmultiset { get; }
    bool is_MultisetDisjoint { get; }
    bool is_Concat { get; }
    bool is_Passthrough { get; }
    bool dtor_referential { get; }
    bool dtor_nullable { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    _IBinOp DowncastClone();
  }
  public abstract class BinOp : _IBinOp {
    public BinOp() {
    }
    private static readonly DAST._IBinOp theDefault = create_Eq(false, false);
    public static DAST._IBinOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IBinOp> _TYPE = new Dafny.TypeDescriptor<DAST._IBinOp>(DAST.BinOp.Default());
    public static Dafny.TypeDescriptor<DAST._IBinOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinOp create_Eq(bool referential, bool nullable) {
      return new BinOp_Eq(referential, nullable);
    }
    public static _IBinOp create_Div() {
      return new BinOp_Div();
    }
    public static _IBinOp create_EuclidianDiv() {
      return new BinOp_EuclidianDiv();
    }
    public static _IBinOp create_Mod() {
      return new BinOp_Mod();
    }
    public static _IBinOp create_EuclidianMod() {
      return new BinOp_EuclidianMod();
    }
    public static _IBinOp create_Lt() {
      return new BinOp_Lt();
    }
    public static _IBinOp create_LtChar() {
      return new BinOp_LtChar();
    }
    public static _IBinOp create_Plus() {
      return new BinOp_Plus();
    }
    public static _IBinOp create_Minus() {
      return new BinOp_Minus();
    }
    public static _IBinOp create_Times() {
      return new BinOp_Times();
    }
    public static _IBinOp create_BitwiseAnd() {
      return new BinOp_BitwiseAnd();
    }
    public static _IBinOp create_BitwiseOr() {
      return new BinOp_BitwiseOr();
    }
    public static _IBinOp create_BitwiseXor() {
      return new BinOp_BitwiseXor();
    }
    public static _IBinOp create_BitwiseShiftRight() {
      return new BinOp_BitwiseShiftRight();
    }
    public static _IBinOp create_BitwiseShiftLeft() {
      return new BinOp_BitwiseShiftLeft();
    }
    public static _IBinOp create_And() {
      return new BinOp_And();
    }
    public static _IBinOp create_Or() {
      return new BinOp_Or();
    }
    public static _IBinOp create_In() {
      return new BinOp_In();
    }
    public static _IBinOp create_SeqProperPrefix() {
      return new BinOp_SeqProperPrefix();
    }
    public static _IBinOp create_SeqPrefix() {
      return new BinOp_SeqPrefix();
    }
    public static _IBinOp create_SetMerge() {
      return new BinOp_SetMerge();
    }
    public static _IBinOp create_SetSubtraction() {
      return new BinOp_SetSubtraction();
    }
    public static _IBinOp create_SetIntersection() {
      return new BinOp_SetIntersection();
    }
    public static _IBinOp create_Subset() {
      return new BinOp_Subset();
    }
    public static _IBinOp create_ProperSubset() {
      return new BinOp_ProperSubset();
    }
    public static _IBinOp create_SetDisjoint() {
      return new BinOp_SetDisjoint();
    }
    public static _IBinOp create_MapMerge() {
      return new BinOp_MapMerge();
    }
    public static _IBinOp create_MapSubtraction() {
      return new BinOp_MapSubtraction();
    }
    public static _IBinOp create_MultisetMerge() {
      return new BinOp_MultisetMerge();
    }
    public static _IBinOp create_MultisetSubtraction() {
      return new BinOp_MultisetSubtraction();
    }
    public static _IBinOp create_MultisetIntersection() {
      return new BinOp_MultisetIntersection();
    }
    public static _IBinOp create_Submultiset() {
      return new BinOp_Submultiset();
    }
    public static _IBinOp create_ProperSubmultiset() {
      return new BinOp_ProperSubmultiset();
    }
    public static _IBinOp create_MultisetDisjoint() {
      return new BinOp_MultisetDisjoint();
    }
    public static _IBinOp create_Concat() {
      return new BinOp_Concat();
    }
    public static _IBinOp create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new BinOp_Passthrough(_a0);
    }
    public bool is_Eq { get { return this is BinOp_Eq; } }
    public bool is_Div { get { return this is BinOp_Div; } }
    public bool is_EuclidianDiv { get { return this is BinOp_EuclidianDiv; } }
    public bool is_Mod { get { return this is BinOp_Mod; } }
    public bool is_EuclidianMod { get { return this is BinOp_EuclidianMod; } }
    public bool is_Lt { get { return this is BinOp_Lt; } }
    public bool is_LtChar { get { return this is BinOp_LtChar; } }
    public bool is_Plus { get { return this is BinOp_Plus; } }
    public bool is_Minus { get { return this is BinOp_Minus; } }
    public bool is_Times { get { return this is BinOp_Times; } }
    public bool is_BitwiseAnd { get { return this is BinOp_BitwiseAnd; } }
    public bool is_BitwiseOr { get { return this is BinOp_BitwiseOr; } }
    public bool is_BitwiseXor { get { return this is BinOp_BitwiseXor; } }
    public bool is_BitwiseShiftRight { get { return this is BinOp_BitwiseShiftRight; } }
    public bool is_BitwiseShiftLeft { get { return this is BinOp_BitwiseShiftLeft; } }
    public bool is_And { get { return this is BinOp_And; } }
    public bool is_Or { get { return this is BinOp_Or; } }
    public bool is_In { get { return this is BinOp_In; } }
    public bool is_SeqProperPrefix { get { return this is BinOp_SeqProperPrefix; } }
    public bool is_SeqPrefix { get { return this is BinOp_SeqPrefix; } }
    public bool is_SetMerge { get { return this is BinOp_SetMerge; } }
    public bool is_SetSubtraction { get { return this is BinOp_SetSubtraction; } }
    public bool is_SetIntersection { get { return this is BinOp_SetIntersection; } }
    public bool is_Subset { get { return this is BinOp_Subset; } }
    public bool is_ProperSubset { get { return this is BinOp_ProperSubset; } }
    public bool is_SetDisjoint { get { return this is BinOp_SetDisjoint; } }
    public bool is_MapMerge { get { return this is BinOp_MapMerge; } }
    public bool is_MapSubtraction { get { return this is BinOp_MapSubtraction; } }
    public bool is_MultisetMerge { get { return this is BinOp_MultisetMerge; } }
    public bool is_MultisetSubtraction { get { return this is BinOp_MultisetSubtraction; } }
    public bool is_MultisetIntersection { get { return this is BinOp_MultisetIntersection; } }
    public bool is_Submultiset { get { return this is BinOp_Submultiset; } }
    public bool is_ProperSubmultiset { get { return this is BinOp_ProperSubmultiset; } }
    public bool is_MultisetDisjoint { get { return this is BinOp_MultisetDisjoint; } }
    public bool is_Concat { get { return this is BinOp_Concat; } }
    public bool is_Passthrough { get { return this is BinOp_Passthrough; } }
    public bool dtor_referential {
      get {
        var d = this;
        return ((BinOp_Eq)d)._referential;
      }
    }
    public bool dtor_nullable {
      get {
        var d = this;
        return ((BinOp_Eq)d)._nullable;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((BinOp_Passthrough)d)._a0;
      }
    }
    public abstract _IBinOp DowncastClone();
  }
  public class BinOp_Eq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Eq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Eq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Eq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Eq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Div : BinOp {
    public BinOp_Div() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Div();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Div;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Div";
      return s;
    }
  }
  public class BinOp_EuclidianDiv : BinOp {
    public BinOp_EuclidianDiv() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianDiv();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianDiv;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianDiv";
      return s;
    }
  }
  public class BinOp_Mod : BinOp {
    public BinOp_Mod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Mod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Mod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Mod";
      return s;
    }
  }
  public class BinOp_EuclidianMod : BinOp {
    public BinOp_EuclidianMod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianMod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianMod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianMod";
      return s;
    }
  }
  public class BinOp_Lt : BinOp {
    public BinOp_Lt() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Lt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Lt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Lt";
      return s;
    }
  }
  public class BinOp_LtChar : BinOp {
    public BinOp_LtChar() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_LtChar();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_LtChar;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.LtChar";
      return s;
    }
  }
  public class BinOp_Plus : BinOp {
    public BinOp_Plus() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Plus();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Plus;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Plus";
      return s;
    }
  }
  public class BinOp_Minus : BinOp {
    public BinOp_Minus() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Minus();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Minus;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Minus";
      return s;
    }
  }
  public class BinOp_Times : BinOp {
    public BinOp_Times() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Times();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Times;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Times";
      return s;
    }
  }
  public class BinOp_BitwiseAnd : BinOp {
    public BinOp_BitwiseAnd() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseAnd();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseAnd;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseAnd";
      return s;
    }
  }
  public class BinOp_BitwiseOr : BinOp {
    public BinOp_BitwiseOr() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseOr();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseOr;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseOr";
      return s;
    }
  }
  public class BinOp_BitwiseXor : BinOp {
    public BinOp_BitwiseXor() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseXor();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseXor;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseXor";
      return s;
    }
  }
  public class BinOp_BitwiseShiftRight : BinOp {
    public BinOp_BitwiseShiftRight() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseShiftRight();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseShiftRight;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseShiftRight";
      return s;
    }
  }
  public class BinOp_BitwiseShiftLeft : BinOp {
    public BinOp_BitwiseShiftLeft() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseShiftLeft();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseShiftLeft;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseShiftLeft";
      return s;
    }
  }
  public class BinOp_And : BinOp {
    public BinOp_And() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_And();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_And;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.And";
      return s;
    }
  }
  public class BinOp_Or : BinOp {
    public BinOp_Or() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Or();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Or;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Or";
      return s;
    }
  }
  public class BinOp_In : BinOp {
    public BinOp_In() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_In();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_In;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.In";
      return s;
    }
  }
  public class BinOp_SeqProperPrefix : BinOp {
    public BinOp_SeqProperPrefix() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SeqProperPrefix();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SeqProperPrefix;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SeqProperPrefix";
      return s;
    }
  }
  public class BinOp_SeqPrefix : BinOp {
    public BinOp_SeqPrefix() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SeqPrefix();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SeqPrefix;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SeqPrefix";
      return s;
    }
  }
  public class BinOp_SetMerge : BinOp {
    public BinOp_SetMerge() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetMerge();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetMerge;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetMerge";
      return s;
    }
  }
  public class BinOp_SetSubtraction : BinOp {
    public BinOp_SetSubtraction() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetSubtraction();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetSubtraction;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetSubtraction";
      return s;
    }
  }
  public class BinOp_SetIntersection : BinOp {
    public BinOp_SetIntersection() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetIntersection();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetIntersection;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetIntersection";
      return s;
    }
  }
  public class BinOp_Subset : BinOp {
    public BinOp_Subset() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Subset();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Subset;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Subset";
      return s;
    }
  }
  public class BinOp_ProperSubset : BinOp {
    public BinOp_ProperSubset() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_ProperSubset();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_ProperSubset;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.ProperSubset";
      return s;
    }
  }
  public class BinOp_SetDisjoint : BinOp {
    public BinOp_SetDisjoint() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetDisjoint();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetDisjoint;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetDisjoint";
      return s;
    }
  }
  public class BinOp_MapMerge : BinOp {
    public BinOp_MapMerge() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MapMerge();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MapMerge;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 26;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MapMerge";
      return s;
    }
  }
  public class BinOp_MapSubtraction : BinOp {
    public BinOp_MapSubtraction() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MapSubtraction();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MapSubtraction;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 27;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MapSubtraction";
      return s;
    }
  }
  public class BinOp_MultisetMerge : BinOp {
    public BinOp_MultisetMerge() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MultisetMerge();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MultisetMerge;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 28;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MultisetMerge";
      return s;
    }
  }
  public class BinOp_MultisetSubtraction : BinOp {
    public BinOp_MultisetSubtraction() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MultisetSubtraction();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MultisetSubtraction;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 29;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MultisetSubtraction";
      return s;
    }
  }
  public class BinOp_MultisetIntersection : BinOp {
    public BinOp_MultisetIntersection() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MultisetIntersection();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MultisetIntersection;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 30;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MultisetIntersection";
      return s;
    }
  }
  public class BinOp_Submultiset : BinOp {
    public BinOp_Submultiset() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Submultiset();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Submultiset;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 31;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Submultiset";
      return s;
    }
  }
  public class BinOp_ProperSubmultiset : BinOp {
    public BinOp_ProperSubmultiset() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_ProperSubmultiset();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_ProperSubmultiset;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 32;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.ProperSubmultiset";
      return s;
    }
  }
  public class BinOp_MultisetDisjoint : BinOp {
    public BinOp_MultisetDisjoint() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MultisetDisjoint();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MultisetDisjoint;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 33;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MultisetDisjoint";
      return s;
    }
  }
  public class BinOp_Concat : BinOp {
    public BinOp_Concat() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Concat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Concat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 34;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Concat";
      return s;
    }
  }
  public class BinOp_Passthrough : BinOp {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public BinOp_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 35;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IExpression {
    bool is_Literal { get; }
    bool is_Ident { get; }
    bool is_Companion { get; }
    bool is_Tuple { get; }
    bool is_New { get; }
    bool is_NewArray { get; }
    bool is_DatatypeValue { get; }
    bool is_Convert { get; }
    bool is_SeqConstruct { get; }
    bool is_SeqValue { get; }
    bool is_SetValue { get; }
    bool is_MultisetValue { get; }
    bool is_MapValue { get; }
    bool is_MapBuilder { get; }
    bool is_SeqUpdate { get; }
    bool is_MapUpdate { get; }
    bool is_SetBuilder { get; }
    bool is_ToMultiset { get; }
    bool is_This { get; }
    bool is_Ite { get; }
    bool is_UnOp { get; }
    bool is_BinOp { get; }
    bool is_ArrayLen { get; }
    bool is_MapKeys { get; }
    bool is_MapValues { get; }
    bool is_Select { get; }
    bool is_SelectFn { get; }
    bool is_Index { get; }
    bool is_IndexRange { get; }
    bool is_TupleSelect { get; }
    bool is_Call { get; }
    bool is_Lambda { get; }
    bool is_BetaRedex { get; }
    bool is_IIFE { get; }
    bool is_Apply { get; }
    bool is_TypeTest { get; }
    bool is_InitializationValue { get; }
    bool is_BoolBoundedPool { get; }
    bool is_SetBoundedPool { get; }
    bool is_SeqBoundedPool { get; }
    bool is_IntRange { get; }
    DAST._ILiteral dtor_Literal_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 { get; }
    Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Dafny.ISequence<DAST._IExpression> dtor_dims { get; }
    DAST._IType dtor_typ { get; }
    DAST._IDatatypeType dtor_datatypeType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_variant { get; }
    bool dtor_isCo { get; }
    Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IType dtor_from { get; }
    DAST._IExpression dtor_length { get; }
    DAST._IExpression dtor_elem { get; }
    Dafny.ISequence<DAST._IExpression> dtor_elements { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems { get; }
    DAST._IType dtor_keyType { get; }
    DAST._IType dtor_valueType { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IExpression dtor_indexExpr { get; }
    DAST._IType dtor_elemType { get; }
    DAST._IExpression dtor_ToMultiset_a0 { get; }
    DAST._IExpression dtor_cond { get; }
    DAST._IExpression dtor_thn { get; }
    DAST._IExpression dtor_els { get; }
    DAST._IUnaryOp dtor_unOp { get; }
    DAST.Format._IUnOpFormat dtor_format1 { get; }
    DAST._IBinOp dtor_op { get; }
    DAST._IExpression dtor_left { get; }
    DAST._IExpression dtor_right { get; }
    DAST.Format._IBinOpFormat dtor_format2 { get; }
    BigInteger dtor_dim { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    bool dtor_isConstant { get; }
    bool dtor_onDatatype { get; }
    bool dtor_isStatic { get; }
    BigInteger dtor_arity { get; }
    DAST._ICollKind dtor_collKind { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    bool dtor_isArray { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_low { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_high { get; }
    BigInteger dtor_index { get; }
    DAST._IExpression dtor_on { get; }
    DAST._ICallName dtor_callName { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    DAST._IType dtor_retType { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IExpression dtor_iifeBody { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType { get; }
    DAST._IExpression dtor_of { get; }
    bool dtor_includeDuplicates { get; }
    DAST._IExpression dtor_lo { get; }
    DAST._IExpression dtor_hi { get; }
    _IExpression DowncastClone();
  }
  public abstract class Expression : _IExpression {
    public Expression() {
    }
    private static readonly DAST._IExpression theDefault = create_Literal(DAST.Literal.Default());
    public static DAST._IExpression Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IExpression> _TYPE = new Dafny.TypeDescriptor<DAST._IExpression>(DAST.Expression.Default());
    public static Dafny.TypeDescriptor<DAST._IExpression> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpression create_Literal(DAST._ILiteral _a0) {
      return new Expression_Literal(_a0);
    }
    public static _IExpression create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expression_Ident(_a0);
    }
    public static _IExpression create_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) {
      return new Expression_Companion(_a0);
    }
    public static _IExpression create_Tuple(Dafny.ISequence<DAST._IExpression> _a0) {
      return new Expression_Tuple(_a0);
    }
    public static _IExpression create_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_New(path, typeArgs, args);
    }
    public static _IExpression create_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) {
      return new Expression_NewArray(dims, typ);
    }
    public static _IExpression create_DatatypeValue(DAST._IDatatypeType datatypeType, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) {
      return new Expression_DatatypeValue(datatypeType, typeArgs, variant, isCo, contents);
    }
    public static _IExpression create_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) {
      return new Expression_Convert(@value, @from, typ);
    }
    public static _IExpression create_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) {
      return new Expression_SeqConstruct(length, elem);
    }
    public static _IExpression create_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) {
      return new Expression_SeqValue(elements, typ);
    }
    public static _IExpression create_SetValue(Dafny.ISequence<DAST._IExpression> elements) {
      return new Expression_SetValue(elements);
    }
    public static _IExpression create_MultisetValue(Dafny.ISequence<DAST._IExpression> elements) {
      return new Expression_MultisetValue(elements);
    }
    public static _IExpression create_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) {
      return new Expression_MapValue(mapElems);
    }
    public static _IExpression create_MapBuilder(DAST._IType keyType, DAST._IType valueType) {
      return new Expression_MapBuilder(keyType, valueType);
    }
    public static _IExpression create_SeqUpdate(DAST._IExpression expr, DAST._IExpression indexExpr, DAST._IExpression @value) {
      return new Expression_SeqUpdate(expr, indexExpr, @value);
    }
    public static _IExpression create_MapUpdate(DAST._IExpression expr, DAST._IExpression indexExpr, DAST._IExpression @value) {
      return new Expression_MapUpdate(expr, indexExpr, @value);
    }
    public static _IExpression create_SetBuilder(DAST._IType elemType) {
      return new Expression_SetBuilder(elemType);
    }
    public static _IExpression create_ToMultiset(DAST._IExpression _a0) {
      return new Expression_ToMultiset(_a0);
    }
    public static _IExpression create_This() {
      return new Expression_This();
    }
    public static _IExpression create_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) {
      return new Expression_Ite(cond, thn, els);
    }
    public static _IExpression create_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr, DAST.Format._IUnOpFormat format1) {
      return new Expression_UnOp(unOp, expr, format1);
    }
    public static _IExpression create_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right, DAST.Format._IBinOpFormat format2) {
      return new Expression_BinOp(op, left, right, format2);
    }
    public static _IExpression create_ArrayLen(DAST._IExpression expr, BigInteger dim) {
      return new Expression_ArrayLen(expr, dim);
    }
    public static _IExpression create_MapKeys(DAST._IExpression expr) {
      return new Expression_MapKeys(expr);
    }
    public static _IExpression create_MapValues(DAST._IExpression expr) {
      return new Expression_MapValues(expr);
    }
    public static _IExpression create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) {
      return new Expression_Select(expr, field, isConstant, onDatatype);
    }
    public static _IExpression create_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) {
      return new Expression_SelectFn(expr, field, onDatatype, isStatic, arity);
    }
    public static _IExpression create_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) {
      return new Expression_Index(expr, collKind, indices);
    }
    public static _IExpression create_IndexRange(DAST._IExpression expr, bool isArray, Std.Wrappers._IOption<DAST._IExpression> low, Std.Wrappers._IOption<DAST._IExpression> high) {
      return new Expression_IndexRange(expr, isArray, low, high);
    }
    public static _IExpression create_TupleSelect(DAST._IExpression expr, BigInteger index) {
      return new Expression_TupleSelect(expr, index);
    }
    public static _IExpression create_Call(DAST._IExpression @on, DAST._ICallName callName, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Call(@on, callName, typeArgs, args);
    }
    public static _IExpression create_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) {
      return new Expression_Lambda(@params, retType, body);
    }
    public static _IExpression create_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) {
      return new Expression_BetaRedex(values, retType, expr);
    }
    public static _IExpression create_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) {
      return new Expression_IIFE(name, typ, @value, iifeBody);
    }
    public static _IExpression create_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Apply(expr, args);
    }
    public static _IExpression create_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) {
      return new Expression_TypeTest(@on, dType, variant);
    }
    public static _IExpression create_InitializationValue(DAST._IType typ) {
      return new Expression_InitializationValue(typ);
    }
    public static _IExpression create_BoolBoundedPool() {
      return new Expression_BoolBoundedPool();
    }
    public static _IExpression create_SetBoundedPool(DAST._IExpression of) {
      return new Expression_SetBoundedPool(of);
    }
    public static _IExpression create_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) {
      return new Expression_SeqBoundedPool(of, includeDuplicates);
    }
    public static _IExpression create_IntRange(DAST._IExpression lo, DAST._IExpression hi) {
      return new Expression_IntRange(lo, hi);
    }
    public bool is_Literal { get { return this is Expression_Literal; } }
    public bool is_Ident { get { return this is Expression_Ident; } }
    public bool is_Companion { get { return this is Expression_Companion; } }
    public bool is_Tuple { get { return this is Expression_Tuple; } }
    public bool is_New { get { return this is Expression_New; } }
    public bool is_NewArray { get { return this is Expression_NewArray; } }
    public bool is_DatatypeValue { get { return this is Expression_DatatypeValue; } }
    public bool is_Convert { get { return this is Expression_Convert; } }
    public bool is_SeqConstruct { get { return this is Expression_SeqConstruct; } }
    public bool is_SeqValue { get { return this is Expression_SeqValue; } }
    public bool is_SetValue { get { return this is Expression_SetValue; } }
    public bool is_MultisetValue { get { return this is Expression_MultisetValue; } }
    public bool is_MapValue { get { return this is Expression_MapValue; } }
    public bool is_MapBuilder { get { return this is Expression_MapBuilder; } }
    public bool is_SeqUpdate { get { return this is Expression_SeqUpdate; } }
    public bool is_MapUpdate { get { return this is Expression_MapUpdate; } }
    public bool is_SetBuilder { get { return this is Expression_SetBuilder; } }
    public bool is_ToMultiset { get { return this is Expression_ToMultiset; } }
    public bool is_This { get { return this is Expression_This; } }
    public bool is_Ite { get { return this is Expression_Ite; } }
    public bool is_UnOp { get { return this is Expression_UnOp; } }
    public bool is_BinOp { get { return this is Expression_BinOp; } }
    public bool is_ArrayLen { get { return this is Expression_ArrayLen; } }
    public bool is_MapKeys { get { return this is Expression_MapKeys; } }
    public bool is_MapValues { get { return this is Expression_MapValues; } }
    public bool is_Select { get { return this is Expression_Select; } }
    public bool is_SelectFn { get { return this is Expression_SelectFn; } }
    public bool is_Index { get { return this is Expression_Index; } }
    public bool is_IndexRange { get { return this is Expression_IndexRange; } }
    public bool is_TupleSelect { get { return this is Expression_TupleSelect; } }
    public bool is_Call { get { return this is Expression_Call; } }
    public bool is_Lambda { get { return this is Expression_Lambda; } }
    public bool is_BetaRedex { get { return this is Expression_BetaRedex; } }
    public bool is_IIFE { get { return this is Expression_IIFE; } }
    public bool is_Apply { get { return this is Expression_Apply; } }
    public bool is_TypeTest { get { return this is Expression_TypeTest; } }
    public bool is_InitializationValue { get { return this is Expression_InitializationValue; } }
    public bool is_BoolBoundedPool { get { return this is Expression_BoolBoundedPool; } }
    public bool is_SetBoundedPool { get { return this is Expression_SetBoundedPool; } }
    public bool is_SeqBoundedPool { get { return this is Expression_SeqBoundedPool; } }
    public bool is_IntRange { get { return this is Expression_IntRange; } }
    public DAST._ILiteral dtor_Literal_a0 {
      get {
        var d = this;
        return ((Expression_Literal)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((Expression_Ident)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 {
      get {
        var d = this;
        return ((Expression_Companion)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Expression_Tuple)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        return ((Expression_New)d)._path;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._typeArgs; }
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._typeArgs; }
        return ((Expression_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._args; }
        if (d is Expression_Call) { return ((Expression_Call)d)._args; }
        return ((Expression_Apply)d)._args;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_dims {
      get {
        var d = this;
        return ((Expression_NewArray)d)._dims;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        if (d is Expression_NewArray) { return ((Expression_NewArray)d)._typ; }
        if (d is Expression_Convert) { return ((Expression_Convert)d)._typ; }
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._typ; }
        if (d is Expression_IIFE) { return ((Expression_IIFE)d)._typ; }
        return ((Expression_InitializationValue)d)._typ;
      }
    }
    public DAST._IDatatypeType dtor_datatypeType {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._datatypeType;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_variant {
      get {
        var d = this;
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._variant; }
        return ((Expression_TypeTest)d)._variant;
      }
    }
    public bool dtor_isCo {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._isCo;
      }
    }
    public Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._contents;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        if (d is Expression_Convert) { return ((Expression_Convert)d)._value; }
        if (d is Expression_SeqUpdate) { return ((Expression_SeqUpdate)d)._value; }
        if (d is Expression_MapUpdate) { return ((Expression_MapUpdate)d)._value; }
        return ((Expression_IIFE)d)._value;
      }
    }
    public DAST._IType dtor_from {
      get {
        var d = this;
        return ((Expression_Convert)d)._from;
      }
    }
    public DAST._IExpression dtor_length {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._length;
      }
    }
    public DAST._IExpression dtor_elem {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._elem;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_elements {
      get {
        var d = this;
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._elements; }
        if (d is Expression_SetValue) { return ((Expression_SetValue)d)._elements; }
        return ((Expression_MultisetValue)d)._elements;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems {
      get {
        var d = this;
        return ((Expression_MapValue)d)._mapElems;
      }
    }
    public DAST._IType dtor_keyType {
      get {
        var d = this;
        return ((Expression_MapBuilder)d)._keyType;
      }
    }
    public DAST._IType dtor_valueType {
      get {
        var d = this;
        return ((Expression_MapBuilder)d)._valueType;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is Expression_SeqUpdate) { return ((Expression_SeqUpdate)d)._expr; }
        if (d is Expression_MapUpdate) { return ((Expression_MapUpdate)d)._expr; }
        if (d is Expression_UnOp) { return ((Expression_UnOp)d)._expr; }
        if (d is Expression_ArrayLen) { return ((Expression_ArrayLen)d)._expr; }
        if (d is Expression_MapKeys) { return ((Expression_MapKeys)d)._expr; }
        if (d is Expression_MapValues) { return ((Expression_MapValues)d)._expr; }
        if (d is Expression_Select) { return ((Expression_Select)d)._expr; }
        if (d is Expression_SelectFn) { return ((Expression_SelectFn)d)._expr; }
        if (d is Expression_Index) { return ((Expression_Index)d)._expr; }
        if (d is Expression_IndexRange) { return ((Expression_IndexRange)d)._expr; }
        if (d is Expression_TupleSelect) { return ((Expression_TupleSelect)d)._expr; }
        if (d is Expression_BetaRedex) { return ((Expression_BetaRedex)d)._expr; }
        return ((Expression_Apply)d)._expr;
      }
    }
    public DAST._IExpression dtor_indexExpr {
      get {
        var d = this;
        if (d is Expression_SeqUpdate) { return ((Expression_SeqUpdate)d)._indexExpr; }
        return ((Expression_MapUpdate)d)._indexExpr;
      }
    }
    public DAST._IType dtor_elemType {
      get {
        var d = this;
        return ((Expression_SetBuilder)d)._elemType;
      }
    }
    public DAST._IExpression dtor_ToMultiset_a0 {
      get {
        var d = this;
        return ((Expression_ToMultiset)d)._a0;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        return ((Expression_Ite)d)._cond;
      }
    }
    public DAST._IExpression dtor_thn {
      get {
        var d = this;
        return ((Expression_Ite)d)._thn;
      }
    }
    public DAST._IExpression dtor_els {
      get {
        var d = this;
        return ((Expression_Ite)d)._els;
      }
    }
    public DAST._IUnaryOp dtor_unOp {
      get {
        var d = this;
        return ((Expression_UnOp)d)._unOp;
      }
    }
    public DAST.Format._IUnOpFormat dtor_format1 {
      get {
        var d = this;
        return ((Expression_UnOp)d)._format1;
      }
    }
    public DAST._IBinOp dtor_op {
      get {
        var d = this;
        return ((Expression_BinOp)d)._op;
      }
    }
    public DAST._IExpression dtor_left {
      get {
        var d = this;
        return ((Expression_BinOp)d)._left;
      }
    }
    public DAST._IExpression dtor_right {
      get {
        var d = this;
        return ((Expression_BinOp)d)._right;
      }
    }
    public DAST.Format._IBinOpFormat dtor_format2 {
      get {
        var d = this;
        return ((Expression_BinOp)d)._format2;
      }
    }
    public BigInteger dtor_dim {
      get {
        var d = this;
        return ((Expression_ArrayLen)d)._dim;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._field; }
        return ((Expression_SelectFn)d)._field;
      }
    }
    public bool dtor_isConstant {
      get {
        var d = this;
        return ((Expression_Select)d)._isConstant;
      }
    }
    public bool dtor_onDatatype {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._onDatatype; }
        return ((Expression_SelectFn)d)._onDatatype;
      }
    }
    public bool dtor_isStatic {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._isStatic;
      }
    }
    public BigInteger dtor_arity {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._arity;
      }
    }
    public DAST._ICollKind dtor_collKind {
      get {
        var d = this;
        return ((Expression_Index)d)._collKind;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((Expression_Index)d)._indices;
      }
    }
    public bool dtor_isArray {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._isArray;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_low {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._low;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_high {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._high;
      }
    }
    public BigInteger dtor_index {
      get {
        var d = this;
        return ((Expression_TupleSelect)d)._index;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._on; }
        return ((Expression_TypeTest)d)._on;
      }
    }
    public DAST._ICallName dtor_callName {
      get {
        var d = this;
        return ((Expression_Call)d)._callName;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        var d = this;
        return ((Expression_Lambda)d)._params;
      }
    }
    public DAST._IType dtor_retType {
      get {
        var d = this;
        if (d is Expression_Lambda) { return ((Expression_Lambda)d)._retType; }
        return ((Expression_BetaRedex)d)._retType;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        return ((Expression_Lambda)d)._body;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values {
      get {
        var d = this;
        return ((Expression_BetaRedex)d)._values;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        return ((Expression_IIFE)d)._name;
      }
    }
    public DAST._IExpression dtor_iifeBody {
      get {
        var d = this;
        return ((Expression_IIFE)d)._iifeBody;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType {
      get {
        var d = this;
        return ((Expression_TypeTest)d)._dType;
      }
    }
    public DAST._IExpression dtor_of {
      get {
        var d = this;
        if (d is Expression_SetBoundedPool) { return ((Expression_SetBoundedPool)d)._of; }
        return ((Expression_SeqBoundedPool)d)._of;
      }
    }
    public bool dtor_includeDuplicates {
      get {
        var d = this;
        return ((Expression_SeqBoundedPool)d)._includeDuplicates;
      }
    }
    public DAST._IExpression dtor_lo {
      get {
        var d = this;
        return ((Expression_IntRange)d)._lo;
      }
    }
    public DAST._IExpression dtor_hi {
      get {
        var d = this;
        return ((Expression_IntRange)d)._hi;
      }
    }
    public abstract _IExpression DowncastClone();
  }
  public class Expression_Literal : Expression {
    public readonly DAST._ILiteral _a0;
    public Expression_Literal(DAST._ILiteral _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Literal(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Literal;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Literal";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Ident : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expression_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ident";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_Companion : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public Expression_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Companion(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Companion;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Companion";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Tuple : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _a0;
    public Expression_Tuple(Dafny.ISequence<DAST._IExpression> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_New : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_New(_path, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_New;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.New";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_NewArray : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _dims;
    public readonly DAST._IType _typ;
    public Expression_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) : base() {
      this._dims = dims;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_NewArray(_dims, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_NewArray;
      return oth != null && object.Equals(this._dims, oth._dims) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.NewArray";
      s += "(";
      s += Dafny.Helpers.ToString(this._dims);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_DatatypeValue : Expression {
    public readonly DAST._IDatatypeType _datatypeType;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public readonly bool _isCo;
    public readonly Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _contents;
    public Expression_DatatypeValue(DAST._IDatatypeType datatypeType, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) : base() {
      this._datatypeType = datatypeType;
      this._typeArgs = typeArgs;
      this._variant = variant;
      this._isCo = isCo;
      this._contents = contents;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_DatatypeValue(_datatypeType, _typeArgs, _variant, _isCo, _contents);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_DatatypeValue;
      return oth != null && object.Equals(this._datatypeType, oth._datatypeType) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._variant, oth._variant) && this._isCo == oth._isCo && object.Equals(this._contents, oth._contents);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._datatypeType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._contents));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.DatatypeValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._datatypeType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._contents);
      s += ")";
      return s;
    }
  }
  public class Expression_Convert : Expression {
    public readonly DAST._IExpression _value;
    public readonly DAST._IType _from;
    public readonly DAST._IType _typ;
    public Expression_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) : base() {
      this._value = @value;
      this._from = @from;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Convert(_value, _from, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Convert;
      return oth != null && object.Equals(this._value, oth._value) && object.Equals(this._from, oth._from) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._from));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Convert";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._from);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqConstruct : Expression {
    public readonly DAST._IExpression _length;
    public readonly DAST._IExpression _elem;
    public Expression_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) : base() {
      this._length = length;
      this._elem = elem;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqConstruct(_length, _elem);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqConstruct;
      return oth != null && object.Equals(this._length, oth._length) && object.Equals(this._elem, oth._elem);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._length));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elem));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqConstruct";
      s += "(";
      s += Dafny.Helpers.ToString(this._length);
      s += ", ";
      s += Dafny.Helpers.ToString(this._elem);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public readonly DAST._IType _typ;
    public Expression_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) : base() {
      this._elements = elements;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqValue(_elements, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqValue;
      return oth != null && object.Equals(this._elements, oth._elements) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SetValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public Expression_SetValue(Dafny.ISequence<DAST._IExpression> elements) : base() {
      this._elements = elements;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetValue(_elements);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetValue;
      return oth != null && object.Equals(this._elements, oth._elements);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ")";
      return s;
    }
  }
  public class Expression_MultisetValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public Expression_MultisetValue(Dafny.ISequence<DAST._IExpression> elements) : base() {
      this._elements = elements;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MultisetValue(_elements);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MultisetValue;
      return oth != null && object.Equals(this._elements, oth._elements);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MultisetValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ")";
      return s;
    }
  }
  public class Expression_MapValue : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _mapElems;
    public Expression_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) : base() {
      this._mapElems = mapElems;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapValue(_mapElems);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapValue;
      return oth != null && object.Equals(this._mapElems, oth._mapElems);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mapElems));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._mapElems);
      s += ")";
      return s;
    }
  }
  public class Expression_MapBuilder : Expression {
    public readonly DAST._IType _keyType;
    public readonly DAST._IType _valueType;
    public Expression_MapBuilder(DAST._IType keyType, DAST._IType valueType) : base() {
      this._keyType = keyType;
      this._valueType = valueType;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapBuilder(_keyType, _valueType);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapBuilder;
      return oth != null && object.Equals(this._keyType, oth._keyType) && object.Equals(this._valueType, oth._valueType);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._keyType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._valueType));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapBuilder";
      s += "(";
      s += Dafny.Helpers.ToString(this._keyType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._valueType);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqUpdate : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._IExpression _indexExpr;
    public readonly DAST._IExpression _value;
    public Expression_SeqUpdate(DAST._IExpression expr, DAST._IExpression indexExpr, DAST._IExpression @value) : base() {
      this._expr = expr;
      this._indexExpr = indexExpr;
      this._value = @value;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqUpdate(_expr, _indexExpr, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqUpdate;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indexExpr, oth._indexExpr) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indexExpr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqUpdate";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indexExpr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Expression_MapUpdate : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._IExpression _indexExpr;
    public readonly DAST._IExpression _value;
    public Expression_MapUpdate(DAST._IExpression expr, DAST._IExpression indexExpr, DAST._IExpression @value) : base() {
      this._expr = expr;
      this._indexExpr = indexExpr;
      this._value = @value;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapUpdate(_expr, _indexExpr, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapUpdate;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indexExpr, oth._indexExpr) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indexExpr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapUpdate";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indexExpr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Expression_SetBuilder : Expression {
    public readonly DAST._IType _elemType;
    public Expression_SetBuilder(DAST._IType elemType) : base() {
      this._elemType = elemType;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetBuilder(_elemType);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetBuilder;
      return oth != null && object.Equals(this._elemType, oth._elemType);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elemType));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetBuilder";
      s += "(";
      s += Dafny.Helpers.ToString(this._elemType);
      s += ")";
      return s;
    }
  }
  public class Expression_ToMultiset : Expression {
    public readonly DAST._IExpression _a0;
    public Expression_ToMultiset(DAST._IExpression _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_ToMultiset(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_ToMultiset;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.ToMultiset";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_This : Expression {
    public Expression_This() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_This();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_This;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.This";
      return s;
    }
  }
  public class Expression_Ite : Expression {
    public readonly DAST._IExpression _cond;
    public readonly DAST._IExpression _thn;
    public readonly DAST._IExpression _els;
    public Expression_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ite(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ite;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expression_UnOp : Expression {
    public readonly DAST._IUnaryOp _unOp;
    public readonly DAST._IExpression _expr;
    public readonly DAST.Format._IUnOpFormat _format1;
    public Expression_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr, DAST.Format._IUnOpFormat format1) : base() {
      this._unOp = unOp;
      this._expr = expr;
      this._format1 = format1;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_UnOp(_unOp, _expr, _format1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_UnOp;
      return oth != null && object.Equals(this._unOp, oth._unOp) && object.Equals(this._expr, oth._expr) && object.Equals(this._format1, oth._format1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._unOp));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format1));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.UnOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._unOp);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format1);
      s += ")";
      return s;
    }
  }
  public class Expression_BinOp : Expression {
    public readonly DAST._IBinOp _op;
    public readonly DAST._IExpression _left;
    public readonly DAST._IExpression _right;
    public readonly DAST.Format._IBinOpFormat _format2;
    public Expression_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right, DAST.Format._IBinOpFormat format2) : base() {
      this._op = op;
      this._left = left;
      this._right = right;
      this._format2 = format2;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BinOp(_op, _left, _right, _format2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BinOp;
      return oth != null && object.Equals(this._op, oth._op) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right) && object.Equals(this._format2, oth._format2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format2));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BinOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._op);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format2);
      s += ")";
      return s;
    }
  }
  public class Expression_ArrayLen : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _dim;
    public Expression_ArrayLen(DAST._IExpression expr, BigInteger dim) : base() {
      this._expr = expr;
      this._dim = dim;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_ArrayLen(_expr, _dim);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_ArrayLen;
      return oth != null && object.Equals(this._expr, oth._expr) && this._dim == oth._dim;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dim));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.ArrayLen";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dim);
      s += ")";
      return s;
    }
  }
  public class Expression_MapKeys : Expression {
    public readonly DAST._IExpression _expr;
    public Expression_MapKeys(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapKeys(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapKeys;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapKeys";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_MapValues : Expression {
    public readonly DAST._IExpression _expr;
    public Expression_MapValues(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapValues(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapValues;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapValues";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_Select : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _isConstant;
    public readonly bool _onDatatype;
    public Expression_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) : base() {
      this._expr = expr;
      this._field = field;
      this._isConstant = isConstant;
      this._onDatatype = onDatatype;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Select(_expr, _field, _isConstant, _onDatatype);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._isConstant == oth._isConstant && this._onDatatype == oth._onDatatype;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isConstant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isConstant);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ")";
      return s;
    }
  }
  public class Expression_SelectFn : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _onDatatype;
    public readonly bool _isStatic;
    public readonly BigInteger _arity;
    public Expression_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) : base() {
      this._expr = expr;
      this._field = field;
      this._onDatatype = onDatatype;
      this._isStatic = isStatic;
      this._arity = arity;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SelectFn(_expr, _field, _onDatatype, _isStatic, _arity);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SelectFn;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._onDatatype == oth._onDatatype && this._isStatic == oth._isStatic && this._arity == oth._arity;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 26;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arity));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SelectFn";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arity);
      s += ")";
      return s;
    }
  }
  public class Expression_Index : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._ICollKind _collKind;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public Expression_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._collKind = collKind;
      this._indices = indices;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Index(_expr, _collKind, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._collKind, oth._collKind) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 27;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._collKind));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._collKind);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }
  public class Expression_IndexRange : Expression {
    public readonly DAST._IExpression _expr;
    public readonly bool _isArray;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _low;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _high;
    public Expression_IndexRange(DAST._IExpression expr, bool isArray, Std.Wrappers._IOption<DAST._IExpression> low, Std.Wrappers._IOption<DAST._IExpression> high) : base() {
      this._expr = expr;
      this._isArray = isArray;
      this._low = low;
      this._high = high;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IndexRange(_expr, _isArray, _low, _high);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IndexRange;
      return oth != null && object.Equals(this._expr, oth._expr) && this._isArray == oth._isArray && object.Equals(this._low, oth._low) && object.Equals(this._high, oth._high);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 28;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isArray));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._low));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._high));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IndexRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isArray);
      s += ", ";
      s += Dafny.Helpers.ToString(this._low);
      s += ", ";
      s += Dafny.Helpers.ToString(this._high);
      s += ")";
      return s;
    }
  }
  public class Expression_TupleSelect : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _index;
    public Expression_TupleSelect(DAST._IExpression expr, BigInteger index) : base() {
      this._expr = expr;
      this._index = index;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TupleSelect(_expr, _index);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TupleSelect;
      return oth != null && object.Equals(this._expr, oth._expr) && this._index == oth._index;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 29;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._index));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TupleSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._index);
      s += ")";
      return s;
    }
  }
  public class Expression_Call : Expression {
    public readonly DAST._IExpression _on;
    public readonly DAST._ICallName _callName;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Call(DAST._IExpression @on, DAST._ICallName callName, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._on = @on;
      this._callName = callName;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Call(_on, _callName, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._callName, oth._callName) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 30;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._callName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._callName);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_Lambda : Expression {
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly DAST._IType _retType;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Expression_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._params = @params;
      this._retType = retType;
      this._body = body;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Lambda(_params, _retType, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Lambda;
      return oth != null && object.Equals(this._params, oth._params) && object.Equals(this._retType, oth._retType) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 31;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Lambda";
      s += "(";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expression_BetaRedex : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _values;
    public readonly DAST._IType _retType;
    public readonly DAST._IExpression _expr;
    public Expression_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) : base() {
      this._values = values;
      this._retType = retType;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BetaRedex(_values, _retType, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BetaRedex;
      return oth != null && object.Equals(this._values, oth._values) && object.Equals(this._retType, oth._retType) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 32;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._values));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BetaRedex";
      s += "(";
      s += Dafny.Helpers.ToString(this._values);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_IIFE : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IExpression _value;
    public readonly DAST._IExpression _iifeBody;
    public Expression_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) : base() {
      this._name = name;
      this._typ = typ;
      this._value = @value;
      this._iifeBody = iifeBody;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IIFE(_name, _typ, _value, _iifeBody);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IIFE;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._value, oth._value) && object.Equals(this._iifeBody, oth._iifeBody);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 33;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._iifeBody));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IIFE";
      s += "(";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._iifeBody);
      s += ")";
      return s;
    }
  }
  public class Expression_Apply : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._expr = expr;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Apply(_expr, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Apply;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 34;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Apply";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_TypeTest : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _dType;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public Expression_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) : base() {
      this._on = @on;
      this._dType = dType;
      this._variant = variant;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TypeTest(_on, _dType, _variant);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TypeTest;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._dType, oth._dType) && object.Equals(this._variant, oth._variant);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 35;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TypeTest";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dType);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_InitializationValue : Expression {
    public readonly DAST._IType _typ;
    public Expression_InitializationValue(DAST._IType typ) : base() {
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_InitializationValue(_typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_InitializationValue;
      return oth != null && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 36;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.InitializationValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_BoolBoundedPool : Expression {
    public Expression_BoolBoundedPool() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BoolBoundedPool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BoolBoundedPool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 37;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BoolBoundedPool";
      return s;
    }
  }
  public class Expression_SetBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public Expression_SetBoundedPool(DAST._IExpression of) : base() {
      this._of = of;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetBoundedPool(_of);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetBoundedPool;
      return oth != null && object.Equals(this._of, oth._of);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 38;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public readonly bool _includeDuplicates;
    public Expression_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) : base() {
      this._of = of;
      this._includeDuplicates = includeDuplicates;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqBoundedPool(_of, _includeDuplicates);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqBoundedPool;
      return oth != null && object.Equals(this._of, oth._of) && this._includeDuplicates == oth._includeDuplicates;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 39;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._includeDuplicates));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ", ";
      s += Dafny.Helpers.ToString(this._includeDuplicates);
      s += ")";
      return s;
    }
  }
  public class Expression_IntRange : Expression {
    public readonly DAST._IExpression _lo;
    public readonly DAST._IExpression _hi;
    public Expression_IntRange(DAST._IExpression lo, DAST._IExpression hi) : base() {
      this._lo = lo;
      this._hi = hi;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IntRange(_lo, _hi);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IntRange;
      return oth != null && object.Equals(this._lo, oth._lo) && object.Equals(this._hi, oth._hi);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 40;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hi));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IntRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._lo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hi);
      s += ")";
      return s;
    }
  }

  public interface _IUnaryOp {
    bool is_Not { get; }
    bool is_BitwiseNot { get; }
    bool is_Cardinality { get; }
    _IUnaryOp DowncastClone();
  }
  public abstract class UnaryOp : _IUnaryOp {
    public UnaryOp() {
    }
    private static readonly DAST._IUnaryOp theDefault = create_Not();
    public static DAST._IUnaryOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IUnaryOp> _TYPE = new Dafny.TypeDescriptor<DAST._IUnaryOp>(DAST.UnaryOp.Default());
    public static Dafny.TypeDescriptor<DAST._IUnaryOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnaryOp create_Not() {
      return new UnaryOp_Not();
    }
    public static _IUnaryOp create_BitwiseNot() {
      return new UnaryOp_BitwiseNot();
    }
    public static _IUnaryOp create_Cardinality() {
      return new UnaryOp_Cardinality();
    }
    public bool is_Not { get { return this is UnaryOp_Not; } }
    public bool is_BitwiseNot { get { return this is UnaryOp_BitwiseNot; } }
    public bool is_Cardinality { get { return this is UnaryOp_Cardinality; } }
    public static System.Collections.Generic.IEnumerable<_IUnaryOp> AllSingletonConstructors {
      get {
        yield return UnaryOp.create_Not();
        yield return UnaryOp.create_BitwiseNot();
        yield return UnaryOp.create_Cardinality();
      }
    }
    public abstract _IUnaryOp DowncastClone();
  }
  public class UnaryOp_Not : UnaryOp {
    public UnaryOp_Not() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Not();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Not;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Not";
      return s;
    }
  }
  public class UnaryOp_BitwiseNot : UnaryOp {
    public UnaryOp_BitwiseNot() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_BitwiseNot();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_BitwiseNot;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.BitwiseNot";
      return s;
    }
  }
  public class UnaryOp_Cardinality : UnaryOp {
    public UnaryOp_Cardinality() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Cardinality();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Cardinality;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Cardinality";
      return s;
    }
  }

  public interface _ILiteral {
    bool is_BoolLiteral { get; }
    bool is_IntLiteral { get; }
    bool is_DecLiteral { get; }
    bool is_StringLiteral { get; }
    bool is_CharLiteral { get; }
    bool is_Null { get; }
    bool dtor_BoolLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 { get; }
    DAST._IType dtor_IntLiteral_a1 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 { get; }
    DAST._IType dtor_DecLiteral_a2 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 { get; }
    Dafny.Rune dtor_CharLiteral_a0 { get; }
    DAST._IType dtor_Null_a0 { get; }
    _ILiteral DowncastClone();
  }
  public abstract class Literal : _ILiteral {
    public Literal() {
    }
    private static readonly DAST._ILiteral theDefault = create_BoolLiteral(false);
    public static DAST._ILiteral Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ILiteral> _TYPE = new Dafny.TypeDescriptor<DAST._ILiteral>(DAST.Literal.Default());
    public static Dafny.TypeDescriptor<DAST._ILiteral> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ILiteral create_BoolLiteral(bool _a0) {
      return new Literal_BoolLiteral(_a0);
    }
    public static _ILiteral create_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) {
      return new Literal_IntLiteral(_a0, _a1);
    }
    public static _ILiteral create_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) {
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public static _ILiteral create_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Literal_StringLiteral(_a0);
    }
    public static _ILiteral create_CharLiteral(Dafny.Rune _a0) {
      return new Literal_CharLiteral(_a0);
    }
    public static _ILiteral create_Null(DAST._IType _a0) {
      return new Literal_Null(_a0);
    }
    public bool is_BoolLiteral { get { return this is Literal_BoolLiteral; } }
    public bool is_IntLiteral { get { return this is Literal_IntLiteral; } }
    public bool is_DecLiteral { get { return this is Literal_DecLiteral; } }
    public bool is_StringLiteral { get { return this is Literal_StringLiteral; } }
    public bool is_CharLiteral { get { return this is Literal_CharLiteral; } }
    public bool is_Null { get { return this is Literal_Null; } }
    public bool dtor_BoolLiteral_a0 {
      get {
        var d = this;
        return ((Literal_BoolLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_IntLiteral_a1 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a1;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a1;
      }
    }
    public DAST._IType dtor_DecLiteral_a2 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a2;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 {
      get {
        var d = this;
        return ((Literal_StringLiteral)d)._a0;
      }
    }
    public Dafny.Rune dtor_CharLiteral_a0 {
      get {
        var d = this;
        return ((Literal_CharLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_Null_a0 {
      get {
        var d = this;
        return ((Literal_Null)d)._a0;
      }
    }
    public abstract _ILiteral DowncastClone();
  }
  public class Literal_BoolLiteral : Literal {
    public readonly bool _a0;
    public Literal_BoolLiteral(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_BoolLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_BoolLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.BoolLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_IntLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly DAST._IType _a1;
    public Literal_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_IntLiteral(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_IntLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.IntLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Literal_DecLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly Dafny.ISequence<Dafny.Rune> _a1;
    public readonly DAST._IType _a2;
    public Literal_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
      this._a2 = _a2;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_DecLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1) && object.Equals(this._a2, oth._a2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a2));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.DecLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += this._a1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a2);
      s += ")";
      return s;
    }
  }
  public class Literal_StringLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Literal_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_StringLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_StringLiteral;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.StringLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Literal_CharLiteral : Literal {
    public readonly Dafny.Rune _a0;
    public Literal_CharLiteral(Dafny.Rune _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_CharLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_CharLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.CharLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_Null : Literal {
    public readonly DAST._IType _a0;
    public Literal_Null(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_Null(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_Null;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.Null";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
} // end of namespace DAST

namespace D2DPrettyPrinter {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> PrettyPrint(Dafny.ISequence<DAST._IModule> d)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Microsoft.Dafny.Compilers.WrapException.Throw();
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Not Implemented Yet");
      return s;
    }
  }
} // end of namespace D2DPrettyPrinter
namespace ResolvedDesugaredExecutableDafnyPlugin {


  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _out14;
      _out14 = D2DPrettyPrinter.__default.PrettyPrint(p);
      s = _out14;
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      return s;
    }
  }
} // end of namespace ResolvedDesugaredExecutableDafnyPlugin
namespace RAST {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> SeqToString<__T>(Dafny.ISequence<__T> s, Func<__T, Dafny.ISequence<Dafny.Rune>> f, Dafny.ISequence<Dafny.Rune> separator)
    {
      if ((new BigInteger((s).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Helpers.Id<Func<__T, Dafny.ISequence<Dafny.Rune>>>(f)((s).Select(BigInteger.Zero)), (((new BigInteger((s).Count)) > (BigInteger.One)) ? (Dafny.Sequence<Dafny.Rune>.Concat(separator, RAST.__default.SeqToString<__T>((s).Drop(BigInteger.One), f, separator))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))));
      }
    }
    public static BigInteger SeqToHeight<__T>(Dafny.ISequence<__T> s, Func<__T, BigInteger> f)
    {
      if ((new BigInteger((s).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        BigInteger _801_i = Dafny.Helpers.Id<Func<__T, BigInteger>>(f)((s).Select(BigInteger.Zero));
        BigInteger _802_j = RAST.__default.SeqToHeight<__T>((s).Drop(BigInteger.One), f);
        if ((_801_i) < (_802_j)) {
          return _802_j;
        } else {
          return _801_i;
        }
      }
    }
    public static RAST._IType Rc(RAST._IType underlying) {
      return RAST.Type.create_TypeApp(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rc"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Rc")), Dafny.Sequence<RAST._IType>.FromElements(underlying));
    }
    public static RAST._IType RefCell(RAST._IType underlying) {
      return RAST.Type.create_TypeApp(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cell"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("RefCell")), Dafny.Sequence<RAST._IType>.FromElements(underlying));
    }
    public static RAST._IType Vec(RAST._IType underlying) {
      return RAST.Type.create_TypeApp(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Vec")), Dafny.Sequence<RAST._IType>.FromElements(underlying));
    }
    public static RAST._IExpr NewVec(Dafny.ISequence<RAST._IExpr> elements) {
      return (RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec!"))).Apply(elements);
    }
    public static RAST._IExpr Clone(RAST._IExpr underlying) {
      return (RAST.Expr.create_Select(underlying, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
    }
    public static RAST._IExpr Borrow(RAST._IExpr underlying) {
      return RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), underlying, DAST.Format.UnOpFormat.create_NoFormat());
    }
    public static RAST._IExpr BorrowMut(RAST._IExpr underlying) {
      return RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut"), underlying, DAST.Format.UnOpFormat.create_NoFormat());
    }
    public static RAST._IType RawType(Dafny.ISequence<Dafny.Rune> content) {
      return RAST.Type.create_TIdentifier(content);
    }
    public static Dafny.ISequence<Dafny.Rune> AddIndent(Dafny.ISequence<Dafny.Rune> raw, Dafny.ISequence<Dafny.Rune> ind)
    {
      Dafny.ISequence<Dafny.Rune> _803___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((raw).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, raw);
      } else if ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[({")).Contains((raw).Select(BigInteger.Zero))) {
        _803___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in103 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in104 = Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND);
        raw = _in103;
        ind = _in104;
        goto TAIL_CALL_START;
      } else if (((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("})]")).Contains((raw).Select(BigInteger.Zero))) && ((new BigInteger((ind).Count)) > (new BigInteger(2)))) {
        _803___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in105 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in106 = (ind).Take((new BigInteger((ind).Count)) - (new BigInteger(2)));
        raw = _in105;
        ind = _in106;
        goto TAIL_CALL_START;
      } else if (((raw).Select(BigInteger.Zero)) == (new Dafny.Rune('\n'))) {
        _803___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)), ind));
        Dafny.ISequence<Dafny.Rune> _in107 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in108 = ind;
        raw = _in107;
        ind = _in108;
        goto TAIL_CALL_START;
      } else {
        _803___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in109 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in110 = ind;
        raw = _in109;
        ind = _in110;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger max(BigInteger i, BigInteger j)
    {
      if ((i) < (j)) {
        return j;
      } else {
        return i;
      }
    }
    public static RAST._IExpr RcNew(RAST._IExpr underlying) {
      return RAST.Expr.create_Call(RAST.__default.std__rc__Rc__new, Dafny.Sequence<RAST._IExpr>.FromElements(underlying));
    }
    public static RAST._IType SelfBorrowed { get {
      return RAST.Type.create_Borrowed(RAST.Type.create_SelfOwned());
    } }
    public static RAST._IType SelfBorrowedMut { get {
      return RAST.Type.create_BorrowedMut(RAST.Type.create_SelfOwned());
    } }
    public static RAST._IType global__type { get {
      return RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
    } }
    public static RAST._IType std__type { get {
      return (RAST.__default.global__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"));
    } }
    public static RAST._IType CloneTrait { get {
      return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Clone"));
    } }
    public static RAST._IType DafnyPrintTrait { get {
      return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint"));
    } }
    public static RAST._IType DefaultTrait { get {
      return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default"));
    } }
    public static RAST._IType StaticTrait { get {
      return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'static"));
    } }
    public static RAST._IType cell__type { get {
      return (RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cell"));
    } }
    public static RAST._IType refcell__type { get {
      return (RAST.__default.cell__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("RefCell"));
    } }
    public static RAST._IType dafny__runtime__type { get {
      return (RAST.__default.global__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dafny_runtime"));
    } }
    public static Dafny.ISequence<Dafny.Rune> IND { get {
      return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  ");
    } }
    public static RAST._IExpr self { get {
      return RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"));
    } }
    public static RAST._IExpr @global { get {
      return RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
    } }
    public static RAST._IExpr dafny__runtime { get {
      return (RAST.__default.@global).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dafny_runtime"));
    } }
    public static RAST._IExpr dafny__runtime__Set { get {
      return (RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Set"));
    } }
    public static RAST._IExpr dafny__runtime__Set__from__array { get {
      return (RAST.__default.dafny__runtime__Set).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array"));
    } }
    public static RAST._IExpr dafny__runtime__Sequence { get {
      return (RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence"));
    } }
    public static RAST._IExpr Sequence__from__array__owned { get {
      return (RAST.__default.dafny__runtime__Sequence).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array_owned"));
    } }
    public static RAST._IExpr Sequence__from__array { get {
      return (RAST.__default.dafny__runtime__Sequence).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array"));
    } }
    public static RAST._IExpr dafny__runtime__Multiset { get {
      return (RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Multiset"));
    } }
    public static RAST._IExpr dafny__runtime__Multiset__from__array { get {
      return (RAST.__default.dafny__runtime__Multiset).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array"));
    } }
    public static RAST._IExpr std { get {
      return (RAST.__default.@global).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"));
    } }
    public static RAST._IExpr std__rc { get {
      return (RAST.__default.std).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rc"));
    } }
    public static RAST._IExpr std__rc__Rc { get {
      return (RAST.__default.std__rc).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Rc"));
    } }
    public static RAST._IExpr std__rc__Rc__new { get {
      return (RAST.__default.std__rc__Rc).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"));
    } }
  }

  public interface _IMod {
    bool is_Mod { get; }
    bool is_ExternMod { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._IModDecl> dtor_body { get; }
    _IMod DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class Mod : _IMod {
    public Mod() {
    }
    private static readonly RAST._IMod theDefault = create_Mod(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IModDecl>.Empty);
    public static RAST._IMod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IMod> _TYPE = new Dafny.TypeDescriptor<RAST._IMod>(RAST.Mod.Default());
    public static Dafny.TypeDescriptor<RAST._IMod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMod create_Mod(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IModDecl> body) {
      return new Mod_Mod(name, body);
    }
    public static _IMod create_ExternMod(Dafny.ISequence<Dafny.Rune> name) {
      return new Mod_ExternMod(name);
    }
    public bool is_Mod { get { return this is Mod_Mod; } }
    public bool is_ExternMod { get { return this is Mod_ExternMod; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Mod_Mod) { return ((Mod_Mod)d)._name; }
        return ((Mod_ExternMod)d)._name;
      }
    }
    public Dafny.ISequence<RAST._IModDecl> dtor_body {
      get {
        var d = this;
        return ((Mod_Mod)d)._body;
      }
    }
    public abstract _IMod DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      RAST._IMod _source25 = this;
      if (_source25.is_Mod) {
        Dafny.ISequence<Dafny.Rune> _804___mcc_h0 = _source25.dtor_name;
        Dafny.ISequence<RAST._IModDecl> _805___mcc_h1 = _source25.dtor_body;
        Dafny.ISequence<RAST._IModDecl> _806_body = _805___mcc_h1;
        Dafny.ISequence<Dafny.Rune> _807_name = _804___mcc_h0;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), _807_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), RAST.__default.IND), RAST.__default.SeqToString<RAST._IModDecl>(_806_body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IModDecl, Dafny.ISequence<Dafny.Rune>>>>((_808_ind) => ((System.Func<RAST._IModDecl, Dafny.ISequence<Dafny.Rune>>)((_809_modDecl) => {
          return (_809_modDecl)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_808_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else {
        Dafny.ISequence<Dafny.Rune> _810___mcc_h2 = _source25.dtor_name;
        Dafny.ISequence<Dafny.Rune> _811_name = _810___mcc_h2;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), _811_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      }
    }
  }
  public class Mod_Mod : Mod {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._IModDecl> _body;
    public Mod_Mod(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IModDecl> body) : base() {
      this._name = name;
      this._body = body;
    }
    public override _IMod DowncastClone() {
      if (this is _IMod dt) { return dt; }
      return new Mod_Mod(_name, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Mod_Mod;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Mod.Mod";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Mod_ExternMod : Mod {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Mod_ExternMod(Dafny.ISequence<Dafny.Rune> name) : base() {
      this._name = name;
    }
    public override _IMod DowncastClone() {
      if (this is _IMod dt) { return dt; }
      return new Mod_ExternMod(_name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Mod_ExternMod;
      return oth != null && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Mod.ExternMod";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IModDecl {
    bool is_RawDecl { get; }
    bool is_ModDecl { get; }
    bool is_StructDecl { get; }
    bool is_EnumDecl { get; }
    bool is_ImplDecl { get; }
    bool is_TraitDecl { get; }
    Dafny.ISequence<Dafny.Rune> dtor_body { get; }
    RAST._IMod dtor_mod { get; }
    RAST._IStruct dtor_struct { get; }
    RAST._IEnum dtor_enum { get; }
    RAST._IImpl dtor_impl { get; }
    RAST._ITrait dtor_tr { get; }
    _IModDecl DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class ModDecl : _IModDecl {
    public ModDecl() {
    }
    private static readonly RAST._IModDecl theDefault = create_RawDecl(Dafny.Sequence<Dafny.Rune>.Empty);
    public static RAST._IModDecl Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IModDecl> _TYPE = new Dafny.TypeDescriptor<RAST._IModDecl>(RAST.ModDecl.Default());
    public static Dafny.TypeDescriptor<RAST._IModDecl> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModDecl create_RawDecl(Dafny.ISequence<Dafny.Rune> body) {
      return new ModDecl_RawDecl(body);
    }
    public static _IModDecl create_ModDecl(RAST._IMod mod) {
      return new ModDecl_ModDecl(mod);
    }
    public static _IModDecl create_StructDecl(RAST._IStruct @struct) {
      return new ModDecl_StructDecl(@struct);
    }
    public static _IModDecl create_EnumDecl(RAST._IEnum @enum) {
      return new ModDecl_EnumDecl(@enum);
    }
    public static _IModDecl create_ImplDecl(RAST._IImpl impl) {
      return new ModDecl_ImplDecl(impl);
    }
    public static _IModDecl create_TraitDecl(RAST._ITrait tr) {
      return new ModDecl_TraitDecl(tr);
    }
    public bool is_RawDecl { get { return this is ModDecl_RawDecl; } }
    public bool is_ModDecl { get { return this is ModDecl_ModDecl; } }
    public bool is_StructDecl { get { return this is ModDecl_StructDecl; } }
    public bool is_EnumDecl { get { return this is ModDecl_EnumDecl; } }
    public bool is_ImplDecl { get { return this is ModDecl_ImplDecl; } }
    public bool is_TraitDecl { get { return this is ModDecl_TraitDecl; } }
    public Dafny.ISequence<Dafny.Rune> dtor_body {
      get {
        var d = this;
        return ((ModDecl_RawDecl)d)._body;
      }
    }
    public RAST._IMod dtor_mod {
      get {
        var d = this;
        return ((ModDecl_ModDecl)d)._mod;
      }
    }
    public RAST._IStruct dtor_struct {
      get {
        var d = this;
        return ((ModDecl_StructDecl)d)._struct;
      }
    }
    public RAST._IEnum dtor_enum {
      get {
        var d = this;
        return ((ModDecl_EnumDecl)d)._enum;
      }
    }
    public RAST._IImpl dtor_impl {
      get {
        var d = this;
        return ((ModDecl_ImplDecl)d)._impl;
      }
    }
    public RAST._ITrait dtor_tr {
      get {
        var d = this;
        return ((ModDecl_TraitDecl)d)._tr;
      }
    }
    public abstract _IModDecl DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((this).is_ModDecl) {
        return ((this).dtor_mod)._ToString(ind);
      } else if ((this).is_StructDecl) {
        return ((this).dtor_struct)._ToString(ind);
      } else if ((this).is_ImplDecl) {
        return ((this).dtor_impl)._ToString(ind);
      } else if ((this).is_EnumDecl) {
        return ((this).dtor_enum)._ToString(ind);
      } else if ((this).is_TraitDecl) {
        return ((this).dtor_tr)._ToString(ind);
      } else {
        return (this).dtor_body;
      }
    }
  }
  public class ModDecl_RawDecl : ModDecl {
    public readonly Dafny.ISequence<Dafny.Rune> _body;
    public ModDecl_RawDecl(Dafny.ISequence<Dafny.Rune> body) : base() {
      this._body = body;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_RawDecl(_body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_RawDecl;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.RawDecl";
      s += "(";
      s += this._body.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class ModDecl_ModDecl : ModDecl {
    public readonly RAST._IMod _mod;
    public ModDecl_ModDecl(RAST._IMod mod) : base() {
      this._mod = mod;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_ModDecl(_mod);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_ModDecl;
      return oth != null && object.Equals(this._mod, oth._mod);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mod));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.ModDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._mod);
      s += ")";
      return s;
    }
  }
  public class ModDecl_StructDecl : ModDecl {
    public readonly RAST._IStruct _struct;
    public ModDecl_StructDecl(RAST._IStruct @struct) : base() {
      this._struct = @struct;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_StructDecl(_struct);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_StructDecl;
      return oth != null && object.Equals(this._struct, oth._struct);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._struct));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.StructDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._struct);
      s += ")";
      return s;
    }
  }
  public class ModDecl_EnumDecl : ModDecl {
    public readonly RAST._IEnum _enum;
    public ModDecl_EnumDecl(RAST._IEnum @enum) : base() {
      this._enum = @enum;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_EnumDecl(_enum);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_EnumDecl;
      return oth != null && object.Equals(this._enum, oth._enum);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enum));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.EnumDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._enum);
      s += ")";
      return s;
    }
  }
  public class ModDecl_ImplDecl : ModDecl {
    public readonly RAST._IImpl _impl;
    public ModDecl_ImplDecl(RAST._IImpl impl) : base() {
      this._impl = impl;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_ImplDecl(_impl);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_ImplDecl;
      return oth != null && object.Equals(this._impl, oth._impl);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._impl));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.ImplDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._impl);
      s += ")";
      return s;
    }
  }
  public class ModDecl_TraitDecl : ModDecl {
    public readonly RAST._ITrait _tr;
    public ModDecl_TraitDecl(RAST._ITrait tr) : base() {
      this._tr = tr;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_TraitDecl(_tr);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_TraitDecl;
      return oth != null && object.Equals(this._tr, oth._tr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.TraitDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._tr);
      s += ")";
      return s;
    }
  }

  public interface _IAttribute {
    bool is_RawAttribute { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
  }
  public class Attribute : _IAttribute {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Attribute(Dafny.ISequence<Dafny.Rune> content) {
      this._content = content;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Attribute;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Attribute.RawAttribute";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAttribute create(Dafny.ISequence<Dafny.Rune> content) {
      return new Attribute(content);
    }
    public static _IAttribute create_RawAttribute(Dafny.ISequence<Dafny.Rune> content) {
      return create(content);
    }
    public bool is_RawAttribute { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> ToStringMultiple(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> ind)
    {
      return RAST.__default.SeqToString<Dafny.ISequence<Dafny.Rune>>(attributes, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>>>((_812_ind) => ((System.Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>)((_813_attribute) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_813_attribute), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _812_ind);
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
    }
  }

  public interface _IStruct {
    bool is_Struct { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    RAST._IFormals dtor_fields { get; }
    _IStruct DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Struct : _IStruct {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _attributes;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly RAST._IFormals _fields;
    public Struct(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IFormals fields) {
      this._attributes = attributes;
      this._name = name;
      this._typeParams = typeParams;
      this._fields = fields;
    }
    public _IStruct DowncastClone() {
      if (this is _IStruct dt) { return dt; }
      return new Struct(_attributes, _name, _typeParams, _fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Struct;
      return oth != null && object.Equals(this._attributes, oth._attributes) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Struct.Struct";
      s += "(";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
    private static readonly RAST._IStruct theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._ITypeParam>.Empty, RAST.Formals.Default());
    public static RAST._IStruct Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IStruct> _TYPE = new Dafny.TypeDescriptor<RAST._IStruct>(RAST.Struct.Default());
    public static Dafny.TypeDescriptor<RAST._IStruct> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStruct create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IFormals fields) {
      return new Struct(attributes, name, typeParams, fields);
    }
    public static _IStruct create_Struct(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IFormals fields) {
      return create(attributes, name, typeParams, fields);
    }
    public bool is_Struct { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes {
      get {
        return this._attributes;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public RAST._IFormals dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.Attribute.ToStringMultiple((this).dtor_attributes, ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub struct ")), (this).dtor_name), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), ((this).dtor_fields)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND), ((this).dtor_fields).is_NamedFormals)), ((((this).dtor_fields).is_NamelessFormals) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))));
    }
  }

  public interface _INamelessFormal {
    bool is_NamelessFormal { get; }
    RAST._IVisibility dtor_visibility { get; }
    RAST._IType dtor_tpe { get; }
    _INamelessFormal DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class NamelessFormal : _INamelessFormal {
    public readonly RAST._IVisibility _visibility;
    public readonly RAST._IType _tpe;
    public NamelessFormal(RAST._IVisibility visibility, RAST._IType tpe) {
      this._visibility = visibility;
      this._tpe = tpe;
    }
    public _INamelessFormal DowncastClone() {
      if (this is _INamelessFormal dt) { return dt; }
      return new NamelessFormal(_visibility, _tpe);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.NamelessFormal;
      return oth != null && object.Equals(this._visibility, oth._visibility) && object.Equals(this._tpe, oth._tpe);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._visibility));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.NamelessFormal.NamelessFormal";
      s += "(";
      s += Dafny.Helpers.ToString(this._visibility);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ")";
      return s;
    }
    private static readonly RAST._INamelessFormal theDefault = create(RAST.Visibility.Default(), RAST.Type.Default());
    public static RAST._INamelessFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._INamelessFormal> _TYPE = new Dafny.TypeDescriptor<RAST._INamelessFormal>(RAST.NamelessFormal.Default());
    public static Dafny.TypeDescriptor<RAST._INamelessFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INamelessFormal create(RAST._IVisibility visibility, RAST._IType tpe) {
      return new NamelessFormal(visibility, tpe);
    }
    public static _INamelessFormal create_NamelessFormal(RAST._IVisibility visibility, RAST._IType tpe) {
      return create(visibility, tpe);
    }
    public bool is_NamelessFormal { get { return true; } }
    public RAST._IVisibility dtor_visibility {
      get {
        return this._visibility;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        return this._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(((object.Equals((this).dtor_visibility, RAST.Visibility.create_PUB())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub ")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), ((this).dtor_tpe)._ToString(ind));
    }
  }

  public interface _IFormals {
    bool is_NamedFormals { get; }
    bool is_NamelessFormals { get; }
    Dafny.ISequence<RAST._IFormal> dtor_fields { get; }
    Dafny.ISequence<RAST._INamelessFormal> dtor_types { get; }
    _IFormals DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine);
  }
  public abstract class Formals : _IFormals {
    public Formals() {
    }
    private static readonly RAST._IFormals theDefault = create_NamedFormals(Dafny.Sequence<RAST._IFormal>.Empty);
    public static RAST._IFormals Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IFormals> _TYPE = new Dafny.TypeDescriptor<RAST._IFormals>(RAST.Formals.Default());
    public static Dafny.TypeDescriptor<RAST._IFormals> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormals create_NamedFormals(Dafny.ISequence<RAST._IFormal> fields) {
      return new Formals_NamedFormals(fields);
    }
    public static _IFormals create_NamelessFormals(Dafny.ISequence<RAST._INamelessFormal> types) {
      return new Formals_NamelessFormals(types);
    }
    public bool is_NamedFormals { get { return this is Formals_NamedFormals; } }
    public bool is_NamelessFormals { get { return this is Formals_NamelessFormals; } }
    public Dafny.ISequence<RAST._IFormal> dtor_fields {
      get {
        var d = this;
        return ((Formals_NamedFormals)d)._fields;
      }
    }
    public Dafny.ISequence<RAST._INamelessFormal> dtor_types {
      get {
        var d = this;
        return ((Formals_NamelessFormals)d)._types;
      }
    }
    public abstract _IFormals DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine)
    {
      if ((this).is_NamedFormals) {
        Dafny.ISequence<Dafny.Rune> _814_separator = ((newLine) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"), ind), RAST.__default.IND)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")));
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs40 = (((newLine) && ((new BigInteger(((this).dtor_fields).Count)).Sign == 1)) ? (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind))) : ((((new BigInteger(((this).dtor_fields).Count)).Sign == 1) ? (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "))) : (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))))));
        Dafny.ISequence<Dafny.Rune> _815_beginSpace = _let_tmp_rhs40.dtor__0;
        Dafny.ISequence<Dafny.Rune> _816_endSpace = _let_tmp_rhs40.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"), _815_beginSpace), RAST.__default.SeqToString<RAST._IFormal>((this).dtor_fields, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>>>((_817_ind) => ((System.Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>)((_818_field) => {
          return (_818_field)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_817_ind, RAST.__default.IND));
        })))(ind), _814_separator)), _816_endSpace), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else {
        Dafny.ISequence<Dafny.Rune> _819_separator = ((newLine) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"), ind), RAST.__default.IND)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")));
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), RAST.__default.SeqToString<RAST._INamelessFormal>((this).dtor_types, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._INamelessFormal, Dafny.ISequence<Dafny.Rune>>>>((_820_ind) => ((System.Func<RAST._INamelessFormal, Dafny.ISequence<Dafny.Rune>>)((_821_t) => {
          return (_821_t)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_820_ind, RAST.__default.IND));
        })))(ind), _819_separator)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
    }
  }
  public class Formals_NamedFormals : Formals {
    public readonly Dafny.ISequence<RAST._IFormal> _fields;
    public Formals_NamedFormals(Dafny.ISequence<RAST._IFormal> fields) : base() {
      this._fields = fields;
    }
    public override _IFormals DowncastClone() {
      if (this is _IFormals dt) { return dt; }
      return new Formals_NamedFormals(_fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Formals_NamedFormals;
      return oth != null && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Formals.NamedFormals";
      s += "(";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
  }
  public class Formals_NamelessFormals : Formals {
    public readonly Dafny.ISequence<RAST._INamelessFormal> _types;
    public Formals_NamelessFormals(Dafny.ISequence<RAST._INamelessFormal> types) : base() {
      this._types = types;
    }
    public override _IFormals DowncastClone() {
      if (this is _IFormals dt) { return dt; }
      return new Formals_NamelessFormals(_types);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Formals_NamelessFormals;
      return oth != null && object.Equals(this._types, oth._types);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._types));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Formals.NamelessFormals";
      s += "(";
      s += Dafny.Helpers.ToString(this._types);
      s += ")";
      return s;
    }
  }

  public interface _IEnumCase {
    bool is_EnumCase { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    RAST._IFormals dtor_fields { get; }
    _IEnumCase DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine);
  }
  public class EnumCase : _IEnumCase {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IFormals _fields;
    public EnumCase(Dafny.ISequence<Dafny.Rune> name, RAST._IFormals fields) {
      this._name = name;
      this._fields = fields;
    }
    public _IEnumCase DowncastClone() {
      if (this is _IEnumCase dt) { return dt; }
      return new EnumCase(_name, _fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.EnumCase;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.EnumCase.EnumCase";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
    private static readonly RAST._IEnumCase theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Formals.Default());
    public static RAST._IEnumCase Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IEnumCase> _TYPE = new Dafny.TypeDescriptor<RAST._IEnumCase>(RAST.EnumCase.Default());
    public static Dafny.TypeDescriptor<RAST._IEnumCase> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEnumCase create(Dafny.ISequence<Dafny.Rune> name, RAST._IFormals fields) {
      return new EnumCase(name, fields);
    }
    public static _IEnumCase create_EnumCase(Dafny.ISequence<Dafny.Rune> name, RAST._IFormals fields) {
      return create(name, fields);
    }
    public bool is_EnumCase { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public RAST._IFormals dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine)
    {
      return Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_name, ((this).dtor_fields)._ToString(ind, newLine));
    }
  }

  public interface _IEnum {
    bool is_Enum { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    Dafny.ISequence<RAST._IEnumCase> dtor_variants { get; }
    _IEnum DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Enum : _IEnum {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _attributes;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly Dafny.ISequence<RAST._IEnumCase> _variants;
    public Enum(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IEnumCase> variants) {
      this._attributes = attributes;
      this._name = name;
      this._typeParams = typeParams;
      this._variants = variants;
    }
    public _IEnum DowncastClone() {
      if (this is _IEnum dt) { return dt; }
      return new Enum(_attributes, _name, _typeParams, _variants);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Enum;
      return oth != null && object.Equals(this._attributes, oth._attributes) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._variants, oth._variants);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variants));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Enum.Enum";
      s += "(";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._variants);
      s += ")";
      return s;
    }
    private static readonly RAST._IEnum theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._ITypeParam>.Empty, Dafny.Sequence<RAST._IEnumCase>.Empty);
    public static RAST._IEnum Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IEnum> _TYPE = new Dafny.TypeDescriptor<RAST._IEnum>(RAST.Enum.Default());
    public static Dafny.TypeDescriptor<RAST._IEnum> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEnum create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IEnumCase> variants) {
      return new Enum(attributes, name, typeParams, variants);
    }
    public static _IEnum create_Enum(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IEnumCase> variants) {
      return create(attributes, name, typeParams, variants);
    }
    public bool is_Enum { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes {
      get {
        return this._attributes;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<RAST._IEnumCase> dtor_variants {
      get {
        return this._variants;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.Attribute.ToStringMultiple((this).dtor_attributes, ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub enum ")), (this).dtor_name), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IEnumCase>((this).dtor_variants, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IEnumCase, Dafny.ISequence<Dafny.Rune>>>>((_822_ind) => ((System.Func<RAST._IEnumCase, Dafny.ISequence<Dafny.Rune>>)((_823_variant) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _822_ind), RAST.__default.IND), (_823_variant)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_822_ind, RAST.__default.IND), false));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
    }
  }

  public interface _ITypeParam {
    bool is_RawTypeParam { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
    Dafny.ISequence<RAST._IType> dtor_constraints { get; }
    _ITypeParam DowncastClone();
    RAST._ITypeParam AddConstraints(Dafny.ISequence<RAST._IType> constraints);
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class TypeParam : _ITypeParam {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public readonly Dafny.ISequence<RAST._IType> _constraints;
    public TypeParam(Dafny.ISequence<Dafny.Rune> content, Dafny.ISequence<RAST._IType> constraints) {
      this._content = content;
      this._constraints = constraints;
    }
    public _ITypeParam DowncastClone() {
      if (this is _ITypeParam dt) { return dt; }
      return new TypeParam(_content, _constraints);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.TypeParam;
      return oth != null && object.Equals(this._content, oth._content) && object.Equals(this._constraints, oth._constraints);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._constraints));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.TypeParam.RawTypeParam";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._constraints);
      s += ")";
      return s;
    }
    private static readonly RAST._ITypeParam theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IType>.Empty);
    public static RAST._ITypeParam Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._ITypeParam> _TYPE = new Dafny.TypeDescriptor<RAST._ITypeParam>(RAST.TypeParam.Default());
    public static Dafny.TypeDescriptor<RAST._ITypeParam> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITypeParam create(Dafny.ISequence<Dafny.Rune> content, Dafny.ISequence<RAST._IType> constraints) {
      return new TypeParam(content, constraints);
    }
    public static _ITypeParam create_RawTypeParam(Dafny.ISequence<Dafny.Rune> content, Dafny.ISequence<RAST._IType> constraints) {
      return create(content, constraints);
    }
    public bool is_RawTypeParam { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public Dafny.ISequence<RAST._IType> dtor_constraints {
      get {
        return this._constraints;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> ToStringMultiple(Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<Dafny.Rune> ind)
    {
      if ((new BigInteger((typeParams).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), RAST.__default.SeqToString<RAST._ITypeParam>(typeParams, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._ITypeParam, Dafny.ISequence<Dafny.Rune>>>>((_824_ind) => ((System.Func<RAST._ITypeParam, Dafny.ISequence<Dafny.Rune>>)((_825_t) => {
          return (_825_t)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_824_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
    }
    public static Dafny.ISequence<RAST._ITypeParam> AddConstraintsMultiple(Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IType> constraints)
    {
      Dafny.ISequence<RAST._ITypeParam> _826___accumulator = Dafny.Sequence<RAST._ITypeParam>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((typeParams).Count)).Sign == 0) {
        return Dafny.Sequence<RAST._ITypeParam>.Concat(_826___accumulator, Dafny.Sequence<RAST._ITypeParam>.FromElements());
      } else {
        _826___accumulator = Dafny.Sequence<RAST._ITypeParam>.Concat(_826___accumulator, Dafny.Sequence<RAST._ITypeParam>.FromElements(((typeParams).Select(BigInteger.Zero)).AddConstraints(constraints)));
        Dafny.ISequence<RAST._ITypeParam> _in111 = (typeParams).Drop(BigInteger.One);
        Dafny.ISequence<RAST._IType> _in112 = constraints;
        typeParams = _in111;
        constraints = _in112;
        goto TAIL_CALL_START;
      }
    }
    public RAST._ITypeParam AddConstraints(Dafny.ISequence<RAST._IType> constraints) {
      RAST._ITypeParam _827_dt__update__tmp_h0 = this;
      Dafny.ISequence<RAST._IType> _828_dt__update_hconstraints_h0 = Dafny.Sequence<RAST._IType>.Concat((this).dtor_constraints, constraints);
      return RAST.TypeParam.create((_827_dt__update__tmp_h0).dtor_content, _828_dt__update_hconstraints_h0);
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_content, (((new BigInteger(((this).dtor_constraints).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": "), RAST.__default.SeqToString<RAST._IType>((this).dtor_constraints, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_829_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_830_t) => {
        return (_830_t)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_829_ind, RAST.__default.IND));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + "))))));
    }
  }

  public interface _IType {
    bool is_SelfOwned { get; }
    bool is_U8 { get; }
    bool is_U16 { get; }
    bool is_U32 { get; }
    bool is_U64 { get; }
    bool is_U128 { get; }
    bool is_I8 { get; }
    bool is_I16 { get; }
    bool is_I32 { get; }
    bool is_I64 { get; }
    bool is_I128 { get; }
    bool is_TIdentifier { get; }
    bool is_TMemberSelect { get; }
    bool is_TypeApp { get; }
    bool is_Borrowed { get; }
    bool is_BorrowedMut { get; }
    bool is_ImplType { get; }
    bool is_DynType { get; }
    bool is_TupleType { get; }
    bool is_FnType { get; }
    bool is_IntersectionType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    RAST._IType dtor_base { get; }
    RAST._IType dtor_baseName { get; }
    Dafny.ISequence<RAST._IType> dtor_arguments { get; }
    RAST._IType dtor_underlying { get; }
    RAST._IType dtor_returnType { get; }
    RAST._IType dtor_left { get; }
    RAST._IType dtor_right { get; }
    _IType DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
    RAST._IType MSel(Dafny.ISequence<Dafny.Rune> name);
    RAST._IType Apply1(RAST._IType arg);
    RAST._IType Apply(Dafny.ISequence<RAST._IType> args);
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly RAST._IType theDefault = create_SelfOwned();
    public static RAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IType> _TYPE = new Dafny.TypeDescriptor<RAST._IType>(RAST.Type.Default());
    public static Dafny.TypeDescriptor<RAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_SelfOwned() {
      return new Type_SelfOwned();
    }
    public static _IType create_U8() {
      return new Type_U8();
    }
    public static _IType create_U16() {
      return new Type_U16();
    }
    public static _IType create_U32() {
      return new Type_U32();
    }
    public static _IType create_U64() {
      return new Type_U64();
    }
    public static _IType create_U128() {
      return new Type_U128();
    }
    public static _IType create_I8() {
      return new Type_I8();
    }
    public static _IType create_I16() {
      return new Type_I16();
    }
    public static _IType create_I32() {
      return new Type_I32();
    }
    public static _IType create_I64() {
      return new Type_I64();
    }
    public static _IType create_I128() {
      return new Type_I128();
    }
    public static _IType create_TIdentifier(Dafny.ISequence<Dafny.Rune> name) {
      return new Type_TIdentifier(name);
    }
    public static _IType create_TMemberSelect(RAST._IType @base, Dafny.ISequence<Dafny.Rune> name) {
      return new Type_TMemberSelect(@base, name);
    }
    public static _IType create_TypeApp(RAST._IType baseName, Dafny.ISequence<RAST._IType> arguments) {
      return new Type_TypeApp(baseName, arguments);
    }
    public static _IType create_Borrowed(RAST._IType underlying) {
      return new Type_Borrowed(underlying);
    }
    public static _IType create_BorrowedMut(RAST._IType underlying) {
      return new Type_BorrowedMut(underlying);
    }
    public static _IType create_ImplType(RAST._IType underlying) {
      return new Type_ImplType(underlying);
    }
    public static _IType create_DynType(RAST._IType underlying) {
      return new Type_DynType(underlying);
    }
    public static _IType create_TupleType(Dafny.ISequence<RAST._IType> arguments) {
      return new Type_TupleType(arguments);
    }
    public static _IType create_FnType(Dafny.ISequence<RAST._IType> arguments, RAST._IType returnType) {
      return new Type_FnType(arguments, returnType);
    }
    public static _IType create_IntersectionType(RAST._IType left, RAST._IType right) {
      return new Type_IntersectionType(left, right);
    }
    public bool is_SelfOwned { get { return this is Type_SelfOwned; } }
    public bool is_U8 { get { return this is Type_U8; } }
    public bool is_U16 { get { return this is Type_U16; } }
    public bool is_U32 { get { return this is Type_U32; } }
    public bool is_U64 { get { return this is Type_U64; } }
    public bool is_U128 { get { return this is Type_U128; } }
    public bool is_I8 { get { return this is Type_I8; } }
    public bool is_I16 { get { return this is Type_I16; } }
    public bool is_I32 { get { return this is Type_I32; } }
    public bool is_I64 { get { return this is Type_I64; } }
    public bool is_I128 { get { return this is Type_I128; } }
    public bool is_TIdentifier { get { return this is Type_TIdentifier; } }
    public bool is_TMemberSelect { get { return this is Type_TMemberSelect; } }
    public bool is_TypeApp { get { return this is Type_TypeApp; } }
    public bool is_Borrowed { get { return this is Type_Borrowed; } }
    public bool is_BorrowedMut { get { return this is Type_BorrowedMut; } }
    public bool is_ImplType { get { return this is Type_ImplType; } }
    public bool is_DynType { get { return this is Type_DynType; } }
    public bool is_TupleType { get { return this is Type_TupleType; } }
    public bool is_FnType { get { return this is Type_FnType; } }
    public bool is_IntersectionType { get { return this is Type_IntersectionType; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Type_TIdentifier) { return ((Type_TIdentifier)d)._name; }
        return ((Type_TMemberSelect)d)._name;
      }
    }
    public RAST._IType dtor_base {
      get {
        var d = this;
        return ((Type_TMemberSelect)d)._base;
      }
    }
    public RAST._IType dtor_baseName {
      get {
        var d = this;
        return ((Type_TypeApp)d)._baseName;
      }
    }
    public Dafny.ISequence<RAST._IType> dtor_arguments {
      get {
        var d = this;
        if (d is Type_TypeApp) { return ((Type_TypeApp)d)._arguments; }
        if (d is Type_TupleType) { return ((Type_TupleType)d)._arguments; }
        return ((Type_FnType)d)._arguments;
      }
    }
    public RAST._IType dtor_underlying {
      get {
        var d = this;
        if (d is Type_Borrowed) { return ((Type_Borrowed)d)._underlying; }
        if (d is Type_BorrowedMut) { return ((Type_BorrowedMut)d)._underlying; }
        if (d is Type_ImplType) { return ((Type_ImplType)d)._underlying; }
        return ((Type_DynType)d)._underlying;
      }
    }
    public RAST._IType dtor_returnType {
      get {
        var d = this;
        return ((Type_FnType)d)._returnType;
      }
    }
    public RAST._IType dtor_left {
      get {
        var d = this;
        return ((Type_IntersectionType)d)._left;
      }
    }
    public RAST._IType dtor_right {
      get {
        var d = this;
        return ((Type_IntersectionType)d)._right;
      }
    }
    public abstract _IType DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      RAST._IType _source26 = this;
      if (_source26.is_SelfOwned) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
      } else if (_source26.is_U8) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u8");
      } else if (_source26.is_U16) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u16");
      } else if (_source26.is_U32) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u32");
      } else if (_source26.is_U64) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u64");
      } else if (_source26.is_U128) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u128");
      } else if (_source26.is_I8) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i8");
      } else if (_source26.is_I16) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i16");
      } else if (_source26.is_I32) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i32");
      } else if (_source26.is_I64) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i64");
      } else if (_source26.is_I128) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i128");
      } else if (_source26.is_TIdentifier) {
        Dafny.ISequence<Dafny.Rune> _831___mcc_h0 = _source26.dtor_name;
        Dafny.ISequence<Dafny.Rune> _832_underlying = _831___mcc_h0;
        return _832_underlying;
      } else if (_source26.is_TMemberSelect) {
        RAST._IType _833___mcc_h1 = _source26.dtor_base;
        Dafny.ISequence<Dafny.Rune> _834___mcc_h2 = _source26.dtor_name;
        Dafny.ISequence<Dafny.Rune> _835_name = _834___mcc_h2;
        RAST._IType _836_underlying = _833___mcc_h1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_836_underlying)._ToString(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _835_name);
      } else if (_source26.is_TypeApp) {
        RAST._IType _837___mcc_h3 = _source26.dtor_baseName;
        Dafny.ISequence<RAST._IType> _838___mcc_h4 = _source26.dtor_arguments;
        Dafny.ISequence<RAST._IType> _839_args = _838___mcc_h4;
        RAST._IType _840_base = _837___mcc_h3;
        return Dafny.Sequence<Dafny.Rune>.Concat((_840_base)._ToString(ind), (((_839_args).Equals(Dafny.Sequence<RAST._IType>.FromElements())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), RAST.__default.SeqToString<RAST._IType>(_839_args, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_841_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_842_arg) => {
          return (_842_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_841_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")))));
      } else if (_source26.is_Borrowed) {
        RAST._IType _843___mcc_h5 = _source26.dtor_underlying;
        RAST._IType _844_underlying = _843___mcc_h5;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), (_844_underlying)._ToString(ind));
      } else if (_source26.is_BorrowedMut) {
        RAST._IType _845___mcc_h6 = _source26.dtor_underlying;
        RAST._IType _846_underlying = _845___mcc_h6;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut "), (_846_underlying)._ToString(ind));
      } else if (_source26.is_ImplType) {
        RAST._IType _847___mcc_h7 = _source26.dtor_underlying;
        RAST._IType _848_underlying = _847___mcc_h7;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), (_848_underlying)._ToString(ind));
      } else if (_source26.is_DynType) {
        RAST._IType _849___mcc_h8 = _source26.dtor_underlying;
        RAST._IType _850_underlying = _849___mcc_h8;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn "), (_850_underlying)._ToString(ind));
      } else if (_source26.is_TupleType) {
        Dafny.ISequence<RAST._IType> _851___mcc_h9 = _source26.dtor_arguments;
        Dafny.ISequence<RAST._IType> _852_args = _851___mcc_h9;
        if ((_852_args).Equals(Dafny.Sequence<RAST._IType>.FromElements())) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()");
        } else {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), RAST.__default.SeqToString<RAST._IType>(_852_args, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_853_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_854_arg) => {
            return (_854_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_853_ind, RAST.__default.IND));
          })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
        }
      } else if (_source26.is_FnType) {
        Dafny.ISequence<RAST._IType> _855___mcc_h10 = _source26.dtor_arguments;
        RAST._IType _856___mcc_h11 = _source26.dtor_returnType;
        RAST._IType _857_returnType = _856___mcc_h11;
        Dafny.ISequence<RAST._IType> _858_arguments = _855___mcc_h10;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Fn("), RAST.__default.SeqToString<RAST._IType>(_858_arguments, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_859_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_860_arg) => {
          return (_860_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_859_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), (_857_returnType)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)));
      } else {
        RAST._IType _861___mcc_h12 = _source26.dtor_left;
        RAST._IType _862___mcc_h13 = _source26.dtor_right;
        RAST._IType _863_right = _862___mcc_h13;
        RAST._IType _864_left = _861___mcc_h12;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_864_left)._ToString(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + ")), (_863_right)._ToString(ind));
      }
    }
    public RAST._IType MSel(Dafny.ISequence<Dafny.Rune> name) {
      return RAST.Type.create_TMemberSelect(this, name);
    }
    public RAST._IType Apply1(RAST._IType arg) {
      return RAST.Type.create_TypeApp(this, Dafny.Sequence<RAST._IType>.FromElements(arg));
    }
    public RAST._IType Apply(Dafny.ISequence<RAST._IType> args) {
      return RAST.Type.create_TypeApp(this, args);
    }
  }
  public class Type_SelfOwned : Type {
    public Type_SelfOwned() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_SelfOwned();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_SelfOwned;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.SelfOwned";
      return s;
    }
  }
  public class Type_U8 : Type {
    public Type_U8() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U8();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U8;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U8";
      return s;
    }
  }
  public class Type_U16 : Type {
    public Type_U16() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U16();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U16;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U16";
      return s;
    }
  }
  public class Type_U32 : Type {
    public Type_U32() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U32();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U32;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U32";
      return s;
    }
  }
  public class Type_U64 : Type {
    public Type_U64() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U64();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U64;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U64";
      return s;
    }
  }
  public class Type_U128 : Type {
    public Type_U128() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U128();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U128;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U128";
      return s;
    }
  }
  public class Type_I8 : Type {
    public Type_I8() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I8();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I8;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I8";
      return s;
    }
  }
  public class Type_I16 : Type {
    public Type_I16() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I16();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I16;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I16";
      return s;
    }
  }
  public class Type_I32 : Type {
    public Type_I32() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I32();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I32;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I32";
      return s;
    }
  }
  public class Type_I64 : Type {
    public Type_I64() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I64();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I64;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I64";
      return s;
    }
  }
  public class Type_I128 : Type {
    public Type_I128() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I128();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I128;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I128";
      return s;
    }
  }
  public class Type_TIdentifier : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Type_TIdentifier(Dafny.ISequence<Dafny.Rune> name) : base() {
      this._name = name;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TIdentifier(_name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_TIdentifier;
      return oth != null && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.TIdentifier";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TMemberSelect : Type {
    public readonly RAST._IType _base;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Type_TMemberSelect(RAST._IType @base, Dafny.ISequence<Dafny.Rune> name) : base() {
      this._base = @base;
      this._name = name;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TMemberSelect(_base, _name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_TMemberSelect;
      return oth != null && object.Equals(this._base, oth._base) && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._base));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.TMemberSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._base);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TypeApp : Type {
    public readonly RAST._IType _baseName;
    public readonly Dafny.ISequence<RAST._IType> _arguments;
    public Type_TypeApp(RAST._IType baseName, Dafny.ISequence<RAST._IType> arguments) : base() {
      this._baseName = baseName;
      this._arguments = arguments;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeApp(_baseName, _arguments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_TypeApp;
      return oth != null && object.Equals(this._baseName, oth._baseName) && object.Equals(this._arguments, oth._arguments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._baseName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.TypeApp";
      s += "(";
      s += Dafny.Helpers.ToString(this._baseName);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ")";
      return s;
    }
  }
  public class Type_Borrowed : Type {
    public readonly RAST._IType _underlying;
    public Type_Borrowed(RAST._IType underlying) : base() {
      this._underlying = underlying;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Borrowed(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_Borrowed;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.Borrowed";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Type_BorrowedMut : Type {
    public readonly RAST._IType _underlying;
    public Type_BorrowedMut(RAST._IType underlying) : base() {
      this._underlying = underlying;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_BorrowedMut(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_BorrowedMut;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.BorrowedMut";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Type_ImplType : Type {
    public readonly RAST._IType _underlying;
    public Type_ImplType(RAST._IType underlying) : base() {
      this._underlying = underlying;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_ImplType(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_ImplType;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.ImplType";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Type_DynType : Type {
    public readonly RAST._IType _underlying;
    public Type_DynType(RAST._IType underlying) : base() {
      this._underlying = underlying;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_DynType(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_DynType;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.DynType";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Type_TupleType : Type {
    public readonly Dafny.ISequence<RAST._IType> _arguments;
    public Type_TupleType(Dafny.ISequence<RAST._IType> arguments) : base() {
      this._arguments = arguments;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TupleType(_arguments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_TupleType;
      return oth != null && object.Equals(this._arguments, oth._arguments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.TupleType";
      s += "(";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ")";
      return s;
    }
  }
  public class Type_FnType : Type {
    public readonly Dafny.ISequence<RAST._IType> _arguments;
    public readonly RAST._IType _returnType;
    public Type_FnType(Dafny.ISequence<RAST._IType> arguments, RAST._IType returnType) : base() {
      this._arguments = arguments;
      this._returnType = returnType;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_FnType(_arguments, _returnType);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_FnType;
      return oth != null && object.Equals(this._arguments, oth._arguments) && object.Equals(this._returnType, oth._returnType);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._returnType));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.FnType";
      s += "(";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ", ";
      s += Dafny.Helpers.ToString(this._returnType);
      s += ")";
      return s;
    }
  }
  public class Type_IntersectionType : Type {
    public readonly RAST._IType _left;
    public readonly RAST._IType _right;
    public Type_IntersectionType(RAST._IType left, RAST._IType right) : base() {
      this._left = left;
      this._right = right;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_IntersectionType(_left, _right);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_IntersectionType;
      return oth != null && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.IntersectionType";
      s += "(";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ")";
      return s;
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    RAST._IType dtor_tpe { get; }
    Dafny.ISequence<Dafny.Rune> dtor_where { get; }
    Dafny.ISequence<RAST._IImplMember> dtor_body { get; }
    _ITrait DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly RAST._IType _tpe;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<RAST._IImplMember> _body;
    public Trait(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._where = @where;
      this._body = body;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_typeParams, _tpe, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Trait;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Trait.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly RAST._ITrait theDefault = create(Dafny.Sequence<RAST._ITypeParam>.Empty, RAST.Type.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IImplMember>.Empty);
    public static RAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._ITrait> _TYPE = new Dafny.TypeDescriptor<RAST._ITrait>(RAST.Trait.Default());
    public static Dafny.TypeDescriptor<RAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return new Trait(typeParams, tpe, @where, body);
    }
    public static _ITrait create_Trait(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return create(typeParams, tpe, @where, body);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        return this._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_where {
      get {
        return this._where;
      }
    }
    public Dafny.ISequence<RAST._IImplMember> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("trait "), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), ((this).dtor_tpe)._ToString(ind)), ((!((this).dtor_where).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (this).dtor_where)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IImplMember>((this).dtor_body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>>>((_865_ind) => ((System.Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>)((_866_member) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _865_ind), RAST.__default.IND), (_866_member)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_865_ind, RAST.__default.IND)));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), (((new BigInteger(((this).dtor_body).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
    }
  }

  public interface _IImpl {
    bool is_ImplFor { get; }
    bool is_Impl { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    RAST._IType dtor_tpe { get; }
    RAST._IType dtor_forType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_where { get; }
    Dafny.ISequence<RAST._IImplMember> dtor_body { get; }
    _IImpl DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class Impl : _IImpl {
    public Impl() {
    }
    private static readonly RAST._IImpl theDefault = create_ImplFor(Dafny.Sequence<RAST._ITypeParam>.Empty, RAST.Type.Default(), RAST.Type.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IImplMember>.Empty);
    public static RAST._IImpl Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IImpl> _TYPE = new Dafny.TypeDescriptor<RAST._IImpl>(RAST.Impl.Default());
    public static Dafny.TypeDescriptor<RAST._IImpl> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IImpl create_ImplFor(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, RAST._IType forType, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return new Impl_ImplFor(typeParams, tpe, forType, @where, body);
    }
    public static _IImpl create_Impl(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return new Impl_Impl(typeParams, tpe, @where, body);
    }
    public bool is_ImplFor { get { return this is Impl_ImplFor; } }
    public bool is_Impl { get { return this is Impl_Impl; } }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._typeParams; }
        return ((Impl_Impl)d)._typeParams;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._tpe; }
        return ((Impl_Impl)d)._tpe;
      }
    }
    public RAST._IType dtor_forType {
      get {
        var d = this;
        return ((Impl_ImplFor)d)._forType;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_where {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._where; }
        return ((Impl_Impl)d)._where;
      }
    }
    public Dafny.ISequence<RAST._IImplMember> dtor_body {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._body; }
        return ((Impl_Impl)d)._body;
      }
    }
    public abstract _IImpl DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), ((this).dtor_tpe)._ToString(ind)), (((this).is_ImplFor) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" for "), ((this).dtor_forType)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), ((!((this).dtor_where).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (this).dtor_where)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IImplMember>((this).dtor_body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>>>((_867_ind) => ((System.Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>)((_868_member) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _867_ind), RAST.__default.IND), (_868_member)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_867_ind, RAST.__default.IND)));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), (((new BigInteger(((this).dtor_body).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
    }
  }
  public class Impl_ImplFor : Impl {
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly RAST._IType _tpe;
    public readonly RAST._IType _forType;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<RAST._IImplMember> _body;
    public Impl_ImplFor(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, RAST._IType forType, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) : base() {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._forType = forType;
      this._where = @where;
      this._body = body;
    }
    public override _IImpl DowncastClone() {
      if (this is _IImpl dt) { return dt; }
      return new Impl_ImplFor(_typeParams, _tpe, _forType, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Impl_ImplFor;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._forType, oth._forType) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._forType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Impl.ImplFor";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += Dafny.Helpers.ToString(this._forType);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Impl_Impl : Impl {
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly RAST._IType _tpe;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<RAST._IImplMember> _body;
    public Impl_Impl(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) : base() {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._where = @where;
      this._body = body;
    }
    public override _IImpl DowncastClone() {
      if (this is _IImpl dt) { return dt; }
      return new Impl_Impl(_typeParams, _tpe, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Impl_Impl;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Impl.Impl";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }

  public interface _IImplMember {
    bool is_RawImplMember { get; }
    bool is_FnDecl { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
    RAST._IVisibility dtor_pub { get; }
    RAST._IFn dtor_fun { get; }
    _IImplMember DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class ImplMember : _IImplMember {
    public ImplMember() {
    }
    private static readonly RAST._IImplMember theDefault = create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Empty);
    public static RAST._IImplMember Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IImplMember> _TYPE = new Dafny.TypeDescriptor<RAST._IImplMember>(RAST.ImplMember.Default());
    public static Dafny.TypeDescriptor<RAST._IImplMember> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IImplMember create_RawImplMember(Dafny.ISequence<Dafny.Rune> content) {
      return new ImplMember_RawImplMember(content);
    }
    public static _IImplMember create_FnDecl(RAST._IVisibility pub, RAST._IFn fun) {
      return new ImplMember_FnDecl(pub, fun);
    }
    public bool is_RawImplMember { get { return this is ImplMember_RawImplMember; } }
    public bool is_FnDecl { get { return this is ImplMember_FnDecl; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        var d = this;
        return ((ImplMember_RawImplMember)d)._content;
      }
    }
    public RAST._IVisibility dtor_pub {
      get {
        var d = this;
        return ((ImplMember_FnDecl)d)._pub;
      }
    }
    public RAST._IFn dtor_fun {
      get {
        var d = this;
        return ((ImplMember_FnDecl)d)._fun;
      }
    }
    public abstract _IImplMember DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((this).is_FnDecl) {
        return Dafny.Sequence<Dafny.Rune>.Concat(((object.Equals((this).dtor_pub, RAST.Visibility.create_PUB())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub ")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), ((this).dtor_fun)._ToString(ind));
      } else {
        return (this).dtor_content;
      }
    }
  }
  public class ImplMember_RawImplMember : ImplMember {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public ImplMember_RawImplMember(Dafny.ISequence<Dafny.Rune> content) : base() {
      this._content = content;
    }
    public override _IImplMember DowncastClone() {
      if (this is _IImplMember dt) { return dt; }
      return new ImplMember_RawImplMember(_content);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ImplMember_RawImplMember;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ImplMember.RawImplMember";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class ImplMember_FnDecl : ImplMember {
    public readonly RAST._IVisibility _pub;
    public readonly RAST._IFn _fun;
    public ImplMember_FnDecl(RAST._IVisibility pub, RAST._IFn fun) : base() {
      this._pub = pub;
      this._fun = fun;
    }
    public override _IImplMember DowncastClone() {
      if (this is _IImplMember dt) { return dt; }
      return new ImplMember_FnDecl(_pub, _fun);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ImplMember_FnDecl;
      return oth != null && object.Equals(this._pub, oth._pub) && object.Equals(this._fun, oth._fun);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pub));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fun));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ImplMember.FnDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._pub);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fun);
      s += ")";
      return s;
    }
  }

  public interface _IVisibility {
    bool is_PUB { get; }
    bool is_PRIV { get; }
    _IVisibility DowncastClone();
  }
  public abstract class Visibility : _IVisibility {
    public Visibility() {
    }
    private static readonly RAST._IVisibility theDefault = create_PUB();
    public static RAST._IVisibility Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IVisibility> _TYPE = new Dafny.TypeDescriptor<RAST._IVisibility>(RAST.Visibility.Default());
    public static Dafny.TypeDescriptor<RAST._IVisibility> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IVisibility create_PUB() {
      return new Visibility_PUB();
    }
    public static _IVisibility create_PRIV() {
      return new Visibility_PRIV();
    }
    public bool is_PUB { get { return this is Visibility_PUB; } }
    public bool is_PRIV { get { return this is Visibility_PRIV; } }
    public static System.Collections.Generic.IEnumerable<_IVisibility> AllSingletonConstructors {
      get {
        yield return Visibility.create_PUB();
        yield return Visibility.create_PRIV();
      }
    }
    public abstract _IVisibility DowncastClone();
  }
  public class Visibility_PUB : Visibility {
    public Visibility_PUB() : base() {
    }
    public override _IVisibility DowncastClone() {
      if (this is _IVisibility dt) { return dt; }
      return new Visibility_PUB();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Visibility_PUB;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Visibility.PUB";
      return s;
    }
  }
  public class Visibility_PRIV : Visibility {
    public Visibility_PRIV() : base() {
    }
    public override _IVisibility DowncastClone() {
      if (this is _IVisibility dt) { return dt; }
      return new Visibility_PRIV();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Visibility_PRIV;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Visibility.PRIV";
      return s;
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    RAST._IType dtor_tpe { get; }
    _IFormal DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IType _tpe;
    public Formal(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe) {
      this._name = name;
      this._tpe = tpe;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _tpe);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._tpe, oth._tpe);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ")";
      return s;
    }
    private static readonly RAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Type.Default());
    public static RAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IFormal> _TYPE = new Dafny.TypeDescriptor<RAST._IFormal>(RAST.Formal.Default());
    public static Dafny.TypeDescriptor<RAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe) {
      return new Formal(name, tpe);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe) {
      return create(name, tpe);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        return this._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((((this).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) && (((this).dtor_tpe).is_SelfOwned)) {
        return (this).dtor_name;
      } else if ((((this).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"))) && (object.Equals((this).dtor_tpe, RAST.Type.create_Borrowed(RAST.Type.create_SelfOwned())))) {
        return (this).dtor_name;
      } else if ((((this).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut self"))) && (object.Equals((this).dtor_tpe, RAST.Type.create_Borrowed(RAST.__default.SelfBorrowedMut)))) {
        return (this).dtor_name;
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_name, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), ((this).dtor_tpe)._ToString(ind));
      }
    }
    public static RAST._IFormal selfBorrowed { get {
      return RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"), RAST.__default.SelfBorrowed);
    } }
    public static RAST._IFormal selfOwned { get {
      return RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), RAST.Type.create_SelfOwned());
    } }
    public static RAST._IFormal selfMut { get {
      return RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut self"), RAST.__default.SelfBorrowedMut);
    } }
  }

  public interface _IPattern {
    bool is_RawPattern { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
  }
  public class Pattern : _IPattern {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Pattern(Dafny.ISequence<Dafny.Rune> content) {
      this._content = content;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Pattern;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Pattern.RawPattern";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPattern create(Dafny.ISequence<Dafny.Rune> content) {
      return new Pattern(content);
    }
    public static _IPattern create_RawPattern(Dafny.ISequence<Dafny.Rune> content) {
      return create(content);
    }
    public bool is_RawPattern { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> _this, Dafny.ISequence<Dafny.Rune> ind) {
      return (_this);
    }
  }

  public interface _IMatchCase {
    bool is_MatchCase { get; }
    Dafny.ISequence<Dafny.Rune> dtor_pattern { get; }
    RAST._IExpr dtor_rhs { get; }
    _IMatchCase DowncastClone();
    BigInteger Height();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class MatchCase : _IMatchCase {
    public readonly Dafny.ISequence<Dafny.Rune> _pattern;
    public readonly RAST._IExpr _rhs;
    public MatchCase(Dafny.ISequence<Dafny.Rune> pattern, RAST._IExpr rhs) {
      this._pattern = pattern;
      this._rhs = rhs;
    }
    public _IMatchCase DowncastClone() {
      if (this is _IMatchCase dt) { return dt; }
      return new MatchCase(_pattern, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.MatchCase;
      return oth != null && object.Equals(this._pattern, oth._pattern) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pattern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.MatchCase.MatchCase";
      s += "(";
      s += Dafny.Helpers.ToString(this._pattern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
    private static readonly RAST._IMatchCase theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Expr.Default());
    public static RAST._IMatchCase Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IMatchCase> _TYPE = new Dafny.TypeDescriptor<RAST._IMatchCase>(RAST.MatchCase.Default());
    public static Dafny.TypeDescriptor<RAST._IMatchCase> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMatchCase create(Dafny.ISequence<Dafny.Rune> pattern, RAST._IExpr rhs) {
      return new MatchCase(pattern, rhs);
    }
    public static _IMatchCase create_MatchCase(Dafny.ISequence<Dafny.Rune> pattern, RAST._IExpr rhs) {
      return create(pattern, rhs);
    }
    public bool is_MatchCase { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_pattern {
      get {
        return this._pattern;
      }
    }
    public RAST._IExpr dtor_rhs {
      get {
        return this._rhs;
      }
    }
    public BigInteger Height() {
      return (BigInteger.One) + (((this).dtor_rhs).Height());
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      Dafny.ISequence<Dafny.Rune> _869_newIndent = ((((this).dtor_rhs).is_Block) ? (ind) : (Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)));
      Dafny.ISequence<Dafny.Rune> _870_rhsString = ((this).dtor_rhs)._ToString(_869_newIndent);
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.Pattern._ToString((this).dtor_pattern, ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" =>")), ((((_870_rhsString).Contains(new Dafny.Rune('\n'))) && (((_870_rhsString).Select(BigInteger.Zero)) != (new Dafny.Rune('{')))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), _870_rhsString)) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), _870_rhsString))));
    }
  }

  public interface _IAssignIdentifier {
    bool is_AssignIdentifier { get; }
    Dafny.ISequence<Dafny.Rune> dtor_identifier { get; }
    RAST._IExpr dtor_rhs { get; }
    _IAssignIdentifier DowncastClone();
    BigInteger Height();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class AssignIdentifier : _IAssignIdentifier {
    public readonly Dafny.ISequence<Dafny.Rune> _identifier;
    public readonly RAST._IExpr _rhs;
    public AssignIdentifier(Dafny.ISequence<Dafny.Rune> identifier, RAST._IExpr rhs) {
      this._identifier = identifier;
      this._rhs = rhs;
    }
    public _IAssignIdentifier DowncastClone() {
      if (this is _IAssignIdentifier dt) { return dt; }
      return new AssignIdentifier(_identifier, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.AssignIdentifier;
      return oth != null && object.Equals(this._identifier, oth._identifier) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._identifier));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.AssignIdentifier.AssignIdentifier";
      s += "(";
      s += this._identifier.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
    private static readonly RAST._IAssignIdentifier theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Expr.Default());
    public static RAST._IAssignIdentifier Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IAssignIdentifier> _TYPE = new Dafny.TypeDescriptor<RAST._IAssignIdentifier>(RAST.AssignIdentifier.Default());
    public static Dafny.TypeDescriptor<RAST._IAssignIdentifier> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignIdentifier create(Dafny.ISequence<Dafny.Rune> identifier, RAST._IExpr rhs) {
      return new AssignIdentifier(identifier, rhs);
    }
    public static _IAssignIdentifier create_AssignIdentifier(Dafny.ISequence<Dafny.Rune> identifier, RAST._IExpr rhs) {
      return create(identifier, rhs);
    }
    public bool is_AssignIdentifier { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_identifier {
      get {
        return this._identifier;
      }
    }
    public RAST._IExpr dtor_rhs {
      get {
        return this._rhs;
      }
    }
    public BigInteger Height() {
      return (BigInteger.One) + (((this).dtor_rhs).Height());
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_identifier, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), ((this).dtor_rhs)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)));
    }
  }

  public interface _IDeclareType {
    bool is_MUT { get; }
    bool is_CONST { get; }
    _IDeclareType DowncastClone();
  }
  public abstract class DeclareType : _IDeclareType {
    public DeclareType() {
    }
    private static readonly RAST._IDeclareType theDefault = create_MUT();
    public static RAST._IDeclareType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IDeclareType> _TYPE = new Dafny.TypeDescriptor<RAST._IDeclareType>(RAST.DeclareType.Default());
    public static Dafny.TypeDescriptor<RAST._IDeclareType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDeclareType create_MUT() {
      return new DeclareType_MUT();
    }
    public static _IDeclareType create_CONST() {
      return new DeclareType_CONST();
    }
    public bool is_MUT { get { return this is DeclareType_MUT; } }
    public bool is_CONST { get { return this is DeclareType_CONST; } }
    public static System.Collections.Generic.IEnumerable<_IDeclareType> AllSingletonConstructors {
      get {
        yield return DeclareType.create_MUT();
        yield return DeclareType.create_CONST();
      }
    }
    public abstract _IDeclareType DowncastClone();
  }
  public class DeclareType_MUT : DeclareType {
    public DeclareType_MUT() : base() {
    }
    public override _IDeclareType DowncastClone() {
      if (this is _IDeclareType dt) { return dt; }
      return new DeclareType_MUT();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.DeclareType_MUT;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.DeclareType.MUT";
      return s;
    }
  }
  public class DeclareType_CONST : DeclareType {
    public DeclareType_CONST() : base() {
    }
    public override _IDeclareType DowncastClone() {
      if (this is _IDeclareType dt) { return dt; }
      return new DeclareType_CONST();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.DeclareType_CONST;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.DeclareType.CONST";
      return s;
    }
  }

  public interface _IAssociativity {
    bool is_LeftToRight { get; }
    bool is_RightToLeft { get; }
    bool is_RequiresParentheses { get; }
    _IAssociativity DowncastClone();
  }
  public abstract class Associativity : _IAssociativity {
    public Associativity() {
    }
    private static readonly RAST._IAssociativity theDefault = create_LeftToRight();
    public static RAST._IAssociativity Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IAssociativity> _TYPE = new Dafny.TypeDescriptor<RAST._IAssociativity>(RAST.Associativity.Default());
    public static Dafny.TypeDescriptor<RAST._IAssociativity> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssociativity create_LeftToRight() {
      return new Associativity_LeftToRight();
    }
    public static _IAssociativity create_RightToLeft() {
      return new Associativity_RightToLeft();
    }
    public static _IAssociativity create_RequiresParentheses() {
      return new Associativity_RequiresParentheses();
    }
    public bool is_LeftToRight { get { return this is Associativity_LeftToRight; } }
    public bool is_RightToLeft { get { return this is Associativity_RightToLeft; } }
    public bool is_RequiresParentheses { get { return this is Associativity_RequiresParentheses; } }
    public static System.Collections.Generic.IEnumerable<_IAssociativity> AllSingletonConstructors {
      get {
        yield return Associativity.create_LeftToRight();
        yield return Associativity.create_RightToLeft();
        yield return Associativity.create_RequiresParentheses();
      }
    }
    public abstract _IAssociativity DowncastClone();
  }
  public class Associativity_LeftToRight : Associativity {
    public Associativity_LeftToRight() : base() {
    }
    public override _IAssociativity DowncastClone() {
      if (this is _IAssociativity dt) { return dt; }
      return new Associativity_LeftToRight();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Associativity_LeftToRight;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Associativity.LeftToRight";
      return s;
    }
  }
  public class Associativity_RightToLeft : Associativity {
    public Associativity_RightToLeft() : base() {
    }
    public override _IAssociativity DowncastClone() {
      if (this is _IAssociativity dt) { return dt; }
      return new Associativity_RightToLeft();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Associativity_RightToLeft;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Associativity.RightToLeft";
      return s;
    }
  }
  public class Associativity_RequiresParentheses : Associativity {
    public Associativity_RequiresParentheses() : base() {
    }
    public override _IAssociativity DowncastClone() {
      if (this is _IAssociativity dt) { return dt; }
      return new Associativity_RequiresParentheses();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Associativity_RequiresParentheses;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Associativity.RequiresParentheses";
      return s;
    }
  }

  public interface _IPrintingInfo {
    bool is_UnknownPrecedence { get; }
    bool is_Precedence { get; }
    bool is_SuffixPrecedence { get; }
    bool is_PrecedenceAssociativity { get; }
    BigInteger dtor_precedence { get; }
    RAST._IAssociativity dtor_associativity { get; }
    _IPrintingInfo DowncastClone();
    bool NeedParenthesesFor(RAST._IPrintingInfo underlying);
    bool NeedParenthesesForLeft(RAST._IPrintingInfo underlying);
    bool NeedParenthesesForRight(RAST._IPrintingInfo underlying);
  }
  public abstract class PrintingInfo : _IPrintingInfo {
    public PrintingInfo() {
    }
    private static readonly RAST._IPrintingInfo theDefault = create_UnknownPrecedence();
    public static RAST._IPrintingInfo Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IPrintingInfo> _TYPE = new Dafny.TypeDescriptor<RAST._IPrintingInfo>(RAST.PrintingInfo.Default());
    public static Dafny.TypeDescriptor<RAST._IPrintingInfo> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPrintingInfo create_UnknownPrecedence() {
      return new PrintingInfo_UnknownPrecedence();
    }
    public static _IPrintingInfo create_Precedence(BigInteger precedence) {
      return new PrintingInfo_Precedence(precedence);
    }
    public static _IPrintingInfo create_SuffixPrecedence(BigInteger precedence) {
      return new PrintingInfo_SuffixPrecedence(precedence);
    }
    public static _IPrintingInfo create_PrecedenceAssociativity(BigInteger precedence, RAST._IAssociativity associativity) {
      return new PrintingInfo_PrecedenceAssociativity(precedence, associativity);
    }
    public bool is_UnknownPrecedence { get { return this is PrintingInfo_UnknownPrecedence; } }
    public bool is_Precedence { get { return this is PrintingInfo_Precedence; } }
    public bool is_SuffixPrecedence { get { return this is PrintingInfo_SuffixPrecedence; } }
    public bool is_PrecedenceAssociativity { get { return this is PrintingInfo_PrecedenceAssociativity; } }
    public BigInteger dtor_precedence {
      get {
        var d = this;
        if (d is PrintingInfo_Precedence) { return ((PrintingInfo_Precedence)d)._precedence; }
        if (d is PrintingInfo_SuffixPrecedence) { return ((PrintingInfo_SuffixPrecedence)d)._precedence; }
        return ((PrintingInfo_PrecedenceAssociativity)d)._precedence;
      }
    }
    public RAST._IAssociativity dtor_associativity {
      get {
        var d = this;
        return ((PrintingInfo_PrecedenceAssociativity)d)._associativity;
      }
    }
    public abstract _IPrintingInfo DowncastClone();
    public bool NeedParenthesesFor(RAST._IPrintingInfo underlying) {
      if ((this).is_UnknownPrecedence) {
        return true;
      } else if ((underlying).is_UnknownPrecedence) {
        return true;
      } else if (((this).dtor_precedence) <= ((underlying).dtor_precedence)) {
        return true;
      } else {
        return false;
      }
    }
    public bool NeedParenthesesForLeft(RAST._IPrintingInfo underlying) {
      if ((this).is_UnknownPrecedence) {
        return true;
      } else if ((underlying).is_UnknownPrecedence) {
        return true;
      } else if (((this).dtor_precedence) <= ((underlying).dtor_precedence)) {
        return ((((this).dtor_precedence) < ((underlying).dtor_precedence)) || (!((this).is_PrecedenceAssociativity))) || (!(((this).dtor_associativity).is_LeftToRight));
      } else {
        return false;
      }
    }
    public bool NeedParenthesesForRight(RAST._IPrintingInfo underlying) {
      if ((this).is_UnknownPrecedence) {
        return true;
      } else if ((underlying).is_UnknownPrecedence) {
        return true;
      } else if (((this).dtor_precedence) <= ((underlying).dtor_precedence)) {
        return ((((this).dtor_precedence) < ((underlying).dtor_precedence)) || (!((this).is_PrecedenceAssociativity))) || (!(((this).dtor_associativity).is_RightToLeft));
      } else {
        return false;
      }
    }
  }
  public class PrintingInfo_UnknownPrecedence : PrintingInfo {
    public PrintingInfo_UnknownPrecedence() : base() {
    }
    public override _IPrintingInfo DowncastClone() {
      if (this is _IPrintingInfo dt) { return dt; }
      return new PrintingInfo_UnknownPrecedence();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.PrintingInfo_UnknownPrecedence;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.PrintingInfo.UnknownPrecedence";
      return s;
    }
  }
  public class PrintingInfo_Precedence : PrintingInfo {
    public readonly BigInteger _precedence;
    public PrintingInfo_Precedence(BigInteger precedence) : base() {
      this._precedence = precedence;
    }
    public override _IPrintingInfo DowncastClone() {
      if (this is _IPrintingInfo dt) { return dt; }
      return new PrintingInfo_Precedence(_precedence);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.PrintingInfo_Precedence;
      return oth != null && this._precedence == oth._precedence;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._precedence));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.PrintingInfo.Precedence";
      s += "(";
      s += Dafny.Helpers.ToString(this._precedence);
      s += ")";
      return s;
    }
  }
  public class PrintingInfo_SuffixPrecedence : PrintingInfo {
    public readonly BigInteger _precedence;
    public PrintingInfo_SuffixPrecedence(BigInteger precedence) : base() {
      this._precedence = precedence;
    }
    public override _IPrintingInfo DowncastClone() {
      if (this is _IPrintingInfo dt) { return dt; }
      return new PrintingInfo_SuffixPrecedence(_precedence);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.PrintingInfo_SuffixPrecedence;
      return oth != null && this._precedence == oth._precedence;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._precedence));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.PrintingInfo.SuffixPrecedence";
      s += "(";
      s += Dafny.Helpers.ToString(this._precedence);
      s += ")";
      return s;
    }
  }
  public class PrintingInfo_PrecedenceAssociativity : PrintingInfo {
    public readonly BigInteger _precedence;
    public readonly RAST._IAssociativity _associativity;
    public PrintingInfo_PrecedenceAssociativity(BigInteger precedence, RAST._IAssociativity associativity) : base() {
      this._precedence = precedence;
      this._associativity = associativity;
    }
    public override _IPrintingInfo DowncastClone() {
      if (this is _IPrintingInfo dt) { return dt; }
      return new PrintingInfo_PrecedenceAssociativity(_precedence, _associativity);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.PrintingInfo_PrecedenceAssociativity;
      return oth != null && this._precedence == oth._precedence && object.Equals(this._associativity, oth._associativity);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._precedence));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._associativity));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.PrintingInfo.PrecedenceAssociativity";
      s += "(";
      s += Dafny.Helpers.ToString(this._precedence);
      s += ", ";
      s += Dafny.Helpers.ToString(this._associativity);
      s += ")";
      return s;
    }
  }

  public interface _IExpr {
    bool is_RawExpr { get; }
    bool is_Identifier { get; }
    bool is_Match { get; }
    bool is_StmtExpr { get; }
    bool is_Block { get; }
    bool is_StructBuild { get; }
    bool is_Tuple { get; }
    bool is_UnaryOp { get; }
    bool is_BinaryOp { get; }
    bool is_TypeAscription { get; }
    bool is_LiteralInt { get; }
    bool is_LiteralString { get; }
    bool is_DeclareVar { get; }
    bool is_AssignVar { get; }
    bool is_IfExpr { get; }
    bool is_Loop { get; }
    bool is_For { get; }
    bool is_Labelled { get; }
    bool is_Break { get; }
    bool is_Continue { get; }
    bool is_Return { get; }
    bool is_CallType { get; }
    bool is_Call { get; }
    bool is_Select { get; }
    bool is_MemberSelect { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    RAST._IExpr dtor_matchee { get; }
    Dafny.ISequence<RAST._IMatchCase> dtor_cases { get; }
    RAST._IExpr dtor_stmt { get; }
    RAST._IExpr dtor_rhs { get; }
    RAST._IExpr dtor_underlying { get; }
    Dafny.ISequence<RAST._IAssignIdentifier> dtor_assignments { get; }
    Dafny.ISequence<RAST._IExpr> dtor_arguments { get; }
    Dafny.ISequence<Dafny.Rune> dtor_op1 { get; }
    DAST.Format._IUnOpFormat dtor_format { get; }
    Dafny.ISequence<Dafny.Rune> dtor_op2 { get; }
    RAST._IExpr dtor_left { get; }
    RAST._IExpr dtor_right { get; }
    DAST.Format._IBinOpFormat dtor_format2 { get; }
    RAST._IType dtor_tpe { get; }
    Dafny.ISequence<Dafny.Rune> dtor_value { get; }
    bool dtor_binary { get; }
    RAST._IDeclareType dtor_declareType { get; }
    Std.Wrappers._IOption<RAST._IType> dtor_optType { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_optRhs { get; }
    RAST._IExpr dtor_cond { get; }
    RAST._IExpr dtor_thn { get; }
    RAST._IExpr dtor_els { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_optCond { get; }
    RAST._IExpr dtor_range { get; }
    RAST._IExpr dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_optLbl { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_optExpr { get; }
    RAST._IExpr dtor_obj { get; }
    Dafny.ISequence<RAST._IType> dtor_typeParameters { get; }
    _IExpr DowncastClone();
    bool NoExtraSemicolonAfter();
    RAST._IPrintingInfo printingInfo { get; }
    BigInteger Height();
    RAST._IExpr Optimize();
    bool LeftRequiresParentheses(RAST._IExpr left);
    _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> LeftParentheses(RAST._IExpr left);
    bool RightRequiresParentheses(RAST._IExpr right);
    _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> RightParentheses(RAST._IExpr right);
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> RightMostIdentifier();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
    RAST._IExpr Then(RAST._IExpr rhs2);
    RAST._IExpr Sel(Dafny.ISequence<Dafny.Rune> name);
    RAST._IExpr MSel(Dafny.ISequence<Dafny.Rune> name);
    RAST._IExpr ApplyType(Dafny.ISequence<RAST._IType> typeParameters);
    RAST._IExpr ApplyType1(RAST._IType typeParameter);
    RAST._IExpr Apply(Dafny.ISequence<RAST._IExpr> arguments);
    RAST._IExpr Apply1(RAST._IExpr argument);
  }
  public abstract class Expr : _IExpr {
    public Expr() {
    }
    private static readonly RAST._IExpr theDefault = create_RawExpr(Dafny.Sequence<Dafny.Rune>.Empty);
    public static RAST._IExpr Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IExpr> _TYPE = new Dafny.TypeDescriptor<RAST._IExpr>(RAST.Expr.Default());
    public static Dafny.TypeDescriptor<RAST._IExpr> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpr create_RawExpr(Dafny.ISequence<Dafny.Rune> content) {
      return new Expr_RawExpr(content);
    }
    public static _IExpr create_Identifier(Dafny.ISequence<Dafny.Rune> name) {
      return new Expr_Identifier(name);
    }
    public static _IExpr create_Match(RAST._IExpr matchee, Dafny.ISequence<RAST._IMatchCase> cases) {
      return new Expr_Match(matchee, cases);
    }
    public static _IExpr create_StmtExpr(RAST._IExpr stmt, RAST._IExpr rhs) {
      return new Expr_StmtExpr(stmt, rhs);
    }
    public static _IExpr create_Block(RAST._IExpr underlying) {
      return new Expr_Block(underlying);
    }
    public static _IExpr create_StructBuild(RAST._IExpr underlying, Dafny.ISequence<RAST._IAssignIdentifier> assignments) {
      return new Expr_StructBuild(underlying, assignments);
    }
    public static _IExpr create_Tuple(Dafny.ISequence<RAST._IExpr> arguments) {
      return new Expr_Tuple(arguments);
    }
    public static _IExpr create_UnaryOp(Dafny.ISequence<Dafny.Rune> op1, RAST._IExpr underlying, DAST.Format._IUnOpFormat format) {
      return new Expr_UnaryOp(op1, underlying, format);
    }
    public static _IExpr create_BinaryOp(Dafny.ISequence<Dafny.Rune> op2, RAST._IExpr left, RAST._IExpr right, DAST.Format._IBinOpFormat format2) {
      return new Expr_BinaryOp(op2, left, right, format2);
    }
    public static _IExpr create_TypeAscription(RAST._IExpr left, RAST._IType tpe) {
      return new Expr_TypeAscription(left, tpe);
    }
    public static _IExpr create_LiteralInt(Dafny.ISequence<Dafny.Rune> @value) {
      return new Expr_LiteralInt(@value);
    }
    public static _IExpr create_LiteralString(Dafny.ISequence<Dafny.Rune> @value, bool binary) {
      return new Expr_LiteralString(@value, binary);
    }
    public static _IExpr create_DeclareVar(RAST._IDeclareType declareType, Dafny.ISequence<Dafny.Rune> name, Std.Wrappers._IOption<RAST._IType> optType, Std.Wrappers._IOption<RAST._IExpr> optRhs) {
      return new Expr_DeclareVar(declareType, name, optType, optRhs);
    }
    public static _IExpr create_AssignVar(Dafny.ISequence<Dafny.Rune> name, RAST._IExpr rhs) {
      return new Expr_AssignVar(name, rhs);
    }
    public static _IExpr create_IfExpr(RAST._IExpr cond, RAST._IExpr thn, RAST._IExpr els) {
      return new Expr_IfExpr(cond, thn, els);
    }
    public static _IExpr create_Loop(Std.Wrappers._IOption<RAST._IExpr> optCond, RAST._IExpr underlying) {
      return new Expr_Loop(optCond, underlying);
    }
    public static _IExpr create_For(Dafny.ISequence<Dafny.Rune> name, RAST._IExpr range, RAST._IExpr body) {
      return new Expr_For(name, range, body);
    }
    public static _IExpr create_Labelled(Dafny.ISequence<Dafny.Rune> lbl, RAST._IExpr underlying) {
      return new Expr_Labelled(lbl, underlying);
    }
    public static _IExpr create_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> optLbl) {
      return new Expr_Break(optLbl);
    }
    public static _IExpr create_Continue(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> optLbl) {
      return new Expr_Continue(optLbl);
    }
    public static _IExpr create_Return(Std.Wrappers._IOption<RAST._IExpr> optExpr) {
      return new Expr_Return(optExpr);
    }
    public static _IExpr create_CallType(RAST._IExpr obj, Dafny.ISequence<RAST._IType> typeParameters) {
      return new Expr_CallType(obj, typeParameters);
    }
    public static _IExpr create_Call(RAST._IExpr obj, Dafny.ISequence<RAST._IExpr> arguments) {
      return new Expr_Call(obj, arguments);
    }
    public static _IExpr create_Select(RAST._IExpr obj, Dafny.ISequence<Dafny.Rune> name) {
      return new Expr_Select(obj, name);
    }
    public static _IExpr create_MemberSelect(RAST._IExpr obj, Dafny.ISequence<Dafny.Rune> name) {
      return new Expr_MemberSelect(obj, name);
    }
    public bool is_RawExpr { get { return this is Expr_RawExpr; } }
    public bool is_Identifier { get { return this is Expr_Identifier; } }
    public bool is_Match { get { return this is Expr_Match; } }
    public bool is_StmtExpr { get { return this is Expr_StmtExpr; } }
    public bool is_Block { get { return this is Expr_Block; } }
    public bool is_StructBuild { get { return this is Expr_StructBuild; } }
    public bool is_Tuple { get { return this is Expr_Tuple; } }
    public bool is_UnaryOp { get { return this is Expr_UnaryOp; } }
    public bool is_BinaryOp { get { return this is Expr_BinaryOp; } }
    public bool is_TypeAscription { get { return this is Expr_TypeAscription; } }
    public bool is_LiteralInt { get { return this is Expr_LiteralInt; } }
    public bool is_LiteralString { get { return this is Expr_LiteralString; } }
    public bool is_DeclareVar { get { return this is Expr_DeclareVar; } }
    public bool is_AssignVar { get { return this is Expr_AssignVar; } }
    public bool is_IfExpr { get { return this is Expr_IfExpr; } }
    public bool is_Loop { get { return this is Expr_Loop; } }
    public bool is_For { get { return this is Expr_For; } }
    public bool is_Labelled { get { return this is Expr_Labelled; } }
    public bool is_Break { get { return this is Expr_Break; } }
    public bool is_Continue { get { return this is Expr_Continue; } }
    public bool is_Return { get { return this is Expr_Return; } }
    public bool is_CallType { get { return this is Expr_CallType; } }
    public bool is_Call { get { return this is Expr_Call; } }
    public bool is_Select { get { return this is Expr_Select; } }
    public bool is_MemberSelect { get { return this is Expr_MemberSelect; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        var d = this;
        return ((Expr_RawExpr)d)._content;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Expr_Identifier) { return ((Expr_Identifier)d)._name; }
        if (d is Expr_DeclareVar) { return ((Expr_DeclareVar)d)._name; }
        if (d is Expr_AssignVar) { return ((Expr_AssignVar)d)._name; }
        if (d is Expr_For) { return ((Expr_For)d)._name; }
        if (d is Expr_Select) { return ((Expr_Select)d)._name; }
        return ((Expr_MemberSelect)d)._name;
      }
    }
    public RAST._IExpr dtor_matchee {
      get {
        var d = this;
        return ((Expr_Match)d)._matchee;
      }
    }
    public Dafny.ISequence<RAST._IMatchCase> dtor_cases {
      get {
        var d = this;
        return ((Expr_Match)d)._cases;
      }
    }
    public RAST._IExpr dtor_stmt {
      get {
        var d = this;
        return ((Expr_StmtExpr)d)._stmt;
      }
    }
    public RAST._IExpr dtor_rhs {
      get {
        var d = this;
        if (d is Expr_StmtExpr) { return ((Expr_StmtExpr)d)._rhs; }
        return ((Expr_AssignVar)d)._rhs;
      }
    }
    public RAST._IExpr dtor_underlying {
      get {
        var d = this;
        if (d is Expr_Block) { return ((Expr_Block)d)._underlying; }
        if (d is Expr_StructBuild) { return ((Expr_StructBuild)d)._underlying; }
        if (d is Expr_UnaryOp) { return ((Expr_UnaryOp)d)._underlying; }
        if (d is Expr_Loop) { return ((Expr_Loop)d)._underlying; }
        return ((Expr_Labelled)d)._underlying;
      }
    }
    public Dafny.ISequence<RAST._IAssignIdentifier> dtor_assignments {
      get {
        var d = this;
        return ((Expr_StructBuild)d)._assignments;
      }
    }
    public Dafny.ISequence<RAST._IExpr> dtor_arguments {
      get {
        var d = this;
        if (d is Expr_Tuple) { return ((Expr_Tuple)d)._arguments; }
        return ((Expr_Call)d)._arguments;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_op1 {
      get {
        var d = this;
        return ((Expr_UnaryOp)d)._op1;
      }
    }
    public DAST.Format._IUnOpFormat dtor_format {
      get {
        var d = this;
        return ((Expr_UnaryOp)d)._format;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_op2 {
      get {
        var d = this;
        return ((Expr_BinaryOp)d)._op2;
      }
    }
    public RAST._IExpr dtor_left {
      get {
        var d = this;
        if (d is Expr_BinaryOp) { return ((Expr_BinaryOp)d)._left; }
        return ((Expr_TypeAscription)d)._left;
      }
    }
    public RAST._IExpr dtor_right {
      get {
        var d = this;
        return ((Expr_BinaryOp)d)._right;
      }
    }
    public DAST.Format._IBinOpFormat dtor_format2 {
      get {
        var d = this;
        return ((Expr_BinaryOp)d)._format2;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        var d = this;
        return ((Expr_TypeAscription)d)._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_value {
      get {
        var d = this;
        if (d is Expr_LiteralInt) { return ((Expr_LiteralInt)d)._value; }
        return ((Expr_LiteralString)d)._value;
      }
    }
    public bool dtor_binary {
      get {
        var d = this;
        return ((Expr_LiteralString)d)._binary;
      }
    }
    public RAST._IDeclareType dtor_declareType {
      get {
        var d = this;
        return ((Expr_DeclareVar)d)._declareType;
      }
    }
    public Std.Wrappers._IOption<RAST._IType> dtor_optType {
      get {
        var d = this;
        return ((Expr_DeclareVar)d)._optType;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_optRhs {
      get {
        var d = this;
        return ((Expr_DeclareVar)d)._optRhs;
      }
    }
    public RAST._IExpr dtor_cond {
      get {
        var d = this;
        return ((Expr_IfExpr)d)._cond;
      }
    }
    public RAST._IExpr dtor_thn {
      get {
        var d = this;
        return ((Expr_IfExpr)d)._thn;
      }
    }
    public RAST._IExpr dtor_els {
      get {
        var d = this;
        return ((Expr_IfExpr)d)._els;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_optCond {
      get {
        var d = this;
        return ((Expr_Loop)d)._optCond;
      }
    }
    public RAST._IExpr dtor_range {
      get {
        var d = this;
        return ((Expr_For)d)._range;
      }
    }
    public RAST._IExpr dtor_body {
      get {
        var d = this;
        return ((Expr_For)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Expr_Labelled)d)._lbl;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_optLbl {
      get {
        var d = this;
        if (d is Expr_Break) { return ((Expr_Break)d)._optLbl; }
        return ((Expr_Continue)d)._optLbl;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_optExpr {
      get {
        var d = this;
        return ((Expr_Return)d)._optExpr;
      }
    }
    public RAST._IExpr dtor_obj {
      get {
        var d = this;
        if (d is Expr_CallType) { return ((Expr_CallType)d)._obj; }
        if (d is Expr_Call) { return ((Expr_Call)d)._obj; }
        if (d is Expr_Select) { return ((Expr_Select)d)._obj; }
        return ((Expr_MemberSelect)d)._obj;
      }
    }
    public Dafny.ISequence<RAST._IType> dtor_typeParameters {
      get {
        var d = this;
        return ((Expr_CallType)d)._typeParameters;
      }
    }
    public abstract _IExpr DowncastClone();
    public bool NoExtraSemicolonAfter() {
      return ((((((this).is_DeclareVar) || ((this).is_AssignVar)) || ((this).is_Break)) || ((this).is_Continue)) || ((this).is_Return)) || ((((this).is_RawExpr) && ((new BigInteger(((this).dtor_content).Count)).Sign == 1)) && ((((this).dtor_content).Select((new BigInteger(((this).dtor_content).Count)) - (BigInteger.One))) == (new Dafny.Rune(';'))));
    }
    public BigInteger Height() {
      RAST._IExpr _source27 = this;
      if (_source27.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _871___mcc_h0 = _source27.dtor_content;
        return BigInteger.One;
      } else if (_source27.is_Identifier) {
        Dafny.ISequence<Dafny.Rune> _872___mcc_h2 = _source27.dtor_name;
        return BigInteger.One;
      } else if (_source27.is_Match) {
        RAST._IExpr _873___mcc_h4 = _source27.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _874___mcc_h5 = _source27.dtor_cases;
        Dafny.ISequence<RAST._IMatchCase> _875_cases = _874___mcc_h5;
        RAST._IExpr _876_matchee = _873___mcc_h4;
        return (BigInteger.One) + (RAST.__default.max((_876_matchee).Height(), RAST.__default.SeqToHeight<RAST._IMatchCase>(_875_cases, ((System.Func<RAST._IMatchCase, BigInteger>)((_877_oneCase) => {
          return (_877_oneCase).Height();
        })))));
      } else if (_source27.is_StmtExpr) {
        RAST._IExpr _878___mcc_h8 = _source27.dtor_stmt;
        RAST._IExpr _879___mcc_h9 = _source27.dtor_rhs;
        RAST._IExpr _880_rhs = _879___mcc_h9;
        RAST._IExpr _881_stmt = _878___mcc_h8;
        BigInteger _882_default = (BigInteger.One) + (RAST.__default.max((_881_stmt).Height(), (_880_rhs).Height()));
        RAST._IExpr _source28 = this;
        if (_source28.is_RawExpr) {
          Dafny.ISequence<Dafny.Rune> _883___mcc_h98 = _source28.dtor_content;
          return _882_default;
        } else if (_source28.is_Identifier) {
          Dafny.ISequence<Dafny.Rune> _884___mcc_h100 = _source28.dtor_name;
          return _882_default;
        } else if (_source28.is_Match) {
          RAST._IExpr _885___mcc_h102 = _source28.dtor_matchee;
          Dafny.ISequence<RAST._IMatchCase> _886___mcc_h103 = _source28.dtor_cases;
          return _882_default;
        } else if (_source28.is_StmtExpr) {
          RAST._IExpr _887___mcc_h106 = _source28.dtor_stmt;
          RAST._IExpr _888___mcc_h107 = _source28.dtor_rhs;
          RAST._IExpr _source29 = _887___mcc_h106;
          if (_source29.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _889___mcc_h110 = _source29.dtor_content;
            return _882_default;
          } else if (_source29.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _890___mcc_h112 = _source29.dtor_name;
            return _882_default;
          } else if (_source29.is_Match) {
            RAST._IExpr _891___mcc_h114 = _source29.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _892___mcc_h115 = _source29.dtor_cases;
            return _882_default;
          } else if (_source29.is_StmtExpr) {
            RAST._IExpr _893___mcc_h118 = _source29.dtor_stmt;
            RAST._IExpr _894___mcc_h119 = _source29.dtor_rhs;
            return _882_default;
          } else if (_source29.is_Block) {
            RAST._IExpr _895___mcc_h122 = _source29.dtor_underlying;
            return _882_default;
          } else if (_source29.is_StructBuild) {
            RAST._IExpr _896___mcc_h124 = _source29.dtor_underlying;
            Dafny.ISequence<RAST._IAssignIdentifier> _897___mcc_h125 = _source29.dtor_assignments;
            return _882_default;
          } else if (_source29.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _898___mcc_h128 = _source29.dtor_arguments;
            return _882_default;
          } else if (_source29.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _899___mcc_h130 = _source29.dtor_op1;
            RAST._IExpr _900___mcc_h131 = _source29.dtor_underlying;
            DAST.Format._IUnOpFormat _901___mcc_h132 = _source29.dtor_format;
            return _882_default;
          } else if (_source29.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _902___mcc_h136 = _source29.dtor_op2;
            RAST._IExpr _903___mcc_h137 = _source29.dtor_left;
            RAST._IExpr _904___mcc_h138 = _source29.dtor_right;
            DAST.Format._IBinOpFormat _905___mcc_h139 = _source29.dtor_format2;
            return _882_default;
          } else if (_source29.is_TypeAscription) {
            RAST._IExpr _906___mcc_h144 = _source29.dtor_left;
            RAST._IType _907___mcc_h145 = _source29.dtor_tpe;
            return _882_default;
          } else if (_source29.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _908___mcc_h148 = _source29.dtor_value;
            return _882_default;
          } else if (_source29.is_LiteralString) {
            Dafny.ISequence<Dafny.Rune> _909___mcc_h150 = _source29.dtor_value;
            bool _910___mcc_h151 = _source29.dtor_binary;
            return _882_default;
          } else if (_source29.is_DeclareVar) {
            RAST._IDeclareType _911___mcc_h154 = _source29.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _912___mcc_h155 = _source29.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _913___mcc_h156 = _source29.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _914___mcc_h157 = _source29.dtor_optRhs;
            Std.Wrappers._IOption<RAST._IType> _source30 = _913___mcc_h156;
            if (_source30.is_None) {
              return _882_default;
            } else {
              RAST._IType _915___mcc_h162 = _source30.dtor_value;
              Std.Wrappers._IOption<RAST._IExpr> _source31 = _914___mcc_h157;
              if (_source31.is_None) {
                RAST._IExpr _source32 = _888___mcc_h107;
                if (_source32.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _916___mcc_h164 = _source32.dtor_content;
                  return _882_default;
                } else if (_source32.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _917___mcc_h166 = _source32.dtor_name;
                  return _882_default;
                } else if (_source32.is_Match) {
                  RAST._IExpr _918___mcc_h168 = _source32.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _919___mcc_h169 = _source32.dtor_cases;
                  return _882_default;
                } else if (_source32.is_StmtExpr) {
                  RAST._IExpr _920___mcc_h172 = _source32.dtor_stmt;
                  RAST._IExpr _921___mcc_h173 = _source32.dtor_rhs;
                  RAST._IExpr _source33 = _920___mcc_h172;
                  if (_source33.is_RawExpr) {
                    Dafny.ISequence<Dafny.Rune> _922___mcc_h176 = _source33.dtor_content;
                    return _882_default;
                  } else if (_source33.is_Identifier) {
                    Dafny.ISequence<Dafny.Rune> _923___mcc_h178 = _source33.dtor_name;
                    return _882_default;
                  } else if (_source33.is_Match) {
                    RAST._IExpr _924___mcc_h180 = _source33.dtor_matchee;
                    Dafny.ISequence<RAST._IMatchCase> _925___mcc_h181 = _source33.dtor_cases;
                    return _882_default;
                  } else if (_source33.is_StmtExpr) {
                    RAST._IExpr _926___mcc_h184 = _source33.dtor_stmt;
                    RAST._IExpr _927___mcc_h185 = _source33.dtor_rhs;
                    return _882_default;
                  } else if (_source33.is_Block) {
                    RAST._IExpr _928___mcc_h188 = _source33.dtor_underlying;
                    return _882_default;
                  } else if (_source33.is_StructBuild) {
                    RAST._IExpr _929___mcc_h190 = _source33.dtor_underlying;
                    Dafny.ISequence<RAST._IAssignIdentifier> _930___mcc_h191 = _source33.dtor_assignments;
                    return _882_default;
                  } else if (_source33.is_Tuple) {
                    Dafny.ISequence<RAST._IExpr> _931___mcc_h194 = _source33.dtor_arguments;
                    return _882_default;
                  } else if (_source33.is_UnaryOp) {
                    Dafny.ISequence<Dafny.Rune> _932___mcc_h196 = _source33.dtor_op1;
                    RAST._IExpr _933___mcc_h197 = _source33.dtor_underlying;
                    DAST.Format._IUnOpFormat _934___mcc_h198 = _source33.dtor_format;
                    return _882_default;
                  } else if (_source33.is_BinaryOp) {
                    Dafny.ISequence<Dafny.Rune> _935___mcc_h202 = _source33.dtor_op2;
                    RAST._IExpr _936___mcc_h203 = _source33.dtor_left;
                    RAST._IExpr _937___mcc_h204 = _source33.dtor_right;
                    DAST.Format._IBinOpFormat _938___mcc_h205 = _source33.dtor_format2;
                    return _882_default;
                  } else if (_source33.is_TypeAscription) {
                    RAST._IExpr _939___mcc_h210 = _source33.dtor_left;
                    RAST._IType _940___mcc_h211 = _source33.dtor_tpe;
                    return _882_default;
                  } else if (_source33.is_LiteralInt) {
                    Dafny.ISequence<Dafny.Rune> _941___mcc_h214 = _source33.dtor_value;
                    return _882_default;
                  } else if (_source33.is_LiteralString) {
                    Dafny.ISequence<Dafny.Rune> _942___mcc_h216 = _source33.dtor_value;
                    bool _943___mcc_h217 = _source33.dtor_binary;
                    return _882_default;
                  } else if (_source33.is_DeclareVar) {
                    RAST._IDeclareType _944___mcc_h220 = _source33.dtor_declareType;
                    Dafny.ISequence<Dafny.Rune> _945___mcc_h221 = _source33.dtor_name;
                    Std.Wrappers._IOption<RAST._IType> _946___mcc_h222 = _source33.dtor_optType;
                    Std.Wrappers._IOption<RAST._IExpr> _947___mcc_h223 = _source33.dtor_optRhs;
                    return _882_default;
                  } else if (_source33.is_AssignVar) {
                    Dafny.ISequence<Dafny.Rune> _948___mcc_h228 = _source33.dtor_name;
                    RAST._IExpr _949___mcc_h229 = _source33.dtor_rhs;
                    RAST._IExpr _950_last = _921___mcc_h173;
                    RAST._IExpr _951_rhs = _949___mcc_h229;
                    Dafny.ISequence<Dafny.Rune> _952_name2 = _948___mcc_h228;
                    RAST._IType _953_tpe = _915___mcc_h162;
                    Dafny.ISequence<Dafny.Rune> _954_name = _912___mcc_h155;
                    RAST._IDeclareType _955_mod = _911___mcc_h154;
                    if ((_954_name).Equals(_952_name2)) {
                      return (BigInteger.One) + (_882_default);
                    } else {
                      return _882_default;
                    }
                  } else if (_source33.is_IfExpr) {
                    RAST._IExpr _956___mcc_h232 = _source33.dtor_cond;
                    RAST._IExpr _957___mcc_h233 = _source33.dtor_thn;
                    RAST._IExpr _958___mcc_h234 = _source33.dtor_els;
                    return _882_default;
                  } else if (_source33.is_Loop) {
                    Std.Wrappers._IOption<RAST._IExpr> _959___mcc_h238 = _source33.dtor_optCond;
                    RAST._IExpr _960___mcc_h239 = _source33.dtor_underlying;
                    return _882_default;
                  } else if (_source33.is_For) {
                    Dafny.ISequence<Dafny.Rune> _961___mcc_h242 = _source33.dtor_name;
                    RAST._IExpr _962___mcc_h243 = _source33.dtor_range;
                    RAST._IExpr _963___mcc_h244 = _source33.dtor_body;
                    return _882_default;
                  } else if (_source33.is_Labelled) {
                    Dafny.ISequence<Dafny.Rune> _964___mcc_h248 = _source33.dtor_lbl;
                    RAST._IExpr _965___mcc_h249 = _source33.dtor_underlying;
                    return _882_default;
                  } else if (_source33.is_Break) {
                    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _966___mcc_h252 = _source33.dtor_optLbl;
                    return _882_default;
                  } else if (_source33.is_Continue) {
                    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _967___mcc_h254 = _source33.dtor_optLbl;
                    return _882_default;
                  } else if (_source33.is_Return) {
                    Std.Wrappers._IOption<RAST._IExpr> _968___mcc_h256 = _source33.dtor_optExpr;
                    return _882_default;
                  } else if (_source33.is_CallType) {
                    RAST._IExpr _969___mcc_h258 = _source33.dtor_obj;
                    Dafny.ISequence<RAST._IType> _970___mcc_h259 = _source33.dtor_typeParameters;
                    return _882_default;
                  } else if (_source33.is_Call) {
                    RAST._IExpr _971___mcc_h262 = _source33.dtor_obj;
                    Dafny.ISequence<RAST._IExpr> _972___mcc_h263 = _source33.dtor_arguments;
                    return _882_default;
                  } else if (_source33.is_Select) {
                    RAST._IExpr _973___mcc_h266 = _source33.dtor_obj;
                    Dafny.ISequence<Dafny.Rune> _974___mcc_h267 = _source33.dtor_name;
                    return _882_default;
                  } else {
                    RAST._IExpr _975___mcc_h270 = _source33.dtor_obj;
                    Dafny.ISequence<Dafny.Rune> _976___mcc_h271 = _source33.dtor_name;
                    return _882_default;
                  }
                } else if (_source32.is_Block) {
                  RAST._IExpr _977___mcc_h274 = _source32.dtor_underlying;
                  return _882_default;
                } else if (_source32.is_StructBuild) {
                  RAST._IExpr _978___mcc_h276 = _source32.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _979___mcc_h277 = _source32.dtor_assignments;
                  return _882_default;
                } else if (_source32.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _980___mcc_h280 = _source32.dtor_arguments;
                  return _882_default;
                } else if (_source32.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _981___mcc_h282 = _source32.dtor_op1;
                  RAST._IExpr _982___mcc_h283 = _source32.dtor_underlying;
                  DAST.Format._IUnOpFormat _983___mcc_h284 = _source32.dtor_format;
                  return _882_default;
                } else if (_source32.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _984___mcc_h288 = _source32.dtor_op2;
                  RAST._IExpr _985___mcc_h289 = _source32.dtor_left;
                  RAST._IExpr _986___mcc_h290 = _source32.dtor_right;
                  DAST.Format._IBinOpFormat _987___mcc_h291 = _source32.dtor_format2;
                  return _882_default;
                } else if (_source32.is_TypeAscription) {
                  RAST._IExpr _988___mcc_h296 = _source32.dtor_left;
                  RAST._IType _989___mcc_h297 = _source32.dtor_tpe;
                  return _882_default;
                } else if (_source32.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _990___mcc_h300 = _source32.dtor_value;
                  return _882_default;
                } else if (_source32.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _991___mcc_h302 = _source32.dtor_value;
                  bool _992___mcc_h303 = _source32.dtor_binary;
                  return _882_default;
                } else if (_source32.is_DeclareVar) {
                  RAST._IDeclareType _993___mcc_h306 = _source32.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _994___mcc_h307 = _source32.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _995___mcc_h308 = _source32.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _996___mcc_h309 = _source32.dtor_optRhs;
                  return _882_default;
                } else if (_source32.is_AssignVar) {
                  Dafny.ISequence<Dafny.Rune> _997___mcc_h314 = _source32.dtor_name;
                  RAST._IExpr _998___mcc_h315 = _source32.dtor_rhs;
                  return _882_default;
                } else if (_source32.is_IfExpr) {
                  RAST._IExpr _999___mcc_h318 = _source32.dtor_cond;
                  RAST._IExpr _1000___mcc_h319 = _source32.dtor_thn;
                  RAST._IExpr _1001___mcc_h320 = _source32.dtor_els;
                  return _882_default;
                } else if (_source32.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _1002___mcc_h324 = _source32.dtor_optCond;
                  RAST._IExpr _1003___mcc_h325 = _source32.dtor_underlying;
                  return _882_default;
                } else if (_source32.is_For) {
                  Dafny.ISequence<Dafny.Rune> _1004___mcc_h328 = _source32.dtor_name;
                  RAST._IExpr _1005___mcc_h329 = _source32.dtor_range;
                  RAST._IExpr _1006___mcc_h330 = _source32.dtor_body;
                  return _882_default;
                } else if (_source32.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _1007___mcc_h334 = _source32.dtor_lbl;
                  RAST._IExpr _1008___mcc_h335 = _source32.dtor_underlying;
                  return _882_default;
                } else if (_source32.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1009___mcc_h338 = _source32.dtor_optLbl;
                  return _882_default;
                } else if (_source32.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1010___mcc_h340 = _source32.dtor_optLbl;
                  return _882_default;
                } else if (_source32.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _1011___mcc_h342 = _source32.dtor_optExpr;
                  return _882_default;
                } else if (_source32.is_CallType) {
                  RAST._IExpr _1012___mcc_h344 = _source32.dtor_obj;
                  Dafny.ISequence<RAST._IType> _1013___mcc_h345 = _source32.dtor_typeParameters;
                  return _882_default;
                } else if (_source32.is_Call) {
                  RAST._IExpr _1014___mcc_h348 = _source32.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _1015___mcc_h349 = _source32.dtor_arguments;
                  return _882_default;
                } else if (_source32.is_Select) {
                  RAST._IExpr _1016___mcc_h352 = _source32.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1017___mcc_h353 = _source32.dtor_name;
                  return _882_default;
                } else {
                  RAST._IExpr _1018___mcc_h356 = _source32.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1019___mcc_h357 = _source32.dtor_name;
                  return _882_default;
                }
              } else {
                RAST._IExpr _1020___mcc_h360 = _source31.dtor_value;
                return _882_default;
              }
            }
          } else if (_source29.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _1021___mcc_h362 = _source29.dtor_name;
            RAST._IExpr _1022___mcc_h363 = _source29.dtor_rhs;
            return _882_default;
          } else if (_source29.is_IfExpr) {
            RAST._IExpr _1023___mcc_h366 = _source29.dtor_cond;
            RAST._IExpr _1024___mcc_h367 = _source29.dtor_thn;
            RAST._IExpr _1025___mcc_h368 = _source29.dtor_els;
            RAST._IExpr _source34 = _1023___mcc_h366;
            if (_source34.is_RawExpr) {
              Dafny.ISequence<Dafny.Rune> _1026___mcc_h372 = _source34.dtor_content;
              return _882_default;
            } else if (_source34.is_Identifier) {
              Dafny.ISequence<Dafny.Rune> _1027___mcc_h374 = _source34.dtor_name;
              return _882_default;
            } else if (_source34.is_Match) {
              RAST._IExpr _1028___mcc_h376 = _source34.dtor_matchee;
              Dafny.ISequence<RAST._IMatchCase> _1029___mcc_h377 = _source34.dtor_cases;
              return _882_default;
            } else if (_source34.is_StmtExpr) {
              RAST._IExpr _1030___mcc_h380 = _source34.dtor_stmt;
              RAST._IExpr _1031___mcc_h381 = _source34.dtor_rhs;
              return _882_default;
            } else if (_source34.is_Block) {
              RAST._IExpr _1032___mcc_h384 = _source34.dtor_underlying;
              return _882_default;
            } else if (_source34.is_StructBuild) {
              RAST._IExpr _1033___mcc_h386 = _source34.dtor_underlying;
              Dafny.ISequence<RAST._IAssignIdentifier> _1034___mcc_h387 = _source34.dtor_assignments;
              return _882_default;
            } else if (_source34.is_Tuple) {
              Dafny.ISequence<RAST._IExpr> _1035___mcc_h390 = _source34.dtor_arguments;
              return _882_default;
            } else if (_source34.is_UnaryOp) {
              Dafny.ISequence<Dafny.Rune> _1036___mcc_h392 = _source34.dtor_op1;
              RAST._IExpr _1037___mcc_h393 = _source34.dtor_underlying;
              DAST.Format._IUnOpFormat _1038___mcc_h394 = _source34.dtor_format;
              if (object.Equals(_1036___mcc_h392, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!"))) {
                RAST._IExpr _source35 = _1037___mcc_h393;
                if (_source35.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _1039___mcc_h398 = _source35.dtor_content;
                  return _882_default;
                } else if (_source35.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _1040___mcc_h400 = _source35.dtor_name;
                  return _882_default;
                } else if (_source35.is_Match) {
                  RAST._IExpr _1041___mcc_h402 = _source35.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _1042___mcc_h403 = _source35.dtor_cases;
                  return _882_default;
                } else if (_source35.is_StmtExpr) {
                  RAST._IExpr _1043___mcc_h406 = _source35.dtor_stmt;
                  RAST._IExpr _1044___mcc_h407 = _source35.dtor_rhs;
                  return _882_default;
                } else if (_source35.is_Block) {
                  RAST._IExpr _1045___mcc_h410 = _source35.dtor_underlying;
                  return _882_default;
                } else if (_source35.is_StructBuild) {
                  RAST._IExpr _1046___mcc_h412 = _source35.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _1047___mcc_h413 = _source35.dtor_assignments;
                  return _882_default;
                } else if (_source35.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _1048___mcc_h416 = _source35.dtor_arguments;
                  return _882_default;
                } else if (_source35.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _1049___mcc_h418 = _source35.dtor_op1;
                  RAST._IExpr _1050___mcc_h419 = _source35.dtor_underlying;
                  DAST.Format._IUnOpFormat _1051___mcc_h420 = _source35.dtor_format;
                  return _882_default;
                } else if (_source35.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _1052___mcc_h424 = _source35.dtor_op2;
                  RAST._IExpr _1053___mcc_h425 = _source35.dtor_left;
                  RAST._IExpr _1054___mcc_h426 = _source35.dtor_right;
                  DAST.Format._IBinOpFormat _1055___mcc_h427 = _source35.dtor_format2;
                  if (object.Equals(_1052___mcc_h424, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="))) {
                    RAST._IExpr _source36 = _1024___mcc_h367;
                    if (_source36.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _1056___mcc_h432 = _source36.dtor_content;
                      if (object.Equals(_1056___mcc_h432, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");"))) {
                        RAST._IExpr _source37 = _1025___mcc_h368;
                        if (_source37.is_RawExpr) {
                          Dafny.ISequence<Dafny.Rune> _1057___mcc_h434 = _source37.dtor_content;
                          if (object.Equals(_1057___mcc_h434, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) {
                            RAST._IExpr _1058_last = _888___mcc_h107;
                            DAST.Format._IUnOpFormat _1059_of = _1038___mcc_h394;
                            DAST.Format._IBinOpFormat _1060_f = _1055___mcc_h427;
                            RAST._IExpr _1061_b = _1054___mcc_h426;
                            RAST._IExpr _1062_a = _1053___mcc_h425;
                            return (BigInteger.One) + (_882_default);
                          } else {
                            return _882_default;
                          }
                        } else if (_source37.is_Identifier) {
                          Dafny.ISequence<Dafny.Rune> _1063___mcc_h436 = _source37.dtor_name;
                          return _882_default;
                        } else if (_source37.is_Match) {
                          RAST._IExpr _1064___mcc_h438 = _source37.dtor_matchee;
                          Dafny.ISequence<RAST._IMatchCase> _1065___mcc_h439 = _source37.dtor_cases;
                          return _882_default;
                        } else if (_source37.is_StmtExpr) {
                          RAST._IExpr _1066___mcc_h442 = _source37.dtor_stmt;
                          RAST._IExpr _1067___mcc_h443 = _source37.dtor_rhs;
                          return _882_default;
                        } else if (_source37.is_Block) {
                          RAST._IExpr _1068___mcc_h446 = _source37.dtor_underlying;
                          return _882_default;
                        } else if (_source37.is_StructBuild) {
                          RAST._IExpr _1069___mcc_h448 = _source37.dtor_underlying;
                          Dafny.ISequence<RAST._IAssignIdentifier> _1070___mcc_h449 = _source37.dtor_assignments;
                          return _882_default;
                        } else if (_source37.is_Tuple) {
                          Dafny.ISequence<RAST._IExpr> _1071___mcc_h452 = _source37.dtor_arguments;
                          return _882_default;
                        } else if (_source37.is_UnaryOp) {
                          Dafny.ISequence<Dafny.Rune> _1072___mcc_h454 = _source37.dtor_op1;
                          RAST._IExpr _1073___mcc_h455 = _source37.dtor_underlying;
                          DAST.Format._IUnOpFormat _1074___mcc_h456 = _source37.dtor_format;
                          return _882_default;
                        } else if (_source37.is_BinaryOp) {
                          Dafny.ISequence<Dafny.Rune> _1075___mcc_h460 = _source37.dtor_op2;
                          RAST._IExpr _1076___mcc_h461 = _source37.dtor_left;
                          RAST._IExpr _1077___mcc_h462 = _source37.dtor_right;
                          DAST.Format._IBinOpFormat _1078___mcc_h463 = _source37.dtor_format2;
                          return _882_default;
                        } else if (_source37.is_TypeAscription) {
                          RAST._IExpr _1079___mcc_h468 = _source37.dtor_left;
                          RAST._IType _1080___mcc_h469 = _source37.dtor_tpe;
                          return _882_default;
                        } else if (_source37.is_LiteralInt) {
                          Dafny.ISequence<Dafny.Rune> _1081___mcc_h472 = _source37.dtor_value;
                          return _882_default;
                        } else if (_source37.is_LiteralString) {
                          Dafny.ISequence<Dafny.Rune> _1082___mcc_h474 = _source37.dtor_value;
                          bool _1083___mcc_h475 = _source37.dtor_binary;
                          return _882_default;
                        } else if (_source37.is_DeclareVar) {
                          RAST._IDeclareType _1084___mcc_h478 = _source37.dtor_declareType;
                          Dafny.ISequence<Dafny.Rune> _1085___mcc_h479 = _source37.dtor_name;
                          Std.Wrappers._IOption<RAST._IType> _1086___mcc_h480 = _source37.dtor_optType;
                          Std.Wrappers._IOption<RAST._IExpr> _1087___mcc_h481 = _source37.dtor_optRhs;
                          return _882_default;
                        } else if (_source37.is_AssignVar) {
                          Dafny.ISequence<Dafny.Rune> _1088___mcc_h486 = _source37.dtor_name;
                          RAST._IExpr _1089___mcc_h487 = _source37.dtor_rhs;
                          return _882_default;
                        } else if (_source37.is_IfExpr) {
                          RAST._IExpr _1090___mcc_h490 = _source37.dtor_cond;
                          RAST._IExpr _1091___mcc_h491 = _source37.dtor_thn;
                          RAST._IExpr _1092___mcc_h492 = _source37.dtor_els;
                          return _882_default;
                        } else if (_source37.is_Loop) {
                          Std.Wrappers._IOption<RAST._IExpr> _1093___mcc_h496 = _source37.dtor_optCond;
                          RAST._IExpr _1094___mcc_h497 = _source37.dtor_underlying;
                          return _882_default;
                        } else if (_source37.is_For) {
                          Dafny.ISequence<Dafny.Rune> _1095___mcc_h500 = _source37.dtor_name;
                          RAST._IExpr _1096___mcc_h501 = _source37.dtor_range;
                          RAST._IExpr _1097___mcc_h502 = _source37.dtor_body;
                          return _882_default;
                        } else if (_source37.is_Labelled) {
                          Dafny.ISequence<Dafny.Rune> _1098___mcc_h506 = _source37.dtor_lbl;
                          RAST._IExpr _1099___mcc_h507 = _source37.dtor_underlying;
                          return _882_default;
                        } else if (_source37.is_Break) {
                          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1100___mcc_h510 = _source37.dtor_optLbl;
                          return _882_default;
                        } else if (_source37.is_Continue) {
                          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1101___mcc_h512 = _source37.dtor_optLbl;
                          return _882_default;
                        } else if (_source37.is_Return) {
                          Std.Wrappers._IOption<RAST._IExpr> _1102___mcc_h514 = _source37.dtor_optExpr;
                          return _882_default;
                        } else if (_source37.is_CallType) {
                          RAST._IExpr _1103___mcc_h516 = _source37.dtor_obj;
                          Dafny.ISequence<RAST._IType> _1104___mcc_h517 = _source37.dtor_typeParameters;
                          return _882_default;
                        } else if (_source37.is_Call) {
                          RAST._IExpr _1105___mcc_h520 = _source37.dtor_obj;
                          Dafny.ISequence<RAST._IExpr> _1106___mcc_h521 = _source37.dtor_arguments;
                          return _882_default;
                        } else if (_source37.is_Select) {
                          RAST._IExpr _1107___mcc_h524 = _source37.dtor_obj;
                          Dafny.ISequence<Dafny.Rune> _1108___mcc_h525 = _source37.dtor_name;
                          return _882_default;
                        } else {
                          RAST._IExpr _1109___mcc_h528 = _source37.dtor_obj;
                          Dafny.ISequence<Dafny.Rune> _1110___mcc_h529 = _source37.dtor_name;
                          return _882_default;
                        }
                      } else {
                        return _882_default;
                      }
                    } else if (_source36.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _1111___mcc_h532 = _source36.dtor_name;
                      return _882_default;
                    } else if (_source36.is_Match) {
                      RAST._IExpr _1112___mcc_h534 = _source36.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _1113___mcc_h535 = _source36.dtor_cases;
                      return _882_default;
                    } else if (_source36.is_StmtExpr) {
                      RAST._IExpr _1114___mcc_h538 = _source36.dtor_stmt;
                      RAST._IExpr _1115___mcc_h539 = _source36.dtor_rhs;
                      return _882_default;
                    } else if (_source36.is_Block) {
                      RAST._IExpr _1116___mcc_h542 = _source36.dtor_underlying;
                      return _882_default;
                    } else if (_source36.is_StructBuild) {
                      RAST._IExpr _1117___mcc_h544 = _source36.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _1118___mcc_h545 = _source36.dtor_assignments;
                      return _882_default;
                    } else if (_source36.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _1119___mcc_h548 = _source36.dtor_arguments;
                      return _882_default;
                    } else if (_source36.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _1120___mcc_h550 = _source36.dtor_op1;
                      RAST._IExpr _1121___mcc_h551 = _source36.dtor_underlying;
                      DAST.Format._IUnOpFormat _1122___mcc_h552 = _source36.dtor_format;
                      return _882_default;
                    } else if (_source36.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _1123___mcc_h556 = _source36.dtor_op2;
                      RAST._IExpr _1124___mcc_h557 = _source36.dtor_left;
                      RAST._IExpr _1125___mcc_h558 = _source36.dtor_right;
                      DAST.Format._IBinOpFormat _1126___mcc_h559 = _source36.dtor_format2;
                      return _882_default;
                    } else if (_source36.is_TypeAscription) {
                      RAST._IExpr _1127___mcc_h564 = _source36.dtor_left;
                      RAST._IType _1128___mcc_h565 = _source36.dtor_tpe;
                      return _882_default;
                    } else if (_source36.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _1129___mcc_h568 = _source36.dtor_value;
                      return _882_default;
                    } else if (_source36.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _1130___mcc_h570 = _source36.dtor_value;
                      bool _1131___mcc_h571 = _source36.dtor_binary;
                      return _882_default;
                    } else if (_source36.is_DeclareVar) {
                      RAST._IDeclareType _1132___mcc_h574 = _source36.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _1133___mcc_h575 = _source36.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _1134___mcc_h576 = _source36.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _1135___mcc_h577 = _source36.dtor_optRhs;
                      return _882_default;
                    } else if (_source36.is_AssignVar) {
                      Dafny.ISequence<Dafny.Rune> _1136___mcc_h582 = _source36.dtor_name;
                      RAST._IExpr _1137___mcc_h583 = _source36.dtor_rhs;
                      return _882_default;
                    } else if (_source36.is_IfExpr) {
                      RAST._IExpr _1138___mcc_h586 = _source36.dtor_cond;
                      RAST._IExpr _1139___mcc_h587 = _source36.dtor_thn;
                      RAST._IExpr _1140___mcc_h588 = _source36.dtor_els;
                      return _882_default;
                    } else if (_source36.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _1141___mcc_h592 = _source36.dtor_optCond;
                      RAST._IExpr _1142___mcc_h593 = _source36.dtor_underlying;
                      return _882_default;
                    } else if (_source36.is_For) {
                      Dafny.ISequence<Dafny.Rune> _1143___mcc_h596 = _source36.dtor_name;
                      RAST._IExpr _1144___mcc_h597 = _source36.dtor_range;
                      RAST._IExpr _1145___mcc_h598 = _source36.dtor_body;
                      return _882_default;
                    } else if (_source36.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _1146___mcc_h602 = _source36.dtor_lbl;
                      RAST._IExpr _1147___mcc_h603 = _source36.dtor_underlying;
                      return _882_default;
                    } else if (_source36.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1148___mcc_h606 = _source36.dtor_optLbl;
                      return _882_default;
                    } else if (_source36.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1149___mcc_h608 = _source36.dtor_optLbl;
                      return _882_default;
                    } else if (_source36.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _1150___mcc_h610 = _source36.dtor_optExpr;
                      return _882_default;
                    } else if (_source36.is_CallType) {
                      RAST._IExpr _1151___mcc_h612 = _source36.dtor_obj;
                      Dafny.ISequence<RAST._IType> _1152___mcc_h613 = _source36.dtor_typeParameters;
                      return _882_default;
                    } else if (_source36.is_Call) {
                      RAST._IExpr _1153___mcc_h616 = _source36.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _1154___mcc_h617 = _source36.dtor_arguments;
                      return _882_default;
                    } else if (_source36.is_Select) {
                      RAST._IExpr _1155___mcc_h620 = _source36.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _1156___mcc_h621 = _source36.dtor_name;
                      return _882_default;
                    } else {
                      RAST._IExpr _1157___mcc_h624 = _source36.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _1158___mcc_h625 = _source36.dtor_name;
                      return _882_default;
                    }
                  } else {
                    return _882_default;
                  }
                } else if (_source35.is_TypeAscription) {
                  RAST._IExpr _1159___mcc_h628 = _source35.dtor_left;
                  RAST._IType _1160___mcc_h629 = _source35.dtor_tpe;
                  return _882_default;
                } else if (_source35.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _1161___mcc_h632 = _source35.dtor_value;
                  return _882_default;
                } else if (_source35.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _1162___mcc_h634 = _source35.dtor_value;
                  bool _1163___mcc_h635 = _source35.dtor_binary;
                  return _882_default;
                } else if (_source35.is_DeclareVar) {
                  RAST._IDeclareType _1164___mcc_h638 = _source35.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _1165___mcc_h639 = _source35.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _1166___mcc_h640 = _source35.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _1167___mcc_h641 = _source35.dtor_optRhs;
                  return _882_default;
                } else if (_source35.is_AssignVar) {
                  Dafny.ISequence<Dafny.Rune> _1168___mcc_h646 = _source35.dtor_name;
                  RAST._IExpr _1169___mcc_h647 = _source35.dtor_rhs;
                  return _882_default;
                } else if (_source35.is_IfExpr) {
                  RAST._IExpr _1170___mcc_h650 = _source35.dtor_cond;
                  RAST._IExpr _1171___mcc_h651 = _source35.dtor_thn;
                  RAST._IExpr _1172___mcc_h652 = _source35.dtor_els;
                  return _882_default;
                } else if (_source35.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _1173___mcc_h656 = _source35.dtor_optCond;
                  RAST._IExpr _1174___mcc_h657 = _source35.dtor_underlying;
                  return _882_default;
                } else if (_source35.is_For) {
                  Dafny.ISequence<Dafny.Rune> _1175___mcc_h660 = _source35.dtor_name;
                  RAST._IExpr _1176___mcc_h661 = _source35.dtor_range;
                  RAST._IExpr _1177___mcc_h662 = _source35.dtor_body;
                  return _882_default;
                } else if (_source35.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _1178___mcc_h666 = _source35.dtor_lbl;
                  RAST._IExpr _1179___mcc_h667 = _source35.dtor_underlying;
                  return _882_default;
                } else if (_source35.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1180___mcc_h670 = _source35.dtor_optLbl;
                  return _882_default;
                } else if (_source35.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1181___mcc_h672 = _source35.dtor_optLbl;
                  return _882_default;
                } else if (_source35.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _1182___mcc_h674 = _source35.dtor_optExpr;
                  return _882_default;
                } else if (_source35.is_CallType) {
                  RAST._IExpr _1183___mcc_h676 = _source35.dtor_obj;
                  Dafny.ISequence<RAST._IType> _1184___mcc_h677 = _source35.dtor_typeParameters;
                  return _882_default;
                } else if (_source35.is_Call) {
                  RAST._IExpr _1185___mcc_h680 = _source35.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _1186___mcc_h681 = _source35.dtor_arguments;
                  return _882_default;
                } else if (_source35.is_Select) {
                  RAST._IExpr _1187___mcc_h684 = _source35.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1188___mcc_h685 = _source35.dtor_name;
                  return _882_default;
                } else {
                  RAST._IExpr _1189___mcc_h688 = _source35.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1190___mcc_h689 = _source35.dtor_name;
                  return _882_default;
                }
              } else {
                return _882_default;
              }
            } else if (_source34.is_BinaryOp) {
              Dafny.ISequence<Dafny.Rune> _1191___mcc_h692 = _source34.dtor_op2;
              RAST._IExpr _1192___mcc_h693 = _source34.dtor_left;
              RAST._IExpr _1193___mcc_h694 = _source34.dtor_right;
              DAST.Format._IBinOpFormat _1194___mcc_h695 = _source34.dtor_format2;
              return _882_default;
            } else if (_source34.is_TypeAscription) {
              RAST._IExpr _1195___mcc_h700 = _source34.dtor_left;
              RAST._IType _1196___mcc_h701 = _source34.dtor_tpe;
              return _882_default;
            } else if (_source34.is_LiteralInt) {
              Dafny.ISequence<Dafny.Rune> _1197___mcc_h704 = _source34.dtor_value;
              return _882_default;
            } else if (_source34.is_LiteralString) {
              Dafny.ISequence<Dafny.Rune> _1198___mcc_h706 = _source34.dtor_value;
              bool _1199___mcc_h707 = _source34.dtor_binary;
              return _882_default;
            } else if (_source34.is_DeclareVar) {
              RAST._IDeclareType _1200___mcc_h710 = _source34.dtor_declareType;
              Dafny.ISequence<Dafny.Rune> _1201___mcc_h711 = _source34.dtor_name;
              Std.Wrappers._IOption<RAST._IType> _1202___mcc_h712 = _source34.dtor_optType;
              Std.Wrappers._IOption<RAST._IExpr> _1203___mcc_h713 = _source34.dtor_optRhs;
              return _882_default;
            } else if (_source34.is_AssignVar) {
              Dafny.ISequence<Dafny.Rune> _1204___mcc_h718 = _source34.dtor_name;
              RAST._IExpr _1205___mcc_h719 = _source34.dtor_rhs;
              return _882_default;
            } else if (_source34.is_IfExpr) {
              RAST._IExpr _1206___mcc_h722 = _source34.dtor_cond;
              RAST._IExpr _1207___mcc_h723 = _source34.dtor_thn;
              RAST._IExpr _1208___mcc_h724 = _source34.dtor_els;
              return _882_default;
            } else if (_source34.is_Loop) {
              Std.Wrappers._IOption<RAST._IExpr> _1209___mcc_h728 = _source34.dtor_optCond;
              RAST._IExpr _1210___mcc_h729 = _source34.dtor_underlying;
              return _882_default;
            } else if (_source34.is_For) {
              Dafny.ISequence<Dafny.Rune> _1211___mcc_h732 = _source34.dtor_name;
              RAST._IExpr _1212___mcc_h733 = _source34.dtor_range;
              RAST._IExpr _1213___mcc_h734 = _source34.dtor_body;
              return _882_default;
            } else if (_source34.is_Labelled) {
              Dafny.ISequence<Dafny.Rune> _1214___mcc_h738 = _source34.dtor_lbl;
              RAST._IExpr _1215___mcc_h739 = _source34.dtor_underlying;
              return _882_default;
            } else if (_source34.is_Break) {
              Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1216___mcc_h742 = _source34.dtor_optLbl;
              return _882_default;
            } else if (_source34.is_Continue) {
              Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1217___mcc_h744 = _source34.dtor_optLbl;
              return _882_default;
            } else if (_source34.is_Return) {
              Std.Wrappers._IOption<RAST._IExpr> _1218___mcc_h746 = _source34.dtor_optExpr;
              return _882_default;
            } else if (_source34.is_CallType) {
              RAST._IExpr _1219___mcc_h748 = _source34.dtor_obj;
              Dafny.ISequence<RAST._IType> _1220___mcc_h749 = _source34.dtor_typeParameters;
              return _882_default;
            } else if (_source34.is_Call) {
              RAST._IExpr _1221___mcc_h752 = _source34.dtor_obj;
              Dafny.ISequence<RAST._IExpr> _1222___mcc_h753 = _source34.dtor_arguments;
              return _882_default;
            } else if (_source34.is_Select) {
              RAST._IExpr _1223___mcc_h756 = _source34.dtor_obj;
              Dafny.ISequence<Dafny.Rune> _1224___mcc_h757 = _source34.dtor_name;
              return _882_default;
            } else {
              RAST._IExpr _1225___mcc_h760 = _source34.dtor_obj;
              Dafny.ISequence<Dafny.Rune> _1226___mcc_h761 = _source34.dtor_name;
              return _882_default;
            }
          } else if (_source29.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _1227___mcc_h764 = _source29.dtor_optCond;
            RAST._IExpr _1228___mcc_h765 = _source29.dtor_underlying;
            return _882_default;
          } else if (_source29.is_For) {
            Dafny.ISequence<Dafny.Rune> _1229___mcc_h768 = _source29.dtor_name;
            RAST._IExpr _1230___mcc_h769 = _source29.dtor_range;
            RAST._IExpr _1231___mcc_h770 = _source29.dtor_body;
            return _882_default;
          } else if (_source29.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _1232___mcc_h774 = _source29.dtor_lbl;
            RAST._IExpr _1233___mcc_h775 = _source29.dtor_underlying;
            return _882_default;
          } else if (_source29.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1234___mcc_h778 = _source29.dtor_optLbl;
            return _882_default;
          } else if (_source29.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1235___mcc_h780 = _source29.dtor_optLbl;
            return _882_default;
          } else if (_source29.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _1236___mcc_h782 = _source29.dtor_optExpr;
            return _882_default;
          } else if (_source29.is_CallType) {
            RAST._IExpr _1237___mcc_h784 = _source29.dtor_obj;
            Dafny.ISequence<RAST._IType> _1238___mcc_h785 = _source29.dtor_typeParameters;
            return _882_default;
          } else if (_source29.is_Call) {
            RAST._IExpr _1239___mcc_h788 = _source29.dtor_obj;
            Dafny.ISequence<RAST._IExpr> _1240___mcc_h789 = _source29.dtor_arguments;
            return _882_default;
          } else if (_source29.is_Select) {
            RAST._IExpr _1241___mcc_h792 = _source29.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1242___mcc_h793 = _source29.dtor_name;
            return _882_default;
          } else {
            RAST._IExpr _1243___mcc_h796 = _source29.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1244___mcc_h797 = _source29.dtor_name;
            return _882_default;
          }
        } else if (_source28.is_Block) {
          RAST._IExpr _1245___mcc_h800 = _source28.dtor_underlying;
          return _882_default;
        } else if (_source28.is_StructBuild) {
          RAST._IExpr _1246___mcc_h802 = _source28.dtor_underlying;
          Dafny.ISequence<RAST._IAssignIdentifier> _1247___mcc_h803 = _source28.dtor_assignments;
          return _882_default;
        } else if (_source28.is_Tuple) {
          Dafny.ISequence<RAST._IExpr> _1248___mcc_h806 = _source28.dtor_arguments;
          return _882_default;
        } else if (_source28.is_UnaryOp) {
          Dafny.ISequence<Dafny.Rune> _1249___mcc_h808 = _source28.dtor_op1;
          RAST._IExpr _1250___mcc_h809 = _source28.dtor_underlying;
          DAST.Format._IUnOpFormat _1251___mcc_h810 = _source28.dtor_format;
          return _882_default;
        } else if (_source28.is_BinaryOp) {
          Dafny.ISequence<Dafny.Rune> _1252___mcc_h814 = _source28.dtor_op2;
          RAST._IExpr _1253___mcc_h815 = _source28.dtor_left;
          RAST._IExpr _1254___mcc_h816 = _source28.dtor_right;
          DAST.Format._IBinOpFormat _1255___mcc_h817 = _source28.dtor_format2;
          return _882_default;
        } else if (_source28.is_TypeAscription) {
          RAST._IExpr _1256___mcc_h822 = _source28.dtor_left;
          RAST._IType _1257___mcc_h823 = _source28.dtor_tpe;
          return _882_default;
        } else if (_source28.is_LiteralInt) {
          Dafny.ISequence<Dafny.Rune> _1258___mcc_h826 = _source28.dtor_value;
          return _882_default;
        } else if (_source28.is_LiteralString) {
          Dafny.ISequence<Dafny.Rune> _1259___mcc_h828 = _source28.dtor_value;
          bool _1260___mcc_h829 = _source28.dtor_binary;
          return _882_default;
        } else if (_source28.is_DeclareVar) {
          RAST._IDeclareType _1261___mcc_h832 = _source28.dtor_declareType;
          Dafny.ISequence<Dafny.Rune> _1262___mcc_h833 = _source28.dtor_name;
          Std.Wrappers._IOption<RAST._IType> _1263___mcc_h834 = _source28.dtor_optType;
          Std.Wrappers._IOption<RAST._IExpr> _1264___mcc_h835 = _source28.dtor_optRhs;
          return _882_default;
        } else if (_source28.is_AssignVar) {
          Dafny.ISequence<Dafny.Rune> _1265___mcc_h840 = _source28.dtor_name;
          RAST._IExpr _1266___mcc_h841 = _source28.dtor_rhs;
          return _882_default;
        } else if (_source28.is_IfExpr) {
          RAST._IExpr _1267___mcc_h844 = _source28.dtor_cond;
          RAST._IExpr _1268___mcc_h845 = _source28.dtor_thn;
          RAST._IExpr _1269___mcc_h846 = _source28.dtor_els;
          return _882_default;
        } else if (_source28.is_Loop) {
          Std.Wrappers._IOption<RAST._IExpr> _1270___mcc_h850 = _source28.dtor_optCond;
          RAST._IExpr _1271___mcc_h851 = _source28.dtor_underlying;
          return _882_default;
        } else if (_source28.is_For) {
          Dafny.ISequence<Dafny.Rune> _1272___mcc_h854 = _source28.dtor_name;
          RAST._IExpr _1273___mcc_h855 = _source28.dtor_range;
          RAST._IExpr _1274___mcc_h856 = _source28.dtor_body;
          return _882_default;
        } else if (_source28.is_Labelled) {
          Dafny.ISequence<Dafny.Rune> _1275___mcc_h860 = _source28.dtor_lbl;
          RAST._IExpr _1276___mcc_h861 = _source28.dtor_underlying;
          return _882_default;
        } else if (_source28.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1277___mcc_h864 = _source28.dtor_optLbl;
          return _882_default;
        } else if (_source28.is_Continue) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1278___mcc_h866 = _source28.dtor_optLbl;
          return _882_default;
        } else if (_source28.is_Return) {
          Std.Wrappers._IOption<RAST._IExpr> _1279___mcc_h868 = _source28.dtor_optExpr;
          return _882_default;
        } else if (_source28.is_CallType) {
          RAST._IExpr _1280___mcc_h870 = _source28.dtor_obj;
          Dafny.ISequence<RAST._IType> _1281___mcc_h871 = _source28.dtor_typeParameters;
          return _882_default;
        } else if (_source28.is_Call) {
          RAST._IExpr _1282___mcc_h874 = _source28.dtor_obj;
          Dafny.ISequence<RAST._IExpr> _1283___mcc_h875 = _source28.dtor_arguments;
          return _882_default;
        } else if (_source28.is_Select) {
          RAST._IExpr _1284___mcc_h878 = _source28.dtor_obj;
          Dafny.ISequence<Dafny.Rune> _1285___mcc_h879 = _source28.dtor_name;
          return _882_default;
        } else {
          RAST._IExpr _1286___mcc_h882 = _source28.dtor_obj;
          Dafny.ISequence<Dafny.Rune> _1287___mcc_h883 = _source28.dtor_name;
          return _882_default;
        }
      } else if (_source27.is_Block) {
        RAST._IExpr _1288___mcc_h12 = _source27.dtor_underlying;
        RAST._IExpr _1289_underlying = _1288___mcc_h12;
        return (BigInteger.One) + ((_1289_underlying).Height());
      } else if (_source27.is_StructBuild) {
        RAST._IExpr _1290___mcc_h14 = _source27.dtor_underlying;
        Dafny.ISequence<RAST._IAssignIdentifier> _1291___mcc_h15 = _source27.dtor_assignments;
        Dafny.ISequence<RAST._IAssignIdentifier> _1292_assignments = _1291___mcc_h15;
        RAST._IExpr _1293_name = _1290___mcc_h14;
        return (BigInteger.One) + (RAST.__default.max((_1293_name).Height(), RAST.__default.SeqToHeight<RAST._IAssignIdentifier>(_1292_assignments, ((System.Func<RAST._IAssignIdentifier, BigInteger>)((_1294_assignment) => {
          return (_1294_assignment).Height();
        })))));
      } else if (_source27.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _1295___mcc_h18 = _source27.dtor_arguments;
        Dafny.ISequence<RAST._IExpr> _1296_arguments = _1295___mcc_h18;
        return (BigInteger.One) + (RAST.__default.SeqToHeight<RAST._IExpr>(_1296_arguments, ((System.Func<RAST._IExpr, BigInteger>)((_1297_argument) => {
          return (_1297_argument).Height();
        }))));
      } else if (_source27.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _1298___mcc_h20 = _source27.dtor_op1;
        RAST._IExpr _1299___mcc_h21 = _source27.dtor_underlying;
        DAST.Format._IUnOpFormat _1300___mcc_h22 = _source27.dtor_format;
        RAST._IExpr _1301_underlying = _1299___mcc_h21;
        return (BigInteger.One) + ((_1301_underlying).Height());
      } else if (_source27.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _1302___mcc_h26 = _source27.dtor_op2;
        RAST._IExpr _1303___mcc_h27 = _source27.dtor_left;
        RAST._IExpr _1304___mcc_h28 = _source27.dtor_right;
        DAST.Format._IBinOpFormat _1305___mcc_h29 = _source27.dtor_format2;
        DAST.Format._IBinOpFormat _1306_format = _1305___mcc_h29;
        RAST._IExpr _1307_right = _1304___mcc_h28;
        RAST._IExpr _1308_left = _1303___mcc_h27;
        Dafny.ISequence<Dafny.Rune> _1309_op = _1302___mcc_h26;
        return (BigInteger.One) + (RAST.__default.max((_1308_left).Height(), (_1307_right).Height()));
      } else if (_source27.is_TypeAscription) {
        RAST._IExpr _1310___mcc_h34 = _source27.dtor_left;
        RAST._IType _1311___mcc_h35 = _source27.dtor_tpe;
        RAST._IType _1312_tpe = _1311___mcc_h35;
        RAST._IExpr _1313_left = _1310___mcc_h34;
        return (BigInteger.One) + ((_1313_left).Height());
      } else if (_source27.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _1314___mcc_h38 = _source27.dtor_value;
        return BigInteger.One;
      } else if (_source27.is_LiteralString) {
        Dafny.ISequence<Dafny.Rune> _1315___mcc_h40 = _source27.dtor_value;
        bool _1316___mcc_h41 = _source27.dtor_binary;
        return BigInteger.One;
      } else if (_source27.is_DeclareVar) {
        RAST._IDeclareType _1317___mcc_h44 = _source27.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _1318___mcc_h45 = _source27.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _1319___mcc_h46 = _source27.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _1320___mcc_h47 = _source27.dtor_optRhs;
        Std.Wrappers._IOption<RAST._IExpr> _1321_expr = _1320___mcc_h47;
        Std.Wrappers._IOption<RAST._IType> _1322_tpe = _1319___mcc_h46;
        Dafny.ISequence<Dafny.Rune> _1323_name = _1318___mcc_h45;
        RAST._IDeclareType _1324_declareType = _1317___mcc_h44;
        return (BigInteger.One) + (((System.Func<Std.Wrappers._IOption<RAST._IExpr>, BigInteger>)((_source38) => {
          if (_source38.is_None) {
            return BigInteger.Zero;
          } else {
            RAST._IExpr _1325___mcc_h886 = _source38.dtor_value;
            RAST._IExpr _1326_e = _1325___mcc_h886;
            return (_1326_e).Height();
          }
        }))(_1321_expr));
      } else if (_source27.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _1327___mcc_h52 = _source27.dtor_name;
        RAST._IExpr _1328___mcc_h53 = _source27.dtor_rhs;
        RAST._IExpr _1329_expr = _1328___mcc_h53;
        Dafny.ISequence<Dafny.Rune> _1330_name = _1327___mcc_h52;
        return (BigInteger.One) + ((_1329_expr).Height());
      } else if (_source27.is_IfExpr) {
        RAST._IExpr _1331___mcc_h56 = _source27.dtor_cond;
        RAST._IExpr _1332___mcc_h57 = _source27.dtor_thn;
        RAST._IExpr _1333___mcc_h58 = _source27.dtor_els;
        RAST._IExpr _1334_els = _1333___mcc_h58;
        RAST._IExpr _1335_thn = _1332___mcc_h57;
        RAST._IExpr _1336_cond = _1331___mcc_h56;
        return (BigInteger.One) + (RAST.__default.max((_1336_cond).Height(), RAST.__default.max((_1335_thn).Height(), (_1334_els).Height())));
      } else if (_source27.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _1337___mcc_h62 = _source27.dtor_optCond;
        RAST._IExpr _1338___mcc_h63 = _source27.dtor_underlying;
        RAST._IExpr _1339_underlying = _1338___mcc_h63;
        Std.Wrappers._IOption<RAST._IExpr> _1340_optCond = _1337___mcc_h62;
        return (BigInteger.One) + ((((_1340_optCond).is_Some) ? (RAST.__default.max(((_1340_optCond).dtor_value).Height(), (_1339_underlying).Height())) : ((_1339_underlying).Height())));
      } else if (_source27.is_For) {
        Dafny.ISequence<Dafny.Rune> _1341___mcc_h66 = _source27.dtor_name;
        RAST._IExpr _1342___mcc_h67 = _source27.dtor_range;
        RAST._IExpr _1343___mcc_h68 = _source27.dtor_body;
        RAST._IExpr _1344_body = _1343___mcc_h68;
        RAST._IExpr _1345_range = _1342___mcc_h67;
        Dafny.ISequence<Dafny.Rune> _1346_name = _1341___mcc_h66;
        return (BigInteger.One) + (RAST.__default.max((_1345_range).Height(), (_1344_body).Height()));
      } else if (_source27.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _1347___mcc_h72 = _source27.dtor_lbl;
        RAST._IExpr _1348___mcc_h73 = _source27.dtor_underlying;
        RAST._IExpr _1349_underlying = _1348___mcc_h73;
        Dafny.ISequence<Dafny.Rune> _1350_lbl = _1347___mcc_h72;
        return (BigInteger.One) + ((_1349_underlying).Height());
      } else if (_source27.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1351___mcc_h76 = _source27.dtor_optLbl;
        return BigInteger.One;
      } else if (_source27.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1352___mcc_h78 = _source27.dtor_optLbl;
        return BigInteger.One;
      } else if (_source27.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _1353___mcc_h80 = _source27.dtor_optExpr;
        Std.Wrappers._IOption<RAST._IExpr> _1354_optExpr = _1353___mcc_h80;
        if ((_1354_optExpr).is_Some) {
          return (BigInteger.One) + (((_1354_optExpr).dtor_value).Height());
        } else {
          return BigInteger.One;
        }
      } else if (_source27.is_CallType) {
        RAST._IExpr _1355___mcc_h82 = _source27.dtor_obj;
        Dafny.ISequence<RAST._IType> _1356___mcc_h83 = _source27.dtor_typeParameters;
        Dafny.ISequence<RAST._IType> _1357_tpes = _1356___mcc_h83;
        RAST._IExpr _1358_obj = _1355___mcc_h82;
        return (BigInteger.One) + (RAST.__default.max((_1358_obj).Height(), RAST.__default.SeqToHeight<RAST._IType>(_1357_tpes, ((System.Func<RAST._IType, BigInteger>)((_1359_tpe) => {
          return BigInteger.One;
        })))));
      } else if (_source27.is_Call) {
        RAST._IExpr _1360___mcc_h86 = _source27.dtor_obj;
        Dafny.ISequence<RAST._IExpr> _1361___mcc_h87 = _source27.dtor_arguments;
        Dafny.ISequence<RAST._IExpr> _1362_args = _1361___mcc_h87;
        RAST._IExpr _1363_obj = _1360___mcc_h86;
        return (BigInteger.One) + (RAST.__default.max((_1363_obj).Height(), RAST.__default.SeqToHeight<RAST._IExpr>(_1362_args, ((System.Func<RAST._IExpr, BigInteger>)((_1364_arg) => {
          return (_1364_arg).Height();
        })))));
      } else if (_source27.is_Select) {
        RAST._IExpr _1365___mcc_h90 = _source27.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _1366___mcc_h91 = _source27.dtor_name;
        Dafny.ISequence<Dafny.Rune> _1367_name = _1366___mcc_h91;
        RAST._IExpr _1368_expression = _1365___mcc_h90;
        return (BigInteger.One) + ((_1368_expression).Height());
      } else {
        RAST._IExpr _1369___mcc_h94 = _source27.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _1370___mcc_h95 = _source27.dtor_name;
        Dafny.ISequence<Dafny.Rune> _1371_name = _1370___mcc_h95;
        RAST._IExpr _1372_expression = _1369___mcc_h94;
        return (BigInteger.One) + ((_1372_expression).Height());
      }
    }
    public RAST._IExpr Optimize() {
      RAST._IExpr _source39 = this;
      if (_source39.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _1373___mcc_h0 = _source39.dtor_content;
        return this;
      } else if (_source39.is_Identifier) {
        Dafny.ISequence<Dafny.Rune> _1374___mcc_h2 = _source39.dtor_name;
        return this;
      } else if (_source39.is_Match) {
        RAST._IExpr _1375___mcc_h4 = _source39.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _1376___mcc_h5 = _source39.dtor_cases;
        return this;
      } else if (_source39.is_StmtExpr) {
        RAST._IExpr _1377___mcc_h8 = _source39.dtor_stmt;
        RAST._IExpr _1378___mcc_h9 = _source39.dtor_rhs;
        RAST._IExpr _source40 = _1377___mcc_h8;
        if (_source40.is_RawExpr) {
          Dafny.ISequence<Dafny.Rune> _1379___mcc_h12 = _source40.dtor_content;
          return this;
        } else if (_source40.is_Identifier) {
          Dafny.ISequence<Dafny.Rune> _1380___mcc_h14 = _source40.dtor_name;
          return this;
        } else if (_source40.is_Match) {
          RAST._IExpr _1381___mcc_h16 = _source40.dtor_matchee;
          Dafny.ISequence<RAST._IMatchCase> _1382___mcc_h17 = _source40.dtor_cases;
          return this;
        } else if (_source40.is_StmtExpr) {
          RAST._IExpr _1383___mcc_h20 = _source40.dtor_stmt;
          RAST._IExpr _1384___mcc_h21 = _source40.dtor_rhs;
          return this;
        } else if (_source40.is_Block) {
          RAST._IExpr _1385___mcc_h24 = _source40.dtor_underlying;
          return this;
        } else if (_source40.is_StructBuild) {
          RAST._IExpr _1386___mcc_h26 = _source40.dtor_underlying;
          Dafny.ISequence<RAST._IAssignIdentifier> _1387___mcc_h27 = _source40.dtor_assignments;
          return this;
        } else if (_source40.is_Tuple) {
          Dafny.ISequence<RAST._IExpr> _1388___mcc_h30 = _source40.dtor_arguments;
          return this;
        } else if (_source40.is_UnaryOp) {
          Dafny.ISequence<Dafny.Rune> _1389___mcc_h32 = _source40.dtor_op1;
          RAST._IExpr _1390___mcc_h33 = _source40.dtor_underlying;
          DAST.Format._IUnOpFormat _1391___mcc_h34 = _source40.dtor_format;
          return this;
        } else if (_source40.is_BinaryOp) {
          Dafny.ISequence<Dafny.Rune> _1392___mcc_h38 = _source40.dtor_op2;
          RAST._IExpr _1393___mcc_h39 = _source40.dtor_left;
          RAST._IExpr _1394___mcc_h40 = _source40.dtor_right;
          DAST.Format._IBinOpFormat _1395___mcc_h41 = _source40.dtor_format2;
          return this;
        } else if (_source40.is_TypeAscription) {
          RAST._IExpr _1396___mcc_h46 = _source40.dtor_left;
          RAST._IType _1397___mcc_h47 = _source40.dtor_tpe;
          return this;
        } else if (_source40.is_LiteralInt) {
          Dafny.ISequence<Dafny.Rune> _1398___mcc_h50 = _source40.dtor_value;
          return this;
        } else if (_source40.is_LiteralString) {
          Dafny.ISequence<Dafny.Rune> _1399___mcc_h52 = _source40.dtor_value;
          bool _1400___mcc_h53 = _source40.dtor_binary;
          return this;
        } else if (_source40.is_DeclareVar) {
          RAST._IDeclareType _1401___mcc_h56 = _source40.dtor_declareType;
          Dafny.ISequence<Dafny.Rune> _1402___mcc_h57 = _source40.dtor_name;
          Std.Wrappers._IOption<RAST._IType> _1403___mcc_h58 = _source40.dtor_optType;
          Std.Wrappers._IOption<RAST._IExpr> _1404___mcc_h59 = _source40.dtor_optRhs;
          Std.Wrappers._IOption<RAST._IType> _source41 = _1403___mcc_h58;
          if (_source41.is_None) {
            return this;
          } else {
            RAST._IType _1405___mcc_h64 = _source41.dtor_value;
            Std.Wrappers._IOption<RAST._IExpr> _source42 = _1404___mcc_h59;
            if (_source42.is_None) {
              RAST._IExpr _source43 = _1378___mcc_h9;
              if (_source43.is_RawExpr) {
                Dafny.ISequence<Dafny.Rune> _1406___mcc_h66 = _source43.dtor_content;
                return this;
              } else if (_source43.is_Identifier) {
                Dafny.ISequence<Dafny.Rune> _1407___mcc_h68 = _source43.dtor_name;
                return this;
              } else if (_source43.is_Match) {
                RAST._IExpr _1408___mcc_h70 = _source43.dtor_matchee;
                Dafny.ISequence<RAST._IMatchCase> _1409___mcc_h71 = _source43.dtor_cases;
                return this;
              } else if (_source43.is_StmtExpr) {
                RAST._IExpr _1410___mcc_h74 = _source43.dtor_stmt;
                RAST._IExpr _1411___mcc_h75 = _source43.dtor_rhs;
                RAST._IExpr _source44 = _1410___mcc_h74;
                if (_source44.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _1412___mcc_h78 = _source44.dtor_content;
                  return this;
                } else if (_source44.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _1413___mcc_h80 = _source44.dtor_name;
                  return this;
                } else if (_source44.is_Match) {
                  RAST._IExpr _1414___mcc_h82 = _source44.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _1415___mcc_h83 = _source44.dtor_cases;
                  return this;
                } else if (_source44.is_StmtExpr) {
                  RAST._IExpr _1416___mcc_h86 = _source44.dtor_stmt;
                  RAST._IExpr _1417___mcc_h87 = _source44.dtor_rhs;
                  return this;
                } else if (_source44.is_Block) {
                  RAST._IExpr _1418___mcc_h90 = _source44.dtor_underlying;
                  return this;
                } else if (_source44.is_StructBuild) {
                  RAST._IExpr _1419___mcc_h92 = _source44.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _1420___mcc_h93 = _source44.dtor_assignments;
                  return this;
                } else if (_source44.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _1421___mcc_h96 = _source44.dtor_arguments;
                  return this;
                } else if (_source44.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _1422___mcc_h98 = _source44.dtor_op1;
                  RAST._IExpr _1423___mcc_h99 = _source44.dtor_underlying;
                  DAST.Format._IUnOpFormat _1424___mcc_h100 = _source44.dtor_format;
                  return this;
                } else if (_source44.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _1425___mcc_h104 = _source44.dtor_op2;
                  RAST._IExpr _1426___mcc_h105 = _source44.dtor_left;
                  RAST._IExpr _1427___mcc_h106 = _source44.dtor_right;
                  DAST.Format._IBinOpFormat _1428___mcc_h107 = _source44.dtor_format2;
                  return this;
                } else if (_source44.is_TypeAscription) {
                  RAST._IExpr _1429___mcc_h112 = _source44.dtor_left;
                  RAST._IType _1430___mcc_h113 = _source44.dtor_tpe;
                  return this;
                } else if (_source44.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _1431___mcc_h116 = _source44.dtor_value;
                  return this;
                } else if (_source44.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _1432___mcc_h118 = _source44.dtor_value;
                  bool _1433___mcc_h119 = _source44.dtor_binary;
                  return this;
                } else if (_source44.is_DeclareVar) {
                  RAST._IDeclareType _1434___mcc_h122 = _source44.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _1435___mcc_h123 = _source44.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _1436___mcc_h124 = _source44.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _1437___mcc_h125 = _source44.dtor_optRhs;
                  return this;
                } else if (_source44.is_AssignVar) {
                  Dafny.ISequence<Dafny.Rune> _1438___mcc_h130 = _source44.dtor_name;
                  RAST._IExpr _1439___mcc_h131 = _source44.dtor_rhs;
                  RAST._IExpr _1440_last = _1411___mcc_h75;
                  RAST._IExpr _1441_rhs = _1439___mcc_h131;
                  Dafny.ISequence<Dafny.Rune> _1442_name2 = _1438___mcc_h130;
                  RAST._IType _1443_tpe = _1405___mcc_h64;
                  Dafny.ISequence<Dafny.Rune> _1444_name = _1402___mcc_h57;
                  RAST._IDeclareType _1445_mod = _1401___mcc_h56;
                  if ((_1444_name).Equals(_1442_name2)) {
                    RAST._IExpr _1446_rewriting = RAST.Expr.create_StmtExpr(RAST.Expr.create_DeclareVar(_1445_mod, _1444_name, Std.Wrappers.Option<RAST._IType>.create_Some(_1443_tpe), Std.Wrappers.Option<RAST._IExpr>.create_Some(_1441_rhs)), _1440_last);
                    return _1446_rewriting;
                  } else {
                    return this;
                  }
                } else if (_source44.is_IfExpr) {
                  RAST._IExpr _1447___mcc_h134 = _source44.dtor_cond;
                  RAST._IExpr _1448___mcc_h135 = _source44.dtor_thn;
                  RAST._IExpr _1449___mcc_h136 = _source44.dtor_els;
                  return this;
                } else if (_source44.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _1450___mcc_h140 = _source44.dtor_optCond;
                  RAST._IExpr _1451___mcc_h141 = _source44.dtor_underlying;
                  return this;
                } else if (_source44.is_For) {
                  Dafny.ISequence<Dafny.Rune> _1452___mcc_h144 = _source44.dtor_name;
                  RAST._IExpr _1453___mcc_h145 = _source44.dtor_range;
                  RAST._IExpr _1454___mcc_h146 = _source44.dtor_body;
                  return this;
                } else if (_source44.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _1455___mcc_h150 = _source44.dtor_lbl;
                  RAST._IExpr _1456___mcc_h151 = _source44.dtor_underlying;
                  return this;
                } else if (_source44.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1457___mcc_h154 = _source44.dtor_optLbl;
                  return this;
                } else if (_source44.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1458___mcc_h156 = _source44.dtor_optLbl;
                  return this;
                } else if (_source44.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _1459___mcc_h158 = _source44.dtor_optExpr;
                  return this;
                } else if (_source44.is_CallType) {
                  RAST._IExpr _1460___mcc_h160 = _source44.dtor_obj;
                  Dafny.ISequence<RAST._IType> _1461___mcc_h161 = _source44.dtor_typeParameters;
                  return this;
                } else if (_source44.is_Call) {
                  RAST._IExpr _1462___mcc_h164 = _source44.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _1463___mcc_h165 = _source44.dtor_arguments;
                  return this;
                } else if (_source44.is_Select) {
                  RAST._IExpr _1464___mcc_h168 = _source44.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1465___mcc_h169 = _source44.dtor_name;
                  return this;
                } else {
                  RAST._IExpr _1466___mcc_h172 = _source44.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1467___mcc_h173 = _source44.dtor_name;
                  return this;
                }
              } else if (_source43.is_Block) {
                RAST._IExpr _1468___mcc_h176 = _source43.dtor_underlying;
                return this;
              } else if (_source43.is_StructBuild) {
                RAST._IExpr _1469___mcc_h178 = _source43.dtor_underlying;
                Dafny.ISequence<RAST._IAssignIdentifier> _1470___mcc_h179 = _source43.dtor_assignments;
                return this;
              } else if (_source43.is_Tuple) {
                Dafny.ISequence<RAST._IExpr> _1471___mcc_h182 = _source43.dtor_arguments;
                return this;
              } else if (_source43.is_UnaryOp) {
                Dafny.ISequence<Dafny.Rune> _1472___mcc_h184 = _source43.dtor_op1;
                RAST._IExpr _1473___mcc_h185 = _source43.dtor_underlying;
                DAST.Format._IUnOpFormat _1474___mcc_h186 = _source43.dtor_format;
                return this;
              } else if (_source43.is_BinaryOp) {
                Dafny.ISequence<Dafny.Rune> _1475___mcc_h190 = _source43.dtor_op2;
                RAST._IExpr _1476___mcc_h191 = _source43.dtor_left;
                RAST._IExpr _1477___mcc_h192 = _source43.dtor_right;
                DAST.Format._IBinOpFormat _1478___mcc_h193 = _source43.dtor_format2;
                return this;
              } else if (_source43.is_TypeAscription) {
                RAST._IExpr _1479___mcc_h198 = _source43.dtor_left;
                RAST._IType _1480___mcc_h199 = _source43.dtor_tpe;
                return this;
              } else if (_source43.is_LiteralInt) {
                Dafny.ISequence<Dafny.Rune> _1481___mcc_h202 = _source43.dtor_value;
                return this;
              } else if (_source43.is_LiteralString) {
                Dafny.ISequence<Dafny.Rune> _1482___mcc_h204 = _source43.dtor_value;
                bool _1483___mcc_h205 = _source43.dtor_binary;
                return this;
              } else if (_source43.is_DeclareVar) {
                RAST._IDeclareType _1484___mcc_h208 = _source43.dtor_declareType;
                Dafny.ISequence<Dafny.Rune> _1485___mcc_h209 = _source43.dtor_name;
                Std.Wrappers._IOption<RAST._IType> _1486___mcc_h210 = _source43.dtor_optType;
                Std.Wrappers._IOption<RAST._IExpr> _1487___mcc_h211 = _source43.dtor_optRhs;
                return this;
              } else if (_source43.is_AssignVar) {
                Dafny.ISequence<Dafny.Rune> _1488___mcc_h216 = _source43.dtor_name;
                RAST._IExpr _1489___mcc_h217 = _source43.dtor_rhs;
                return this;
              } else if (_source43.is_IfExpr) {
                RAST._IExpr _1490___mcc_h220 = _source43.dtor_cond;
                RAST._IExpr _1491___mcc_h221 = _source43.dtor_thn;
                RAST._IExpr _1492___mcc_h222 = _source43.dtor_els;
                return this;
              } else if (_source43.is_Loop) {
                Std.Wrappers._IOption<RAST._IExpr> _1493___mcc_h226 = _source43.dtor_optCond;
                RAST._IExpr _1494___mcc_h227 = _source43.dtor_underlying;
                return this;
              } else if (_source43.is_For) {
                Dafny.ISequence<Dafny.Rune> _1495___mcc_h230 = _source43.dtor_name;
                RAST._IExpr _1496___mcc_h231 = _source43.dtor_range;
                RAST._IExpr _1497___mcc_h232 = _source43.dtor_body;
                return this;
              } else if (_source43.is_Labelled) {
                Dafny.ISequence<Dafny.Rune> _1498___mcc_h236 = _source43.dtor_lbl;
                RAST._IExpr _1499___mcc_h237 = _source43.dtor_underlying;
                return this;
              } else if (_source43.is_Break) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1500___mcc_h240 = _source43.dtor_optLbl;
                return this;
              } else if (_source43.is_Continue) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1501___mcc_h242 = _source43.dtor_optLbl;
                return this;
              } else if (_source43.is_Return) {
                Std.Wrappers._IOption<RAST._IExpr> _1502___mcc_h244 = _source43.dtor_optExpr;
                return this;
              } else if (_source43.is_CallType) {
                RAST._IExpr _1503___mcc_h246 = _source43.dtor_obj;
                Dafny.ISequence<RAST._IType> _1504___mcc_h247 = _source43.dtor_typeParameters;
                return this;
              } else if (_source43.is_Call) {
                RAST._IExpr _1505___mcc_h250 = _source43.dtor_obj;
                Dafny.ISequence<RAST._IExpr> _1506___mcc_h251 = _source43.dtor_arguments;
                return this;
              } else if (_source43.is_Select) {
                RAST._IExpr _1507___mcc_h254 = _source43.dtor_obj;
                Dafny.ISequence<Dafny.Rune> _1508___mcc_h255 = _source43.dtor_name;
                return this;
              } else {
                RAST._IExpr _1509___mcc_h258 = _source43.dtor_obj;
                Dafny.ISequence<Dafny.Rune> _1510___mcc_h259 = _source43.dtor_name;
                return this;
              }
            } else {
              RAST._IExpr _1511___mcc_h262 = _source42.dtor_value;
              return this;
            }
          }
        } else if (_source40.is_AssignVar) {
          Dafny.ISequence<Dafny.Rune> _1512___mcc_h264 = _source40.dtor_name;
          RAST._IExpr _1513___mcc_h265 = _source40.dtor_rhs;
          return this;
        } else if (_source40.is_IfExpr) {
          RAST._IExpr _1514___mcc_h268 = _source40.dtor_cond;
          RAST._IExpr _1515___mcc_h269 = _source40.dtor_thn;
          RAST._IExpr _1516___mcc_h270 = _source40.dtor_els;
          RAST._IExpr _source45 = _1514___mcc_h268;
          if (_source45.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _1517___mcc_h274 = _source45.dtor_content;
            return this;
          } else if (_source45.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _1518___mcc_h276 = _source45.dtor_name;
            return this;
          } else if (_source45.is_Match) {
            RAST._IExpr _1519___mcc_h278 = _source45.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _1520___mcc_h279 = _source45.dtor_cases;
            return this;
          } else if (_source45.is_StmtExpr) {
            RAST._IExpr _1521___mcc_h282 = _source45.dtor_stmt;
            RAST._IExpr _1522___mcc_h283 = _source45.dtor_rhs;
            return this;
          } else if (_source45.is_Block) {
            RAST._IExpr _1523___mcc_h286 = _source45.dtor_underlying;
            return this;
          } else if (_source45.is_StructBuild) {
            RAST._IExpr _1524___mcc_h288 = _source45.dtor_underlying;
            Dafny.ISequence<RAST._IAssignIdentifier> _1525___mcc_h289 = _source45.dtor_assignments;
            return this;
          } else if (_source45.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _1526___mcc_h292 = _source45.dtor_arguments;
            return this;
          } else if (_source45.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _1527___mcc_h294 = _source45.dtor_op1;
            RAST._IExpr _1528___mcc_h295 = _source45.dtor_underlying;
            DAST.Format._IUnOpFormat _1529___mcc_h296 = _source45.dtor_format;
            if (object.Equals(_1527___mcc_h294, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!"))) {
              RAST._IExpr _source46 = _1528___mcc_h295;
              if (_source46.is_RawExpr) {
                Dafny.ISequence<Dafny.Rune> _1530___mcc_h300 = _source46.dtor_content;
                return this;
              } else if (_source46.is_Identifier) {
                Dafny.ISequence<Dafny.Rune> _1531___mcc_h302 = _source46.dtor_name;
                return this;
              } else if (_source46.is_Match) {
                RAST._IExpr _1532___mcc_h304 = _source46.dtor_matchee;
                Dafny.ISequence<RAST._IMatchCase> _1533___mcc_h305 = _source46.dtor_cases;
                return this;
              } else if (_source46.is_StmtExpr) {
                RAST._IExpr _1534___mcc_h308 = _source46.dtor_stmt;
                RAST._IExpr _1535___mcc_h309 = _source46.dtor_rhs;
                return this;
              } else if (_source46.is_Block) {
                RAST._IExpr _1536___mcc_h312 = _source46.dtor_underlying;
                return this;
              } else if (_source46.is_StructBuild) {
                RAST._IExpr _1537___mcc_h314 = _source46.dtor_underlying;
                Dafny.ISequence<RAST._IAssignIdentifier> _1538___mcc_h315 = _source46.dtor_assignments;
                return this;
              } else if (_source46.is_Tuple) {
                Dafny.ISequence<RAST._IExpr> _1539___mcc_h318 = _source46.dtor_arguments;
                return this;
              } else if (_source46.is_UnaryOp) {
                Dafny.ISequence<Dafny.Rune> _1540___mcc_h320 = _source46.dtor_op1;
                RAST._IExpr _1541___mcc_h321 = _source46.dtor_underlying;
                DAST.Format._IUnOpFormat _1542___mcc_h322 = _source46.dtor_format;
                return this;
              } else if (_source46.is_BinaryOp) {
                Dafny.ISequence<Dafny.Rune> _1543___mcc_h326 = _source46.dtor_op2;
                RAST._IExpr _1544___mcc_h327 = _source46.dtor_left;
                RAST._IExpr _1545___mcc_h328 = _source46.dtor_right;
                DAST.Format._IBinOpFormat _1546___mcc_h329 = _source46.dtor_format2;
                if (object.Equals(_1543___mcc_h326, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="))) {
                  RAST._IExpr _source47 = _1515___mcc_h269;
                  if (_source47.is_RawExpr) {
                    Dafny.ISequence<Dafny.Rune> _1547___mcc_h334 = _source47.dtor_content;
                    if (object.Equals(_1547___mcc_h334, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");"))) {
                      RAST._IExpr _source48 = _1516___mcc_h270;
                      if (_source48.is_RawExpr) {
                        Dafny.ISequence<Dafny.Rune> _1548___mcc_h336 = _source48.dtor_content;
                        if (object.Equals(_1548___mcc_h336, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) {
                          RAST._IExpr _1549_last = _1378___mcc_h9;
                          DAST.Format._IUnOpFormat _1550_of = _1529___mcc_h296;
                          DAST.Format._IBinOpFormat _1551_f = _1546___mcc_h329;
                          RAST._IExpr _1552_b = _1545___mcc_h328;
                          RAST._IExpr _1553_a = _1544___mcc_h327;
                          RAST._IExpr _1554_rewriting = RAST.Expr.create_StmtExpr((RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("assert_eq!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_1553_a, _1552_b)), _1549_last);
                          return _1554_rewriting;
                        } else {
                          return this;
                        }
                      } else if (_source48.is_Identifier) {
                        Dafny.ISequence<Dafny.Rune> _1555___mcc_h338 = _source48.dtor_name;
                        return this;
                      } else if (_source48.is_Match) {
                        RAST._IExpr _1556___mcc_h340 = _source48.dtor_matchee;
                        Dafny.ISequence<RAST._IMatchCase> _1557___mcc_h341 = _source48.dtor_cases;
                        return this;
                      } else if (_source48.is_StmtExpr) {
                        RAST._IExpr _1558___mcc_h344 = _source48.dtor_stmt;
                        RAST._IExpr _1559___mcc_h345 = _source48.dtor_rhs;
                        return this;
                      } else if (_source48.is_Block) {
                        RAST._IExpr _1560___mcc_h348 = _source48.dtor_underlying;
                        return this;
                      } else if (_source48.is_StructBuild) {
                        RAST._IExpr _1561___mcc_h350 = _source48.dtor_underlying;
                        Dafny.ISequence<RAST._IAssignIdentifier> _1562___mcc_h351 = _source48.dtor_assignments;
                        return this;
                      } else if (_source48.is_Tuple) {
                        Dafny.ISequence<RAST._IExpr> _1563___mcc_h354 = _source48.dtor_arguments;
                        return this;
                      } else if (_source48.is_UnaryOp) {
                        Dafny.ISequence<Dafny.Rune> _1564___mcc_h356 = _source48.dtor_op1;
                        RAST._IExpr _1565___mcc_h357 = _source48.dtor_underlying;
                        DAST.Format._IUnOpFormat _1566___mcc_h358 = _source48.dtor_format;
                        return this;
                      } else if (_source48.is_BinaryOp) {
                        Dafny.ISequence<Dafny.Rune> _1567___mcc_h362 = _source48.dtor_op2;
                        RAST._IExpr _1568___mcc_h363 = _source48.dtor_left;
                        RAST._IExpr _1569___mcc_h364 = _source48.dtor_right;
                        DAST.Format._IBinOpFormat _1570___mcc_h365 = _source48.dtor_format2;
                        return this;
                      } else if (_source48.is_TypeAscription) {
                        RAST._IExpr _1571___mcc_h370 = _source48.dtor_left;
                        RAST._IType _1572___mcc_h371 = _source48.dtor_tpe;
                        return this;
                      } else if (_source48.is_LiteralInt) {
                        Dafny.ISequence<Dafny.Rune> _1573___mcc_h374 = _source48.dtor_value;
                        return this;
                      } else if (_source48.is_LiteralString) {
                        Dafny.ISequence<Dafny.Rune> _1574___mcc_h376 = _source48.dtor_value;
                        bool _1575___mcc_h377 = _source48.dtor_binary;
                        return this;
                      } else if (_source48.is_DeclareVar) {
                        RAST._IDeclareType _1576___mcc_h380 = _source48.dtor_declareType;
                        Dafny.ISequence<Dafny.Rune> _1577___mcc_h381 = _source48.dtor_name;
                        Std.Wrappers._IOption<RAST._IType> _1578___mcc_h382 = _source48.dtor_optType;
                        Std.Wrappers._IOption<RAST._IExpr> _1579___mcc_h383 = _source48.dtor_optRhs;
                        return this;
                      } else if (_source48.is_AssignVar) {
                        Dafny.ISequence<Dafny.Rune> _1580___mcc_h388 = _source48.dtor_name;
                        RAST._IExpr _1581___mcc_h389 = _source48.dtor_rhs;
                        return this;
                      } else if (_source48.is_IfExpr) {
                        RAST._IExpr _1582___mcc_h392 = _source48.dtor_cond;
                        RAST._IExpr _1583___mcc_h393 = _source48.dtor_thn;
                        RAST._IExpr _1584___mcc_h394 = _source48.dtor_els;
                        return this;
                      } else if (_source48.is_Loop) {
                        Std.Wrappers._IOption<RAST._IExpr> _1585___mcc_h398 = _source48.dtor_optCond;
                        RAST._IExpr _1586___mcc_h399 = _source48.dtor_underlying;
                        return this;
                      } else if (_source48.is_For) {
                        Dafny.ISequence<Dafny.Rune> _1587___mcc_h402 = _source48.dtor_name;
                        RAST._IExpr _1588___mcc_h403 = _source48.dtor_range;
                        RAST._IExpr _1589___mcc_h404 = _source48.dtor_body;
                        return this;
                      } else if (_source48.is_Labelled) {
                        Dafny.ISequence<Dafny.Rune> _1590___mcc_h408 = _source48.dtor_lbl;
                        RAST._IExpr _1591___mcc_h409 = _source48.dtor_underlying;
                        return this;
                      } else if (_source48.is_Break) {
                        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1592___mcc_h412 = _source48.dtor_optLbl;
                        return this;
                      } else if (_source48.is_Continue) {
                        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1593___mcc_h414 = _source48.dtor_optLbl;
                        return this;
                      } else if (_source48.is_Return) {
                        Std.Wrappers._IOption<RAST._IExpr> _1594___mcc_h416 = _source48.dtor_optExpr;
                        return this;
                      } else if (_source48.is_CallType) {
                        RAST._IExpr _1595___mcc_h418 = _source48.dtor_obj;
                        Dafny.ISequence<RAST._IType> _1596___mcc_h419 = _source48.dtor_typeParameters;
                        return this;
                      } else if (_source48.is_Call) {
                        RAST._IExpr _1597___mcc_h422 = _source48.dtor_obj;
                        Dafny.ISequence<RAST._IExpr> _1598___mcc_h423 = _source48.dtor_arguments;
                        return this;
                      } else if (_source48.is_Select) {
                        RAST._IExpr _1599___mcc_h426 = _source48.dtor_obj;
                        Dafny.ISequence<Dafny.Rune> _1600___mcc_h427 = _source48.dtor_name;
                        return this;
                      } else {
                        RAST._IExpr _1601___mcc_h430 = _source48.dtor_obj;
                        Dafny.ISequence<Dafny.Rune> _1602___mcc_h431 = _source48.dtor_name;
                        return this;
                      }
                    } else {
                      return this;
                    }
                  } else if (_source47.is_Identifier) {
                    Dafny.ISequence<Dafny.Rune> _1603___mcc_h434 = _source47.dtor_name;
                    return this;
                  } else if (_source47.is_Match) {
                    RAST._IExpr _1604___mcc_h436 = _source47.dtor_matchee;
                    Dafny.ISequence<RAST._IMatchCase> _1605___mcc_h437 = _source47.dtor_cases;
                    return this;
                  } else if (_source47.is_StmtExpr) {
                    RAST._IExpr _1606___mcc_h440 = _source47.dtor_stmt;
                    RAST._IExpr _1607___mcc_h441 = _source47.dtor_rhs;
                    return this;
                  } else if (_source47.is_Block) {
                    RAST._IExpr _1608___mcc_h444 = _source47.dtor_underlying;
                    return this;
                  } else if (_source47.is_StructBuild) {
                    RAST._IExpr _1609___mcc_h446 = _source47.dtor_underlying;
                    Dafny.ISequence<RAST._IAssignIdentifier> _1610___mcc_h447 = _source47.dtor_assignments;
                    return this;
                  } else if (_source47.is_Tuple) {
                    Dafny.ISequence<RAST._IExpr> _1611___mcc_h450 = _source47.dtor_arguments;
                    return this;
                  } else if (_source47.is_UnaryOp) {
                    Dafny.ISequence<Dafny.Rune> _1612___mcc_h452 = _source47.dtor_op1;
                    RAST._IExpr _1613___mcc_h453 = _source47.dtor_underlying;
                    DAST.Format._IUnOpFormat _1614___mcc_h454 = _source47.dtor_format;
                    return this;
                  } else if (_source47.is_BinaryOp) {
                    Dafny.ISequence<Dafny.Rune> _1615___mcc_h458 = _source47.dtor_op2;
                    RAST._IExpr _1616___mcc_h459 = _source47.dtor_left;
                    RAST._IExpr _1617___mcc_h460 = _source47.dtor_right;
                    DAST.Format._IBinOpFormat _1618___mcc_h461 = _source47.dtor_format2;
                    return this;
                  } else if (_source47.is_TypeAscription) {
                    RAST._IExpr _1619___mcc_h466 = _source47.dtor_left;
                    RAST._IType _1620___mcc_h467 = _source47.dtor_tpe;
                    return this;
                  } else if (_source47.is_LiteralInt) {
                    Dafny.ISequence<Dafny.Rune> _1621___mcc_h470 = _source47.dtor_value;
                    return this;
                  } else if (_source47.is_LiteralString) {
                    Dafny.ISequence<Dafny.Rune> _1622___mcc_h472 = _source47.dtor_value;
                    bool _1623___mcc_h473 = _source47.dtor_binary;
                    return this;
                  } else if (_source47.is_DeclareVar) {
                    RAST._IDeclareType _1624___mcc_h476 = _source47.dtor_declareType;
                    Dafny.ISequence<Dafny.Rune> _1625___mcc_h477 = _source47.dtor_name;
                    Std.Wrappers._IOption<RAST._IType> _1626___mcc_h478 = _source47.dtor_optType;
                    Std.Wrappers._IOption<RAST._IExpr> _1627___mcc_h479 = _source47.dtor_optRhs;
                    return this;
                  } else if (_source47.is_AssignVar) {
                    Dafny.ISequence<Dafny.Rune> _1628___mcc_h484 = _source47.dtor_name;
                    RAST._IExpr _1629___mcc_h485 = _source47.dtor_rhs;
                    return this;
                  } else if (_source47.is_IfExpr) {
                    RAST._IExpr _1630___mcc_h488 = _source47.dtor_cond;
                    RAST._IExpr _1631___mcc_h489 = _source47.dtor_thn;
                    RAST._IExpr _1632___mcc_h490 = _source47.dtor_els;
                    return this;
                  } else if (_source47.is_Loop) {
                    Std.Wrappers._IOption<RAST._IExpr> _1633___mcc_h494 = _source47.dtor_optCond;
                    RAST._IExpr _1634___mcc_h495 = _source47.dtor_underlying;
                    return this;
                  } else if (_source47.is_For) {
                    Dafny.ISequence<Dafny.Rune> _1635___mcc_h498 = _source47.dtor_name;
                    RAST._IExpr _1636___mcc_h499 = _source47.dtor_range;
                    RAST._IExpr _1637___mcc_h500 = _source47.dtor_body;
                    return this;
                  } else if (_source47.is_Labelled) {
                    Dafny.ISequence<Dafny.Rune> _1638___mcc_h504 = _source47.dtor_lbl;
                    RAST._IExpr _1639___mcc_h505 = _source47.dtor_underlying;
                    return this;
                  } else if (_source47.is_Break) {
                    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1640___mcc_h508 = _source47.dtor_optLbl;
                    return this;
                  } else if (_source47.is_Continue) {
                    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1641___mcc_h510 = _source47.dtor_optLbl;
                    return this;
                  } else if (_source47.is_Return) {
                    Std.Wrappers._IOption<RAST._IExpr> _1642___mcc_h512 = _source47.dtor_optExpr;
                    return this;
                  } else if (_source47.is_CallType) {
                    RAST._IExpr _1643___mcc_h514 = _source47.dtor_obj;
                    Dafny.ISequence<RAST._IType> _1644___mcc_h515 = _source47.dtor_typeParameters;
                    return this;
                  } else if (_source47.is_Call) {
                    RAST._IExpr _1645___mcc_h518 = _source47.dtor_obj;
                    Dafny.ISequence<RAST._IExpr> _1646___mcc_h519 = _source47.dtor_arguments;
                    return this;
                  } else if (_source47.is_Select) {
                    RAST._IExpr _1647___mcc_h522 = _source47.dtor_obj;
                    Dafny.ISequence<Dafny.Rune> _1648___mcc_h523 = _source47.dtor_name;
                    return this;
                  } else {
                    RAST._IExpr _1649___mcc_h526 = _source47.dtor_obj;
                    Dafny.ISequence<Dafny.Rune> _1650___mcc_h527 = _source47.dtor_name;
                    return this;
                  }
                } else {
                  return this;
                }
              } else if (_source46.is_TypeAscription) {
                RAST._IExpr _1651___mcc_h530 = _source46.dtor_left;
                RAST._IType _1652___mcc_h531 = _source46.dtor_tpe;
                return this;
              } else if (_source46.is_LiteralInt) {
                Dafny.ISequence<Dafny.Rune> _1653___mcc_h534 = _source46.dtor_value;
                return this;
              } else if (_source46.is_LiteralString) {
                Dafny.ISequence<Dafny.Rune> _1654___mcc_h536 = _source46.dtor_value;
                bool _1655___mcc_h537 = _source46.dtor_binary;
                return this;
              } else if (_source46.is_DeclareVar) {
                RAST._IDeclareType _1656___mcc_h540 = _source46.dtor_declareType;
                Dafny.ISequence<Dafny.Rune> _1657___mcc_h541 = _source46.dtor_name;
                Std.Wrappers._IOption<RAST._IType> _1658___mcc_h542 = _source46.dtor_optType;
                Std.Wrappers._IOption<RAST._IExpr> _1659___mcc_h543 = _source46.dtor_optRhs;
                return this;
              } else if (_source46.is_AssignVar) {
                Dafny.ISequence<Dafny.Rune> _1660___mcc_h548 = _source46.dtor_name;
                RAST._IExpr _1661___mcc_h549 = _source46.dtor_rhs;
                return this;
              } else if (_source46.is_IfExpr) {
                RAST._IExpr _1662___mcc_h552 = _source46.dtor_cond;
                RAST._IExpr _1663___mcc_h553 = _source46.dtor_thn;
                RAST._IExpr _1664___mcc_h554 = _source46.dtor_els;
                return this;
              } else if (_source46.is_Loop) {
                Std.Wrappers._IOption<RAST._IExpr> _1665___mcc_h558 = _source46.dtor_optCond;
                RAST._IExpr _1666___mcc_h559 = _source46.dtor_underlying;
                return this;
              } else if (_source46.is_For) {
                Dafny.ISequence<Dafny.Rune> _1667___mcc_h562 = _source46.dtor_name;
                RAST._IExpr _1668___mcc_h563 = _source46.dtor_range;
                RAST._IExpr _1669___mcc_h564 = _source46.dtor_body;
                return this;
              } else if (_source46.is_Labelled) {
                Dafny.ISequence<Dafny.Rune> _1670___mcc_h568 = _source46.dtor_lbl;
                RAST._IExpr _1671___mcc_h569 = _source46.dtor_underlying;
                return this;
              } else if (_source46.is_Break) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1672___mcc_h572 = _source46.dtor_optLbl;
                return this;
              } else if (_source46.is_Continue) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1673___mcc_h574 = _source46.dtor_optLbl;
                return this;
              } else if (_source46.is_Return) {
                Std.Wrappers._IOption<RAST._IExpr> _1674___mcc_h576 = _source46.dtor_optExpr;
                return this;
              } else if (_source46.is_CallType) {
                RAST._IExpr _1675___mcc_h578 = _source46.dtor_obj;
                Dafny.ISequence<RAST._IType> _1676___mcc_h579 = _source46.dtor_typeParameters;
                return this;
              } else if (_source46.is_Call) {
                RAST._IExpr _1677___mcc_h582 = _source46.dtor_obj;
                Dafny.ISequence<RAST._IExpr> _1678___mcc_h583 = _source46.dtor_arguments;
                return this;
              } else if (_source46.is_Select) {
                RAST._IExpr _1679___mcc_h586 = _source46.dtor_obj;
                Dafny.ISequence<Dafny.Rune> _1680___mcc_h587 = _source46.dtor_name;
                return this;
              } else {
                RAST._IExpr _1681___mcc_h590 = _source46.dtor_obj;
                Dafny.ISequence<Dafny.Rune> _1682___mcc_h591 = _source46.dtor_name;
                return this;
              }
            } else {
              return this;
            }
          } else if (_source45.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _1683___mcc_h594 = _source45.dtor_op2;
            RAST._IExpr _1684___mcc_h595 = _source45.dtor_left;
            RAST._IExpr _1685___mcc_h596 = _source45.dtor_right;
            DAST.Format._IBinOpFormat _1686___mcc_h597 = _source45.dtor_format2;
            return this;
          } else if (_source45.is_TypeAscription) {
            RAST._IExpr _1687___mcc_h602 = _source45.dtor_left;
            RAST._IType _1688___mcc_h603 = _source45.dtor_tpe;
            return this;
          } else if (_source45.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _1689___mcc_h606 = _source45.dtor_value;
            return this;
          } else if (_source45.is_LiteralString) {
            Dafny.ISequence<Dafny.Rune> _1690___mcc_h608 = _source45.dtor_value;
            bool _1691___mcc_h609 = _source45.dtor_binary;
            return this;
          } else if (_source45.is_DeclareVar) {
            RAST._IDeclareType _1692___mcc_h612 = _source45.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _1693___mcc_h613 = _source45.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _1694___mcc_h614 = _source45.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _1695___mcc_h615 = _source45.dtor_optRhs;
            return this;
          } else if (_source45.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _1696___mcc_h620 = _source45.dtor_name;
            RAST._IExpr _1697___mcc_h621 = _source45.dtor_rhs;
            return this;
          } else if (_source45.is_IfExpr) {
            RAST._IExpr _1698___mcc_h624 = _source45.dtor_cond;
            RAST._IExpr _1699___mcc_h625 = _source45.dtor_thn;
            RAST._IExpr _1700___mcc_h626 = _source45.dtor_els;
            return this;
          } else if (_source45.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _1701___mcc_h630 = _source45.dtor_optCond;
            RAST._IExpr _1702___mcc_h631 = _source45.dtor_underlying;
            return this;
          } else if (_source45.is_For) {
            Dafny.ISequence<Dafny.Rune> _1703___mcc_h634 = _source45.dtor_name;
            RAST._IExpr _1704___mcc_h635 = _source45.dtor_range;
            RAST._IExpr _1705___mcc_h636 = _source45.dtor_body;
            return this;
          } else if (_source45.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _1706___mcc_h640 = _source45.dtor_lbl;
            RAST._IExpr _1707___mcc_h641 = _source45.dtor_underlying;
            return this;
          } else if (_source45.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1708___mcc_h644 = _source45.dtor_optLbl;
            return this;
          } else if (_source45.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1709___mcc_h646 = _source45.dtor_optLbl;
            return this;
          } else if (_source45.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _1710___mcc_h648 = _source45.dtor_optExpr;
            return this;
          } else if (_source45.is_CallType) {
            RAST._IExpr _1711___mcc_h650 = _source45.dtor_obj;
            Dafny.ISequence<RAST._IType> _1712___mcc_h651 = _source45.dtor_typeParameters;
            return this;
          } else if (_source45.is_Call) {
            RAST._IExpr _1713___mcc_h654 = _source45.dtor_obj;
            Dafny.ISequence<RAST._IExpr> _1714___mcc_h655 = _source45.dtor_arguments;
            return this;
          } else if (_source45.is_Select) {
            RAST._IExpr _1715___mcc_h658 = _source45.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1716___mcc_h659 = _source45.dtor_name;
            return this;
          } else {
            RAST._IExpr _1717___mcc_h662 = _source45.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1718___mcc_h663 = _source45.dtor_name;
            return this;
          }
        } else if (_source40.is_Loop) {
          Std.Wrappers._IOption<RAST._IExpr> _1719___mcc_h666 = _source40.dtor_optCond;
          RAST._IExpr _1720___mcc_h667 = _source40.dtor_underlying;
          return this;
        } else if (_source40.is_For) {
          Dafny.ISequence<Dafny.Rune> _1721___mcc_h670 = _source40.dtor_name;
          RAST._IExpr _1722___mcc_h671 = _source40.dtor_range;
          RAST._IExpr _1723___mcc_h672 = _source40.dtor_body;
          return this;
        } else if (_source40.is_Labelled) {
          Dafny.ISequence<Dafny.Rune> _1724___mcc_h676 = _source40.dtor_lbl;
          RAST._IExpr _1725___mcc_h677 = _source40.dtor_underlying;
          return this;
        } else if (_source40.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1726___mcc_h680 = _source40.dtor_optLbl;
          return this;
        } else if (_source40.is_Continue) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1727___mcc_h682 = _source40.dtor_optLbl;
          return this;
        } else if (_source40.is_Return) {
          Std.Wrappers._IOption<RAST._IExpr> _1728___mcc_h684 = _source40.dtor_optExpr;
          return this;
        } else if (_source40.is_CallType) {
          RAST._IExpr _1729___mcc_h686 = _source40.dtor_obj;
          Dafny.ISequence<RAST._IType> _1730___mcc_h687 = _source40.dtor_typeParameters;
          return this;
        } else if (_source40.is_Call) {
          RAST._IExpr _1731___mcc_h690 = _source40.dtor_obj;
          Dafny.ISequence<RAST._IExpr> _1732___mcc_h691 = _source40.dtor_arguments;
          return this;
        } else if (_source40.is_Select) {
          RAST._IExpr _1733___mcc_h694 = _source40.dtor_obj;
          Dafny.ISequence<Dafny.Rune> _1734___mcc_h695 = _source40.dtor_name;
          return this;
        } else {
          RAST._IExpr _1735___mcc_h698 = _source40.dtor_obj;
          Dafny.ISequence<Dafny.Rune> _1736___mcc_h699 = _source40.dtor_name;
          return this;
        }
      } else if (_source39.is_Block) {
        RAST._IExpr _1737___mcc_h702 = _source39.dtor_underlying;
        return this;
      } else if (_source39.is_StructBuild) {
        RAST._IExpr _1738___mcc_h704 = _source39.dtor_underlying;
        Dafny.ISequence<RAST._IAssignIdentifier> _1739___mcc_h705 = _source39.dtor_assignments;
        return this;
      } else if (_source39.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _1740___mcc_h708 = _source39.dtor_arguments;
        return this;
      } else if (_source39.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _1741___mcc_h710 = _source39.dtor_op1;
        RAST._IExpr _1742___mcc_h711 = _source39.dtor_underlying;
        DAST.Format._IUnOpFormat _1743___mcc_h712 = _source39.dtor_format;
        if (object.Equals(_1741___mcc_h710, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
          RAST._IExpr _source49 = _1742___mcc_h711;
          if (_source49.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _1744___mcc_h716 = _source49.dtor_content;
            return this;
          } else if (_source49.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _1745___mcc_h718 = _source49.dtor_name;
            return this;
          } else if (_source49.is_Match) {
            RAST._IExpr _1746___mcc_h720 = _source49.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _1747___mcc_h721 = _source49.dtor_cases;
            return this;
          } else if (_source49.is_StmtExpr) {
            RAST._IExpr _1748___mcc_h724 = _source49.dtor_stmt;
            RAST._IExpr _1749___mcc_h725 = _source49.dtor_rhs;
            return this;
          } else if (_source49.is_Block) {
            RAST._IExpr _1750___mcc_h728 = _source49.dtor_underlying;
            return this;
          } else if (_source49.is_StructBuild) {
            RAST._IExpr _1751___mcc_h730 = _source49.dtor_underlying;
            Dafny.ISequence<RAST._IAssignIdentifier> _1752___mcc_h731 = _source49.dtor_assignments;
            return this;
          } else if (_source49.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _1753___mcc_h734 = _source49.dtor_arguments;
            return this;
          } else if (_source49.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _1754___mcc_h736 = _source49.dtor_op1;
            RAST._IExpr _1755___mcc_h737 = _source49.dtor_underlying;
            DAST.Format._IUnOpFormat _1756___mcc_h738 = _source49.dtor_format;
            return this;
          } else if (_source49.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _1757___mcc_h742 = _source49.dtor_op2;
            RAST._IExpr _1758___mcc_h743 = _source49.dtor_left;
            RAST._IExpr _1759___mcc_h744 = _source49.dtor_right;
            DAST.Format._IBinOpFormat _1760___mcc_h745 = _source49.dtor_format2;
            return this;
          } else if (_source49.is_TypeAscription) {
            RAST._IExpr _1761___mcc_h750 = _source49.dtor_left;
            RAST._IType _1762___mcc_h751 = _source49.dtor_tpe;
            return this;
          } else if (_source49.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _1763___mcc_h754 = _source49.dtor_value;
            return this;
          } else if (_source49.is_LiteralString) {
            Dafny.ISequence<Dafny.Rune> _1764___mcc_h756 = _source49.dtor_value;
            bool _1765___mcc_h757 = _source49.dtor_binary;
            return this;
          } else if (_source49.is_DeclareVar) {
            RAST._IDeclareType _1766___mcc_h760 = _source49.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _1767___mcc_h761 = _source49.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _1768___mcc_h762 = _source49.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _1769___mcc_h763 = _source49.dtor_optRhs;
            return this;
          } else if (_source49.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _1770___mcc_h768 = _source49.dtor_name;
            RAST._IExpr _1771___mcc_h769 = _source49.dtor_rhs;
            return this;
          } else if (_source49.is_IfExpr) {
            RAST._IExpr _1772___mcc_h772 = _source49.dtor_cond;
            RAST._IExpr _1773___mcc_h773 = _source49.dtor_thn;
            RAST._IExpr _1774___mcc_h774 = _source49.dtor_els;
            return this;
          } else if (_source49.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _1775___mcc_h778 = _source49.dtor_optCond;
            RAST._IExpr _1776___mcc_h779 = _source49.dtor_underlying;
            return this;
          } else if (_source49.is_For) {
            Dafny.ISequence<Dafny.Rune> _1777___mcc_h782 = _source49.dtor_name;
            RAST._IExpr _1778___mcc_h783 = _source49.dtor_range;
            RAST._IExpr _1779___mcc_h784 = _source49.dtor_body;
            return this;
          } else if (_source49.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _1780___mcc_h788 = _source49.dtor_lbl;
            RAST._IExpr _1781___mcc_h789 = _source49.dtor_underlying;
            return this;
          } else if (_source49.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1782___mcc_h792 = _source49.dtor_optLbl;
            return this;
          } else if (_source49.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1783___mcc_h794 = _source49.dtor_optLbl;
            return this;
          } else if (_source49.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _1784___mcc_h796 = _source49.dtor_optExpr;
            return this;
          } else if (_source49.is_CallType) {
            RAST._IExpr _1785___mcc_h798 = _source49.dtor_obj;
            Dafny.ISequence<RAST._IType> _1786___mcc_h799 = _source49.dtor_typeParameters;
            return this;
          } else if (_source49.is_Call) {
            RAST._IExpr _1787___mcc_h802 = _source49.dtor_obj;
            Dafny.ISequence<RAST._IExpr> _1788___mcc_h803 = _source49.dtor_arguments;
            RAST._IExpr _source50 = _1787___mcc_h802;
            if (_source50.is_RawExpr) {
              Dafny.ISequence<Dafny.Rune> _1789___mcc_h806 = _source50.dtor_content;
              return this;
            } else if (_source50.is_Identifier) {
              Dafny.ISequence<Dafny.Rune> _1790___mcc_h808 = _source50.dtor_name;
              return this;
            } else if (_source50.is_Match) {
              RAST._IExpr _1791___mcc_h810 = _source50.dtor_matchee;
              Dafny.ISequence<RAST._IMatchCase> _1792___mcc_h811 = _source50.dtor_cases;
              return this;
            } else if (_source50.is_StmtExpr) {
              RAST._IExpr _1793___mcc_h814 = _source50.dtor_stmt;
              RAST._IExpr _1794___mcc_h815 = _source50.dtor_rhs;
              return this;
            } else if (_source50.is_Block) {
              RAST._IExpr _1795___mcc_h818 = _source50.dtor_underlying;
              return this;
            } else if (_source50.is_StructBuild) {
              RAST._IExpr _1796___mcc_h820 = _source50.dtor_underlying;
              Dafny.ISequence<RAST._IAssignIdentifier> _1797___mcc_h821 = _source50.dtor_assignments;
              return this;
            } else if (_source50.is_Tuple) {
              Dafny.ISequence<RAST._IExpr> _1798___mcc_h824 = _source50.dtor_arguments;
              return this;
            } else if (_source50.is_UnaryOp) {
              Dafny.ISequence<Dafny.Rune> _1799___mcc_h826 = _source50.dtor_op1;
              RAST._IExpr _1800___mcc_h827 = _source50.dtor_underlying;
              DAST.Format._IUnOpFormat _1801___mcc_h828 = _source50.dtor_format;
              return this;
            } else if (_source50.is_BinaryOp) {
              Dafny.ISequence<Dafny.Rune> _1802___mcc_h832 = _source50.dtor_op2;
              RAST._IExpr _1803___mcc_h833 = _source50.dtor_left;
              RAST._IExpr _1804___mcc_h834 = _source50.dtor_right;
              DAST.Format._IBinOpFormat _1805___mcc_h835 = _source50.dtor_format2;
              return this;
            } else if (_source50.is_TypeAscription) {
              RAST._IExpr _1806___mcc_h840 = _source50.dtor_left;
              RAST._IType _1807___mcc_h841 = _source50.dtor_tpe;
              return this;
            } else if (_source50.is_LiteralInt) {
              Dafny.ISequence<Dafny.Rune> _1808___mcc_h844 = _source50.dtor_value;
              return this;
            } else if (_source50.is_LiteralString) {
              Dafny.ISequence<Dafny.Rune> _1809___mcc_h846 = _source50.dtor_value;
              bool _1810___mcc_h847 = _source50.dtor_binary;
              return this;
            } else if (_source50.is_DeclareVar) {
              RAST._IDeclareType _1811___mcc_h850 = _source50.dtor_declareType;
              Dafny.ISequence<Dafny.Rune> _1812___mcc_h851 = _source50.dtor_name;
              Std.Wrappers._IOption<RAST._IType> _1813___mcc_h852 = _source50.dtor_optType;
              Std.Wrappers._IOption<RAST._IExpr> _1814___mcc_h853 = _source50.dtor_optRhs;
              return this;
            } else if (_source50.is_AssignVar) {
              Dafny.ISequence<Dafny.Rune> _1815___mcc_h858 = _source50.dtor_name;
              RAST._IExpr _1816___mcc_h859 = _source50.dtor_rhs;
              return this;
            } else if (_source50.is_IfExpr) {
              RAST._IExpr _1817___mcc_h862 = _source50.dtor_cond;
              RAST._IExpr _1818___mcc_h863 = _source50.dtor_thn;
              RAST._IExpr _1819___mcc_h864 = _source50.dtor_els;
              return this;
            } else if (_source50.is_Loop) {
              Std.Wrappers._IOption<RAST._IExpr> _1820___mcc_h868 = _source50.dtor_optCond;
              RAST._IExpr _1821___mcc_h869 = _source50.dtor_underlying;
              return this;
            } else if (_source50.is_For) {
              Dafny.ISequence<Dafny.Rune> _1822___mcc_h872 = _source50.dtor_name;
              RAST._IExpr _1823___mcc_h873 = _source50.dtor_range;
              RAST._IExpr _1824___mcc_h874 = _source50.dtor_body;
              return this;
            } else if (_source50.is_Labelled) {
              Dafny.ISequence<Dafny.Rune> _1825___mcc_h878 = _source50.dtor_lbl;
              RAST._IExpr _1826___mcc_h879 = _source50.dtor_underlying;
              return this;
            } else if (_source50.is_Break) {
              Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1827___mcc_h882 = _source50.dtor_optLbl;
              return this;
            } else if (_source50.is_Continue) {
              Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1828___mcc_h884 = _source50.dtor_optLbl;
              return this;
            } else if (_source50.is_Return) {
              Std.Wrappers._IOption<RAST._IExpr> _1829___mcc_h886 = _source50.dtor_optExpr;
              return this;
            } else if (_source50.is_CallType) {
              RAST._IExpr _1830___mcc_h888 = _source50.dtor_obj;
              Dafny.ISequence<RAST._IType> _1831___mcc_h889 = _source50.dtor_typeParameters;
              return this;
            } else if (_source50.is_Call) {
              RAST._IExpr _1832___mcc_h892 = _source50.dtor_obj;
              Dafny.ISequence<RAST._IExpr> _1833___mcc_h893 = _source50.dtor_arguments;
              return this;
            } else if (_source50.is_Select) {
              RAST._IExpr _1834___mcc_h896 = _source50.dtor_obj;
              Dafny.ISequence<Dafny.Rune> _1835___mcc_h897 = _source50.dtor_name;
              if (object.Equals(_1835___mcc_h897, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))) {
                DAST.Format._IUnOpFormat _1836_format = _1743___mcc_h712;
                Dafny.ISequence<RAST._IExpr> _1837_args = _1788___mcc_h803;
                RAST._IExpr _1838_underlying = _1834___mcc_h896;
                if ((_1837_args).Equals(Dafny.Sequence<RAST._IExpr>.FromElements())) {
                  return RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _1838_underlying, _1836_format);
                } else {
                  return this;
                }
              } else {
                return this;
              }
            } else {
              RAST._IExpr _1839___mcc_h900 = _source50.dtor_obj;
              Dafny.ISequence<Dafny.Rune> _1840___mcc_h901 = _source50.dtor_name;
              return this;
            }
          } else if (_source49.is_Select) {
            RAST._IExpr _1841___mcc_h904 = _source49.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1842___mcc_h905 = _source49.dtor_name;
            return this;
          } else {
            RAST._IExpr _1843___mcc_h908 = _source49.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1844___mcc_h909 = _source49.dtor_name;
            return this;
          }
        } else if (object.Equals(_1741___mcc_h710, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!"))) {
          RAST._IExpr _source51 = _1742___mcc_h711;
          if (_source51.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _1845___mcc_h912 = _source51.dtor_content;
            return this;
          } else if (_source51.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _1846___mcc_h914 = _source51.dtor_name;
            return this;
          } else if (_source51.is_Match) {
            RAST._IExpr _1847___mcc_h916 = _source51.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _1848___mcc_h917 = _source51.dtor_cases;
            return this;
          } else if (_source51.is_StmtExpr) {
            RAST._IExpr _1849___mcc_h920 = _source51.dtor_stmt;
            RAST._IExpr _1850___mcc_h921 = _source51.dtor_rhs;
            return this;
          } else if (_source51.is_Block) {
            RAST._IExpr _1851___mcc_h924 = _source51.dtor_underlying;
            return this;
          } else if (_source51.is_StructBuild) {
            RAST._IExpr _1852___mcc_h926 = _source51.dtor_underlying;
            Dafny.ISequence<RAST._IAssignIdentifier> _1853___mcc_h927 = _source51.dtor_assignments;
            return this;
          } else if (_source51.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _1854___mcc_h930 = _source51.dtor_arguments;
            return this;
          } else if (_source51.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _1855___mcc_h932 = _source51.dtor_op1;
            RAST._IExpr _1856___mcc_h933 = _source51.dtor_underlying;
            DAST.Format._IUnOpFormat _1857___mcc_h934 = _source51.dtor_format;
            return this;
          } else if (_source51.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _1858___mcc_h938 = _source51.dtor_op2;
            RAST._IExpr _1859___mcc_h939 = _source51.dtor_left;
            RAST._IExpr _1860___mcc_h940 = _source51.dtor_right;
            DAST.Format._IBinOpFormat _1861___mcc_h941 = _source51.dtor_format2;
            if (object.Equals(_1858___mcc_h938, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="))) {
              DAST.Format._IUnOpFormat _source52 = _1743___mcc_h712;
              if (_source52.is_NoFormat) {
                return this;
              } else {
                DAST.Format._IBinOpFormat _1862_format = _1861___mcc_h941;
                RAST._IExpr _1863_right = _1860___mcc_h940;
                RAST._IExpr _1864_left = _1859___mcc_h939;
                return RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!="), _1864_left, _1863_right, DAST.Format.BinOpFormat.create_NoFormat());
              }
            } else if (object.Equals(_1858___mcc_h938, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"))) {
              DAST.Format._IBinOpFormat _source53 = _1861___mcc_h941;
              if (_source53.is_NoFormat) {
                DAST.Format._IUnOpFormat _source54 = _1743___mcc_h712;
                if (_source54.is_NoFormat) {
                  return this;
                } else {
                  RAST._IExpr _1865_right = _1860___mcc_h940;
                  RAST._IExpr _1866_left = _1859___mcc_h939;
                  return RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">="), _1866_left, _1865_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              } else if (_source53.is_ImpliesFormat) {
                return this;
              } else if (_source53.is_Equivalence) {
                return this;
              } else {
                DAST.Format._IUnOpFormat _source55 = _1743___mcc_h712;
                if (_source55.is_NoFormat) {
                  return this;
                } else {
                  RAST._IExpr _1867_right = _1860___mcc_h940;
                  RAST._IExpr _1868_left = _1859___mcc_h939;
                  return RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _1867_right, _1868_left, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else {
              return this;
            }
          } else if (_source51.is_TypeAscription) {
            RAST._IExpr _1869___mcc_h946 = _source51.dtor_left;
            RAST._IType _1870___mcc_h947 = _source51.dtor_tpe;
            return this;
          } else if (_source51.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _1871___mcc_h950 = _source51.dtor_value;
            return this;
          } else if (_source51.is_LiteralString) {
            Dafny.ISequence<Dafny.Rune> _1872___mcc_h952 = _source51.dtor_value;
            bool _1873___mcc_h953 = _source51.dtor_binary;
            return this;
          } else if (_source51.is_DeclareVar) {
            RAST._IDeclareType _1874___mcc_h956 = _source51.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _1875___mcc_h957 = _source51.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _1876___mcc_h958 = _source51.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _1877___mcc_h959 = _source51.dtor_optRhs;
            return this;
          } else if (_source51.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _1878___mcc_h964 = _source51.dtor_name;
            RAST._IExpr _1879___mcc_h965 = _source51.dtor_rhs;
            return this;
          } else if (_source51.is_IfExpr) {
            RAST._IExpr _1880___mcc_h968 = _source51.dtor_cond;
            RAST._IExpr _1881___mcc_h969 = _source51.dtor_thn;
            RAST._IExpr _1882___mcc_h970 = _source51.dtor_els;
            return this;
          } else if (_source51.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _1883___mcc_h974 = _source51.dtor_optCond;
            RAST._IExpr _1884___mcc_h975 = _source51.dtor_underlying;
            return this;
          } else if (_source51.is_For) {
            Dafny.ISequence<Dafny.Rune> _1885___mcc_h978 = _source51.dtor_name;
            RAST._IExpr _1886___mcc_h979 = _source51.dtor_range;
            RAST._IExpr _1887___mcc_h980 = _source51.dtor_body;
            return this;
          } else if (_source51.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _1888___mcc_h984 = _source51.dtor_lbl;
            RAST._IExpr _1889___mcc_h985 = _source51.dtor_underlying;
            return this;
          } else if (_source51.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1890___mcc_h988 = _source51.dtor_optLbl;
            return this;
          } else if (_source51.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1891___mcc_h990 = _source51.dtor_optLbl;
            return this;
          } else if (_source51.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _1892___mcc_h992 = _source51.dtor_optExpr;
            return this;
          } else if (_source51.is_CallType) {
            RAST._IExpr _1893___mcc_h994 = _source51.dtor_obj;
            Dafny.ISequence<RAST._IType> _1894___mcc_h995 = _source51.dtor_typeParameters;
            return this;
          } else if (_source51.is_Call) {
            RAST._IExpr _1895___mcc_h998 = _source51.dtor_obj;
            Dafny.ISequence<RAST._IExpr> _1896___mcc_h999 = _source51.dtor_arguments;
            return this;
          } else if (_source51.is_Select) {
            RAST._IExpr _1897___mcc_h1002 = _source51.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1898___mcc_h1003 = _source51.dtor_name;
            return this;
          } else {
            RAST._IExpr _1899___mcc_h1006 = _source51.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1900___mcc_h1007 = _source51.dtor_name;
            return this;
          }
        } else {
          return this;
        }
      } else if (_source39.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _1901___mcc_h1010 = _source39.dtor_op2;
        RAST._IExpr _1902___mcc_h1011 = _source39.dtor_left;
        RAST._IExpr _1903___mcc_h1012 = _source39.dtor_right;
        DAST.Format._IBinOpFormat _1904___mcc_h1013 = _source39.dtor_format2;
        return this;
      } else if (_source39.is_TypeAscription) {
        RAST._IExpr _1905___mcc_h1018 = _source39.dtor_left;
        RAST._IType _1906___mcc_h1019 = _source39.dtor_tpe;
        return this;
      } else if (_source39.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _1907___mcc_h1022 = _source39.dtor_value;
        return this;
      } else if (_source39.is_LiteralString) {
        Dafny.ISequence<Dafny.Rune> _1908___mcc_h1024 = _source39.dtor_value;
        bool _1909___mcc_h1025 = _source39.dtor_binary;
        return this;
      } else if (_source39.is_DeclareVar) {
        RAST._IDeclareType _1910___mcc_h1028 = _source39.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _1911___mcc_h1029 = _source39.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _1912___mcc_h1030 = _source39.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _1913___mcc_h1031 = _source39.dtor_optRhs;
        return this;
      } else if (_source39.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _1914___mcc_h1036 = _source39.dtor_name;
        RAST._IExpr _1915___mcc_h1037 = _source39.dtor_rhs;
        return this;
      } else if (_source39.is_IfExpr) {
        RAST._IExpr _1916___mcc_h1040 = _source39.dtor_cond;
        RAST._IExpr _1917___mcc_h1041 = _source39.dtor_thn;
        RAST._IExpr _1918___mcc_h1042 = _source39.dtor_els;
        return this;
      } else if (_source39.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _1919___mcc_h1046 = _source39.dtor_optCond;
        RAST._IExpr _1920___mcc_h1047 = _source39.dtor_underlying;
        return this;
      } else if (_source39.is_For) {
        Dafny.ISequence<Dafny.Rune> _1921___mcc_h1050 = _source39.dtor_name;
        RAST._IExpr _1922___mcc_h1051 = _source39.dtor_range;
        RAST._IExpr _1923___mcc_h1052 = _source39.dtor_body;
        return this;
      } else if (_source39.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _1924___mcc_h1056 = _source39.dtor_lbl;
        RAST._IExpr _1925___mcc_h1057 = _source39.dtor_underlying;
        return this;
      } else if (_source39.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1926___mcc_h1060 = _source39.dtor_optLbl;
        return this;
      } else if (_source39.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1927___mcc_h1062 = _source39.dtor_optLbl;
        return this;
      } else if (_source39.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _1928___mcc_h1064 = _source39.dtor_optExpr;
        return this;
      } else if (_source39.is_CallType) {
        RAST._IExpr _1929___mcc_h1066 = _source39.dtor_obj;
        Dafny.ISequence<RAST._IType> _1930___mcc_h1067 = _source39.dtor_typeParameters;
        RAST._IExpr _source56 = _1929___mcc_h1066;
        if (_source56.is_RawExpr) {
          Dafny.ISequence<Dafny.Rune> _1931___mcc_h1070 = _source56.dtor_content;
          return this;
        } else if (_source56.is_Identifier) {
          Dafny.ISequence<Dafny.Rune> _1932___mcc_h1072 = _source56.dtor_name;
          return this;
        } else if (_source56.is_Match) {
          RAST._IExpr _1933___mcc_h1074 = _source56.dtor_matchee;
          Dafny.ISequence<RAST._IMatchCase> _1934___mcc_h1075 = _source56.dtor_cases;
          return this;
        } else if (_source56.is_StmtExpr) {
          RAST._IExpr _1935___mcc_h1078 = _source56.dtor_stmt;
          RAST._IExpr _1936___mcc_h1079 = _source56.dtor_rhs;
          return this;
        } else if (_source56.is_Block) {
          RAST._IExpr _1937___mcc_h1082 = _source56.dtor_underlying;
          return this;
        } else if (_source56.is_StructBuild) {
          RAST._IExpr _1938___mcc_h1084 = _source56.dtor_underlying;
          Dafny.ISequence<RAST._IAssignIdentifier> _1939___mcc_h1085 = _source56.dtor_assignments;
          return this;
        } else if (_source56.is_Tuple) {
          Dafny.ISequence<RAST._IExpr> _1940___mcc_h1088 = _source56.dtor_arguments;
          return this;
        } else if (_source56.is_UnaryOp) {
          Dafny.ISequence<Dafny.Rune> _1941___mcc_h1090 = _source56.dtor_op1;
          RAST._IExpr _1942___mcc_h1091 = _source56.dtor_underlying;
          DAST.Format._IUnOpFormat _1943___mcc_h1092 = _source56.dtor_format;
          return this;
        } else if (_source56.is_BinaryOp) {
          Dafny.ISequence<Dafny.Rune> _1944___mcc_h1096 = _source56.dtor_op2;
          RAST._IExpr _1945___mcc_h1097 = _source56.dtor_left;
          RAST._IExpr _1946___mcc_h1098 = _source56.dtor_right;
          DAST.Format._IBinOpFormat _1947___mcc_h1099 = _source56.dtor_format2;
          return this;
        } else if (_source56.is_TypeAscription) {
          RAST._IExpr _1948___mcc_h1104 = _source56.dtor_left;
          RAST._IType _1949___mcc_h1105 = _source56.dtor_tpe;
          return this;
        } else if (_source56.is_LiteralInt) {
          Dafny.ISequence<Dafny.Rune> _1950___mcc_h1108 = _source56.dtor_value;
          return this;
        } else if (_source56.is_LiteralString) {
          Dafny.ISequence<Dafny.Rune> _1951___mcc_h1110 = _source56.dtor_value;
          bool _1952___mcc_h1111 = _source56.dtor_binary;
          return this;
        } else if (_source56.is_DeclareVar) {
          RAST._IDeclareType _1953___mcc_h1114 = _source56.dtor_declareType;
          Dafny.ISequence<Dafny.Rune> _1954___mcc_h1115 = _source56.dtor_name;
          Std.Wrappers._IOption<RAST._IType> _1955___mcc_h1116 = _source56.dtor_optType;
          Std.Wrappers._IOption<RAST._IExpr> _1956___mcc_h1117 = _source56.dtor_optRhs;
          return this;
        } else if (_source56.is_AssignVar) {
          Dafny.ISequence<Dafny.Rune> _1957___mcc_h1122 = _source56.dtor_name;
          RAST._IExpr _1958___mcc_h1123 = _source56.dtor_rhs;
          return this;
        } else if (_source56.is_IfExpr) {
          RAST._IExpr _1959___mcc_h1126 = _source56.dtor_cond;
          RAST._IExpr _1960___mcc_h1127 = _source56.dtor_thn;
          RAST._IExpr _1961___mcc_h1128 = _source56.dtor_els;
          return this;
        } else if (_source56.is_Loop) {
          Std.Wrappers._IOption<RAST._IExpr> _1962___mcc_h1132 = _source56.dtor_optCond;
          RAST._IExpr _1963___mcc_h1133 = _source56.dtor_underlying;
          return this;
        } else if (_source56.is_For) {
          Dafny.ISequence<Dafny.Rune> _1964___mcc_h1136 = _source56.dtor_name;
          RAST._IExpr _1965___mcc_h1137 = _source56.dtor_range;
          RAST._IExpr _1966___mcc_h1138 = _source56.dtor_body;
          return this;
        } else if (_source56.is_Labelled) {
          Dafny.ISequence<Dafny.Rune> _1967___mcc_h1142 = _source56.dtor_lbl;
          RAST._IExpr _1968___mcc_h1143 = _source56.dtor_underlying;
          return this;
        } else if (_source56.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1969___mcc_h1146 = _source56.dtor_optLbl;
          return this;
        } else if (_source56.is_Continue) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1970___mcc_h1148 = _source56.dtor_optLbl;
          return this;
        } else if (_source56.is_Return) {
          Std.Wrappers._IOption<RAST._IExpr> _1971___mcc_h1150 = _source56.dtor_optExpr;
          return this;
        } else if (_source56.is_CallType) {
          RAST._IExpr _1972___mcc_h1152 = _source56.dtor_obj;
          Dafny.ISequence<RAST._IType> _1973___mcc_h1153 = _source56.dtor_typeParameters;
          RAST._IExpr _source57 = _1972___mcc_h1152;
          if (_source57.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _1974___mcc_h1156 = _source57.dtor_content;
            return this;
          } else if (_source57.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _1975___mcc_h1158 = _source57.dtor_name;
            return this;
          } else if (_source57.is_Match) {
            RAST._IExpr _1976___mcc_h1160 = _source57.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _1977___mcc_h1161 = _source57.dtor_cases;
            return this;
          } else if (_source57.is_StmtExpr) {
            RAST._IExpr _1978___mcc_h1164 = _source57.dtor_stmt;
            RAST._IExpr _1979___mcc_h1165 = _source57.dtor_rhs;
            return this;
          } else if (_source57.is_Block) {
            RAST._IExpr _1980___mcc_h1168 = _source57.dtor_underlying;
            return this;
          } else if (_source57.is_StructBuild) {
            RAST._IExpr _1981___mcc_h1170 = _source57.dtor_underlying;
            Dafny.ISequence<RAST._IAssignIdentifier> _1982___mcc_h1171 = _source57.dtor_assignments;
            return this;
          } else if (_source57.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _1983___mcc_h1174 = _source57.dtor_arguments;
            return this;
          } else if (_source57.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _1984___mcc_h1176 = _source57.dtor_op1;
            RAST._IExpr _1985___mcc_h1177 = _source57.dtor_underlying;
            DAST.Format._IUnOpFormat _1986___mcc_h1178 = _source57.dtor_format;
            return this;
          } else if (_source57.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _1987___mcc_h1182 = _source57.dtor_op2;
            RAST._IExpr _1988___mcc_h1183 = _source57.dtor_left;
            RAST._IExpr _1989___mcc_h1184 = _source57.dtor_right;
            DAST.Format._IBinOpFormat _1990___mcc_h1185 = _source57.dtor_format2;
            return this;
          } else if (_source57.is_TypeAscription) {
            RAST._IExpr _1991___mcc_h1190 = _source57.dtor_left;
            RAST._IType _1992___mcc_h1191 = _source57.dtor_tpe;
            return this;
          } else if (_source57.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _1993___mcc_h1194 = _source57.dtor_value;
            return this;
          } else if (_source57.is_LiteralString) {
            Dafny.ISequence<Dafny.Rune> _1994___mcc_h1196 = _source57.dtor_value;
            bool _1995___mcc_h1197 = _source57.dtor_binary;
            return this;
          } else if (_source57.is_DeclareVar) {
            RAST._IDeclareType _1996___mcc_h1200 = _source57.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _1997___mcc_h1201 = _source57.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _1998___mcc_h1202 = _source57.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _1999___mcc_h1203 = _source57.dtor_optRhs;
            return this;
          } else if (_source57.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _2000___mcc_h1208 = _source57.dtor_name;
            RAST._IExpr _2001___mcc_h1209 = _source57.dtor_rhs;
            return this;
          } else if (_source57.is_IfExpr) {
            RAST._IExpr _2002___mcc_h1212 = _source57.dtor_cond;
            RAST._IExpr _2003___mcc_h1213 = _source57.dtor_thn;
            RAST._IExpr _2004___mcc_h1214 = _source57.dtor_els;
            return this;
          } else if (_source57.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _2005___mcc_h1218 = _source57.dtor_optCond;
            RAST._IExpr _2006___mcc_h1219 = _source57.dtor_underlying;
            return this;
          } else if (_source57.is_For) {
            Dafny.ISequence<Dafny.Rune> _2007___mcc_h1222 = _source57.dtor_name;
            RAST._IExpr _2008___mcc_h1223 = _source57.dtor_range;
            RAST._IExpr _2009___mcc_h1224 = _source57.dtor_body;
            return this;
          } else if (_source57.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _2010___mcc_h1228 = _source57.dtor_lbl;
            RAST._IExpr _2011___mcc_h1229 = _source57.dtor_underlying;
            return this;
          } else if (_source57.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2012___mcc_h1232 = _source57.dtor_optLbl;
            return this;
          } else if (_source57.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2013___mcc_h1234 = _source57.dtor_optLbl;
            return this;
          } else if (_source57.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _2014___mcc_h1236 = _source57.dtor_optExpr;
            return this;
          } else if (_source57.is_CallType) {
            RAST._IExpr _2015___mcc_h1238 = _source57.dtor_obj;
            Dafny.ISequence<RAST._IType> _2016___mcc_h1239 = _source57.dtor_typeParameters;
            return this;
          } else if (_source57.is_Call) {
            RAST._IExpr _2017___mcc_h1242 = _source57.dtor_obj;
            Dafny.ISequence<RAST._IExpr> _2018___mcc_h1243 = _source57.dtor_arguments;
            return this;
          } else if (_source57.is_Select) {
            RAST._IExpr _2019___mcc_h1246 = _source57.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _2020___mcc_h1247 = _source57.dtor_name;
            if (object.Equals(_2020___mcc_h1247, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))) {
              Dafny.ISequence<RAST._IType> _2021_args = _1930___mcc_h1067;
              Dafny.ISequence<RAST._IType> _2022_tpes = _1973___mcc_h1153;
              RAST._IExpr _2023_expr = _2019___mcc_h1246;
              if (((new BigInteger((_2022_tpes).Count)) != (BigInteger.One)) && ((new BigInteger((_2021_args).Count)).Sign != 0)) {
                return this;
              } else {
                RAST._IType _2024_tpe = (_2022_tpes).Select(BigInteger.Zero);
                if (((((((((((_2024_tpe).is_U8) || ((_2024_tpe).is_U16)) || ((_2024_tpe).is_U32)) || ((_2024_tpe).is_U64)) || ((_2024_tpe).is_U128)) || ((_2024_tpe).is_I8)) || ((_2024_tpe).is_I16)) || ((_2024_tpe).is_I32)) || ((_2024_tpe).is_I64)) || ((_2024_tpe).is_I128)) {
                  RAST._IExpr _source58 = _2023_expr;
                  if (_source58.is_RawExpr) {
                    Dafny.ISequence<Dafny.Rune> _2025___mcc_h1278 = _source58.dtor_content;
                    return this;
                  } else if (_source58.is_Identifier) {
                    Dafny.ISequence<Dafny.Rune> _2026___mcc_h1280 = _source58.dtor_name;
                    return this;
                  } else if (_source58.is_Match) {
                    RAST._IExpr _2027___mcc_h1282 = _source58.dtor_matchee;
                    Dafny.ISequence<RAST._IMatchCase> _2028___mcc_h1283 = _source58.dtor_cases;
                    return this;
                  } else if (_source58.is_StmtExpr) {
                    RAST._IExpr _2029___mcc_h1286 = _source58.dtor_stmt;
                    RAST._IExpr _2030___mcc_h1287 = _source58.dtor_rhs;
                    return this;
                  } else if (_source58.is_Block) {
                    RAST._IExpr _2031___mcc_h1290 = _source58.dtor_underlying;
                    return this;
                  } else if (_source58.is_StructBuild) {
                    RAST._IExpr _2032___mcc_h1292 = _source58.dtor_underlying;
                    Dafny.ISequence<RAST._IAssignIdentifier> _2033___mcc_h1293 = _source58.dtor_assignments;
                    return this;
                  } else if (_source58.is_Tuple) {
                    Dafny.ISequence<RAST._IExpr> _2034___mcc_h1296 = _source58.dtor_arguments;
                    return this;
                  } else if (_source58.is_UnaryOp) {
                    Dafny.ISequence<Dafny.Rune> _2035___mcc_h1298 = _source58.dtor_op1;
                    RAST._IExpr _2036___mcc_h1299 = _source58.dtor_underlying;
                    DAST.Format._IUnOpFormat _2037___mcc_h1300 = _source58.dtor_format;
                    return this;
                  } else if (_source58.is_BinaryOp) {
                    Dafny.ISequence<Dafny.Rune> _2038___mcc_h1304 = _source58.dtor_op2;
                    RAST._IExpr _2039___mcc_h1305 = _source58.dtor_left;
                    RAST._IExpr _2040___mcc_h1306 = _source58.dtor_right;
                    DAST.Format._IBinOpFormat _2041___mcc_h1307 = _source58.dtor_format2;
                    return this;
                  } else if (_source58.is_TypeAscription) {
                    RAST._IExpr _2042___mcc_h1312 = _source58.dtor_left;
                    RAST._IType _2043___mcc_h1313 = _source58.dtor_tpe;
                    return this;
                  } else if (_source58.is_LiteralInt) {
                    Dafny.ISequence<Dafny.Rune> _2044___mcc_h1316 = _source58.dtor_value;
                    return this;
                  } else if (_source58.is_LiteralString) {
                    Dafny.ISequence<Dafny.Rune> _2045___mcc_h1318 = _source58.dtor_value;
                    bool _2046___mcc_h1319 = _source58.dtor_binary;
                    return this;
                  } else if (_source58.is_DeclareVar) {
                    RAST._IDeclareType _2047___mcc_h1322 = _source58.dtor_declareType;
                    Dafny.ISequence<Dafny.Rune> _2048___mcc_h1323 = _source58.dtor_name;
                    Std.Wrappers._IOption<RAST._IType> _2049___mcc_h1324 = _source58.dtor_optType;
                    Std.Wrappers._IOption<RAST._IExpr> _2050___mcc_h1325 = _source58.dtor_optRhs;
                    return this;
                  } else if (_source58.is_AssignVar) {
                    Dafny.ISequence<Dafny.Rune> _2051___mcc_h1330 = _source58.dtor_name;
                    RAST._IExpr _2052___mcc_h1331 = _source58.dtor_rhs;
                    return this;
                  } else if (_source58.is_IfExpr) {
                    RAST._IExpr _2053___mcc_h1334 = _source58.dtor_cond;
                    RAST._IExpr _2054___mcc_h1335 = _source58.dtor_thn;
                    RAST._IExpr _2055___mcc_h1336 = _source58.dtor_els;
                    return this;
                  } else if (_source58.is_Loop) {
                    Std.Wrappers._IOption<RAST._IExpr> _2056___mcc_h1340 = _source58.dtor_optCond;
                    RAST._IExpr _2057___mcc_h1341 = _source58.dtor_underlying;
                    return this;
                  } else if (_source58.is_For) {
                    Dafny.ISequence<Dafny.Rune> _2058___mcc_h1344 = _source58.dtor_name;
                    RAST._IExpr _2059___mcc_h1345 = _source58.dtor_range;
                    RAST._IExpr _2060___mcc_h1346 = _source58.dtor_body;
                    return this;
                  } else if (_source58.is_Labelled) {
                    Dafny.ISequence<Dafny.Rune> _2061___mcc_h1350 = _source58.dtor_lbl;
                    RAST._IExpr _2062___mcc_h1351 = _source58.dtor_underlying;
                    return this;
                  } else if (_source58.is_Break) {
                    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2063___mcc_h1354 = _source58.dtor_optLbl;
                    return this;
                  } else if (_source58.is_Continue) {
                    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2064___mcc_h1356 = _source58.dtor_optLbl;
                    return this;
                  } else if (_source58.is_Return) {
                    Std.Wrappers._IOption<RAST._IExpr> _2065___mcc_h1358 = _source58.dtor_optExpr;
                    return this;
                  } else if (_source58.is_CallType) {
                    RAST._IExpr _2066___mcc_h1360 = _source58.dtor_obj;
                    Dafny.ISequence<RAST._IType> _2067___mcc_h1361 = _source58.dtor_typeParameters;
                    return this;
                  } else if (_source58.is_Call) {
                    RAST._IExpr _2068___mcc_h1364 = _source58.dtor_obj;
                    Dafny.ISequence<RAST._IExpr> _2069___mcc_h1365 = _source58.dtor_arguments;
                    RAST._IExpr _source59 = _2068___mcc_h1364;
                    if (_source59.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _2070___mcc_h1368 = _source59.dtor_content;
                      return this;
                    } else if (_source59.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _2071___mcc_h1370 = _source59.dtor_name;
                      return this;
                    } else if (_source59.is_Match) {
                      RAST._IExpr _2072___mcc_h1372 = _source59.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _2073___mcc_h1373 = _source59.dtor_cases;
                      return this;
                    } else if (_source59.is_StmtExpr) {
                      RAST._IExpr _2074___mcc_h1376 = _source59.dtor_stmt;
                      RAST._IExpr _2075___mcc_h1377 = _source59.dtor_rhs;
                      return this;
                    } else if (_source59.is_Block) {
                      RAST._IExpr _2076___mcc_h1380 = _source59.dtor_underlying;
                      return this;
                    } else if (_source59.is_StructBuild) {
                      RAST._IExpr _2077___mcc_h1382 = _source59.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _2078___mcc_h1383 = _source59.dtor_assignments;
                      return this;
                    } else if (_source59.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _2079___mcc_h1386 = _source59.dtor_arguments;
                      return this;
                    } else if (_source59.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _2080___mcc_h1388 = _source59.dtor_op1;
                      RAST._IExpr _2081___mcc_h1389 = _source59.dtor_underlying;
                      DAST.Format._IUnOpFormat _2082___mcc_h1390 = _source59.dtor_format;
                      return this;
                    } else if (_source59.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _2083___mcc_h1394 = _source59.dtor_op2;
                      RAST._IExpr _2084___mcc_h1395 = _source59.dtor_left;
                      RAST._IExpr _2085___mcc_h1396 = _source59.dtor_right;
                      DAST.Format._IBinOpFormat _2086___mcc_h1397 = _source59.dtor_format2;
                      return this;
                    } else if (_source59.is_TypeAscription) {
                      RAST._IExpr _2087___mcc_h1402 = _source59.dtor_left;
                      RAST._IType _2088___mcc_h1403 = _source59.dtor_tpe;
                      return this;
                    } else if (_source59.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _2089___mcc_h1406 = _source59.dtor_value;
                      return this;
                    } else if (_source59.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _2090___mcc_h1408 = _source59.dtor_value;
                      bool _2091___mcc_h1409 = _source59.dtor_binary;
                      return this;
                    } else if (_source59.is_DeclareVar) {
                      RAST._IDeclareType _2092___mcc_h1412 = _source59.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _2093___mcc_h1413 = _source59.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _2094___mcc_h1414 = _source59.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _2095___mcc_h1415 = _source59.dtor_optRhs;
                      return this;
                    } else if (_source59.is_AssignVar) {
                      Dafny.ISequence<Dafny.Rune> _2096___mcc_h1420 = _source59.dtor_name;
                      RAST._IExpr _2097___mcc_h1421 = _source59.dtor_rhs;
                      return this;
                    } else if (_source59.is_IfExpr) {
                      RAST._IExpr _2098___mcc_h1424 = _source59.dtor_cond;
                      RAST._IExpr _2099___mcc_h1425 = _source59.dtor_thn;
                      RAST._IExpr _2100___mcc_h1426 = _source59.dtor_els;
                      return this;
                    } else if (_source59.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _2101___mcc_h1430 = _source59.dtor_optCond;
                      RAST._IExpr _2102___mcc_h1431 = _source59.dtor_underlying;
                      return this;
                    } else if (_source59.is_For) {
                      Dafny.ISequence<Dafny.Rune> _2103___mcc_h1434 = _source59.dtor_name;
                      RAST._IExpr _2104___mcc_h1435 = _source59.dtor_range;
                      RAST._IExpr _2105___mcc_h1436 = _source59.dtor_body;
                      return this;
                    } else if (_source59.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _2106___mcc_h1440 = _source59.dtor_lbl;
                      RAST._IExpr _2107___mcc_h1441 = _source59.dtor_underlying;
                      return this;
                    } else if (_source59.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2108___mcc_h1444 = _source59.dtor_optLbl;
                      return this;
                    } else if (_source59.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2109___mcc_h1446 = _source59.dtor_optLbl;
                      return this;
                    } else if (_source59.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _2110___mcc_h1448 = _source59.dtor_optExpr;
                      return this;
                    } else if (_source59.is_CallType) {
                      RAST._IExpr _2111___mcc_h1450 = _source59.dtor_obj;
                      Dafny.ISequence<RAST._IType> _2112___mcc_h1451 = _source59.dtor_typeParameters;
                      return this;
                    } else if (_source59.is_Call) {
                      RAST._IExpr _2113___mcc_h1454 = _source59.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _2114___mcc_h1455 = _source59.dtor_arguments;
                      return this;
                    } else if (_source59.is_Select) {
                      RAST._IExpr _2115___mcc_h1458 = _source59.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _2116___mcc_h1459 = _source59.dtor_name;
                      return this;
                    } else {
                      RAST._IExpr _2117___mcc_h1462 = _source59.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _2118___mcc_h1463 = _source59.dtor_name;
                      RAST._IExpr _source60 = _2117___mcc_h1462;
                      if (_source60.is_RawExpr) {
                        Dafny.ISequence<Dafny.Rune> _2119___mcc_h1466 = _source60.dtor_content;
                        return this;
                      } else if (_source60.is_Identifier) {
                        Dafny.ISequence<Dafny.Rune> _2120___mcc_h1468 = _source60.dtor_name;
                        return this;
                      } else if (_source60.is_Match) {
                        RAST._IExpr _2121___mcc_h1470 = _source60.dtor_matchee;
                        Dafny.ISequence<RAST._IMatchCase> _2122___mcc_h1471 = _source60.dtor_cases;
                        return this;
                      } else if (_source60.is_StmtExpr) {
                        RAST._IExpr _2123___mcc_h1474 = _source60.dtor_stmt;
                        RAST._IExpr _2124___mcc_h1475 = _source60.dtor_rhs;
                        return this;
                      } else if (_source60.is_Block) {
                        RAST._IExpr _2125___mcc_h1478 = _source60.dtor_underlying;
                        return this;
                      } else if (_source60.is_StructBuild) {
                        RAST._IExpr _2126___mcc_h1480 = _source60.dtor_underlying;
                        Dafny.ISequence<RAST._IAssignIdentifier> _2127___mcc_h1481 = _source60.dtor_assignments;
                        return this;
                      } else if (_source60.is_Tuple) {
                        Dafny.ISequence<RAST._IExpr> _2128___mcc_h1484 = _source60.dtor_arguments;
                        return this;
                      } else if (_source60.is_UnaryOp) {
                        Dafny.ISequence<Dafny.Rune> _2129___mcc_h1486 = _source60.dtor_op1;
                        RAST._IExpr _2130___mcc_h1487 = _source60.dtor_underlying;
                        DAST.Format._IUnOpFormat _2131___mcc_h1488 = _source60.dtor_format;
                        return this;
                      } else if (_source60.is_BinaryOp) {
                        Dafny.ISequence<Dafny.Rune> _2132___mcc_h1492 = _source60.dtor_op2;
                        RAST._IExpr _2133___mcc_h1493 = _source60.dtor_left;
                        RAST._IExpr _2134___mcc_h1494 = _source60.dtor_right;
                        DAST.Format._IBinOpFormat _2135___mcc_h1495 = _source60.dtor_format2;
                        return this;
                      } else if (_source60.is_TypeAscription) {
                        RAST._IExpr _2136___mcc_h1500 = _source60.dtor_left;
                        RAST._IType _2137___mcc_h1501 = _source60.dtor_tpe;
                        return this;
                      } else if (_source60.is_LiteralInt) {
                        Dafny.ISequence<Dafny.Rune> _2138___mcc_h1504 = _source60.dtor_value;
                        return this;
                      } else if (_source60.is_LiteralString) {
                        Dafny.ISequence<Dafny.Rune> _2139___mcc_h1506 = _source60.dtor_value;
                        bool _2140___mcc_h1507 = _source60.dtor_binary;
                        return this;
                      } else if (_source60.is_DeclareVar) {
                        RAST._IDeclareType _2141___mcc_h1510 = _source60.dtor_declareType;
                        Dafny.ISequence<Dafny.Rune> _2142___mcc_h1511 = _source60.dtor_name;
                        Std.Wrappers._IOption<RAST._IType> _2143___mcc_h1512 = _source60.dtor_optType;
                        Std.Wrappers._IOption<RAST._IExpr> _2144___mcc_h1513 = _source60.dtor_optRhs;
                        return this;
                      } else if (_source60.is_AssignVar) {
                        Dafny.ISequence<Dafny.Rune> _2145___mcc_h1518 = _source60.dtor_name;
                        RAST._IExpr _2146___mcc_h1519 = _source60.dtor_rhs;
                        return this;
                      } else if (_source60.is_IfExpr) {
                        RAST._IExpr _2147___mcc_h1522 = _source60.dtor_cond;
                        RAST._IExpr _2148___mcc_h1523 = _source60.dtor_thn;
                        RAST._IExpr _2149___mcc_h1524 = _source60.dtor_els;
                        return this;
                      } else if (_source60.is_Loop) {
                        Std.Wrappers._IOption<RAST._IExpr> _2150___mcc_h1528 = _source60.dtor_optCond;
                        RAST._IExpr _2151___mcc_h1529 = _source60.dtor_underlying;
                        return this;
                      } else if (_source60.is_For) {
                        Dafny.ISequence<Dafny.Rune> _2152___mcc_h1532 = _source60.dtor_name;
                        RAST._IExpr _2153___mcc_h1533 = _source60.dtor_range;
                        RAST._IExpr _2154___mcc_h1534 = _source60.dtor_body;
                        return this;
                      } else if (_source60.is_Labelled) {
                        Dafny.ISequence<Dafny.Rune> _2155___mcc_h1538 = _source60.dtor_lbl;
                        RAST._IExpr _2156___mcc_h1539 = _source60.dtor_underlying;
                        return this;
                      } else if (_source60.is_Break) {
                        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2157___mcc_h1542 = _source60.dtor_optLbl;
                        return this;
                      } else if (_source60.is_Continue) {
                        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2158___mcc_h1544 = _source60.dtor_optLbl;
                        return this;
                      } else if (_source60.is_Return) {
                        Std.Wrappers._IOption<RAST._IExpr> _2159___mcc_h1546 = _source60.dtor_optExpr;
                        return this;
                      } else if (_source60.is_CallType) {
                        RAST._IExpr _2160___mcc_h1548 = _source60.dtor_obj;
                        Dafny.ISequence<RAST._IType> _2161___mcc_h1549 = _source60.dtor_typeParameters;
                        return this;
                      } else if (_source60.is_Call) {
                        RAST._IExpr _2162___mcc_h1552 = _source60.dtor_obj;
                        Dafny.ISequence<RAST._IExpr> _2163___mcc_h1553 = _source60.dtor_arguments;
                        return this;
                      } else if (_source60.is_Select) {
                        RAST._IExpr _2164___mcc_h1556 = _source60.dtor_obj;
                        Dafny.ISequence<Dafny.Rune> _2165___mcc_h1557 = _source60.dtor_name;
                        return this;
                      } else {
                        RAST._IExpr _2166___mcc_h1560 = _source60.dtor_obj;
                        Dafny.ISequence<Dafny.Rune> _2167___mcc_h1561 = _source60.dtor_name;
                        RAST._IExpr _source61 = _2166___mcc_h1560;
                        if (_source61.is_RawExpr) {
                          Dafny.ISequence<Dafny.Rune> _2168___mcc_h1564 = _source61.dtor_content;
                          return this;
                        } else if (_source61.is_Identifier) {
                          Dafny.ISequence<Dafny.Rune> _2169___mcc_h1566 = _source61.dtor_name;
                          return this;
                        } else if (_source61.is_Match) {
                          RAST._IExpr _2170___mcc_h1568 = _source61.dtor_matchee;
                          Dafny.ISequence<RAST._IMatchCase> _2171___mcc_h1569 = _source61.dtor_cases;
                          return this;
                        } else if (_source61.is_StmtExpr) {
                          RAST._IExpr _2172___mcc_h1572 = _source61.dtor_stmt;
                          RAST._IExpr _2173___mcc_h1573 = _source61.dtor_rhs;
                          return this;
                        } else if (_source61.is_Block) {
                          RAST._IExpr _2174___mcc_h1576 = _source61.dtor_underlying;
                          return this;
                        } else if (_source61.is_StructBuild) {
                          RAST._IExpr _2175___mcc_h1578 = _source61.dtor_underlying;
                          Dafny.ISequence<RAST._IAssignIdentifier> _2176___mcc_h1579 = _source61.dtor_assignments;
                          return this;
                        } else if (_source61.is_Tuple) {
                          Dafny.ISequence<RAST._IExpr> _2177___mcc_h1582 = _source61.dtor_arguments;
                          return this;
                        } else if (_source61.is_UnaryOp) {
                          Dafny.ISequence<Dafny.Rune> _2178___mcc_h1584 = _source61.dtor_op1;
                          RAST._IExpr _2179___mcc_h1585 = _source61.dtor_underlying;
                          DAST.Format._IUnOpFormat _2180___mcc_h1586 = _source61.dtor_format;
                          return this;
                        } else if (_source61.is_BinaryOp) {
                          Dafny.ISequence<Dafny.Rune> _2181___mcc_h1590 = _source61.dtor_op2;
                          RAST._IExpr _2182___mcc_h1591 = _source61.dtor_left;
                          RAST._IExpr _2183___mcc_h1592 = _source61.dtor_right;
                          DAST.Format._IBinOpFormat _2184___mcc_h1593 = _source61.dtor_format2;
                          return this;
                        } else if (_source61.is_TypeAscription) {
                          RAST._IExpr _2185___mcc_h1598 = _source61.dtor_left;
                          RAST._IType _2186___mcc_h1599 = _source61.dtor_tpe;
                          return this;
                        } else if (_source61.is_LiteralInt) {
                          Dafny.ISequence<Dafny.Rune> _2187___mcc_h1602 = _source61.dtor_value;
                          return this;
                        } else if (_source61.is_LiteralString) {
                          Dafny.ISequence<Dafny.Rune> _2188___mcc_h1604 = _source61.dtor_value;
                          bool _2189___mcc_h1605 = _source61.dtor_binary;
                          return this;
                        } else if (_source61.is_DeclareVar) {
                          RAST._IDeclareType _2190___mcc_h1608 = _source61.dtor_declareType;
                          Dafny.ISequence<Dafny.Rune> _2191___mcc_h1609 = _source61.dtor_name;
                          Std.Wrappers._IOption<RAST._IType> _2192___mcc_h1610 = _source61.dtor_optType;
                          Std.Wrappers._IOption<RAST._IExpr> _2193___mcc_h1611 = _source61.dtor_optRhs;
                          return this;
                        } else if (_source61.is_AssignVar) {
                          Dafny.ISequence<Dafny.Rune> _2194___mcc_h1616 = _source61.dtor_name;
                          RAST._IExpr _2195___mcc_h1617 = _source61.dtor_rhs;
                          return this;
                        } else if (_source61.is_IfExpr) {
                          RAST._IExpr _2196___mcc_h1620 = _source61.dtor_cond;
                          RAST._IExpr _2197___mcc_h1621 = _source61.dtor_thn;
                          RAST._IExpr _2198___mcc_h1622 = _source61.dtor_els;
                          return this;
                        } else if (_source61.is_Loop) {
                          Std.Wrappers._IOption<RAST._IExpr> _2199___mcc_h1626 = _source61.dtor_optCond;
                          RAST._IExpr _2200___mcc_h1627 = _source61.dtor_underlying;
                          return this;
                        } else if (_source61.is_For) {
                          Dafny.ISequence<Dafny.Rune> _2201___mcc_h1630 = _source61.dtor_name;
                          RAST._IExpr _2202___mcc_h1631 = _source61.dtor_range;
                          RAST._IExpr _2203___mcc_h1632 = _source61.dtor_body;
                          return this;
                        } else if (_source61.is_Labelled) {
                          Dafny.ISequence<Dafny.Rune> _2204___mcc_h1636 = _source61.dtor_lbl;
                          RAST._IExpr _2205___mcc_h1637 = _source61.dtor_underlying;
                          return this;
                        } else if (_source61.is_Break) {
                          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2206___mcc_h1640 = _source61.dtor_optLbl;
                          return this;
                        } else if (_source61.is_Continue) {
                          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2207___mcc_h1642 = _source61.dtor_optLbl;
                          return this;
                        } else if (_source61.is_Return) {
                          Std.Wrappers._IOption<RAST._IExpr> _2208___mcc_h1644 = _source61.dtor_optExpr;
                          return this;
                        } else if (_source61.is_CallType) {
                          RAST._IExpr _2209___mcc_h1646 = _source61.dtor_obj;
                          Dafny.ISequence<RAST._IType> _2210___mcc_h1647 = _source61.dtor_typeParameters;
                          return this;
                        } else if (_source61.is_Call) {
                          RAST._IExpr _2211___mcc_h1650 = _source61.dtor_obj;
                          Dafny.ISequence<RAST._IExpr> _2212___mcc_h1651 = _source61.dtor_arguments;
                          return this;
                        } else if (_source61.is_Select) {
                          RAST._IExpr _2213___mcc_h1654 = _source61.dtor_obj;
                          Dafny.ISequence<Dafny.Rune> _2214___mcc_h1655 = _source61.dtor_name;
                          return this;
                        } else {
                          RAST._IExpr _2215___mcc_h1658 = _source61.dtor_obj;
                          Dafny.ISequence<Dafny.Rune> _2216___mcc_h1659 = _source61.dtor_name;
                          RAST._IExpr _source62 = _2215___mcc_h1658;
                          if (_source62.is_RawExpr) {
                            Dafny.ISequence<Dafny.Rune> _2217___mcc_h1662 = _source62.dtor_content;
                            return this;
                          } else if (_source62.is_Identifier) {
                            Dafny.ISequence<Dafny.Rune> _2218___mcc_h1664 = _source62.dtor_name;
                            if (object.Equals(_2218___mcc_h1664, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) {
                              if (object.Equals(_2216___mcc_h1659, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dafny_runtime"))) {
                                if (object.Equals(_2167___mcc_h1561, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyInt"))) {
                                  if (object.Equals(_2118___mcc_h1463, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from"))) {
                                    Dafny.ISequence<RAST._IExpr> _2219_args = _2069___mcc_h1365;
                                    if ((new BigInteger((_2219_args).Count)) == (BigInteger.One)) {
                                      RAST._IExpr _source63 = (_2219_args).Select(BigInteger.Zero);
                                      if (_source63.is_RawExpr) {
                                        Dafny.ISequence<Dafny.Rune> _2220___mcc_h1768 = _source63.dtor_content;
                                        return this;
                                      } else if (_source63.is_Identifier) {
                                        Dafny.ISequence<Dafny.Rune> _2221___mcc_h1770 = _source63.dtor_name;
                                        return this;
                                      } else if (_source63.is_Match) {
                                        RAST._IExpr _2222___mcc_h1772 = _source63.dtor_matchee;
                                        Dafny.ISequence<RAST._IMatchCase> _2223___mcc_h1773 = _source63.dtor_cases;
                                        return this;
                                      } else if (_source63.is_StmtExpr) {
                                        RAST._IExpr _2224___mcc_h1776 = _source63.dtor_stmt;
                                        RAST._IExpr _2225___mcc_h1777 = _source63.dtor_rhs;
                                        return this;
                                      } else if (_source63.is_Block) {
                                        RAST._IExpr _2226___mcc_h1780 = _source63.dtor_underlying;
                                        return this;
                                      } else if (_source63.is_StructBuild) {
                                        RAST._IExpr _2227___mcc_h1782 = _source63.dtor_underlying;
                                        Dafny.ISequence<RAST._IAssignIdentifier> _2228___mcc_h1783 = _source63.dtor_assignments;
                                        return this;
                                      } else if (_source63.is_Tuple) {
                                        Dafny.ISequence<RAST._IExpr> _2229___mcc_h1786 = _source63.dtor_arguments;
                                        return this;
                                      } else if (_source63.is_UnaryOp) {
                                        Dafny.ISequence<Dafny.Rune> _2230___mcc_h1788 = _source63.dtor_op1;
                                        RAST._IExpr _2231___mcc_h1789 = _source63.dtor_underlying;
                                        DAST.Format._IUnOpFormat _2232___mcc_h1790 = _source63.dtor_format;
                                        return this;
                                      } else if (_source63.is_BinaryOp) {
                                        Dafny.ISequence<Dafny.Rune> _2233___mcc_h1794 = _source63.dtor_op2;
                                        RAST._IExpr _2234___mcc_h1795 = _source63.dtor_left;
                                        RAST._IExpr _2235___mcc_h1796 = _source63.dtor_right;
                                        DAST.Format._IBinOpFormat _2236___mcc_h1797 = _source63.dtor_format2;
                                        return this;
                                      } else if (_source63.is_TypeAscription) {
                                        RAST._IExpr _2237___mcc_h1802 = _source63.dtor_left;
                                        RAST._IType _2238___mcc_h1803 = _source63.dtor_tpe;
                                        return this;
                                      } else if (_source63.is_LiteralInt) {
                                        Dafny.ISequence<Dafny.Rune> _2239___mcc_h1806 = _source63.dtor_value;
                                        Dafny.ISequence<Dafny.Rune> _2240_number = _2239___mcc_h1806;
                                        return RAST.Expr.create_LiteralInt(_2240_number);
                                      } else if (_source63.is_LiteralString) {
                                        Dafny.ISequence<Dafny.Rune> _2241___mcc_h1808 = _source63.dtor_value;
                                        bool _2242___mcc_h1809 = _source63.dtor_binary;
                                        Dafny.ISequence<Dafny.Rune> _2243_number = _2241___mcc_h1808;
                                        return RAST.Expr.create_LiteralInt(_2243_number);
                                      } else if (_source63.is_DeclareVar) {
                                        RAST._IDeclareType _2244___mcc_h1812 = _source63.dtor_declareType;
                                        Dafny.ISequence<Dafny.Rune> _2245___mcc_h1813 = _source63.dtor_name;
                                        Std.Wrappers._IOption<RAST._IType> _2246___mcc_h1814 = _source63.dtor_optType;
                                        Std.Wrappers._IOption<RAST._IExpr> _2247___mcc_h1815 = _source63.dtor_optRhs;
                                        return this;
                                      } else if (_source63.is_AssignVar) {
                                        Dafny.ISequence<Dafny.Rune> _2248___mcc_h1820 = _source63.dtor_name;
                                        RAST._IExpr _2249___mcc_h1821 = _source63.dtor_rhs;
                                        return this;
                                      } else if (_source63.is_IfExpr) {
                                        RAST._IExpr _2250___mcc_h1824 = _source63.dtor_cond;
                                        RAST._IExpr _2251___mcc_h1825 = _source63.dtor_thn;
                                        RAST._IExpr _2252___mcc_h1826 = _source63.dtor_els;
                                        return this;
                                      } else if (_source63.is_Loop) {
                                        Std.Wrappers._IOption<RAST._IExpr> _2253___mcc_h1830 = _source63.dtor_optCond;
                                        RAST._IExpr _2254___mcc_h1831 = _source63.dtor_underlying;
                                        return this;
                                      } else if (_source63.is_For) {
                                        Dafny.ISequence<Dafny.Rune> _2255___mcc_h1834 = _source63.dtor_name;
                                        RAST._IExpr _2256___mcc_h1835 = _source63.dtor_range;
                                        RAST._IExpr _2257___mcc_h1836 = _source63.dtor_body;
                                        return this;
                                      } else if (_source63.is_Labelled) {
                                        Dafny.ISequence<Dafny.Rune> _2258___mcc_h1840 = _source63.dtor_lbl;
                                        RAST._IExpr _2259___mcc_h1841 = _source63.dtor_underlying;
                                        return this;
                                      } else if (_source63.is_Break) {
                                        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2260___mcc_h1844 = _source63.dtor_optLbl;
                                        return this;
                                      } else if (_source63.is_Continue) {
                                        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2261___mcc_h1846 = _source63.dtor_optLbl;
                                        return this;
                                      } else if (_source63.is_Return) {
                                        Std.Wrappers._IOption<RAST._IExpr> _2262___mcc_h1848 = _source63.dtor_optExpr;
                                        return this;
                                      } else if (_source63.is_CallType) {
                                        RAST._IExpr _2263___mcc_h1850 = _source63.dtor_obj;
                                        Dafny.ISequence<RAST._IType> _2264___mcc_h1851 = _source63.dtor_typeParameters;
                                        return this;
                                      } else if (_source63.is_Call) {
                                        RAST._IExpr _2265___mcc_h1854 = _source63.dtor_obj;
                                        Dafny.ISequence<RAST._IExpr> _2266___mcc_h1855 = _source63.dtor_arguments;
                                        return this;
                                      } else if (_source63.is_Select) {
                                        RAST._IExpr _2267___mcc_h1858 = _source63.dtor_obj;
                                        Dafny.ISequence<Dafny.Rune> _2268___mcc_h1859 = _source63.dtor_name;
                                        return this;
                                      } else {
                                        RAST._IExpr _2269___mcc_h1862 = _source63.dtor_obj;
                                        Dafny.ISequence<Dafny.Rune> _2270___mcc_h1863 = _source63.dtor_name;
                                        return this;
                                      }
                                    } else {
                                      return this;
                                    }
                                  } else {
                                    return this;
                                  }
                                } else {
                                  return this;
                                }
                              } else {
                                return this;
                              }
                            } else {
                              return this;
                            }
                          } else if (_source62.is_Match) {
                            RAST._IExpr _2271___mcc_h1666 = _source62.dtor_matchee;
                            Dafny.ISequence<RAST._IMatchCase> _2272___mcc_h1667 = _source62.dtor_cases;
                            return this;
                          } else if (_source62.is_StmtExpr) {
                            RAST._IExpr _2273___mcc_h1670 = _source62.dtor_stmt;
                            RAST._IExpr _2274___mcc_h1671 = _source62.dtor_rhs;
                            return this;
                          } else if (_source62.is_Block) {
                            RAST._IExpr _2275___mcc_h1674 = _source62.dtor_underlying;
                            return this;
                          } else if (_source62.is_StructBuild) {
                            RAST._IExpr _2276___mcc_h1676 = _source62.dtor_underlying;
                            Dafny.ISequence<RAST._IAssignIdentifier> _2277___mcc_h1677 = _source62.dtor_assignments;
                            return this;
                          } else if (_source62.is_Tuple) {
                            Dafny.ISequence<RAST._IExpr> _2278___mcc_h1680 = _source62.dtor_arguments;
                            return this;
                          } else if (_source62.is_UnaryOp) {
                            Dafny.ISequence<Dafny.Rune> _2279___mcc_h1682 = _source62.dtor_op1;
                            RAST._IExpr _2280___mcc_h1683 = _source62.dtor_underlying;
                            DAST.Format._IUnOpFormat _2281___mcc_h1684 = _source62.dtor_format;
                            return this;
                          } else if (_source62.is_BinaryOp) {
                            Dafny.ISequence<Dafny.Rune> _2282___mcc_h1688 = _source62.dtor_op2;
                            RAST._IExpr _2283___mcc_h1689 = _source62.dtor_left;
                            RAST._IExpr _2284___mcc_h1690 = _source62.dtor_right;
                            DAST.Format._IBinOpFormat _2285___mcc_h1691 = _source62.dtor_format2;
                            return this;
                          } else if (_source62.is_TypeAscription) {
                            RAST._IExpr _2286___mcc_h1696 = _source62.dtor_left;
                            RAST._IType _2287___mcc_h1697 = _source62.dtor_tpe;
                            return this;
                          } else if (_source62.is_LiteralInt) {
                            Dafny.ISequence<Dafny.Rune> _2288___mcc_h1700 = _source62.dtor_value;
                            return this;
                          } else if (_source62.is_LiteralString) {
                            Dafny.ISequence<Dafny.Rune> _2289___mcc_h1702 = _source62.dtor_value;
                            bool _2290___mcc_h1703 = _source62.dtor_binary;
                            return this;
                          } else if (_source62.is_DeclareVar) {
                            RAST._IDeclareType _2291___mcc_h1706 = _source62.dtor_declareType;
                            Dafny.ISequence<Dafny.Rune> _2292___mcc_h1707 = _source62.dtor_name;
                            Std.Wrappers._IOption<RAST._IType> _2293___mcc_h1708 = _source62.dtor_optType;
                            Std.Wrappers._IOption<RAST._IExpr> _2294___mcc_h1709 = _source62.dtor_optRhs;
                            return this;
                          } else if (_source62.is_AssignVar) {
                            Dafny.ISequence<Dafny.Rune> _2295___mcc_h1714 = _source62.dtor_name;
                            RAST._IExpr _2296___mcc_h1715 = _source62.dtor_rhs;
                            return this;
                          } else if (_source62.is_IfExpr) {
                            RAST._IExpr _2297___mcc_h1718 = _source62.dtor_cond;
                            RAST._IExpr _2298___mcc_h1719 = _source62.dtor_thn;
                            RAST._IExpr _2299___mcc_h1720 = _source62.dtor_els;
                            return this;
                          } else if (_source62.is_Loop) {
                            Std.Wrappers._IOption<RAST._IExpr> _2300___mcc_h1724 = _source62.dtor_optCond;
                            RAST._IExpr _2301___mcc_h1725 = _source62.dtor_underlying;
                            return this;
                          } else if (_source62.is_For) {
                            Dafny.ISequence<Dafny.Rune> _2302___mcc_h1728 = _source62.dtor_name;
                            RAST._IExpr _2303___mcc_h1729 = _source62.dtor_range;
                            RAST._IExpr _2304___mcc_h1730 = _source62.dtor_body;
                            return this;
                          } else if (_source62.is_Labelled) {
                            Dafny.ISequence<Dafny.Rune> _2305___mcc_h1734 = _source62.dtor_lbl;
                            RAST._IExpr _2306___mcc_h1735 = _source62.dtor_underlying;
                            return this;
                          } else if (_source62.is_Break) {
                            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2307___mcc_h1738 = _source62.dtor_optLbl;
                            return this;
                          } else if (_source62.is_Continue) {
                            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2308___mcc_h1740 = _source62.dtor_optLbl;
                            return this;
                          } else if (_source62.is_Return) {
                            Std.Wrappers._IOption<RAST._IExpr> _2309___mcc_h1742 = _source62.dtor_optExpr;
                            return this;
                          } else if (_source62.is_CallType) {
                            RAST._IExpr _2310___mcc_h1744 = _source62.dtor_obj;
                            Dafny.ISequence<RAST._IType> _2311___mcc_h1745 = _source62.dtor_typeParameters;
                            return this;
                          } else if (_source62.is_Call) {
                            RAST._IExpr _2312___mcc_h1748 = _source62.dtor_obj;
                            Dafny.ISequence<RAST._IExpr> _2313___mcc_h1749 = _source62.dtor_arguments;
                            return this;
                          } else if (_source62.is_Select) {
                            RAST._IExpr _2314___mcc_h1752 = _source62.dtor_obj;
                            Dafny.ISequence<Dafny.Rune> _2315___mcc_h1753 = _source62.dtor_name;
                            return this;
                          } else {
                            RAST._IExpr _2316___mcc_h1756 = _source62.dtor_obj;
                            Dafny.ISequence<Dafny.Rune> _2317___mcc_h1757 = _source62.dtor_name;
                            return this;
                          }
                        }
                      }
                    }
                  } else if (_source58.is_Select) {
                    RAST._IExpr _2318___mcc_h1760 = _source58.dtor_obj;
                    Dafny.ISequence<Dafny.Rune> _2319___mcc_h1761 = _source58.dtor_name;
                    return this;
                  } else {
                    RAST._IExpr _2320___mcc_h1764 = _source58.dtor_obj;
                    Dafny.ISequence<Dafny.Rune> _2321___mcc_h1765 = _source58.dtor_name;
                    return this;
                  }
                } else {
                  return this;
                }
              }
            } else {
              return this;
            }
          } else {
            RAST._IExpr _2322___mcc_h1250 = _source57.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _2323___mcc_h1251 = _source57.dtor_name;
            return this;
          }
        } else if (_source56.is_Call) {
          RAST._IExpr _2324___mcc_h1254 = _source56.dtor_obj;
          Dafny.ISequence<RAST._IExpr> _2325___mcc_h1255 = _source56.dtor_arguments;
          return this;
        } else if (_source56.is_Select) {
          RAST._IExpr _2326___mcc_h1258 = _source56.dtor_obj;
          Dafny.ISequence<Dafny.Rune> _2327___mcc_h1259 = _source56.dtor_name;
          return this;
        } else {
          RAST._IExpr _2328___mcc_h1262 = _source56.dtor_obj;
          Dafny.ISequence<Dafny.Rune> _2329___mcc_h1263 = _source56.dtor_name;
          return this;
        }
      } else if (_source39.is_Call) {
        RAST._IExpr _2330___mcc_h1266 = _source39.dtor_obj;
        Dafny.ISequence<RAST._IExpr> _2331___mcc_h1267 = _source39.dtor_arguments;
        return this;
      } else if (_source39.is_Select) {
        RAST._IExpr _2332___mcc_h1270 = _source39.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _2333___mcc_h1271 = _source39.dtor_name;
        return this;
      } else {
        RAST._IExpr _2334___mcc_h1274 = _source39.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _2335___mcc_h1275 = _source39.dtor_name;
        return this;
      }
    }
    public bool LeftRequiresParentheses(RAST._IExpr left) {
      return ((this).printingInfo).NeedParenthesesForLeft((left).printingInfo);
    }
    public _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> LeftParentheses(RAST._IExpr left) {
      if ((this).LeftRequiresParentheses(left)) {
        return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      } else {
        return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      }
    }
    public bool RightRequiresParentheses(RAST._IExpr right) {
      return ((this).printingInfo).NeedParenthesesForRight((right).printingInfo);
    }
    public _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> RightParentheses(RAST._IExpr right) {
      if ((this).RightRequiresParentheses(right)) {
        return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      } else {
        return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> RightMostIdentifier() {
      RAST._IExpr _source64 = this;
      if (_source64.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _2336___mcc_h0 = _source64.dtor_content;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source64.is_Identifier) {
        Dafny.ISequence<Dafny.Rune> _2337___mcc_h2 = _source64.dtor_name;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source64.is_Match) {
        RAST._IExpr _2338___mcc_h4 = _source64.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _2339___mcc_h5 = _source64.dtor_cases;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source64.is_StmtExpr) {
        RAST._IExpr _2340___mcc_h8 = _source64.dtor_stmt;
        RAST._IExpr _2341___mcc_h9 = _source64.dtor_rhs;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source64.is_Block) {
        RAST._IExpr _2342___mcc_h12 = _source64.dtor_underlying;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source64.is_StructBuild) {
        RAST._IExpr _2343___mcc_h14 = _source64.dtor_underlying;
        Dafny.ISequence<RAST._IAssignIdentifier> _2344___mcc_h15 = _source64.dtor_assignments;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source64.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _2345___mcc_h18 = _source64.dtor_arguments;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source64.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _2346___mcc_h20 = _source64.dtor_op1;
        RAST._IExpr _2347___mcc_h21 = _source64.dtor_underlying;
        DAST.Format._IUnOpFormat _2348___mcc_h22 = _source64.dtor_format;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source64.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _2349___mcc_h26 = _source64.dtor_op2;
        RAST._IExpr _2350___mcc_h27 = _source64.dtor_left;
        RAST._IExpr _2351___mcc_h28 = _source64.dtor_right;
        DAST.Format._IBinOpFormat _2352___mcc_h29 = _source64.dtor_format2;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source64.is_TypeAscription) {
        RAST._IExpr _2353___mcc_h34 = _source64.dtor_left;
        RAST._IType _2354___mcc_h35 = _source64.dtor_tpe;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source64.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _2355___mcc_h38 = _source64.dtor_value;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source64.is_LiteralString) {
        Dafny.ISequence<Dafny.Rune> _2356___mcc_h40 = _source64.dtor_value;
        bool _2357___mcc_h41 = _source64.dtor_binary;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source64.is_DeclareVar) {
        RAST._IDeclareType _2358___mcc_h44 = _source64.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _2359___mcc_h45 = _source64.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _2360___mcc_h46 = _source64.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _2361___mcc_h47 = _source64.dtor_optRhs;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source64.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _2362___mcc_h52 = _source64.dtor_name;
        RAST._IExpr _2363___mcc_h53 = _source64.dtor_rhs;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source64.is_IfExpr) {
        RAST._IExpr _2364___mcc_h56 = _source64.dtor_cond;
        RAST._IExpr _2365___mcc_h57 = _source64.dtor_thn;
        RAST._IExpr _2366___mcc_h58 = _source64.dtor_els;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source64.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _2367___mcc_h62 = _source64.dtor_optCond;
        RAST._IExpr _2368___mcc_h63 = _source64.dtor_underlying;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source64.is_For) {
        Dafny.ISequence<Dafny.Rune> _2369___mcc_h66 = _source64.dtor_name;
        RAST._IExpr _2370___mcc_h67 = _source64.dtor_range;
        RAST._IExpr _2371___mcc_h68 = _source64.dtor_body;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source64.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _2372___mcc_h72 = _source64.dtor_lbl;
        RAST._IExpr _2373___mcc_h73 = _source64.dtor_underlying;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source64.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2374___mcc_h76 = _source64.dtor_optLbl;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source64.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2375___mcc_h78 = _source64.dtor_optLbl;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source64.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _2376___mcc_h80 = _source64.dtor_optExpr;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source64.is_CallType) {
        RAST._IExpr _2377___mcc_h82 = _source64.dtor_obj;
        Dafny.ISequence<RAST._IType> _2378___mcc_h83 = _source64.dtor_typeParameters;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source64.is_Call) {
        RAST._IExpr _2379___mcc_h86 = _source64.dtor_obj;
        Dafny.ISequence<RAST._IExpr> _2380___mcc_h87 = _source64.dtor_arguments;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source64.is_Select) {
        RAST._IExpr _2381___mcc_h90 = _source64.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _2382___mcc_h91 = _source64.dtor_name;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else {
        RAST._IExpr _2383___mcc_h94 = _source64.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _2384___mcc_h95 = _source64.dtor_name;
        Dafny.ISequence<Dafny.Rune> _2385_id = _2384___mcc_h95;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(_2385_id);
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      var _pat_let_tv4 = ind;
      RAST._IExpr _source65 = (this).Optimize();
      if (_source65.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _2386___mcc_h0 = _source65.dtor_content;
        RAST._IExpr _2387_r = (this).Optimize();
        return RAST.__default.AddIndent((_2387_r).dtor_content, ind);
      } else if (_source65.is_Identifier) {
        Dafny.ISequence<Dafny.Rune> _2388___mcc_h2 = _source65.dtor_name;
        Dafny.ISequence<Dafny.Rune> _2389_name = _2388___mcc_h2;
        return _2389_name;
      } else if (_source65.is_Match) {
        RAST._IExpr _2390___mcc_h4 = _source65.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _2391___mcc_h5 = _source65.dtor_cases;
        Dafny.ISequence<RAST._IMatchCase> _2392_cases = _2391___mcc_h5;
        RAST._IExpr _2393_matchee = _2390___mcc_h4;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match "), (_2393_matchee)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IMatchCase>(_2392_cases, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IMatchCase, Dafny.ISequence<Dafny.Rune>>>>((_2394_ind) => ((System.Func<RAST._IMatchCase, Dafny.ISequence<Dafny.Rune>>)((_2395_c) => {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _2394_ind), RAST.__default.IND), (_2395_c)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_2394_ind, RAST.__default.IND)));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source65.is_StmtExpr) {
        RAST._IExpr _2396___mcc_h8 = _source65.dtor_stmt;
        RAST._IExpr _2397___mcc_h9 = _source65.dtor_rhs;
        RAST._IExpr _2398_rhs = _2397___mcc_h9;
        RAST._IExpr _2399_stmt = _2396___mcc_h8;
        if (((_2399_stmt).is_RawExpr) && (((_2399_stmt).dtor_content).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))) {
          return (_2398_rhs)._ToString(ind);
        } else {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_2399_stmt)._ToString(ind), (((_2399_stmt).NoExtraSemicolonAfter()) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), (_2398_rhs)._ToString(ind));
        }
      } else if (_source65.is_Block) {
        RAST._IExpr _2400___mcc_h12 = _source65.dtor_underlying;
        RAST._IExpr _2401_underlying = _2400___mcc_h12;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n"), ind), RAST.__default.IND), (_2401_underlying)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source65.is_StructBuild) {
        RAST._IExpr _2402___mcc_h14 = _source65.dtor_underlying;
        Dafny.ISequence<RAST._IAssignIdentifier> _2403___mcc_h15 = _source65.dtor_assignments;
        Dafny.ISequence<RAST._IAssignIdentifier> _2404_assignments = _2403___mcc_h15;
        RAST._IExpr _2405_name = _2402___mcc_h14;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_2405_name)._ToString(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IAssignIdentifier>(_2404_assignments, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IAssignIdentifier, Dafny.ISequence<Dafny.Rune>>>>((_2406_ind) => ((System.Func<RAST._IAssignIdentifier, Dafny.ISequence<Dafny.Rune>>)((_2407_assignment) => {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _2406_ind), RAST.__default.IND), (_2407_assignment)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_2406_ind, RAST.__default.IND)));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), (((new BigInteger((_2404_assignments).Count)).Sign == 1) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source65.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _2408___mcc_h18 = _source65.dtor_arguments;
        Dafny.ISequence<RAST._IExpr> _2409_arguments = _2408___mcc_h18;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), RAST.__default.SeqToString<RAST._IExpr>(_2409_arguments, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>>>((_2410_ind) => ((System.Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>)((_2411_arg) => {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _2410_ind), RAST.__default.IND), (_2411_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_2410_ind, RAST.__default.IND)));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), (((new BigInteger((_2409_arguments).Count)).Sign == 1) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      } else if (_source65.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _2412___mcc_h20 = _source65.dtor_op1;
        RAST._IExpr _2413___mcc_h21 = _source65.dtor_underlying;
        DAST.Format._IUnOpFormat _2414___mcc_h22 = _source65.dtor_format;
        DAST.Format._IUnOpFormat _2415_format = _2414___mcc_h22;
        RAST._IExpr _2416_underlying = _2413___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _2417_op = _2412___mcc_h20;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs41 = ((((this).printingInfo).NeedParenthesesFor((_2416_underlying).printingInfo)) ? (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))) : (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))));
        Dafny.ISequence<Dafny.Rune> _2418_leftP = _let_tmp_rhs41.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2419_rightP = _let_tmp_rhs41.dtor__1;
        Dafny.ISequence<Dafny.Rune> _2420_leftOp = ((((_2417_op).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut"))) && (!(_2418_leftP).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_2417_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "))) : ((((_2417_op).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("?"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (_2417_op))));
        Dafny.ISequence<Dafny.Rune> _2421_rightOp = (((_2417_op).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("?"))) ? (_2417_op) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")));
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2420_leftOp, _2418_leftP), (_2416_underlying)._ToString(ind)), _2419_rightP), _2421_rightOp);
      } else if (_source65.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _2422___mcc_h26 = _source65.dtor_op2;
        RAST._IExpr _2423___mcc_h27 = _source65.dtor_left;
        RAST._IExpr _2424___mcc_h28 = _source65.dtor_right;
        DAST.Format._IBinOpFormat _2425___mcc_h29 = _source65.dtor_format2;
        DAST.Format._IBinOpFormat _2426_format = _2425___mcc_h29;
        RAST._IExpr _2427_right = _2424___mcc_h28;
        RAST._IExpr _2428_left = _2423___mcc_h27;
        Dafny.ISequence<Dafny.Rune> _2429_op2 = _2422___mcc_h26;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs42 = (this).LeftParentheses(_2428_left);
        Dafny.ISequence<Dafny.Rune> _2430_leftLeftP = _let_tmp_rhs42.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2431_leftRighP = _let_tmp_rhs42.dtor__1;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs43 = (this).RightParentheses(_2427_right);
        Dafny.ISequence<Dafny.Rune> _2432_rightLeftP = _let_tmp_rhs43.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2433_rightRightP = _let_tmp_rhs43.dtor__1;
        Dafny.ISequence<Dafny.Rune> _2434_opRendered = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), _2429_op2), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
        Dafny.ISequence<Dafny.Rune> _2435_indLeft = (((_2430_leftLeftP).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("))) ? (Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)) : (ind));
        Dafny.ISequence<Dafny.Rune> _2436_indRight = (((_2432_rightLeftP).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("))) ? (Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)) : (ind));
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2430_leftLeftP, (_2428_left)._ToString(_2435_indLeft)), _2431_leftRighP), _2434_opRendered), _2432_rightLeftP), (_2427_right)._ToString(_2436_indRight)), _2433_rightRightP);
      } else if (_source65.is_TypeAscription) {
        RAST._IExpr _2437___mcc_h34 = _source65.dtor_left;
        RAST._IType _2438___mcc_h35 = _source65.dtor_tpe;
        RAST._IType _2439_tpe = _2438___mcc_h35;
        RAST._IExpr _2440_left = _2437___mcc_h34;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs44 = (this).LeftParentheses(_2440_left);
        Dafny.ISequence<Dafny.Rune> _2441_leftLeftP = _let_tmp_rhs44.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2442_leftRightP = _let_tmp_rhs44.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2441_leftLeftP, (_2440_left)._ToString(RAST.__default.IND)), _2442_leftRightP), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2439_tpe)._ToString(RAST.__default.IND));
      } else if (_source65.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _2443___mcc_h38 = _source65.dtor_value;
        Dafny.ISequence<Dafny.Rune> _2444_number = _2443___mcc_h38;
        return _2444_number;
      } else if (_source65.is_LiteralString) {
        Dafny.ISequence<Dafny.Rune> _2445___mcc_h40 = _source65.dtor_value;
        bool _2446___mcc_h41 = _source65.dtor_binary;
        bool _2447_binary = _2446___mcc_h41;
        Dafny.ISequence<Dafny.Rune> _2448_characters = _2445___mcc_h40;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((_2447_binary) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("b")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\"")), _2448_characters), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""));
      } else if (_source65.is_DeclareVar) {
        RAST._IDeclareType _2449___mcc_h44 = _source65.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _2450___mcc_h45 = _source65.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _2451___mcc_h46 = _source65.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _2452___mcc_h47 = _source65.dtor_optRhs;
        Std.Wrappers._IOption<RAST._IExpr> _2453_optExpr = _2452___mcc_h47;
        Std.Wrappers._IOption<RAST._IType> _2454_optType = _2451___mcc_h46;
        Dafny.ISequence<Dafny.Rune> _2455_name = _2450___mcc_h45;
        RAST._IDeclareType _2456_declareType = _2449___mcc_h44;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let "), ((object.Equals(_2456_declareType, RAST.DeclareType.create_MUT())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mut ")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), _2455_name), (((_2454_optType).is_Some) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": "), ((_2454_optType).dtor_value)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), (((_2453_optExpr).is_Some) ? (Dafny.Helpers.Let<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>(((_2453_optExpr).dtor_value)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)), _pat_let6_0 => Dafny.Helpers.Let<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>(_pat_let6_0, _2457_optExprString => (((_2457_optExprString).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("= /*issue with empty RHS*/"), ((System.Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>)((_source66) => {
          if (_source66.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _2458___mcc_h98 = _source66.dtor_content;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Empty Raw expr");
          } else if (_source66.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _2459___mcc_h100 = _source66.dtor_name;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source66.is_Match) {
            RAST._IExpr _2460___mcc_h102 = _source66.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _2461___mcc_h103 = _source66.dtor_cases;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source66.is_StmtExpr) {
            RAST._IExpr _2462___mcc_h106 = _source66.dtor_stmt;
            RAST._IExpr _2463___mcc_h107 = _source66.dtor_rhs;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source66.is_Block) {
            RAST._IExpr _2464___mcc_h110 = _source66.dtor_underlying;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source66.is_StructBuild) {
            RAST._IExpr _2465___mcc_h112 = _source66.dtor_underlying;
            Dafny.ISequence<RAST._IAssignIdentifier> _2466___mcc_h113 = _source66.dtor_assignments;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source66.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _2467___mcc_h116 = _source66.dtor_arguments;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source66.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _2468___mcc_h118 = _source66.dtor_op1;
            RAST._IExpr _2469___mcc_h119 = _source66.dtor_underlying;
            DAST.Format._IUnOpFormat _2470___mcc_h120 = _source66.dtor_format;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source66.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _2471___mcc_h124 = _source66.dtor_op2;
            RAST._IExpr _2472___mcc_h125 = _source66.dtor_left;
            RAST._IExpr _2473___mcc_h126 = _source66.dtor_right;
            DAST.Format._IBinOpFormat _2474___mcc_h127 = _source66.dtor_format2;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source66.is_TypeAscription) {
            RAST._IExpr _2475___mcc_h132 = _source66.dtor_left;
            RAST._IType _2476___mcc_h133 = _source66.dtor_tpe;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source66.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _2477___mcc_h136 = _source66.dtor_value;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Empty int literal");
          } else if (_source66.is_LiteralString) {
            Dafny.ISequence<Dafny.Rune> _2478___mcc_h138 = _source66.dtor_value;
            bool _2479___mcc_h139 = _source66.dtor_binary;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Empty string literal");
          } else if (_source66.is_DeclareVar) {
            RAST._IDeclareType _2480___mcc_h142 = _source66.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _2481___mcc_h143 = _source66.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _2482___mcc_h144 = _source66.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _2483___mcc_h145 = _source66.dtor_optRhs;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source66.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _2484___mcc_h150 = _source66.dtor_name;
            RAST._IExpr _2485___mcc_h151 = _source66.dtor_rhs;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source66.is_IfExpr) {
            RAST._IExpr _2486___mcc_h154 = _source66.dtor_cond;
            RAST._IExpr _2487___mcc_h155 = _source66.dtor_thn;
            RAST._IExpr _2488___mcc_h156 = _source66.dtor_els;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source66.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _2489___mcc_h160 = _source66.dtor_optCond;
            RAST._IExpr _2490___mcc_h161 = _source66.dtor_underlying;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source66.is_For) {
            Dafny.ISequence<Dafny.Rune> _2491___mcc_h164 = _source66.dtor_name;
            RAST._IExpr _2492___mcc_h165 = _source66.dtor_range;
            RAST._IExpr _2493___mcc_h166 = _source66.dtor_body;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source66.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _2494___mcc_h170 = _source66.dtor_lbl;
            RAST._IExpr _2495___mcc_h171 = _source66.dtor_underlying;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source66.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2496___mcc_h174 = _source66.dtor_optLbl;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source66.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2497___mcc_h176 = _source66.dtor_optLbl;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source66.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _2498___mcc_h178 = _source66.dtor_optExpr;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source66.is_CallType) {
            RAST._IExpr _2499___mcc_h180 = _source66.dtor_obj;
            Dafny.ISequence<RAST._IType> _2500___mcc_h181 = _source66.dtor_typeParameters;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source66.is_Call) {
            RAST._IExpr _2501___mcc_h184 = _source66.dtor_obj;
            Dafny.ISequence<RAST._IExpr> _2502___mcc_h185 = _source66.dtor_arguments;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source66.is_Select) {
            RAST._IExpr _2503___mcc_h188 = _source66.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _2504___mcc_h189 = _source66.dtor_name;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else {
            RAST._IExpr _2505___mcc_h192 = _source66.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _2506___mcc_h193 = _source66.dtor_name;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          }
        }))((_2453_optExpr).dtor_value))) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "), _2457_optExprString)))))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else if (_source65.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _2507___mcc_h52 = _source65.dtor_name;
        RAST._IExpr _2508___mcc_h53 = _source65.dtor_rhs;
        RAST._IExpr _2509_expr = _2508___mcc_h53;
        Dafny.ISequence<Dafny.Rune> _2510_name = _2507___mcc_h52;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2510_name, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), (_2509_expr)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else if (_source65.is_IfExpr) {
        RAST._IExpr _2511___mcc_h56 = _source65.dtor_cond;
        RAST._IExpr _2512___mcc_h57 = _source65.dtor_thn;
        RAST._IExpr _2513___mcc_h58 = _source65.dtor_els;
        RAST._IExpr _2514_els = _2513___mcc_h58;
        RAST._IExpr _2515_thn = _2512___mcc_h57;
        RAST._IExpr _2516_cond = _2511___mcc_h56;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if "), (_2516_cond)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), ind), RAST.__default.IND), (_2515_thn)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}")), ((object.Equals(_2514_els, RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" else {\n"), ind), RAST.__default.IND), (_2514_els)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}")))));
      } else if (_source65.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _2517___mcc_h62 = _source65.dtor_optCond;
        RAST._IExpr _2518___mcc_h63 = _source65.dtor_underlying;
        RAST._IExpr _2519_underlying = _2518___mcc_h63;
        Std.Wrappers._IOption<RAST._IExpr> _2520_optCond = _2517___mcc_h62;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((System.Func<Std.Wrappers._IOption<RAST._IExpr>, Dafny.ISequence<Dafny.Rune>>)((_source67) => {
          if (_source67.is_None) {
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("loop");
          } else {
            RAST._IExpr _2521___mcc_h196 = _source67.dtor_value;
            RAST._IExpr _2522_c = _2521___mcc_h196;
            return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while "), (_2522_c)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_pat_let_tv4, RAST.__default.IND)));
          }
        }))(_2520_optCond), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), ind), RAST.__default.IND), (_2519_underlying)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source65.is_For) {
        Dafny.ISequence<Dafny.Rune> _2523___mcc_h66 = _source65.dtor_name;
        RAST._IExpr _2524___mcc_h67 = _source65.dtor_range;
        RAST._IExpr _2525___mcc_h68 = _source65.dtor_body;
        RAST._IExpr _2526_body = _2525___mcc_h68;
        RAST._IExpr _2527_range = _2524___mcc_h67;
        Dafny.ISequence<Dafny.Rune> _2528_name = _2523___mcc_h66;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for "), _2528_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" in ")), (_2527_range)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), ind), RAST.__default.IND), (_2526_body)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source65.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _2529___mcc_h72 = _source65.dtor_lbl;
        RAST._IExpr _2530___mcc_h73 = _source65.dtor_underlying;
        RAST._IExpr _2531_underlying = _2530___mcc_h73;
        Dafny.ISequence<Dafny.Rune> _2532_name = _2529___mcc_h72;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'"), _2532_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (_2531_underlying)._ToString(ind));
      } else if (_source65.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2533___mcc_h76 = _source65.dtor_optLbl;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2534_optLbl = _2533___mcc_h76;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source68 = _2534_optLbl;
        if (_source68.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;");
        } else {
          Dafny.ISequence<Dafny.Rune> _2535___mcc_h197 = _source68.dtor_value;
          Dafny.ISequence<Dafny.Rune> _2536_lbl = _2535___mcc_h197;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break '"), _2536_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
        }
      } else if (_source65.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2537___mcc_h78 = _source65.dtor_optLbl;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2538_optLbl = _2537___mcc_h78;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source69 = _2538_optLbl;
        if (_source69.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue;");
        } else {
          Dafny.ISequence<Dafny.Rune> _2539___mcc_h198 = _source69.dtor_value;
          Dafny.ISequence<Dafny.Rune> _2540_lbl = _2539___mcc_h198;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue '"), _2540_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
        }
      } else if (_source65.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _2541___mcc_h80 = _source65.dtor_optExpr;
        Std.Wrappers._IOption<RAST._IExpr> _2542_optExpr = _2541___mcc_h80;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), (((_2542_optExpr).is_Some) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), ((_2542_optExpr).dtor_value)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else if (_source65.is_CallType) {
        RAST._IExpr _2543___mcc_h82 = _source65.dtor_obj;
        Dafny.ISequence<RAST._IType> _2544___mcc_h83 = _source65.dtor_typeParameters;
        Dafny.ISequence<RAST._IType> _2545_tpes = _2544___mcc_h83;
        RAST._IExpr _2546_expr = _2543___mcc_h82;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs45 = (this).LeftParentheses(_2546_expr);
        Dafny.ISequence<Dafny.Rune> _2547_leftP = _let_tmp_rhs45.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2548_rightP = _let_tmp_rhs45.dtor__1;
        if ((_2545_tpes).Equals(Dafny.Sequence<RAST._IType>.FromElements())) {
          return (_2546_expr)._ToString(ind);
        } else {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2547_leftP, (_2546_expr)._ToString(ind)), _2548_rightP), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<")), RAST.__default.SeqToString<RAST._IType>(_2545_tpes, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_2549_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_2550_tpe) => {
            return (_2550_tpe)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_2549_ind, RAST.__default.IND));
          })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source65.is_Call) {
        RAST._IExpr _2551___mcc_h86 = _source65.dtor_obj;
        Dafny.ISequence<RAST._IExpr> _2552___mcc_h87 = _source65.dtor_arguments;
        Dafny.ISequence<RAST._IExpr> _2553_args = _2552___mcc_h87;
        RAST._IExpr _2554_expr = _2551___mcc_h86;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs46 = (this).LeftParentheses(_2554_expr);
        Dafny.ISequence<Dafny.Rune> _2555_leftP = _let_tmp_rhs46.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2556_rightP = _let_tmp_rhs46.dtor__1;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs47 = ((System.Func<Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>>, _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>>)((_source70) => {
          if (_source70.is_None) {
            return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          } else {
            Dafny.ISequence<Dafny.Rune> _2557___mcc_h199 = _source70.dtor_value;
            if (object.Equals(_2557___mcc_h199, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("seq!"))) {
              return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("["), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            } else if (object.Equals(_2557___mcc_h199, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("map!"))) {
              return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("["), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            } else if (object.Equals(_2557___mcc_h199, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("set!"))) {
              return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
            } else if (object.Equals(_2557___mcc_h199, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("multiset!"))) {
              return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
            } else {
              return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          }
        }))((_2554_expr).RightMostIdentifier());
        Dafny.ISequence<Dafny.Rune> _2558_leftCallP = _let_tmp_rhs47.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2559_rightCallP = _let_tmp_rhs47.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2555_leftP, (_2554_expr)._ToString(ind)), _2556_rightP), _2558_leftCallP), RAST.__default.SeqToString<RAST._IExpr>(_2553_args, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>>>((_2560_ind) => ((System.Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>)((_2561_arg) => {
          return (_2561_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_2560_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), _2559_rightCallP);
      } else if (_source65.is_Select) {
        RAST._IExpr _2562___mcc_h90 = _source65.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _2563___mcc_h91 = _source65.dtor_name;
        Dafny.ISequence<Dafny.Rune> _2564_name = _2563___mcc_h91;
        RAST._IExpr _2565_expression = _2562___mcc_h90;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs48 = (this).LeftParentheses(_2565_expression);
        Dafny.ISequence<Dafny.Rune> _2566_leftP = _let_tmp_rhs48.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2567_rightP = _let_tmp_rhs48.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2566_leftP, (_2565_expression)._ToString(ind)), _2567_rightP), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _2564_name);
      } else {
        RAST._IExpr _2568___mcc_h94 = _source65.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _2569___mcc_h95 = _source65.dtor_name;
        Dafny.ISequence<Dafny.Rune> _2570_name = _2569___mcc_h95;
        RAST._IExpr _2571_expression = _2568___mcc_h94;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs49 = (this).LeftParentheses(_2571_expression);
        Dafny.ISequence<Dafny.Rune> _2572_leftP = _let_tmp_rhs49.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2573_rightP = _let_tmp_rhs49.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2572_leftP, (_2571_expression)._ToString(ind)), _2573_rightP), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _2570_name);
      }
    }
    public RAST._IExpr Then(RAST._IExpr rhs2) {
      if ((this).is_StmtExpr) {
        return RAST.Expr.create_StmtExpr((this).dtor_stmt, ((this).dtor_rhs).Then(rhs2));
      } else {
        return RAST.Expr.create_StmtExpr(this, rhs2);
      }
    }
    public RAST._IExpr Sel(Dafny.ISequence<Dafny.Rune> name) {
      return RAST.Expr.create_Select(this, name);
    }
    public RAST._IExpr MSel(Dafny.ISequence<Dafny.Rune> name) {
      return RAST.Expr.create_MemberSelect(this, name);
    }
    public RAST._IExpr ApplyType(Dafny.ISequence<RAST._IType> typeParameters) {
      return RAST.Expr.create_CallType(this, typeParameters);
    }
    public RAST._IExpr ApplyType1(RAST._IType typeParameter) {
      return RAST.Expr.create_CallType(this, Dafny.Sequence<RAST._IType>.FromElements(typeParameter));
    }
    public RAST._IExpr Apply(Dafny.ISequence<RAST._IExpr> arguments) {
      return RAST.Expr.create_Call(this, arguments);
    }
    public RAST._IExpr Apply1(RAST._IExpr argument) {
      return RAST.Expr.create_Call(this, Dafny.Sequence<RAST._IExpr>.FromElements(argument));
    }
    public RAST._IPrintingInfo printingInfo { get {
      RAST._IExpr _source71 = this;
      if (_source71.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _2574___mcc_h0 = _source71.dtor_content;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source71.is_Identifier) {
        Dafny.ISequence<Dafny.Rune> _2575___mcc_h2 = _source71.dtor_name;
        return RAST.PrintingInfo.create_Precedence(BigInteger.One);
      } else if (_source71.is_Match) {
        RAST._IExpr _2576___mcc_h4 = _source71.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _2577___mcc_h5 = _source71.dtor_cases;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source71.is_StmtExpr) {
        RAST._IExpr _2578___mcc_h8 = _source71.dtor_stmt;
        RAST._IExpr _2579___mcc_h9 = _source71.dtor_rhs;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source71.is_Block) {
        RAST._IExpr _2580___mcc_h12 = _source71.dtor_underlying;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source71.is_StructBuild) {
        RAST._IExpr _2581___mcc_h14 = _source71.dtor_underlying;
        Dafny.ISequence<RAST._IAssignIdentifier> _2582___mcc_h15 = _source71.dtor_assignments;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source71.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _2583___mcc_h18 = _source71.dtor_arguments;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source71.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _2584___mcc_h20 = _source71.dtor_op1;
        RAST._IExpr _2585___mcc_h21 = _source71.dtor_underlying;
        DAST.Format._IUnOpFormat _2586___mcc_h22 = _source71.dtor_format;
        DAST.Format._IUnOpFormat _2587_format = _2586___mcc_h22;
        RAST._IExpr _2588_underlying = _2585___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _2589_op = _2584___mcc_h20;
        if (object.Equals(_2589_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("?"))) {
          return RAST.PrintingInfo.create_SuffixPrecedence(new BigInteger(5));
        } else if (object.Equals(_2589_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-"))) {
          return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
        } else if (object.Equals(_2589_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"))) {
          return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
        } else if (object.Equals(_2589_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!"))) {
          return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
        } else if (object.Equals(_2589_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
          return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
        } else if (object.Equals(_2589_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut"))) {
          return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
        } else {
          return RAST.PrintingInfo.create_UnknownPrecedence();
        }
      } else if (_source71.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _2590___mcc_h26 = _source71.dtor_op2;
        RAST._IExpr _2591___mcc_h27 = _source71.dtor_left;
        RAST._IExpr _2592___mcc_h28 = _source71.dtor_right;
        DAST.Format._IBinOpFormat _2593___mcc_h29 = _source71.dtor_format2;
        DAST.Format._IBinOpFormat _2594_format = _2593___mcc_h29;
        RAST._IExpr _2595_right = _2592___mcc_h28;
        RAST._IExpr _2596_left = _2591___mcc_h27;
        Dafny.ISequence<Dafny.Rune> _2597_op2 = _2590___mcc_h26;
        if (object.Equals(_2597_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(20), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2597_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(20), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2597_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("%"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(20), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2597_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(30), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2597_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(30), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2597_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<<"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(40), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2597_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(40), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2597_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(50), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2597_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("^"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(60), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2597_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("|"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(70), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2597_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2597_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2597_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2597_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2597_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2597_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2597_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&&"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(90), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2597_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("||"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(100), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2597_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".."))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2597_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("..="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2597_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2597_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2597_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2597_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2597_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2597_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("%="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2597_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2597_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("|="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2597_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("^="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2597_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<<="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2597_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(BigInteger.Zero, RAST.Associativity.create_RequiresParentheses());
        }
      } else if (_source71.is_TypeAscription) {
        RAST._IExpr _2598___mcc_h34 = _source71.dtor_left;
        RAST._IType _2599___mcc_h35 = _source71.dtor_tpe;
        RAST._IType _2600_tpe = _2599___mcc_h35;
        RAST._IExpr _2601_left = _2598___mcc_h34;
        return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(10), RAST.Associativity.create_LeftToRight());
      } else if (_source71.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _2602___mcc_h38 = _source71.dtor_value;
        return RAST.PrintingInfo.create_Precedence(BigInteger.One);
      } else if (_source71.is_LiteralString) {
        Dafny.ISequence<Dafny.Rune> _2603___mcc_h40 = _source71.dtor_value;
        bool _2604___mcc_h41 = _source71.dtor_binary;
        return RAST.PrintingInfo.create_Precedence(BigInteger.One);
      } else if (_source71.is_DeclareVar) {
        RAST._IDeclareType _2605___mcc_h44 = _source71.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _2606___mcc_h45 = _source71.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _2607___mcc_h46 = _source71.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _2608___mcc_h47 = _source71.dtor_optRhs;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source71.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _2609___mcc_h52 = _source71.dtor_name;
        RAST._IExpr _2610___mcc_h53 = _source71.dtor_rhs;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source71.is_IfExpr) {
        RAST._IExpr _2611___mcc_h56 = _source71.dtor_cond;
        RAST._IExpr _2612___mcc_h57 = _source71.dtor_thn;
        RAST._IExpr _2613___mcc_h58 = _source71.dtor_els;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source71.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _2614___mcc_h62 = _source71.dtor_optCond;
        RAST._IExpr _2615___mcc_h63 = _source71.dtor_underlying;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source71.is_For) {
        Dafny.ISequence<Dafny.Rune> _2616___mcc_h66 = _source71.dtor_name;
        RAST._IExpr _2617___mcc_h67 = _source71.dtor_range;
        RAST._IExpr _2618___mcc_h68 = _source71.dtor_body;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source71.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _2619___mcc_h72 = _source71.dtor_lbl;
        RAST._IExpr _2620___mcc_h73 = _source71.dtor_underlying;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source71.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2621___mcc_h76 = _source71.dtor_optLbl;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source71.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2622___mcc_h78 = _source71.dtor_optLbl;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source71.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _2623___mcc_h80 = _source71.dtor_optExpr;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source71.is_CallType) {
        RAST._IExpr _2624___mcc_h82 = _source71.dtor_obj;
        Dafny.ISequence<RAST._IType> _2625___mcc_h83 = _source71.dtor_typeParameters;
        return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(2), RAST.Associativity.create_LeftToRight());
      } else if (_source71.is_Call) {
        RAST._IExpr _2626___mcc_h86 = _source71.dtor_obj;
        Dafny.ISequence<RAST._IExpr> _2627___mcc_h87 = _source71.dtor_arguments;
        return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(2), RAST.Associativity.create_LeftToRight());
      } else if (_source71.is_Select) {
        RAST._IExpr _2628___mcc_h90 = _source71.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _2629___mcc_h91 = _source71.dtor_name;
        Dafny.ISequence<Dafny.Rune> _2630_name = _2629___mcc_h91;
        RAST._IExpr _2631_underlying = _2628___mcc_h90;
        return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(2), RAST.Associativity.create_LeftToRight());
      } else {
        RAST._IExpr _2632___mcc_h94 = _source71.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _2633___mcc_h95 = _source71.dtor_name;
        Dafny.ISequence<Dafny.Rune> _2634_name = _2633___mcc_h95;
        RAST._IExpr _2635_underlying = _2632___mcc_h94;
        return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(2), RAST.Associativity.create_LeftToRight());
      }
    } }
  }
  public class Expr_RawExpr : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Expr_RawExpr(Dafny.ISequence<Dafny.Rune> content) : base() {
      this._content = content;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_RawExpr(_content);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_RawExpr;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.RawExpr";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_Identifier : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Expr_Identifier(Dafny.ISequence<Dafny.Rune> name) : base() {
      this._name = name;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Identifier(_name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Identifier;
      return oth != null && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Identifier";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_Match : Expr {
    public readonly RAST._IExpr _matchee;
    public readonly Dafny.ISequence<RAST._IMatchCase> _cases;
    public Expr_Match(RAST._IExpr matchee, Dafny.ISequence<RAST._IMatchCase> cases) : base() {
      this._matchee = matchee;
      this._cases = cases;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Match(_matchee, _cases);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Match;
      return oth != null && object.Equals(this._matchee, oth._matchee) && object.Equals(this._cases, oth._cases);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._matchee));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cases));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Match";
      s += "(";
      s += Dafny.Helpers.ToString(this._matchee);
      s += ", ";
      s += Dafny.Helpers.ToString(this._cases);
      s += ")";
      return s;
    }
  }
  public class Expr_StmtExpr : Expr {
    public readonly RAST._IExpr _stmt;
    public readonly RAST._IExpr _rhs;
    public Expr_StmtExpr(RAST._IExpr stmt, RAST._IExpr rhs) : base() {
      this._stmt = stmt;
      this._rhs = rhs;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_StmtExpr(_stmt, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_StmtExpr;
      return oth != null && object.Equals(this._stmt, oth._stmt) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._stmt));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.StmtExpr";
      s += "(";
      s += Dafny.Helpers.ToString(this._stmt);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Expr_Block : Expr {
    public readonly RAST._IExpr _underlying;
    public Expr_Block(RAST._IExpr underlying) : base() {
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Block(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Block;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Block";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Expr_StructBuild : Expr {
    public readonly RAST._IExpr _underlying;
    public readonly Dafny.ISequence<RAST._IAssignIdentifier> _assignments;
    public Expr_StructBuild(RAST._IExpr underlying, Dafny.ISequence<RAST._IAssignIdentifier> assignments) : base() {
      this._underlying = underlying;
      this._assignments = assignments;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_StructBuild(_underlying, _assignments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_StructBuild;
      return oth != null && object.Equals(this._underlying, oth._underlying) && object.Equals(this._assignments, oth._assignments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._assignments));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.StructBuild";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ", ";
      s += Dafny.Helpers.ToString(this._assignments);
      s += ")";
      return s;
    }
  }
  public class Expr_Tuple : Expr {
    public readonly Dafny.ISequence<RAST._IExpr> _arguments;
    public Expr_Tuple(Dafny.ISequence<RAST._IExpr> arguments) : base() {
      this._arguments = arguments;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Tuple(_arguments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Tuple;
      return oth != null && object.Equals(this._arguments, oth._arguments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ")";
      return s;
    }
  }
  public class Expr_UnaryOp : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _op1;
    public readonly RAST._IExpr _underlying;
    public readonly DAST.Format._IUnOpFormat _format;
    public Expr_UnaryOp(Dafny.ISequence<Dafny.Rune> op1, RAST._IExpr underlying, DAST.Format._IUnOpFormat format) : base() {
      this._op1 = op1;
      this._underlying = underlying;
      this._format = format;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_UnaryOp(_op1, _underlying, _format);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_UnaryOp;
      return oth != null && object.Equals(this._op1, oth._op1) && object.Equals(this._underlying, oth._underlying) && object.Equals(this._format, oth._format);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.UnaryOp";
      s += "(";
      s += this._op1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format);
      s += ")";
      return s;
    }
  }
  public class Expr_BinaryOp : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _op2;
    public readonly RAST._IExpr _left;
    public readonly RAST._IExpr _right;
    public readonly DAST.Format._IBinOpFormat _format2;
    public Expr_BinaryOp(Dafny.ISequence<Dafny.Rune> op2, RAST._IExpr left, RAST._IExpr right, DAST.Format._IBinOpFormat format2) : base() {
      this._op2 = op2;
      this._left = left;
      this._right = right;
      this._format2 = format2;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_BinaryOp(_op2, _left, _right, _format2);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_BinaryOp;
      return oth != null && object.Equals(this._op2, oth._op2) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right) && object.Equals(this._format2, oth._format2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op2));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format2));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.BinaryOp";
      s += "(";
      s += this._op2.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format2);
      s += ")";
      return s;
    }
  }
  public class Expr_TypeAscription : Expr {
    public readonly RAST._IExpr _left;
    public readonly RAST._IType _tpe;
    public Expr_TypeAscription(RAST._IExpr left, RAST._IType tpe) : base() {
      this._left = left;
      this._tpe = tpe;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_TypeAscription(_left, _tpe);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_TypeAscription;
      return oth != null && object.Equals(this._left, oth._left) && object.Equals(this._tpe, oth._tpe);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.TypeAscription";
      s += "(";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ")";
      return s;
    }
  }
  public class Expr_LiteralInt : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _value;
    public Expr_LiteralInt(Dafny.ISequence<Dafny.Rune> @value) : base() {
      this._value = @value;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_LiteralInt(_value);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_LiteralInt;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.LiteralInt";
      s += "(";
      s += this._value.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_LiteralString : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _value;
    public readonly bool _binary;
    public Expr_LiteralString(Dafny.ISequence<Dafny.Rune> @value, bool binary) : base() {
      this._value = @value;
      this._binary = binary;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_LiteralString(_value, _binary);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_LiteralString;
      return oth != null && object.Equals(this._value, oth._value) && this._binary == oth._binary;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._binary));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.LiteralString";
      s += "(";
      s += this._value.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._binary);
      s += ")";
      return s;
    }
  }
  public class Expr_DeclareVar : Expr {
    public readonly RAST._IDeclareType _declareType;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Std.Wrappers._IOption<RAST._IType> _optType;
    public readonly Std.Wrappers._IOption<RAST._IExpr> _optRhs;
    public Expr_DeclareVar(RAST._IDeclareType declareType, Dafny.ISequence<Dafny.Rune> name, Std.Wrappers._IOption<RAST._IType> optType, Std.Wrappers._IOption<RAST._IExpr> optRhs) : base() {
      this._declareType = declareType;
      this._name = name;
      this._optType = optType;
      this._optRhs = optRhs;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_DeclareVar(_declareType, _name, _optType, _optRhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_DeclareVar;
      return oth != null && object.Equals(this._declareType, oth._declareType) && object.Equals(this._name, oth._name) && object.Equals(this._optType, oth._optType) && object.Equals(this._optRhs, oth._optRhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._declareType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optRhs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.DeclareVar";
      s += "(";
      s += Dafny.Helpers.ToString(this._declareType);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._optType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._optRhs);
      s += ")";
      return s;
    }
  }
  public class Expr_AssignVar : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IExpr _rhs;
    public Expr_AssignVar(Dafny.ISequence<Dafny.Rune> name, RAST._IExpr rhs) : base() {
      this._name = name;
      this._rhs = rhs;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_AssignVar(_name, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_AssignVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.AssignVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Expr_IfExpr : Expr {
    public readonly RAST._IExpr _cond;
    public readonly RAST._IExpr _thn;
    public readonly RAST._IExpr _els;
    public Expr_IfExpr(RAST._IExpr cond, RAST._IExpr thn, RAST._IExpr els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_IfExpr(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_IfExpr;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.IfExpr";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expr_Loop : Expr {
    public readonly Std.Wrappers._IOption<RAST._IExpr> _optCond;
    public readonly RAST._IExpr _underlying;
    public Expr_Loop(Std.Wrappers._IOption<RAST._IExpr> optCond, RAST._IExpr underlying) : base() {
      this._optCond = optCond;
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Loop(_optCond, _underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Loop;
      return oth != null && object.Equals(this._optCond, oth._optCond) && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optCond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Loop";
      s += "(";
      s += Dafny.Helpers.ToString(this._optCond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Expr_For : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IExpr _range;
    public readonly RAST._IExpr _body;
    public Expr_For(Dafny.ISequence<Dafny.Rune> name, RAST._IExpr range, RAST._IExpr body) : base() {
      this._name = name;
      this._range = range;
      this._body = body;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_For(_name, _range, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_For;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._range, oth._range) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._range));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.For";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._range);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expr_Labelled : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly RAST._IExpr _underlying;
    public Expr_Labelled(Dafny.ISequence<Dafny.Rune> lbl, RAST._IExpr underlying) : base() {
      this._lbl = lbl;
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Labelled(_lbl, _underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Labelled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Labelled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Expr_Break : Expr {
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _optLbl;
    public Expr_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> optLbl) : base() {
      this._optLbl = optLbl;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Break(_optLbl);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Break;
      return oth != null && object.Equals(this._optLbl, oth._optLbl);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optLbl));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._optLbl);
      s += ")";
      return s;
    }
  }
  public class Expr_Continue : Expr {
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _optLbl;
    public Expr_Continue(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> optLbl) : base() {
      this._optLbl = optLbl;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Continue(_optLbl);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Continue;
      return oth != null && object.Equals(this._optLbl, oth._optLbl);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optLbl));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Continue";
      s += "(";
      s += Dafny.Helpers.ToString(this._optLbl);
      s += ")";
      return s;
    }
  }
  public class Expr_Return : Expr {
    public readonly Std.Wrappers._IOption<RAST._IExpr> _optExpr;
    public Expr_Return(Std.Wrappers._IOption<RAST._IExpr> optExpr) : base() {
      this._optExpr = optExpr;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Return(_optExpr);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Return;
      return oth != null && object.Equals(this._optExpr, oth._optExpr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optExpr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._optExpr);
      s += ")";
      return s;
    }
  }
  public class Expr_CallType : Expr {
    public readonly RAST._IExpr _obj;
    public readonly Dafny.ISequence<RAST._IType> _typeParameters;
    public Expr_CallType(RAST._IExpr obj, Dafny.ISequence<RAST._IType> typeParameters) : base() {
      this._obj = obj;
      this._typeParameters = typeParameters;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_CallType(_obj, _typeParameters);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_CallType;
      return oth != null && object.Equals(this._obj, oth._obj) && object.Equals(this._typeParameters, oth._typeParameters);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._obj));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParameters));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.CallType";
      s += "(";
      s += Dafny.Helpers.ToString(this._obj);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParameters);
      s += ")";
      return s;
    }
  }
  public class Expr_Call : Expr {
    public readonly RAST._IExpr _obj;
    public readonly Dafny.ISequence<RAST._IExpr> _arguments;
    public Expr_Call(RAST._IExpr obj, Dafny.ISequence<RAST._IExpr> arguments) : base() {
      this._obj = obj;
      this._arguments = arguments;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Call(_obj, _arguments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Call;
      return oth != null && object.Equals(this._obj, oth._obj) && object.Equals(this._arguments, oth._arguments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._obj));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._obj);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ")";
      return s;
    }
  }
  public class Expr_Select : Expr {
    public readonly RAST._IExpr _obj;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Expr_Select(RAST._IExpr obj, Dafny.ISequence<Dafny.Rune> name) : base() {
      this._obj = obj;
      this._name = name;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Select(_obj, _name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Select;
      return oth != null && object.Equals(this._obj, oth._obj) && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._obj));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._obj);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_MemberSelect : Expr {
    public readonly RAST._IExpr _obj;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Expr_MemberSelect(RAST._IExpr obj, Dafny.ISequence<Dafny.Rune> name) : base() {
      this._obj = obj;
      this._name = name;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_MemberSelect(_obj, _name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_MemberSelect;
      return oth != null && object.Equals(this._obj, oth._obj) && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._obj));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.MemberSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._obj);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IFn {
    bool is_Fn { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    Dafny.ISequence<RAST._IFormal> dtor_formals { get; }
    Std.Wrappers._IOption<RAST._IType> dtor_returnType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_where { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_body { get; }
    _IFn DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Fn : _IFn {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly Dafny.ISequence<RAST._IFormal> _formals;
    public readonly Std.Wrappers._IOption<RAST._IType> _returnType;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Std.Wrappers._IOption<RAST._IExpr> _body;
    public Fn(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IFormal> formals, Std.Wrappers._IOption<RAST._IType> returnType, Dafny.ISequence<Dafny.Rune> @where, Std.Wrappers._IOption<RAST._IExpr> body) {
      this._name = name;
      this._typeParams = typeParams;
      this._formals = formals;
      this._returnType = returnType;
      this._where = @where;
      this._body = body;
    }
    public _IFn DowncastClone() {
      if (this is _IFn dt) { return dt; }
      return new Fn(_name, _typeParams, _formals, _returnType, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Fn;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._formals, oth._formals) && object.Equals(this._returnType, oth._returnType) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formals));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._returnType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Fn.Fn";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._formals);
      s += ", ";
      s += Dafny.Helpers.ToString(this._returnType);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly RAST._IFn theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._ITypeParam>.Empty, Dafny.Sequence<RAST._IFormal>.Empty, Std.Wrappers.Option<RAST._IType>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Std.Wrappers.Option<RAST._IExpr>.Default());
    public static RAST._IFn Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IFn> _TYPE = new Dafny.TypeDescriptor<RAST._IFn>(RAST.Fn.Default());
    public static Dafny.TypeDescriptor<RAST._IFn> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFn create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IFormal> formals, Std.Wrappers._IOption<RAST._IType> returnType, Dafny.ISequence<Dafny.Rune> @where, Std.Wrappers._IOption<RAST._IExpr> body) {
      return new Fn(name, typeParams, formals, returnType, @where, body);
    }
    public static _IFn create_Fn(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IFormal> formals, Std.Wrappers._IOption<RAST._IType> returnType, Dafny.ISequence<Dafny.Rune> @where, Std.Wrappers._IOption<RAST._IExpr> body) {
      return create(name, typeParams, formals, returnType, @where, body);
    }
    public bool is_Fn { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<RAST._IFormal> dtor_formals {
      get {
        return this._formals;
      }
    }
    public Std.Wrappers._IOption<RAST._IType> dtor_returnType {
      get {
        return this._returnType;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_where {
      get {
        return this._where;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      var _pat_let_tv5 = ind;
      var _pat_let_tv6 = ind;
      var _pat_let_tv7 = ind;
      var _pat_let_tv8 = ind;
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn "), (this).dtor_name), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), RAST.__default.SeqToString<RAST._IFormal>((this).dtor_formals, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>>>((_2636_ind) => ((System.Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>)((_2637_formal) => {
        return (_2637_formal)._ToString(_2636_ind);
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), ((System.Func<Std.Wrappers._IOption<RAST._IType>, Dafny.ISequence<Dafny.Rune>>)((_source72) => {
        if (_source72.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
        } else {
          RAST._IType _2638___mcc_h0 = _source72.dtor_value;
          RAST._IType _2639_t = _2638___mcc_h0;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" -> "), (_2639_t)._ToString(_pat_let_tv5));
        }
      }))((this).dtor_returnType)), ((((this).dtor_where).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (this).dtor_where)))), ((System.Func<Std.Wrappers._IOption<RAST._IExpr>, Dafny.ISequence<Dafny.Rune>>)((_source73) => {
        if (_source73.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";");
        } else {
          RAST._IExpr _2640___mcc_h2 = _source73.dtor_value;
          RAST._IExpr _2641_body = _2640___mcc_h2;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"), _pat_let_tv6), RAST.__default.IND), (_2641_body)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_pat_let_tv7, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _pat_let_tv8), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        }
      }))((this).dtor_body));
    }
  }
} // end of namespace RAST
namespace DCOMP {

  public partial class __default {
    public static bool is__tuple__numeric(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(2))) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(BigInteger.One)))) && (((new BigInteger((i).Count)) == (new BigInteger(2))) || (((new BigInteger((i).Count)) == (new BigInteger(3))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(2))))));
    }
    public static bool has__special(Dafny.ISequence<Dafny.Rune> i) {
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return false;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('#'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        if ((new BigInteger(2)) <= (new BigInteger((i).Count))) {
          if (((i).Select(BigInteger.One)) != (new Dafny.Rune('_'))) {
            return true;
          } else {
            Dafny.ISequence<Dafny.Rune> _in113 = (i).Drop(new BigInteger(2));
            i = _in113;
            goto TAIL_CALL_START;
          }
        } else {
          return true;
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _in114 = (i).Drop(BigInteger.One);
        i = _in114;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> idiomatic__rust(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _2642___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_2642___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        _2642___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_2642___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
        Dafny.ISequence<Dafny.Rune> _in115 = (i).Drop(new BigInteger(2));
        i = _in115;
        goto TAIL_CALL_START;
      } else {
        _2642___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_2642___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in116 = (i).Drop(BigInteger.One);
        i = _in116;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> replaceDots(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _2643___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_2643___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        _2643___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_2643___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_d"));
        Dafny.ISequence<Dafny.Rune> _in117 = (i).Drop(BigInteger.One);
        i = _in117;
        goto TAIL_CALL_START;
      } else {
        _2643___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_2643___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in118 = (i).Drop(BigInteger.One);
        i = _in118;
        goto TAIL_CALL_START;
      }
    }
    public static bool is__tuple__builder(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(9))) && (((i).Take(new BigInteger(8))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("___hMake")))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(8))))) && (((new BigInteger((i).Count)) == (new BigInteger(9))) || (((new BigInteger((i).Count)) == (new BigInteger(10))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(9))))));
    }
    public static Dafny.ISequence<Dafny.Rune> better__tuple__builder__name(Dafny.ISequence<Dafny.Rune> i) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_T"), (i).Drop(new BigInteger(8)));
    }
    public static bool is__dafny__generated__id(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)).Sign == 1) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && (!(DCOMP.__default.has__special((i).Drop(BigInteger.One))))) && (!((new BigInteger((i).Count)) >= (new BigInteger(2))) || (((i).Select(BigInteger.One)) != (new Dafny.Rune('T'))));
    }
    public static bool is__idiomatic__rust__id(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)).Sign == 1) && (!(DCOMP.__default.has__special(i)))) && (!(DCOMP.__default.reserved__rust).Contains(i))) && (!(DCOMP.__default.reserved__rust__need__prefix).Contains(i));
    }
    public static Dafny.ISequence<Dafny.Rune> escapeIdent(Dafny.ISequence<Dafny.Rune> i) {
      if (DCOMP.__default.is__tuple__numeric(i)) {
        return i;
      } else if (DCOMP.__default.is__tuple__builder(i)) {
        return DCOMP.__default.better__tuple__builder__name(i);
      } else if ((DCOMP.__default.reserved__rust).Contains(i)) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#"), i);
      } else if (DCOMP.__default.is__idiomatic__rust__id(i)) {
        return DCOMP.__default.idiomatic__rust(i);
      } else if (DCOMP.__default.is__dafny__generated__id(i)) {
        return i;
      } else {
        Dafny.ISequence<Dafny.Rune> _2644_r = DCOMP.__default.replaceDots(i);
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#_"), _2644_r);
      }
    }
    public static Dafny.ISet<Dafny.ISequence<Dafny.Rune>> reserved__rust { get {
      return Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("async"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("await"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("const"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("crate"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("else"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("enum"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("loop"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mut"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("ref"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("static"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("struct"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("trait"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("union"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsafe"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("use"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("where"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Keywords"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("The"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("abstract"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("become"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("box"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("do"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("final"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("macro"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("override"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("priv"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("try"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("typeof"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsized"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("virtual"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("yield"));
    } }
    public static Dafny.ISet<Dafny.ISequence<Dafny.Rune>> reserved__rust__need__prefix { get {
      return Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u8"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u16"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u32"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u64"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u128"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i8"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i16"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i32"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i64"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i128"));
    } }
    public static bool UnicodeChars { get {
      return true;
    } }
    public static Dafny.ISequence<Dafny.Rune> DafnyChar { get {
      if (DCOMP.__default.UnicodeChars) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyChar");
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyCharUTF16");
      }
    } }
    public static RAST._IType DafnyCharUnderlying { get {
      if (DCOMP.__default.UnicodeChars) {
        return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char"));
      } else {
        return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u16"));
      }
    } }
    public static Dafny.ISequence<Dafny.Rune> IND { get {
      return RAST.__default.IND;
    } }
  }

  public interface _IOwnership {
    bool is_OwnershipOwned { get; }
    bool is_OwnershipBorrowed { get; }
    bool is_OwnershipBorrowedMut { get; }
    bool is_OwnershipAutoBorrowed { get; }
    _IOwnership DowncastClone();
  }
  public abstract class Ownership : _IOwnership {
    public Ownership() {
    }
    private static readonly DCOMP._IOwnership theDefault = create_OwnershipOwned();
    public static DCOMP._IOwnership Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DCOMP._IOwnership> _TYPE = new Dafny.TypeDescriptor<DCOMP._IOwnership>(DCOMP.Ownership.Default());
    public static Dafny.TypeDescriptor<DCOMP._IOwnership> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IOwnership create_OwnershipOwned() {
      return new Ownership_OwnershipOwned();
    }
    public static _IOwnership create_OwnershipBorrowed() {
      return new Ownership_OwnershipBorrowed();
    }
    public static _IOwnership create_OwnershipBorrowedMut() {
      return new Ownership_OwnershipBorrowedMut();
    }
    public static _IOwnership create_OwnershipAutoBorrowed() {
      return new Ownership_OwnershipAutoBorrowed();
    }
    public bool is_OwnershipOwned { get { return this is Ownership_OwnershipOwned; } }
    public bool is_OwnershipBorrowed { get { return this is Ownership_OwnershipBorrowed; } }
    public bool is_OwnershipBorrowedMut { get { return this is Ownership_OwnershipBorrowedMut; } }
    public bool is_OwnershipAutoBorrowed { get { return this is Ownership_OwnershipAutoBorrowed; } }
    public static System.Collections.Generic.IEnumerable<_IOwnership> AllSingletonConstructors {
      get {
        yield return Ownership.create_OwnershipOwned();
        yield return Ownership.create_OwnershipBorrowed();
        yield return Ownership.create_OwnershipBorrowedMut();
        yield return Ownership.create_OwnershipAutoBorrowed();
      }
    }
    public abstract _IOwnership DowncastClone();
  }
  public class Ownership_OwnershipOwned : Ownership {
    public Ownership_OwnershipOwned() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipOwned();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipOwned;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipOwned";
      return s;
    }
  }
  public class Ownership_OwnershipBorrowed : Ownership {
    public Ownership_OwnershipBorrowed() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipBorrowed();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipBorrowed;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipBorrowed";
      return s;
    }
  }
  public class Ownership_OwnershipBorrowedMut : Ownership {
    public Ownership_OwnershipBorrowedMut() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipBorrowedMut();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipBorrowedMut;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipBorrowedMut";
      return s;
    }
  }
  public class Ownership_OwnershipAutoBorrowed : Ownership {
    public Ownership_OwnershipAutoBorrowed() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipAutoBorrowed();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipAutoBorrowed;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipAutoBorrowed";
      return s;
    }
  }

  public interface _IEnvironment {
    bool is_Environment { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_names { get; }
    Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMP._IOwnership> dtor_ownerships { get; }
    _IEnvironment DowncastClone();
    bool IsBorrowed(Dafny.ISequence<Dafny.Rune> name);
    bool IsBorrowedMut(Dafny.ISequence<Dafny.Rune> name);
    DCOMP._IEnvironment Add(Dafny.ISequence<Dafny.Rune> name, DCOMP._IOwnership ownership);
  }
  public class Environment : _IEnvironment {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _names;
    public readonly Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMP._IOwnership> _ownerships;
    public Environment(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> names, Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMP._IOwnership> ownerships) {
      this._names = names;
      this._ownerships = ownerships;
    }
    public _IEnvironment DowncastClone() {
      if (this is _IEnvironment dt) { return dt; }
      return new Environment(_names, _ownerships);
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Environment;
      return oth != null && object.Equals(this._names, oth._names) && object.Equals(this._ownerships, oth._ownerships);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._names));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ownerships));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Environment.Environment";
      s += "(";
      s += Dafny.Helpers.ToString(this._names);
      s += ", ";
      s += Dafny.Helpers.ToString(this._ownerships);
      s += ")";
      return s;
    }
    private static readonly DCOMP._IEnvironment theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.Empty);
    public static DCOMP._IEnvironment Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DCOMP._IEnvironment> _TYPE = new Dafny.TypeDescriptor<DCOMP._IEnvironment>(DCOMP.Environment.Default());
    public static Dafny.TypeDescriptor<DCOMP._IEnvironment> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEnvironment create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> names, Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMP._IOwnership> ownerships) {
      return new Environment(names, ownerships);
    }
    public static _IEnvironment create_Environment(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> names, Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMP._IOwnership> ownerships) {
      return create(names, ownerships);
    }
    public bool is_Environment { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_names {
      get {
        return this._names;
      }
    }
    public Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMP._IOwnership> dtor_ownerships {
      get {
        return this._ownerships;
      }
    }
    public static DCOMP._IEnvironment Empty() {
      return DCOMP.Environment.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.FromElements());
    }
    public bool IsBorrowed(Dafny.ISequence<Dafny.Rune> name) {
      return (((this).dtor_ownerships).Contains(name)) && (object.Equals(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.Select((this).dtor_ownerships,name), DCOMP.Ownership.create_OwnershipBorrowed()));
    }
    public bool IsBorrowedMut(Dafny.ISequence<Dafny.Rune> name) {
      return (((this).dtor_ownerships).Contains(name)) && (object.Equals(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.Select((this).dtor_ownerships,name), DCOMP.Ownership.create_OwnershipBorrowedMut()));
    }
    public DCOMP._IEnvironment Add(Dafny.ISequence<Dafny.Rune> name, DCOMP._IOwnership ownership)
    {
      return DCOMP.Environment.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat((this).dtor_names, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(name)), Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.Update((this).dtor_ownerships, name, ownership));
    }
  }

  public partial class COMP {
    public COMP() {
    }
    public static RAST._IMod GenModule(DAST._IModule mod, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      RAST._IMod s = RAST.Mod.Default();
      Dafny.ISequence<RAST._IModDecl> _2645_body;
      Dafny.ISequence<RAST._IModDecl> _out15;
      _out15 = DCOMP.COMP.GenModuleBody((mod).dtor_body, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((mod).dtor_name)));
      _2645_body = _out15;
      s = (((mod).dtor_isExtern) ? (RAST.Mod.create_ExternMod(DCOMP.__default.escapeIdent((mod).dtor_name))) : (RAST.Mod.create_Mod(DCOMP.__default.escapeIdent((mod).dtor_name), _2645_body)));
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenModuleBody(Dafny.ISequence<DAST._IModuleItem> body, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      s = Dafny.Sequence<RAST._IModDecl>.FromElements();
      BigInteger _2646_i;
      _2646_i = BigInteger.Zero;
      while ((_2646_i) < (new BigInteger((body).Count))) {
        Dafny.ISequence<RAST._IModDecl> _2647_generated = Dafny.Sequence<RAST._IModDecl>.Empty;
        DAST._IModuleItem _source74 = (body).Select(_2646_i);
        if (_source74.is_Module) {
          DAST._IModule _2648___mcc_h0 = _source74.dtor_Module_a0;
          DAST._IModule _2649_m = _2648___mcc_h0;
          RAST._IMod _2650_mm;
          RAST._IMod _out16;
          _out16 = DCOMP.COMP.GenModule(_2649_m, containingPath);
          _2650_mm = _out16;
          _2647_generated = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ModDecl(_2650_mm));
        } else if (_source74.is_Class) {
          DAST._IClass _2651___mcc_h1 = _source74.dtor_Class_a0;
          DAST._IClass _2652_c = _2651___mcc_h1;
          Dafny.ISequence<RAST._IModDecl> _out17;
          _out17 = DCOMP.COMP.GenClass(_2652_c, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((_2652_c).dtor_name)));
          _2647_generated = _out17;
        } else if (_source74.is_Trait) {
          DAST._ITrait _2653___mcc_h2 = _source74.dtor_Trait_a0;
          DAST._ITrait _2654_t = _2653___mcc_h2;
          Dafny.ISequence<Dafny.Rune> _2655_tt;
          Dafny.ISequence<Dafny.Rune> _out18;
          _out18 = DCOMP.COMP.GenTrait(_2654_t, containingPath);
          _2655_tt = _out18;
          _2647_generated = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_RawDecl(_2655_tt));
        } else if (_source74.is_Newtype) {
          DAST._INewtype _2656___mcc_h3 = _source74.dtor_Newtype_a0;
          DAST._INewtype _2657_n = _2656___mcc_h3;
          Dafny.ISequence<RAST._IModDecl> _out19;
          _out19 = DCOMP.COMP.GenNewtype(_2657_n);
          _2647_generated = _out19;
        } else {
          DAST._IDatatype _2658___mcc_h4 = _source74.dtor_Datatype_a0;
          DAST._IDatatype _2659_d = _2658___mcc_h4;
          Dafny.ISequence<RAST._IModDecl> _out20;
          _out20 = DCOMP.COMP.GenDatatype(_2659_d);
          _2647_generated = _out20;
        }
        s = Dafny.Sequence<RAST._IModDecl>.Concat(s, _2647_generated);
        _2646_i = (_2646_i) + (BigInteger.One);
      }
      return s;
    }
    public static void GenTypeParameters(Dafny.ISequence<DAST._IType> @params, out Dafny.ISet<DAST._IType> typeParamsSet, out Dafny.ISequence<RAST._ITypeParam> typeParams, out Dafny.ISequence<RAST._ITypeParam> constrainedTypeParams, out Dafny.ISequence<Dafny.Rune> whereConstraints)
    {
      typeParamsSet = Dafny.Set<DAST._IType>.Empty;
      typeParams = Dafny.Sequence<RAST._ITypeParam>.Empty;
      constrainedTypeParams = Dafny.Sequence<RAST._ITypeParam>.Empty;
      whereConstraints = Dafny.Sequence<Dafny.Rune>.Empty;
      typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      typeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      constrainedTypeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _2660_tpI;
      _2660_tpI = BigInteger.Zero;
      if ((new BigInteger((@params).Count)).Sign == 1) {
        while ((_2660_tpI) < (new BigInteger((@params).Count))) {
          DAST._IType _2661_tp;
          _2661_tp = (@params).Select(_2660_tpI);
          typeParamsSet = Dafny.Set<DAST._IType>.Union(typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_2661_tp));
          RAST._IType _2662_genTp;
          RAST._IType _out21;
          _out21 = DCOMP.COMP.GenType(_2661_tp, false, false);
          _2662_genTp = _out21;
          typeParams = Dafny.Sequence<RAST._ITypeParam>.Concat(typeParams, Dafny.Sequence<RAST._ITypeParam>.FromElements(RAST.TypeParam.create((_2662_genTp)._ToString(DCOMP.__default.IND), Dafny.Sequence<RAST._IType>.FromElements())));
          _2660_tpI = (_2660_tpI) + (BigInteger.One);
        }
      }
      Dafny.ISequence<RAST._IType> _2663_baseConstraints;
      _2663_baseConstraints = Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.CloneTrait, RAST.__default.DafnyPrintTrait, RAST.__default.StaticTrait);
      constrainedTypeParams = RAST.TypeParam.AddConstraintsMultiple(typeParams, _2663_baseConstraints);
    }
    public static Dafny.ISequence<RAST._IModDecl> GenClass(DAST._IClass c, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _2664_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _2665_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _2666_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _2667_whereConstraints;
      Dafny.ISet<DAST._IType> _out22;
      Dafny.ISequence<RAST._ITypeParam> _out23;
      Dafny.ISequence<RAST._ITypeParam> _out24;
      Dafny.ISequence<Dafny.Rune> _out25;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out22, out _out23, out _out24, out _out25);
      _2664_typeParamsSet = _out22;
      _2665_sTypeParams = _out23;
      _2666_sConstrainedTypeParams = _out24;
      _2667_whereConstraints = _out25;
      Dafny.ISequence<Dafny.Rune> _2668_constrainedTypeParams;
      _2668_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_2666_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      Dafny.ISequence<RAST._IFormal> _2669_fields;
      _2669_fields = Dafny.Sequence<RAST._IFormal>.FromElements();
      Dafny.ISequence<RAST._IAssignIdentifier> _2670_fieldInits;
      _2670_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
      BigInteger _2671_fieldI;
      _2671_fieldI = BigInteger.Zero;
      while ((_2671_fieldI) < (new BigInteger(((c).dtor_fields).Count))) {
        DAST._IField _2672_field;
        _2672_field = ((c).dtor_fields).Select(_2671_fieldI);
        RAST._IType _2673_fieldType;
        RAST._IType _out26;
        _out26 = DCOMP.COMP.GenType(((_2672_field).dtor_formal).dtor_typ, false, false);
        _2673_fieldType = _out26;
        _2669_fields = Dafny.Sequence<RAST._IFormal>.Concat(_2669_fields, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub "), DCOMP.__default.escapeIdent(((_2672_field).dtor_formal).dtor_name)), RAST.Type.create_TypeApp(RAST.__default.refcell__type, Dafny.Sequence<RAST._IType>.FromElements(_2673_fieldType)))));
        Std.Wrappers._IOption<DAST._IExpression> _source75 = (_2672_field).dtor_defaultValue;
        if (_source75.is_None) {
          {
            RAST._IExpr _2674_RefCellNew;
            _2674_RefCellNew = (((RAST.__default.std).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cell"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("RefCell"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"));
            RAST._IExpr _2675_default;
            _2675_default = (((RAST.__default.std).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Default"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"));
            _2670_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_2670_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent(((_2672_field).dtor_formal).dtor_name), (_2674_RefCellNew).Apply1((_2675_default).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())))));
          }
        } else {
          DAST._IExpression _2676___mcc_h0 = _source75.dtor_value;
          DAST._IExpression _2677_e = _2676___mcc_h0;
          {
            RAST._IExpr _2678_expr;
            DCOMP._IOwnership _2679___v35;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2680___v36;
            RAST._IExpr _out27;
            DCOMP._IOwnership _out28;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out29;
            DCOMP.COMP.GenExpr(_2677_e, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), DCOMP.Environment.Empty(), DCOMP.Ownership.create_OwnershipOwned(), out _out27, out _out28, out _out29);
            _2678_expr = _out27;
            _2679___v35 = _out28;
            _2680___v36 = _out29;
            RAST._IExpr _2681_RefCellNew;
            _2681_RefCellNew = (((RAST.__default.std).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cell"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("RefCell"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"));
            _2670_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_2670_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent(((_2672_field).dtor_formal).dtor_name), (_2681_RefCellNew).Apply1(_2678_expr))));
          }
        }
        _2671_fieldI = (_2671_fieldI) + (BigInteger.One);
      }
      BigInteger _2682_typeParamI;
      _2682_typeParamI = BigInteger.Zero;
      while ((_2682_typeParamI) < (new BigInteger(((c).dtor_typeParams).Count))) {
        RAST._IType _2683_tpeGen;
        RAST._IType _out30;
        _out30 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_2682_typeParamI), false, false);
        _2683_tpeGen = _out30;
        _2669_fields = Dafny.Sequence<RAST._IFormal>.Concat(_2669_fields, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_2682_typeParamI)), RAST.Type.create_TypeApp(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("marker"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PhantomData")), Dafny.Sequence<RAST._IType>.FromElements(_2683_tpeGen)))));
        _2670_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_2670_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_2682_typeParamI)), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData")))));
        _2682_typeParamI = (_2682_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _2684_datatypeName;
      _2684_datatypeName = DCOMP.__default.escapeIdent((c).dtor_name);
      RAST._IStruct _2685_struct;
      _2685_struct = RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), _2684_datatypeName, _2665_sTypeParams, RAST.Formals.create_NamedFormals(_2669_fields));
      Dafny.ISequence<RAST._IType> _2686_typeParamsAsTypes;
      _2686_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_2687_typeParam) => {
        return RAST.__default.RawType((_2687_typeParam).dtor_content);
      })), _2665_sTypeParams);
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(_2685_struct));
      Dafny.ISequence<RAST._IImplMember> _2688_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _2689_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out31;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out32;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(DAST.DatatypeType.create(path, (c).dtor_attributes))), _2664_typeParamsSet, out _out31, out _out32);
      _2688_implBodyRaw = _out31;
      _2689_traitBodies = _out32;
      Dafny.ISequence<RAST._IImplMember> _2690_implBody;
      _2690_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PUB(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_StructBuild(RAST.Expr.create_Identifier(_2684_datatypeName), _2670_fieldInits))))), _2688_implBodyRaw);
      RAST._IImpl _2691_i;
      _2691_i = RAST.Impl.create_Impl(_2666_sConstrainedTypeParams, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2684_datatypeName), _2686_typeParamsAsTypes), _2667_whereConstraints, _2690_implBody);
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_2691_i)));
      if ((new BigInteger(((c).dtor_superClasses).Count)).Sign == 1) {
        BigInteger _2692_i;
        _2692_i = BigInteger.Zero;
        while ((_2692_i) < (new BigInteger(((c).dtor_superClasses).Count))) {
          DAST._IType _2693_superClass;
          _2693_superClass = ((c).dtor_superClasses).Select(_2692_i);
          DAST._IType _source76 = _2693_superClass;
          if (_source76.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2694___mcc_h1 = _source76.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _2695___mcc_h2 = _source76.dtor_typeArgs;
            DAST._IResolvedType _2696___mcc_h3 = _source76.dtor_resolved;
            DAST._IResolvedType _source77 = _2696___mcc_h3;
            if (_source77.is_Datatype) {
              DAST._IDatatypeType _2697___mcc_h7 = _source77.dtor_datatypeType;
            } else if (_source77.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2698___mcc_h9 = _source77.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _2699___mcc_h10 = _source77.dtor_attributes;
              Dafny.ISequence<DAST._IType> _2700_typeArgs = _2695___mcc_h2;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2701_traitPath = _2694___mcc_h1;
              {
                RAST._IType _2702_pathStr;
                RAST._IType _out33;
                _out33 = DCOMP.COMP.GenPath(_2701_traitPath);
                _2702_pathStr = _out33;
                Dafny.ISequence<RAST._IType> _2703_typeArgs;
                Dafny.ISequence<RAST._IType> _out34;
                _out34 = DCOMP.COMP.GenTypeArgs(_2700_typeArgs, false, false);
                _2703_typeArgs = _out34;
                Dafny.ISequence<RAST._IImplMember> _2704_body;
                _2704_body = Dafny.Sequence<RAST._IImplMember>.FromElements();
                if ((_2689_traitBodies).Contains(_2701_traitPath)) {
                  _2704_body = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(_2689_traitBodies,_2701_traitPath);
                }
                RAST._IType _2705_genSelfPath;
                RAST._IType _out35;
                _out35 = DCOMP.COMP.GenPath(path);
                _2705_genSelfPath = _out35;
                RAST._IModDecl _2706_x;
                _2706_x = RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2666_sConstrainedTypeParams, RAST.Type.create_TypeApp(_2702_pathStr, _2703_typeArgs), RAST.__default.Rc(RAST.Type.create_TypeApp(_2705_genSelfPath, _2686_typeParamsAsTypes)), _2667_whereConstraints, _2704_body));
                s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(_2706_x));
              }
            } else {
              DAST._IType _2707___mcc_h13 = _source77.dtor_baseType;
              DAST._INewtypeRange _2708___mcc_h14 = _source77.dtor_range;
              bool _2709___mcc_h15 = _source77.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _2710___mcc_h16 = _source77.dtor_attributes;
            }
          } else if (_source76.is_Nullable) {
            DAST._IType _2711___mcc_h21 = _source76.dtor_Nullable_a0;
          } else if (_source76.is_Tuple) {
            Dafny.ISequence<DAST._IType> _2712___mcc_h23 = _source76.dtor_Tuple_a0;
          } else if (_source76.is_Array) {
            DAST._IType _2713___mcc_h25 = _source76.dtor_element;
            BigInteger _2714___mcc_h26 = _source76.dtor_dims;
          } else if (_source76.is_Seq) {
            DAST._IType _2715___mcc_h29 = _source76.dtor_element;
          } else if (_source76.is_Set) {
            DAST._IType _2716___mcc_h31 = _source76.dtor_element;
          } else if (_source76.is_Multiset) {
            DAST._IType _2717___mcc_h33 = _source76.dtor_element;
          } else if (_source76.is_Map) {
            DAST._IType _2718___mcc_h35 = _source76.dtor_key;
            DAST._IType _2719___mcc_h36 = _source76.dtor_value;
          } else if (_source76.is_SetBuilder) {
            DAST._IType _2720___mcc_h39 = _source76.dtor_element;
          } else if (_source76.is_MapBuilder) {
            DAST._IType _2721___mcc_h41 = _source76.dtor_key;
            DAST._IType _2722___mcc_h42 = _source76.dtor_value;
          } else if (_source76.is_Arrow) {
            Dafny.ISequence<DAST._IType> _2723___mcc_h45 = _source76.dtor_args;
            DAST._IType _2724___mcc_h46 = _source76.dtor_result;
          } else if (_source76.is_Primitive) {
            DAST._IPrimitive _2725___mcc_h49 = _source76.dtor_Primitive_a0;
          } else if (_source76.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _2726___mcc_h51 = _source76.dtor_Passthrough_a0;
          } else {
            Dafny.ISequence<Dafny.Rune> _2727___mcc_h53 = _source76.dtor_TypeArg_a0;
          }
          _2692_i = (_2692_i) + (BigInteger.One);
        }
      }
      RAST._IImpl _2728_d;
      _2728_d = RAST.Impl.create_ImplFor(_2666_sConstrainedTypeParams, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2684_datatypeName), _2686_typeParamsAsTypes), _2667_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(_2684_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new()"))))))));
      Dafny.ISequence<RAST._IModDecl> _2729_defaultImpl;
      _2729_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_2728_d));
      RAST._IImpl _2730_p;
      _2730_p = RAST.Impl.create_ImplFor(_2666_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2684_datatypeName), _2686_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \""), ((c).dtor_enclosingModule)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")"))))))));
      Dafny.ISequence<RAST._IModDecl> _2731_printImpl;
      _2731_printImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_2730_p));
      RAST._IImpl _2732_pp;
      _2732_pp = RAST.Impl.create_ImplFor(_2665_sTypeParams, RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cmp::PartialEq")), RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2684_datatypeName), _2686_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("eq"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("other"), RAST.__default.SelfBorrowed)), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ptr::eq(self, other)")))))));
      Dafny.ISequence<RAST._IModDecl> _2733_ptrPartialEqImpl;
      _2733_ptrPartialEqImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_2732_pp));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(s, _2729_defaultImpl), _2731_printImpl), _2733_ptrPartialEqImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTrait(DAST._ITrait t, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _2734_typeParamsSet;
      _2734_typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      Dafny.ISequence<RAST._IType> _2735_typeParams;
      _2735_typeParams = Dafny.Sequence<RAST._IType>.FromElements();
      BigInteger _2736_tpI;
      _2736_tpI = BigInteger.Zero;
      if ((new BigInteger(((t).dtor_typeParams).Count)).Sign == 1) {
        while ((_2736_tpI) < (new BigInteger(((t).dtor_typeParams).Count))) {
          DAST._IType _2737_tp;
          _2737_tp = ((t).dtor_typeParams).Select(_2736_tpI);
          _2734_typeParamsSet = Dafny.Set<DAST._IType>.Union(_2734_typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_2737_tp));
          RAST._IType _2738_genTp;
          RAST._IType _out36;
          _out36 = DCOMP.COMP.GenType(_2737_tp, false, false);
          _2738_genTp = _out36;
          _2735_typeParams = Dafny.Sequence<RAST._IType>.Concat(_2735_typeParams, Dafny.Sequence<RAST._IType>.FromElements(_2738_genTp));
          _2736_tpI = (_2736_tpI) + (BigInteger.One);
        }
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2739_fullPath;
      _2739_fullPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((t).dtor_name));
      Dafny.ISequence<RAST._IImplMember> _2740_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _2741___v40;
      Dafny.ISequence<RAST._IImplMember> _out37;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out38;
      DCOMP.COMP.GenClassImplBody((t).dtor_body, true, DAST.Type.create_Path(_2739_fullPath, Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Trait(_2739_fullPath, (t).dtor_attributes)), _2734_typeParamsSet, out _out37, out _out38);
      _2740_implBody = _out37;
      _2741___v40 = _out38;
      s = (RAST.ModDecl.create_TraitDecl(RAST.Trait.create(Dafny.Sequence<RAST._ITypeParam>.FromElements(), RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeIdent((t).dtor_name)), _2735_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), _2740_implBody)))._ToString(DCOMP.__default.IND);
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenNewtype(DAST._INewtype c)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _2742_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _2743_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _2744_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _2745_whereConstraints;
      Dafny.ISet<DAST._IType> _out39;
      Dafny.ISequence<RAST._ITypeParam> _out40;
      Dafny.ISequence<RAST._ITypeParam> _out41;
      Dafny.ISequence<Dafny.Rune> _out42;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out39, out _out40, out _out41, out _out42);
      _2742_typeParamsSet = _out39;
      _2743_sTypeParams = _out40;
      _2744_sConstrainedTypeParams = _out41;
      _2745_whereConstraints = _out42;
      Dafny.ISequence<RAST._IType> _2746_typeParamsAsTypes;
      _2746_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_2747_t) => {
        return RAST.__default.RawType((_2747_t).dtor_content);
      })), _2743_sTypeParams);
      Dafny.ISequence<Dafny.Rune> _2748_constrainedTypeParams;
      _2748_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_2744_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      RAST._IType _2749_underlyingType = RAST.Type.Default();
      Std.Wrappers._IOption<RAST._IType> _source78 = DCOMP.COMP.NewtypeToRustType((c).dtor_base, (c).dtor_range);
      if (_source78.is_None) {
        RAST._IType _out43;
        _out43 = DCOMP.COMP.GenType((c).dtor_base, false, false);
        _2749_underlyingType = _out43;
      } else {
        RAST._IType _2750___mcc_h0 = _source78.dtor_value;
        RAST._IType _2751_v = _2750___mcc_h0;
        _2749_underlyingType = _2751_v;
      }
      Dafny.ISequence<Dafny.Rune> _2752_datatypeName;
      _2752_datatypeName = DCOMP.__default.escapeIdent((c).dtor_name);
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(Clone, PartialEq)]"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[repr(transparent)]")), _2752_datatypeName, _2743_sTypeParams, RAST.Formals.create_NamelessFormals(Dafny.Sequence<RAST._INamelessFormal>.FromElements(RAST.NamelessFormal.create(RAST.Visibility.create_PUB(), _2749_underlyingType))))));
      Dafny.ISequence<Dafny.Rune> _2753_fnBody;
      _2753_fnBody = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Std.Wrappers._IOption<DAST._IExpression> _source79 = (c).dtor_witnessExpr;
      if (_source79.is_None) {
        {
          _2753_fnBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2753_fnBody, _2752_datatypeName), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(::std::default::Default::default())"));
        }
      } else {
        DAST._IExpression _2754___mcc_h1 = _source79.dtor_value;
        DAST._IExpression _2755_e = _2754___mcc_h1;
        {
          RAST._IExpr _2756_eStr;
          DCOMP._IOwnership _2757___v41;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2758___v42;
          RAST._IExpr _out44;
          DCOMP._IOwnership _out45;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out46;
          DCOMP.COMP.GenExpr(_2755_e, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), DCOMP.Environment.Empty(), DCOMP.Ownership.create_OwnershipOwned(), out _out44, out _out45, out _out46);
          _2756_eStr = _out44;
          _2757___v41 = _out45;
          _2758___v42 = _out46;
          _2753_fnBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2753_fnBody, _2752_datatypeName), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_2756_eStr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
        }
      }
      RAST._IImplMember _2759_body;
      _2759_body = RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(_2753_fnBody))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2744_sConstrainedTypeParams, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2752_datatypeName), _2746_typeParamsAsTypes), _2745_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(_2759_body)))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2744_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2752_datatypeName), _2746_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print(&self.0, _formatter, in_seq)"))))))))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2744_sConstrainedTypeParams, RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref")), RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2752_datatypeName), _2746_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Target = "), (_2749_underlyingType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"))), RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("deref"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed), Std.Wrappers.Option<RAST._IType>.create_Some((RAST.__default.SelfBorrowed).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Target"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self.0"))))))))));
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenDatatype(DAST._IDatatype c)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _2760_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _2761_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _2762_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _2763_whereConstraints;
      Dafny.ISet<DAST._IType> _out47;
      Dafny.ISequence<RAST._ITypeParam> _out48;
      Dafny.ISequence<RAST._ITypeParam> _out49;
      Dafny.ISequence<Dafny.Rune> _out50;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out47, out _out48, out _out49, out _out50);
      _2760_typeParamsSet = _out47;
      _2761_sTypeParams = _out48;
      _2762_sConstrainedTypeParams = _out49;
      _2763_whereConstraints = _out50;
      Dafny.ISequence<RAST._IType> _2764_typeParamsAsTypes;
      _2764_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_2765_t) => {
        return RAST.__default.RawType((_2765_t).dtor_content);
      })), _2761_sTypeParams);
      Dafny.ISequence<Dafny.Rune> _2766_constrainedTypeParams;
      _2766_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_2762_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.IND, DCOMP.__default.IND));
      Dafny.ISequence<Dafny.Rune> _2767_datatypeName;
      _2767_datatypeName = DCOMP.__default.escapeIdent((c).dtor_name);
      Dafny.ISequence<RAST._IEnumCase> _2768_ctors;
      _2768_ctors = Dafny.Sequence<RAST._IEnumCase>.FromElements();
      BigInteger _2769_i;
      _2769_i = BigInteger.Zero;
      while ((_2769_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _2770_ctor;
        _2770_ctor = ((c).dtor_ctors).Select(_2769_i);
        Dafny.ISequence<RAST._IFormal> _2771_ctorArgs;
        _2771_ctorArgs = Dafny.Sequence<RAST._IFormal>.FromElements();
        BigInteger _2772_j;
        _2772_j = BigInteger.Zero;
        while ((_2772_j) < (new BigInteger(((_2770_ctor).dtor_args).Count))) {
          DAST._IFormal _2773_formal;
          _2773_formal = ((_2770_ctor).dtor_args).Select(_2772_j);
          RAST._IType _2774_formalType;
          RAST._IType _out51;
          _out51 = DCOMP.COMP.GenType((_2773_formal).dtor_typ, false, false);
          _2774_formalType = _out51;
          if ((c).dtor_isCo) {
            _2771_ctorArgs = Dafny.Sequence<RAST._IFormal>.Concat(_2771_ctorArgs, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeIdent((_2773_formal).dtor_name), RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("LazyFieldWrapper")), Dafny.Sequence<RAST._IType>.FromElements(_2774_formalType)))));
          } else {
            _2771_ctorArgs = Dafny.Sequence<RAST._IFormal>.Concat(_2771_ctorArgs, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeIdent((_2773_formal).dtor_name), _2774_formalType)));
          }
          _2772_j = (_2772_j) + (BigInteger.One);
        }
        _2768_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_2768_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(DCOMP.__default.escapeIdent((_2770_ctor).dtor_name), RAST.Formals.create_NamedFormals(_2771_ctorArgs))));
        _2769_i = (_2769_i) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2775_selfPath;
      _2775_selfPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((c).dtor_name);
      Dafny.ISequence<RAST._IImplMember> _2776_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _2777_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out52;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out53;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(DAST.DatatypeType.create(_2775_selfPath, (c).dtor_attributes))), _2760_typeParamsSet, out _out52, out _out53);
      _2776_implBodyRaw = _out52;
      _2777_traitBodies = _out53;
      Dafny.ISequence<RAST._IImplMember> _2778_implBody;
      _2778_implBody = _2776_implBodyRaw;
      _2769_i = BigInteger.Zero;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2779_emittedFields;
      _2779_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      while ((_2769_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _2780_ctor;
        _2780_ctor = ((c).dtor_ctors).Select(_2769_i);
        BigInteger _2781_j;
        _2781_j = BigInteger.Zero;
        while ((_2781_j) < (new BigInteger(((_2780_ctor).dtor_args).Count))) {
          DAST._IFormal _2782_formal;
          _2782_formal = ((_2780_ctor).dtor_args).Select(_2781_j);
          if (!((_2779_emittedFields).Contains((_2782_formal).dtor_name))) {
            _2779_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2779_emittedFields, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_2782_formal).dtor_name));
            RAST._IType _2783_formalType;
            RAST._IType _out54;
            _out54 = DCOMP.COMP.GenType((_2782_formal).dtor_typ, false, false);
            _2783_formalType = _out54;
            Dafny.ISequence<RAST._IMatchCase> _2784_cases;
            _2784_cases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
            BigInteger _2785_k;
            _2785_k = BigInteger.Zero;
            while ((_2785_k) < (new BigInteger(((c).dtor_ctors).Count))) {
              DAST._IDatatypeCtor _2786_ctor2;
              _2786_ctor2 = ((c).dtor_ctors).Select(_2785_k);
              Dafny.ISequence<Dafny.Rune> _2787_pattern;
              _2787_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2767_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_2786_ctor2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
              Dafny.ISequence<Dafny.Rune> _2788_rhs = Dafny.Sequence<Dafny.Rune>.Empty;
              BigInteger _2789_l;
              _2789_l = BigInteger.Zero;
              bool _2790_hasMatchingField;
              _2790_hasMatchingField = false;
              while ((_2789_l) < (new BigInteger(((_2786_ctor2).dtor_args).Count))) {
                DAST._IFormal _2791_formal2;
                _2791_formal2 = ((_2786_ctor2).dtor_args).Select(_2789_l);
                if (((_2782_formal).dtor_name).Equals((_2791_formal2).dtor_name)) {
                  _2790_hasMatchingField = true;
                }
                _2787_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2787_pattern, DCOMP.__default.escapeIdent((_2791_formal2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                _2789_l = (_2789_l) + (BigInteger.One);
              }
              _2787_pattern = Dafny.Sequence<Dafny.Rune>.Concat(_2787_pattern, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
              if (_2790_hasMatchingField) {
                if ((c).dtor_isCo) {
                  _2788_rhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&"), DCOMP.__default.escapeIdent((_2782_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0)"));
                } else {
                  _2788_rhs = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_2782_formal).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                }
              } else {
                _2788_rhs = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"field does not exist on this variant\")");
              }
              RAST._IMatchCase _2792_ctorMatch;
              _2792_ctorMatch = RAST.MatchCase.create(_2787_pattern, RAST.Expr.create_RawExpr(_2788_rhs));
              _2784_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_2784_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(_2792_ctorMatch));
              _2785_k = (_2785_k) + (BigInteger.One);
            }
            if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
              _2784_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_2784_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(_2767_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!()")))));
            }
            RAST._IExpr _2793_methodBody;
            _2793_methodBody = RAST.Expr.create_Match(RAST.__default.self, _2784_cases);
            _2778_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(_2778_implBody, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PUB(), RAST.Fn.create(DCOMP.__default.escapeIdent((_2782_formal).dtor_name), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_Borrowed(_2783_formalType)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_2793_methodBody)))));
          }
          _2781_j = (_2781_j) + (BigInteger.One);
        }
        _2769_i = (_2769_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        BigInteger _2794_typeI;
        _2794_typeI = BigInteger.Zero;
        Dafny.ISequence<RAST._IType> _2795_types;
        _2795_types = Dafny.Sequence<RAST._IType>.FromElements();
        while ((_2794_typeI) < (new BigInteger(((c).dtor_typeParams).Count))) {
          RAST._IType _2796_genTp;
          RAST._IType _out55;
          _out55 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_2794_typeI), false, false);
          _2796_genTp = _out55;
          _2795_types = Dafny.Sequence<RAST._IType>.Concat(_2795_types, Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData::")), Dafny.Sequence<RAST._IType>.FromElements(_2796_genTp))));
          _2794_typeI = (_2794_typeI) + (BigInteger.One);
        }
        _2768_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_2768_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_PhantomVariant"), RAST.Formals.create_NamelessFormals(Std.Collections.Seq.__default.Map<RAST._IType, RAST._INamelessFormal>(((System.Func<RAST._IType, RAST._INamelessFormal>)((_2797_tpe) => {
  return RAST.NamelessFormal.create(RAST.Visibility.create_PRIV(), _2797_tpe);
})), _2795_types)))));
      }
      Dafny.ISequence<RAST._IModDecl> _2798_enumBody;
      _2798_enumBody = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_EnumDecl(RAST.Enum.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(PartialEq, Clone)]")), _2767_datatypeName, _2761_sTypeParams, _2768_ctors)), RAST.ModDecl.create_ImplDecl(RAST.Impl.create_Impl(_2762_sConstrainedTypeParams, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2767_datatypeName), _2764_typeParamsAsTypes), _2763_whereConstraints, _2778_implBody)));
      _2769_i = BigInteger.Zero;
      Dafny.ISequence<RAST._IMatchCase> _2799_printImplBodyCases;
      _2799_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
      while ((_2769_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _2800_ctor;
        _2800_ctor = ((c).dtor_ctors).Select(_2769_i);
        Dafny.ISequence<Dafny.Rune> _2801_ctorMatch;
        _2801_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_2800_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        Dafny.ISequence<Dafny.Rune> _2802_modulePrefix;
        _2802_modulePrefix = (((((c).dtor_enclosingModule)).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(((c).dtor_enclosingModule), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("."))));
        RAST._IExpr _2803_printRhs;
        _2803_printRhs = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \""), _2802_modulePrefix), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent((_2800_ctor).dtor_name)), (((_2800_ctor).dtor_hasAnyArgs) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(\")?")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")?")))));
        BigInteger _2804_j;
        _2804_j = BigInteger.Zero;
        while ((_2804_j) < (new BigInteger(((_2800_ctor).dtor_args).Count))) {
          DAST._IFormal _2805_formal;
          _2805_formal = ((_2800_ctor).dtor_args).Select(_2804_j);
          _2801_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2801_ctorMatch, DCOMP.__default.escapeIdent((_2805_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          if ((_2804_j).Sign == 1) {
            _2803_printRhs = (_2803_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \", \")?")));
          }
          _2803_printRhs = (_2803_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print("), DCOMP.__default.escapeIdent((_2805_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", _formatter, false)?"))));
          _2804_j = (_2804_j) + (BigInteger.One);
        }
        _2801_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_2801_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        if ((_2800_ctor).dtor_hasAnyArgs) {
          _2803_printRhs = (_2803_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \")\")?")));
        }
        _2803_printRhs = (_2803_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Ok(())")));
        _2799_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_2799_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2767_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _2801_ctorMatch), RAST.Expr.create_Block(_2803_printRhs))));
        _2769_i = (_2769_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _2799_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_2799_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(_2767_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{panic!()}")))));
      }
      RAST._IExpr _2806_printImplBody;
      _2806_printImplBody = RAST.Expr.create_Match(RAST.__default.self, _2799_printImplBodyCases);
      Dafny.ISequence<RAST._IModDecl> _2807_printImpl;
      _2807_printImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2762_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2767_datatypeName), _2764_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_2806_printImplBody)))))));
      Dafny.ISequence<RAST._IModDecl> _2808_defaultImpl;
      _2808_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements();
      Dafny.ISequence<RAST._IModDecl> _2809_asRefImpl;
      _2809_asRefImpl = Dafny.Sequence<RAST._IModDecl>.FromElements();
      if ((new BigInteger(((c).dtor_ctors).Count)).Sign == 1) {
        _2769_i = BigInteger.Zero;
        RAST._IExpr _2810_structName;
        _2810_structName = (RAST.Expr.create_Identifier(_2767_datatypeName)).MSel(DCOMP.__default.escapeIdent((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_name));
        Dafny.ISequence<RAST._IAssignIdentifier> _2811_structAssignments;
        _2811_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
        while ((_2769_i) < (new BigInteger(((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Count))) {
          DAST._IFormal _2812_formal;
          _2812_formal = ((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Select(_2769_i);
          _2811_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_2811_structAssignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent((_2812_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default::default()")))));
          _2769_i = (_2769_i) + (BigInteger.One);
        }
        Dafny.ISequence<RAST._ITypeParam> _2813_defaultConstrainedTypeParams;
        _2813_defaultConstrainedTypeParams = RAST.TypeParam.AddConstraintsMultiple(_2761_sTypeParams, Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.DefaultTrait));
        RAST._IType _2814_fullType;
        _2814_fullType = RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2767_datatypeName), _2764_typeParamsAsTypes);
        _2808_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2813_defaultConstrainedTypeParams, RAST.__default.DefaultTrait, _2814_fullType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(_2814_fullType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_StructBuild(_2810_structName, _2811_structAssignments))))))));
        _2809_asRefImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2813_defaultConstrainedTypeParams, (((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("convert"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("AsRef"))).Apply1(_2814_fullType), RAST.Type.create_Borrowed(_2814_fullType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.__default.self)))))));
      }
      s = Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(_2798_enumBody, _2807_printImpl), _2808_defaultImpl), _2809_asRefImpl);
      return s;
    }
    public static RAST._IType GenPath(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p)
    {
      RAST._IType r = RAST.Type.Default();
      if ((new BigInteger((p).Count)).Sign == 0) {
        r = RAST.Type.create_SelfOwned();
        return r;
      } else {
        r = (((((p).Select(BigInteger.Zero))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"))) ? (RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) : (RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"))));
        BigInteger _hi4 = new BigInteger((p).Count);
        for (BigInteger _2815_i = BigInteger.Zero; _2815_i < _hi4; _2815_i++) {
          r = (r).MSel(DCOMP.__default.escapeIdent(((p).Select(_2815_i))));
        }
      }
      return r;
    }
    public static RAST._IExpr GenPathExpr(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p)
    {
      RAST._IExpr r = RAST.Expr.Default();
      if ((new BigInteger((p).Count)).Sign == 0) {
        r = RAST.__default.self;
        return r;
      } else {
        r = (((((p).Select(BigInteger.Zero))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"))) ? (RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) : (RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"))));
        BigInteger _hi5 = new BigInteger((p).Count);
        for (BigInteger _2816_i = BigInteger.Zero; _2816_i < _hi5; _2816_i++) {
          r = (r).MSel(DCOMP.__default.escapeIdent(((p).Select(_2816_i))));
        }
      }
      return r;
    }
    public static Dafny.ISequence<RAST._IType> GenTypeArgs(Dafny.ISequence<DAST._IType> args, bool inBinding, bool inFn)
    {
      Dafny.ISequence<RAST._IType> s = Dafny.Sequence<RAST._IType>.Empty;
      s = Dafny.Sequence<RAST._IType>.FromElements();
      if ((new BigInteger((args).Count)).Sign == 1) {
        BigInteger _2817_i;
        _2817_i = BigInteger.Zero;
        while ((_2817_i) < (new BigInteger((args).Count))) {
          RAST._IType _2818_genTp;
          RAST._IType _out56;
          _out56 = DCOMP.COMP.GenType((args).Select(_2817_i), inBinding, inFn);
          _2818_genTp = _out56;
          s = Dafny.Sequence<RAST._IType>.Concat(s, Dafny.Sequence<RAST._IType>.FromElements(_2818_genTp));
          _2817_i = (_2817_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static bool IsRcWrapped(Dafny.ISequence<DAST._IAttribute> attributes) {
      return ((!(attributes).Contains(DAST.Attribute.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("auto-nongrowing-size"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements()))) && (!(attributes).Contains(DAST.Attribute.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rust_rc"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false")))))) || ((attributes).Contains(DAST.Attribute.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rust_rc"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true")))));
    }
    public static RAST._IType GenType(DAST._IType c, bool inBinding, bool inFn)
    {
      RAST._IType s = RAST.Type.Default();
      DAST._IType _source80 = c;
      if (_source80.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2819___mcc_h0 = _source80.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _2820___mcc_h1 = _source80.dtor_typeArgs;
        DAST._IResolvedType _2821___mcc_h2 = _source80.dtor_resolved;
        DAST._IResolvedType _2822_resolved = _2821___mcc_h2;
        Dafny.ISequence<DAST._IType> _2823_args = _2820___mcc_h1;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2824_p = _2819___mcc_h0;
        {
          RAST._IType _2825_t;
          RAST._IType _out57;
          _out57 = DCOMP.COMP.GenPath(_2824_p);
          _2825_t = _out57;
          Dafny.ISequence<RAST._IType> _2826_typeArgs;
          Dafny.ISequence<RAST._IType> _out58;
          _out58 = DCOMP.COMP.GenTypeArgs(_2823_args, inBinding, inFn);
          _2826_typeArgs = _out58;
          s = RAST.Type.create_TypeApp(_2825_t, _2826_typeArgs);
          DAST._IResolvedType _source81 = _2822_resolved;
          if (_source81.is_Datatype) {
            DAST._IDatatypeType _2827___mcc_h21 = _source81.dtor_datatypeType;
            DAST._IDatatypeType _source82 = _2827___mcc_h21;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2828___mcc_h22 = _source82.dtor_path;
            Dafny.ISequence<DAST._IAttribute> _2829___mcc_h23 = _source82.dtor_attributes;
            Dafny.ISequence<DAST._IAttribute> _2830_attributes = _2829___mcc_h23;
            {
              if (DCOMP.COMP.IsRcWrapped(_2830_attributes)) {
                s = RAST.__default.Rc(s);
              }
            }
          } else if (_source81.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2831___mcc_h24 = _source81.dtor_path;
            Dafny.ISequence<DAST._IAttribute> _2832___mcc_h25 = _source81.dtor_attributes;
            {
              if ((_2824_p).Equals(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("object")))) {
                s = RAST.__default.Rc(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::any::Any")));
              } else {
                if (inBinding) {
                  s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
                } else {
                  s = RAST.Type.create_ImplType(s);
                }
              }
            }
          } else {
            DAST._IType _2833___mcc_h26 = _source81.dtor_baseType;
            DAST._INewtypeRange _2834___mcc_h27 = _source81.dtor_range;
            bool _2835___mcc_h28 = _source81.dtor_erase;
            Dafny.ISequence<DAST._IAttribute> _2836___mcc_h29 = _source81.dtor_attributes;
            Dafny.ISequence<DAST._IAttribute> _2837_attributes = _2836___mcc_h29;
            bool _2838_erased = _2835___mcc_h28;
            DAST._INewtypeRange _2839_range = _2834___mcc_h27;
            DAST._IType _2840_t = _2833___mcc_h26;
            {
              if (_2838_erased) {
                Std.Wrappers._IOption<RAST._IType> _source83 = DCOMP.COMP.NewtypeToRustType(_2840_t, _2839_range);
                if (_source83.is_None) {
                } else {
                  RAST._IType _2841___mcc_h30 = _source83.dtor_value;
                  RAST._IType _2842_v = _2841___mcc_h30;
                  s = _2842_v;
                }
              }
            }
          }
        }
      } else if (_source80.is_Nullable) {
        DAST._IType _2843___mcc_h3 = _source80.dtor_Nullable_a0;
        DAST._IType _2844_inner = _2843___mcc_h3;
        {
          RAST._IType _2845_innerExpr;
          RAST._IType _out59;
          _out59 = DCOMP.COMP.GenType(_2844_inner, inBinding, inFn);
          _2845_innerExpr = _out59;
          s = RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::option::Option")), Dafny.Sequence<RAST._IType>.FromElements(_2845_innerExpr));
        }
      } else if (_source80.is_Tuple) {
        Dafny.ISequence<DAST._IType> _2846___mcc_h4 = _source80.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IType> _2847_types = _2846___mcc_h4;
        {
          Dafny.ISequence<RAST._IType> _2848_args;
          _2848_args = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _2849_i;
          _2849_i = BigInteger.Zero;
          while ((_2849_i) < (new BigInteger((_2847_types).Count))) {
            RAST._IType _2850_generated;
            RAST._IType _out60;
            _out60 = DCOMP.COMP.GenType((_2847_types).Select(_2849_i), inBinding, inFn);
            _2850_generated = _out60;
            _2848_args = Dafny.Sequence<RAST._IType>.Concat(_2848_args, Dafny.Sequence<RAST._IType>.FromElements(_2850_generated));
            _2849_i = (_2849_i) + (BigInteger.One);
          }
          s = RAST.Type.create_TupleType(_2848_args);
        }
      } else if (_source80.is_Array) {
        DAST._IType _2851___mcc_h5 = _source80.dtor_element;
        BigInteger _2852___mcc_h6 = _source80.dtor_dims;
        BigInteger _2853_dims = _2852___mcc_h6;
        DAST._IType _2854_element = _2851___mcc_h5;
        {
          RAST._IType _2855_elem;
          RAST._IType _out61;
          _out61 = DCOMP.COMP.GenType(_2854_element, inBinding, inFn);
          _2855_elem = _out61;
          s = _2855_elem;
          BigInteger _2856_i;
          _2856_i = BigInteger.Zero;
          while ((_2856_i) < (_2853_dims)) {
            s = RAST.__default.Rc(RAST.__default.RefCell(RAST.__default.Vec(s)));
            _2856_i = (_2856_i) + (BigInteger.One);
          }
        }
      } else if (_source80.is_Seq) {
        DAST._IType _2857___mcc_h7 = _source80.dtor_element;
        DAST._IType _2858_element = _2857___mcc_h7;
        {
          RAST._IType _2859_elem;
          RAST._IType _out62;
          _out62 = DCOMP.COMP.GenType(_2858_element, inBinding, inFn);
          _2859_elem = _out62;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence")), Dafny.Sequence<RAST._IType>.FromElements(_2859_elem));
        }
      } else if (_source80.is_Set) {
        DAST._IType _2860___mcc_h8 = _source80.dtor_element;
        DAST._IType _2861_element = _2860___mcc_h8;
        {
          RAST._IType _2862_elem;
          RAST._IType _out63;
          _out63 = DCOMP.COMP.GenType(_2861_element, inBinding, inFn);
          _2862_elem = _out63;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Set")), Dafny.Sequence<RAST._IType>.FromElements(_2862_elem));
        }
      } else if (_source80.is_Multiset) {
        DAST._IType _2863___mcc_h9 = _source80.dtor_element;
        DAST._IType _2864_element = _2863___mcc_h9;
        {
          RAST._IType _2865_elem;
          RAST._IType _out64;
          _out64 = DCOMP.COMP.GenType(_2864_element, inBinding, inFn);
          _2865_elem = _out64;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Multiset")), Dafny.Sequence<RAST._IType>.FromElements(_2865_elem));
        }
      } else if (_source80.is_Map) {
        DAST._IType _2866___mcc_h10 = _source80.dtor_key;
        DAST._IType _2867___mcc_h11 = _source80.dtor_value;
        DAST._IType _2868_value = _2867___mcc_h11;
        DAST._IType _2869_key = _2866___mcc_h10;
        {
          RAST._IType _2870_keyType;
          RAST._IType _out65;
          _out65 = DCOMP.COMP.GenType(_2869_key, inBinding, inFn);
          _2870_keyType = _out65;
          RAST._IType _2871_valueType;
          RAST._IType _out66;
          _out66 = DCOMP.COMP.GenType(_2868_value, inBinding, inFn);
          _2871_valueType = _out66;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Map")), Dafny.Sequence<RAST._IType>.FromElements(_2870_keyType, _2871_valueType));
        }
      } else if (_source80.is_SetBuilder) {
        DAST._IType _2872___mcc_h12 = _source80.dtor_element;
        DAST._IType _2873_elem = _2872___mcc_h12;
        {
          RAST._IType _2874_elemType;
          RAST._IType _out67;
          _out67 = DCOMP.COMP.GenType(_2873_elem, inBinding, inFn);
          _2874_elemType = _out67;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SetBuilder")), Dafny.Sequence<RAST._IType>.FromElements(_2874_elemType));
        }
      } else if (_source80.is_MapBuilder) {
        DAST._IType _2875___mcc_h13 = _source80.dtor_key;
        DAST._IType _2876___mcc_h14 = _source80.dtor_value;
        DAST._IType _2877_value = _2876___mcc_h14;
        DAST._IType _2878_key = _2875___mcc_h13;
        {
          RAST._IType _2879_keyType;
          RAST._IType _out68;
          _out68 = DCOMP.COMP.GenType(_2878_key, inBinding, inFn);
          _2879_keyType = _out68;
          RAST._IType _2880_valueType;
          RAST._IType _out69;
          _out69 = DCOMP.COMP.GenType(_2877_value, inBinding, inFn);
          _2880_valueType = _out69;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("MapBuilder")), Dafny.Sequence<RAST._IType>.FromElements(_2879_keyType, _2880_valueType));
        }
      } else if (_source80.is_Arrow) {
        Dafny.ISequence<DAST._IType> _2881___mcc_h15 = _source80.dtor_args;
        DAST._IType _2882___mcc_h16 = _source80.dtor_result;
        DAST._IType _2883_result = _2882___mcc_h16;
        Dafny.ISequence<DAST._IType> _2884_args = _2881___mcc_h15;
        {
          Dafny.ISequence<RAST._IType> _2885_argTypes;
          _2885_argTypes = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _2886_i;
          _2886_i = BigInteger.Zero;
          while ((_2886_i) < (new BigInteger((_2884_args).Count))) {
            RAST._IType _2887_generated;
            RAST._IType _out70;
            _out70 = DCOMP.COMP.GenType((_2884_args).Select(_2886_i), inBinding, true);
            _2887_generated = _out70;
            _2885_argTypes = Dafny.Sequence<RAST._IType>.Concat(_2885_argTypes, Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_Borrowed(_2887_generated)));
            _2886_i = (_2886_i) + (BigInteger.One);
          }
          RAST._IType _2888_resultType;
          RAST._IType _out71;
          _out71 = DCOMP.COMP.GenType(_2883_result, inBinding, (inFn) || (inBinding));
          _2888_resultType = _out71;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("FunctionWrapper")), Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_FnType(_2885_argTypes, RAST.Type.create_IntersectionType(_2888_resultType, RAST.__default.StaticTrait))));
        }
      } else if (_source80.is_Primitive) {
        DAST._IPrimitive _2889___mcc_h17 = _source80.dtor_Primitive_a0;
        DAST._IPrimitive _2890_p = _2889___mcc_h17;
        {
          DAST._IPrimitive _source84 = _2890_p;
          if (_source84.is_Int) {
            s = (RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyInt"));
          } else if (_source84.is_Real) {
            s = (RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("BigRational"));
          } else if (_source84.is_String) {
            s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence")), Dafny.Sequence<RAST._IType>.FromElements((RAST.__default.dafny__runtime__type).MSel(DCOMP.__default.DafnyChar)));
          } else if (_source84.is_Bool) {
            s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool"));
          } else {
            s = (RAST.__default.dafny__runtime__type).MSel(DCOMP.__default.DafnyChar);
          }
        }
      } else if (_source80.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _2891___mcc_h18 = _source80.dtor_Passthrough_a0;
        Dafny.ISequence<Dafny.Rune> _2892_v = _2891___mcc_h18;
        s = RAST.__default.RawType(_2892_v);
      } else {
        Dafny.ISequence<Dafny.Rune> _2893___mcc_h19 = _source80.dtor_TypeArg_a0;
        Dafny.ISequence<Dafny.Rune> _source85 = _2893___mcc_h19;
        Dafny.ISequence<Dafny.Rune> _2894___mcc_h20 = _source85;
        Dafny.ISequence<Dafny.Rune> _2895_name = _2894___mcc_h20;
        s = RAST.__default.RawType(DCOMP.__default.escapeIdent(_2895_name));
      }
      return s;
    }
    public static void GenClassImplBody(Dafny.ISequence<DAST._IMethod> body, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams, out Dafny.ISequence<RAST._IImplMember> s, out Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> traitBodies)
    {
      s = Dafny.Sequence<RAST._IImplMember>.Empty;
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Empty;
      s = Dafny.Sequence<RAST._IImplMember>.FromElements();
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements();
      BigInteger _2896_i;
      _2896_i = BigInteger.Zero;
      while ((_2896_i) < (new BigInteger((body).Count))) {
        DAST._IMethod _source86 = (body).Select(_2896_i);
        DAST._IMethod _2897___mcc_h0 = _source86;
        DAST._IMethod _2898_m = _2897___mcc_h0;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source87 = (_2898_m).dtor_overridingPath;
          if (_source87.is_None) {
            {
              RAST._IImplMember _2899_generated;
              RAST._IImplMember _out72;
              _out72 = DCOMP.COMP.GenMethod(_2898_m, forTrait, enclosingType, enclosingTypeParams);
              _2899_generated = _out72;
              s = Dafny.Sequence<RAST._IImplMember>.Concat(s, Dafny.Sequence<RAST._IImplMember>.FromElements(_2899_generated));
            }
          } else {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2900___mcc_h1 = _source87.dtor_value;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2901_p = _2900___mcc_h1;
            {
              Dafny.ISequence<RAST._IImplMember> _2902_existing;
              _2902_existing = Dafny.Sequence<RAST._IImplMember>.FromElements();
              if ((traitBodies).Contains(_2901_p)) {
                _2902_existing = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(traitBodies,_2901_p);
              }
              RAST._IImplMember _2903_genMethod;
              RAST._IImplMember _out73;
              _out73 = DCOMP.COMP.GenMethod(_2898_m, true, enclosingType, enclosingTypeParams);
              _2903_genMethod = _out73;
              _2902_existing = Dafny.Sequence<RAST._IImplMember>.Concat(_2902_existing, Dafny.Sequence<RAST._IImplMember>.FromElements(_2903_genMethod));
              traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Merge(traitBodies, Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>(_2901_p, _2902_existing)));
            }
          }
        }
        _2896_i = (_2896_i) + (BigInteger.One);
      }
    }
    public static Dafny.ISequence<RAST._IFormal> GenParams(Dafny.ISequence<DAST._IFormal> @params)
    {
      Dafny.ISequence<RAST._IFormal> s = Dafny.Sequence<RAST._IFormal>.Empty;
      s = Dafny.Sequence<RAST._IFormal>.FromElements();
      BigInteger _2904_i;
      _2904_i = BigInteger.Zero;
      while ((_2904_i) < (new BigInteger((@params).Count))) {
        DAST._IFormal _2905_param;
        _2905_param = (@params).Select(_2904_i);
        RAST._IType _2906_paramType;
        RAST._IType _out74;
        _out74 = DCOMP.COMP.GenType((_2905_param).dtor_typ, false, false);
        _2906_paramType = _out74;
        s = Dafny.Sequence<RAST._IFormal>.Concat(s, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeIdent((_2905_param).dtor_name), RAST.Type.create_Borrowed(_2906_paramType))));
        _2904_i = (_2904_i) + (BigInteger.One);
      }
      return s;
    }
    public static RAST._IImplMember GenMethod(DAST._IMethod m, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams)
    {
      RAST._IImplMember s = RAST.ImplMember.Default();
      Dafny.ISequence<RAST._IFormal> _2907_params;
      Dafny.ISequence<RAST._IFormal> _out75;
      _out75 = DCOMP.COMP.GenParams((m).dtor_params);
      _2907_params = _out75;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2908_paramNames;
      _2908_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMP._IOwnership> _2909_paramOwnerships;
      _2909_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.FromElements();
      BigInteger _2910_paramI;
      _2910_paramI = BigInteger.Zero;
      while ((_2910_paramI) < (new BigInteger(((m).dtor_params).Count))) {
        Dafny.ISequence<Dafny.Rune> _2911_name;
        _2911_name = (((m).dtor_params).Select(_2910_paramI)).dtor_name;
        _2908_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_2908_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_2911_name));
        _2909_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.Update(_2909_paramOwnerships, _2911_name, DCOMP.Ownership.create_OwnershipBorrowed());
        _2910_paramI = (_2910_paramI) + (BigInteger.One);
      }
      DCOMP._IEnvironment _2912_env;
      _2912_env = DCOMP.Environment.create(_2908_paramNames, _2909_paramOwnerships);
      if (!((m).dtor_isStatic)) {
        if (forTrait) {
          _2907_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed), _2907_params);
        } else {
          RAST._IType _2913_tpe;
          RAST._IType _out76;
          _out76 = DCOMP.COMP.GenType(enclosingType, false, false);
          _2913_tpe = _out76;
          _2907_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), RAST.Type.create_Borrowed(_2913_tpe))), _2907_params);
        }
      }
      Dafny.ISequence<RAST._IType> _2914_retTypeArgs;
      _2914_retTypeArgs = Dafny.Sequence<RAST._IType>.FromElements();
      BigInteger _2915_typeI;
      _2915_typeI = BigInteger.Zero;
      while ((_2915_typeI) < (new BigInteger(((m).dtor_outTypes).Count))) {
        RAST._IType _2916_typeExpr;
        RAST._IType _out77;
        _out77 = DCOMP.COMP.GenType(((m).dtor_outTypes).Select(_2915_typeI), false, false);
        _2916_typeExpr = _out77;
        _2914_retTypeArgs = Dafny.Sequence<RAST._IType>.Concat(_2914_retTypeArgs, Dafny.Sequence<RAST._IType>.FromElements(_2916_typeExpr));
        _2915_typeI = (_2915_typeI) + (BigInteger.One);
      }
      RAST._IVisibility _2917_visibility;
      _2917_visibility = RAST.Visibility.create_PUB();
      Dafny.ISequence<Dafny.Rune> _2918_fnName;
      _2918_fnName = DCOMP.__default.escapeIdent((m).dtor_name);
      Dafny.ISequence<DAST._IType> _2919_typeParamsFiltered;
      _2919_typeParamsFiltered = Dafny.Sequence<DAST._IType>.FromElements();
      BigInteger _2920_typeParamI;
      _2920_typeParamI = BigInteger.Zero;
      while ((_2920_typeParamI) < (new BigInteger(((m).dtor_typeParams).Count))) {
        DAST._IType _2921_typeParam;
        _2921_typeParam = ((m).dtor_typeParams).Select(_2920_typeParamI);
        if (!((enclosingTypeParams).Contains(_2921_typeParam))) {
          _2919_typeParamsFiltered = Dafny.Sequence<DAST._IType>.Concat(_2919_typeParamsFiltered, Dafny.Sequence<DAST._IType>.FromElements(_2921_typeParam));
        }
        _2920_typeParamI = (_2920_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _2922_whereClauses;
      _2922_whereClauses = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISequence<RAST._ITypeParam> _2923_typeParams;
      _2923_typeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      if ((new BigInteger((_2919_typeParamsFiltered).Count)).Sign == 1) {
        _2922_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_2922_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where "));
        BigInteger _2924_i;
        _2924_i = BigInteger.Zero;
        while ((_2924_i) < (new BigInteger((_2919_typeParamsFiltered).Count))) {
          RAST._IType _2925_typeExpr;
          RAST._IType _out78;
          _out78 = DCOMP.COMP.GenType((_2919_typeParamsFiltered).Select(_2924_i), false, false);
          _2925_typeExpr = _out78;
          _2923_typeParams = Dafny.Sequence<RAST._ITypeParam>.Concat(_2923_typeParams, Dafny.Sequence<RAST._ITypeParam>.FromElements(RAST.TypeParam.create((_2925_typeExpr)._ToString(DCOMP.__default.IND), Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.CloneTrait, RAST.__default.DafnyPrintTrait, RAST.__default.DefaultTrait, RAST.__default.StaticTrait))));
          _2924_i = (_2924_i) + (BigInteger.One);
        }
      }
      Std.Wrappers._IOption<RAST._IExpr> _2926_fBody = Std.Wrappers.Option<RAST._IExpr>.Default();
      if ((m).dtor_hasBody) {
        RAST._IExpr _2927_earlyReturn;
        _2927_earlyReturn = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_None());
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source88 = (m).dtor_outVars;
        if (_source88.is_None) {
        } else {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2928___mcc_h0 = _source88.dtor_value;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2929_outVars = _2928___mcc_h0;
          {
            Dafny.ISequence<RAST._IExpr> _2930_tupleArgs;
            _2930_tupleArgs = Dafny.Sequence<RAST._IExpr>.FromElements();
            BigInteger _2931_outI;
            _2931_outI = BigInteger.Zero;
            while ((_2931_outI) < (new BigInteger((_2929_outVars).Count))) {
              Dafny.ISequence<Dafny.Rune> _2932_outVar;
              _2932_outVar = (_2929_outVars).Select(_2931_outI);
              _2930_tupleArgs = Dafny.Sequence<RAST._IExpr>.Concat(_2930_tupleArgs, Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Identifier(DCOMP.__default.escapeIdent((_2932_outVar)))));
              _2931_outI = (_2931_outI) + (BigInteger.One);
            }
            _2927_earlyReturn = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_Tuple(_2930_tupleArgs)));
          }
        }
        RAST._IExpr _2933_body;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2934___v46;
        RAST._IExpr _out79;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out80;
        DCOMP.COMP.GenStmts((m).dtor_body, (((m).dtor_isStatic) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None()) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))), _2912_env, true, _2927_earlyReturn, out _out79, out _out80);
        _2933_body = _out79;
        _2934___v46 = _out80;
        _2926_fBody = Std.Wrappers.Option<RAST._IExpr>.create_Some(_2933_body);
      } else {
        _2926_fBody = Std.Wrappers.Option<RAST._IExpr>.create_None();
      }
      s = RAST.ImplMember.create_FnDecl(_2917_visibility, RAST.Fn.create(_2918_fnName, _2923_typeParams, _2907_params, Std.Wrappers.Option<RAST._IType>.create_Some((((new BigInteger((_2914_retTypeArgs).Count)) == (BigInteger.One)) ? ((_2914_retTypeArgs).Select(BigInteger.Zero)) : (RAST.Type.create_TupleType(_2914_retTypeArgs)))), _2922_whereClauses, _2926_fBody));
      return s;
    }
    public static void GenStmts(Dafny.ISequence<DAST._IStatement> stmts, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, bool isLast, RAST._IExpr earlyReturn, out RAST._IExpr generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      generated = RAST.Expr.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2935_declarations;
      _2935_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _2936_i;
      _2936_i = BigInteger.Zero;
      while ((_2936_i) < (new BigInteger((stmts).Count))) {
        DAST._IStatement _2937_stmt;
        _2937_stmt = (stmts).Select(_2936_i);
        RAST._IExpr _2938_stmtExpr;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2939_recIdents;
        RAST._IExpr _out81;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out82;
        DCOMP.COMP.GenStmt(_2937_stmt, selfIdent, env, (isLast) && ((_2936_i) == ((new BigInteger((stmts).Count)) - (BigInteger.One))), earlyReturn, out _out81, out _out82);
        _2938_stmtExpr = _out81;
        _2939_recIdents = _out82;
        readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_2939_recIdents, _2935_declarations));
        DAST._IStatement _source89 = _2937_stmt;
        if (_source89.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _2940___mcc_h0 = _source89.dtor_name;
          DAST._IType _2941___mcc_h1 = _source89.dtor_typ;
          Std.Wrappers._IOption<DAST._IExpression> _2942___mcc_h2 = _source89.dtor_maybeValue;
          Dafny.ISequence<Dafny.Rune> _2943_name = _2940___mcc_h0;
          {
            _2935_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2935_declarations, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2943_name));
          }
        } else if (_source89.is_Assign) {
          DAST._IAssignLhs _2944___mcc_h6 = _source89.dtor_lhs;
          DAST._IExpression _2945___mcc_h7 = _source89.dtor_value;
        } else if (_source89.is_If) {
          DAST._IExpression _2946___mcc_h10 = _source89.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _2947___mcc_h11 = _source89.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _2948___mcc_h12 = _source89.dtor_els;
        } else if (_source89.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _2949___mcc_h16 = _source89.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _2950___mcc_h17 = _source89.dtor_body;
        } else if (_source89.is_While) {
          DAST._IExpression _2951___mcc_h20 = _source89.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _2952___mcc_h21 = _source89.dtor_body;
        } else if (_source89.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _2953___mcc_h24 = _source89.dtor_boundName;
          DAST._IType _2954___mcc_h25 = _source89.dtor_boundType;
          DAST._IExpression _2955___mcc_h26 = _source89.dtor_over;
          Dafny.ISequence<DAST._IStatement> _2956___mcc_h27 = _source89.dtor_body;
        } else if (_source89.is_Call) {
          DAST._IExpression _2957___mcc_h32 = _source89.dtor_on;
          DAST._ICallName _2958___mcc_h33 = _source89.dtor_callName;
          Dafny.ISequence<DAST._IType> _2959___mcc_h34 = _source89.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _2960___mcc_h35 = _source89.dtor_args;
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _2961___mcc_h36 = _source89.dtor_outs;
        } else if (_source89.is_Return) {
          DAST._IExpression _2962___mcc_h42 = _source89.dtor_expr;
        } else if (_source89.is_EarlyReturn) {
        } else if (_source89.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2963___mcc_h44 = _source89.dtor_toLabel;
        } else if (_source89.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _2964___mcc_h46 = _source89.dtor_body;
        } else if (_source89.is_JumpTailCallStart) {
        } else if (_source89.is_Halt) {
        } else {
          DAST._IExpression _2965___mcc_h48 = _source89.dtor_Print_a0;
        }
        generated = (generated).Then(_2938_stmtExpr);
        _2936_i = (_2936_i) + (BigInteger.One);
      }
    }
    public static void GenAssignLhs(DAST._IAssignLhs lhs, Dafny.ISequence<Dafny.Rune> rhs, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, out Dafny.ISequence<Dafny.Rune> generated, out bool needsIIFE, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      needsIIFE = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IAssignLhs _source90 = lhs;
      if (_source90.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _2966___mcc_h0 = _source90.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _source91 = _2966___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _2967___mcc_h1 = _source91;
        Dafny.ISequence<Dafny.Rune> _2968_id = _2967___mcc_h1;
        {
          if (((env).IsBorrowed(_2968_id)) || ((env).IsBorrowedMut(_2968_id))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), DCOMP.__default.escapeIdent(_2968_id));
          } else {
            generated = DCOMP.__default.escapeIdent(_2968_id);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2968_id);
          needsIIFE = false;
        }
      } else if (_source90.is_Select) {
        DAST._IExpression _2969___mcc_h2 = _source90.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _2970___mcc_h3 = _source90.dtor_field;
        Dafny.ISequence<Dafny.Rune> _2971_field = _2970___mcc_h3;
        DAST._IExpression _2972_on = _2969___mcc_h2;
        {
          RAST._IExpr _2973_onExpr;
          DCOMP._IOwnership _2974_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2975_recIdents;
          RAST._IExpr _out83;
          DCOMP._IOwnership _out84;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out85;
          DCOMP.COMP.GenExpr(_2972_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out83, out _out84, out _out85);
          _2973_onExpr = _out83;
          _2974_onOwned = _out84;
          _2975_recIdents = _out85;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*("), (_2973_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _2971_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()) = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          readIdents = _2975_recIdents;
          needsIIFE = true;
        }
      } else {
        DAST._IExpression _2976___mcc_h4 = _source90.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _2977___mcc_h5 = _source90.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _2978_indices = _2977___mcc_h5;
        DAST._IExpression _2979_on = _2976___mcc_h4;
        {
          RAST._IExpr _2980_onExpr;
          DCOMP._IOwnership _2981_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2982_recIdents;
          RAST._IExpr _out86;
          DCOMP._IOwnership _out87;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out88;
          DCOMP.COMP.GenExpr(_2979_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out86, out _out87, out _out88);
          _2980_onExpr = _out86;
          _2981_onOwned = _out87;
          _2982_recIdents = _out88;
          readIdents = _2982_recIdents;
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          BigInteger _2983_i;
          _2983_i = BigInteger.Zero;
          while ((_2983_i) < (new BigInteger((_2978_indices).Count))) {
            RAST._IExpr _2984_idx;
            DCOMP._IOwnership _2985___v50;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2986_recIdentsIdx;
            RAST._IExpr _out89;
            DCOMP._IOwnership _out90;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out91;
            DCOMP.COMP.GenExpr((_2978_indices).Select(_2983_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out89, out _out90, out _out91);
            _2984_idx = _out89;
            _2985___v50 = _out90;
            _2986_recIdentsIdx = _out91;
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let __idx")), Std.Strings.__default.OfNat(_2983_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = <usize as ::dafny_runtime::NumCast>::from(")), (_2984_idx)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap();\n"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2986_recIdentsIdx);
            _2983_i = (_2983_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, (_2980_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()"));
          _2983_i = BigInteger.Zero;
          while ((_2983_i) < (new BigInteger((_2978_indices).Count))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[__idx")), Std.Strings.__default.OfNat(_2983_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            _2983_i = (_2983_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}"));
          needsIIFE = true;
        }
      }
    }
    public static void GenStmt(DAST._IStatement stmt, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, bool isLast, RAST._IExpr earlyReturn, out RAST._IExpr generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      generated = RAST.Expr.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IStatement _source92 = stmt;
      if (_source92.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _2987___mcc_h0 = _source92.dtor_name;
        DAST._IType _2988___mcc_h1 = _source92.dtor_typ;
        Std.Wrappers._IOption<DAST._IExpression> _2989___mcc_h2 = _source92.dtor_maybeValue;
        Std.Wrappers._IOption<DAST._IExpression> _source93 = _2989___mcc_h2;
        if (_source93.is_None) {
          DAST._IType _2990_typ = _2988___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _2991_name = _2987___mcc_h0;
          {
            RAST._IType _2992_typeString;
            RAST._IType _out92;
            _out92 = DCOMP.COMP.GenType(_2990_typ, true, false);
            _2992_typeString = _out92;
            generated = RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMP.__default.escapeIdent(_2991_name), Std.Wrappers.Option<RAST._IType>.create_Some(_2992_typeString), Std.Wrappers.Option<RAST._IExpr>.create_None());
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IExpression _2993___mcc_h3 = _source93.dtor_value;
          DAST._IExpression _2994_expression = _2993___mcc_h3;
          DAST._IType _2995_typ = _2988___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _2996_name = _2987___mcc_h0;
          {
            RAST._IType _2997_typeString;
            RAST._IType _out93;
            _out93 = DCOMP.COMP.GenType(_2995_typ, true, false);
            _2997_typeString = _out93;
            RAST._IExpr _2998_expr;
            DCOMP._IOwnership _2999___v51;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3000_recIdents;
            RAST._IExpr _out94;
            DCOMP._IOwnership _out95;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out96;
            DCOMP.COMP.GenExpr(_2994_expression, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out94, out _out95, out _out96);
            _2998_expr = _out94;
            _2999___v51 = _out95;
            _3000_recIdents = _out96;
            generated = RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMP.__default.escapeIdent(_2996_name), Std.Wrappers.Option<RAST._IType>.create_Some(_2997_typeString), Std.Wrappers.Option<RAST._IExpr>.create_Some(_2998_expr));
            readIdents = _3000_recIdents;
          }
        }
      } else if (_source92.is_Assign) {
        DAST._IAssignLhs _3001___mcc_h4 = _source92.dtor_lhs;
        DAST._IExpression _3002___mcc_h5 = _source92.dtor_value;
        DAST._IExpression _3003_expression = _3002___mcc_h5;
        DAST._IAssignLhs _3004_lhs = _3001___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _3005_lhsGen;
          bool _3006_needsIIFE;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3007_recIdents;
          Dafny.ISequence<Dafny.Rune> _out97;
          bool _out98;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out99;
          DCOMP.COMP.GenAssignLhs(_3004_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), selfIdent, env, out _out97, out _out98, out _out99);
          _3005_lhsGen = _out97;
          _3006_needsIIFE = _out98;
          _3007_recIdents = _out99;
          RAST._IExpr _3008_exprGen;
          DCOMP._IOwnership _3009___v52;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3010_exprIdents;
          RAST._IExpr _out100;
          DCOMP._IOwnership _out101;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out102;
          DCOMP.COMP.GenExpr(_3003_expression, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out100, out _out101, out _out102);
          _3008_exprGen = _out100;
          _3009___v52 = _out101;
          _3010_exprIdents = _out102;
          if (_3006_needsIIFE) {
            generated = RAST.Expr.create_Block(RAST.Expr.create_StmtExpr(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_CONST(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(_3008_exprGen)), RAST.Expr.create_RawExpr(_3005_lhsGen)));
          } else {
            generated = RAST.Expr.create_AssignVar(_3005_lhsGen, _3008_exprGen);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3007_recIdents, _3010_exprIdents);
        }
      } else if (_source92.is_If) {
        DAST._IExpression _3011___mcc_h6 = _source92.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _3012___mcc_h7 = _source92.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _3013___mcc_h8 = _source92.dtor_els;
        Dafny.ISequence<DAST._IStatement> _3014_els = _3013___mcc_h8;
        Dafny.ISequence<DAST._IStatement> _3015_thn = _3012___mcc_h7;
        DAST._IExpression _3016_cond = _3011___mcc_h6;
        {
          RAST._IExpr _3017_cond;
          DCOMP._IOwnership _3018___v53;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3019_recIdents;
          RAST._IExpr _out103;
          DCOMP._IOwnership _out104;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out105;
          DCOMP.COMP.GenExpr(_3016_cond, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out103, out _out104, out _out105);
          _3017_cond = _out103;
          _3018___v53 = _out104;
          _3019_recIdents = _out105;
          Dafny.ISequence<Dafny.Rune> _3020_condString;
          _3020_condString = (_3017_cond)._ToString(DCOMP.__default.IND);
          readIdents = _3019_recIdents;
          RAST._IExpr _3021_thn;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3022_thnIdents;
          RAST._IExpr _out106;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out107;
          DCOMP.COMP.GenStmts(_3015_thn, selfIdent, env, isLast, earlyReturn, out _out106, out _out107);
          _3021_thn = _out106;
          _3022_thnIdents = _out107;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3022_thnIdents);
          RAST._IExpr _3023_els;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3024_elsIdents;
          RAST._IExpr _out108;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out109;
          DCOMP.COMP.GenStmts(_3014_els, selfIdent, env, isLast, earlyReturn, out _out108, out _out109);
          _3023_els = _out108;
          _3024_elsIdents = _out109;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3024_elsIdents);
          generated = RAST.Expr.create_IfExpr(_3017_cond, _3021_thn, _3023_els);
        }
      } else if (_source92.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _3025___mcc_h9 = _source92.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _3026___mcc_h10 = _source92.dtor_body;
        Dafny.ISequence<DAST._IStatement> _3027_body = _3026___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _3028_lbl = _3025___mcc_h9;
        {
          RAST._IExpr _3029_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3030_bodyIdents;
          RAST._IExpr _out110;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out111;
          DCOMP.COMP.GenStmts(_3027_body, selfIdent, env, isLast, earlyReturn, out _out110, out _out111);
          _3029_body = _out110;
          _3030_bodyIdents = _out111;
          readIdents = _3030_bodyIdents;
          generated = RAST.Expr.create_Labelled(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("label_"), _3028_lbl), RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_None(), RAST.Expr.create_StmtExpr(_3029_body, RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None()))));
        }
      } else if (_source92.is_While) {
        DAST._IExpression _3031___mcc_h11 = _source92.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _3032___mcc_h12 = _source92.dtor_body;
        Dafny.ISequence<DAST._IStatement> _3033_body = _3032___mcc_h12;
        DAST._IExpression _3034_cond = _3031___mcc_h11;
        {
          RAST._IExpr _3035_cond;
          DCOMP._IOwnership _3036___v54;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3037_recIdents;
          RAST._IExpr _out112;
          DCOMP._IOwnership _out113;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out114;
          DCOMP.COMP.GenExpr(_3034_cond, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out112, out _out113, out _out114);
          _3035_cond = _out112;
          _3036___v54 = _out113;
          _3037_recIdents = _out114;
          readIdents = _3037_recIdents;
          RAST._IExpr _3038_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3039_bodyIdents;
          RAST._IExpr _out115;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out116;
          DCOMP.COMP.GenStmts(_3033_body, selfIdent, env, false, earlyReturn, out _out115, out _out116);
          _3038_body = _out115;
          _3039_bodyIdents = _out116;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3039_bodyIdents);
          generated = RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_Some(_3035_cond), _3038_body);
        }
      } else if (_source92.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _3040___mcc_h13 = _source92.dtor_boundName;
        DAST._IType _3041___mcc_h14 = _source92.dtor_boundType;
        DAST._IExpression _3042___mcc_h15 = _source92.dtor_over;
        Dafny.ISequence<DAST._IStatement> _3043___mcc_h16 = _source92.dtor_body;
        Dafny.ISequence<DAST._IStatement> _3044_body = _3043___mcc_h16;
        DAST._IExpression _3045_over = _3042___mcc_h15;
        DAST._IType _3046_boundType = _3041___mcc_h14;
        Dafny.ISequence<Dafny.Rune> _3047_boundName = _3040___mcc_h13;
        {
          RAST._IExpr _3048_over;
          DCOMP._IOwnership _3049___v55;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3050_recIdents;
          RAST._IExpr _out117;
          DCOMP._IOwnership _out118;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out119;
          DCOMP.COMP.GenExpr(_3045_over, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out117, out _out118, out _out119);
          _3048_over = _out117;
          _3049___v55 = _out118;
          _3050_recIdents = _out119;
          RAST._IType _3051_boundTypeStr;
          RAST._IType _out120;
          _out120 = DCOMP.COMP.GenType(_3046_boundType, false, false);
          _3051_boundTypeStr = _out120;
          readIdents = _3050_recIdents;
          RAST._IExpr _3052_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3053_bodyIdents;
          RAST._IExpr _out121;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out122;
          DCOMP.COMP.GenStmts(_3044_body, selfIdent, (env).Add(_3047_boundName, DCOMP.Ownership.create_OwnershipBorrowed()), false, earlyReturn, out _out121, out _out122);
          _3052_body = _out121;
          _3053_bodyIdents = _out122;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3053_bodyIdents), Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3047_boundName));
          generated = RAST.Expr.create_For(DCOMP.__default.escapeIdent(_3047_boundName), _3048_over, _3052_body);
        }
      } else if (_source92.is_Call) {
        DAST._IExpression _3054___mcc_h17 = _source92.dtor_on;
        DAST._ICallName _3055___mcc_h18 = _source92.dtor_callName;
        Dafny.ISequence<DAST._IType> _3056___mcc_h19 = _source92.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _3057___mcc_h20 = _source92.dtor_args;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _3058___mcc_h21 = _source92.dtor_outs;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _3059_maybeOutVars = _3058___mcc_h21;
        Dafny.ISequence<DAST._IExpression> _3060_args = _3057___mcc_h20;
        Dafny.ISequence<DAST._IType> _3061_typeArgs = _3056___mcc_h19;
        DAST._ICallName _3062_name = _3055___mcc_h18;
        DAST._IExpression _3063_on = _3054___mcc_h17;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _3064_typeArgString;
          _3064_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_3061_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _3065_typeI;
            _3065_typeI = BigInteger.Zero;
            Dafny.ISequence<RAST._IType> _3066_typeArgsR;
            _3066_typeArgsR = Dafny.Sequence<RAST._IType>.FromElements();
            while ((_3065_typeI) < (new BigInteger((_3061_typeArgs).Count))) {
              RAST._IType _3067_tpe;
              RAST._IType _out123;
              _out123 = DCOMP.COMP.GenType((_3061_typeArgs).Select(_3065_typeI), false, false);
              _3067_tpe = _out123;
              _3066_typeArgsR = Dafny.Sequence<RAST._IType>.Concat(_3066_typeArgsR, Dafny.Sequence<RAST._IType>.FromElements(_3067_tpe));
              _3065_typeI = (_3065_typeI) + (BigInteger.One);
            }
            _3064_typeArgString = (RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _3066_typeArgsR))._ToString(DCOMP.__default.IND);
          }
          Dafny.ISequence<Dafny.Rune> _3068_argString;
          _3068_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _3069_i;
          _3069_i = BigInteger.Zero;
          while ((_3069_i) < (new BigInteger((_3060_args).Count))) {
            if ((_3069_i).Sign == 1) {
              _3068_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3068_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _3070_argExpr;
            DCOMP._IOwnership _3071_ownership;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3072_argIdents;
            RAST._IExpr _out124;
            DCOMP._IOwnership _out125;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out126;
            DCOMP.COMP.GenExpr((_3060_args).Select(_3069_i), selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out124, out _out125, out _out126);
            _3070_argExpr = _out124;
            _3071_ownership = _out125;
            _3072_argIdents = _out126;
            Dafny.ISequence<Dafny.Rune> _3073_argExprString;
            _3073_argExprString = (_3070_argExpr)._ToString(DCOMP.__default.IND);
            _3068_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3068_argString, _3073_argExprString);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3072_argIdents);
            _3069_i = (_3069_i) + (BigInteger.One);
          }
          RAST._IExpr _3074_onExpr;
          DCOMP._IOwnership _3075___v56;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3076_enclosingIdents;
          RAST._IExpr _out127;
          DCOMP._IOwnership _out128;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out129;
          DCOMP.COMP.GenExpr(_3063_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out127, out _out128, out _out129);
          _3074_onExpr = _out127;
          _3075___v56 = _out128;
          _3076_enclosingIdents = _out129;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3076_enclosingIdents);
          Dafny.ISequence<Dafny.Rune> _3077_enclosingString;
          _3077_enclosingString = (_3074_onExpr)._ToString(DCOMP.__default.IND);
          DAST._IExpression _source94 = _3063_on;
          if (_source94.is_Literal) {
            DAST._ILiteral _3078___mcc_h26 = _source94.dtor_Literal_a0;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _3079___mcc_h28 = _source94.dtor_Ident_a0;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3080___mcc_h30 = _source94.dtor_Companion_a0;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(_3077_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
            }
          } else if (_source94.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _3081___mcc_h32 = _source94.dtor_Tuple_a0;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3082___mcc_h34 = _source94.dtor_path;
            Dafny.ISequence<DAST._IType> _3083___mcc_h35 = _source94.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _3084___mcc_h36 = _source94.dtor_args;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _3085___mcc_h40 = _source94.dtor_dims;
            DAST._IType _3086___mcc_h41 = _source94.dtor_typ;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_DatatypeValue) {
            DAST._IDatatypeType _3087___mcc_h44 = _source94.dtor_datatypeType;
            Dafny.ISequence<DAST._IType> _3088___mcc_h45 = _source94.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _3089___mcc_h46 = _source94.dtor_variant;
            bool _3090___mcc_h47 = _source94.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _3091___mcc_h48 = _source94.dtor_contents;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_Convert) {
            DAST._IExpression _3092___mcc_h54 = _source94.dtor_value;
            DAST._IType _3093___mcc_h55 = _source94.dtor_from;
            DAST._IType _3094___mcc_h56 = _source94.dtor_typ;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_SeqConstruct) {
            DAST._IExpression _3095___mcc_h60 = _source94.dtor_length;
            DAST._IExpression _3096___mcc_h61 = _source94.dtor_elem;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _3097___mcc_h64 = _source94.dtor_elements;
            DAST._IType _3098___mcc_h65 = _source94.dtor_typ;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _3099___mcc_h68 = _source94.dtor_elements;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_MultisetValue) {
            Dafny.ISequence<DAST._IExpression> _3100___mcc_h70 = _source94.dtor_elements;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3101___mcc_h72 = _source94.dtor_mapElems;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_MapBuilder) {
            DAST._IType _3102___mcc_h74 = _source94.dtor_keyType;
            DAST._IType _3103___mcc_h75 = _source94.dtor_valueType;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_SeqUpdate) {
            DAST._IExpression _3104___mcc_h78 = _source94.dtor_expr;
            DAST._IExpression _3105___mcc_h79 = _source94.dtor_indexExpr;
            DAST._IExpression _3106___mcc_h80 = _source94.dtor_value;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_MapUpdate) {
            DAST._IExpression _3107___mcc_h84 = _source94.dtor_expr;
            DAST._IExpression _3108___mcc_h85 = _source94.dtor_indexExpr;
            DAST._IExpression _3109___mcc_h86 = _source94.dtor_value;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_SetBuilder) {
            DAST._IType _3110___mcc_h90 = _source94.dtor_elemType;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_ToMultiset) {
            DAST._IExpression _3111___mcc_h92 = _source94.dtor_ToMultiset_a0;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_This) {
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_Ite) {
            DAST._IExpression _3112___mcc_h94 = _source94.dtor_cond;
            DAST._IExpression _3113___mcc_h95 = _source94.dtor_thn;
            DAST._IExpression _3114___mcc_h96 = _source94.dtor_els;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_UnOp) {
            DAST._IUnaryOp _3115___mcc_h100 = _source94.dtor_unOp;
            DAST._IExpression _3116___mcc_h101 = _source94.dtor_expr;
            DAST.Format._IUnOpFormat _3117___mcc_h102 = _source94.dtor_format1;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_BinOp) {
            DAST._IBinOp _3118___mcc_h106 = _source94.dtor_op;
            DAST._IExpression _3119___mcc_h107 = _source94.dtor_left;
            DAST._IExpression _3120___mcc_h108 = _source94.dtor_right;
            DAST.Format._IBinOpFormat _3121___mcc_h109 = _source94.dtor_format2;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_ArrayLen) {
            DAST._IExpression _3122___mcc_h114 = _source94.dtor_expr;
            BigInteger _3123___mcc_h115 = _source94.dtor_dim;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_MapKeys) {
            DAST._IExpression _3124___mcc_h118 = _source94.dtor_expr;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_MapValues) {
            DAST._IExpression _3125___mcc_h120 = _source94.dtor_expr;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_Select) {
            DAST._IExpression _3126___mcc_h122 = _source94.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _3127___mcc_h123 = _source94.dtor_field;
            bool _3128___mcc_h124 = _source94.dtor_isConstant;
            bool _3129___mcc_h125 = _source94.dtor_onDatatype;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_SelectFn) {
            DAST._IExpression _3130___mcc_h130 = _source94.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _3131___mcc_h131 = _source94.dtor_field;
            bool _3132___mcc_h132 = _source94.dtor_onDatatype;
            bool _3133___mcc_h133 = _source94.dtor_isStatic;
            BigInteger _3134___mcc_h134 = _source94.dtor_arity;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_Index) {
            DAST._IExpression _3135___mcc_h140 = _source94.dtor_expr;
            DAST._ICollKind _3136___mcc_h141 = _source94.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _3137___mcc_h142 = _source94.dtor_indices;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_IndexRange) {
            DAST._IExpression _3138___mcc_h146 = _source94.dtor_expr;
            bool _3139___mcc_h147 = _source94.dtor_isArray;
            Std.Wrappers._IOption<DAST._IExpression> _3140___mcc_h148 = _source94.dtor_low;
            Std.Wrappers._IOption<DAST._IExpression> _3141___mcc_h149 = _source94.dtor_high;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_TupleSelect) {
            DAST._IExpression _3142___mcc_h154 = _source94.dtor_expr;
            BigInteger _3143___mcc_h155 = _source94.dtor_index;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_Call) {
            DAST._IExpression _3144___mcc_h158 = _source94.dtor_on;
            DAST._ICallName _3145___mcc_h159 = _source94.dtor_callName;
            Dafny.ISequence<DAST._IType> _3146___mcc_h160 = _source94.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _3147___mcc_h161 = _source94.dtor_args;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _3148___mcc_h166 = _source94.dtor_params;
            DAST._IType _3149___mcc_h167 = _source94.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _3150___mcc_h168 = _source94.dtor_body;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3151___mcc_h172 = _source94.dtor_values;
            DAST._IType _3152___mcc_h173 = _source94.dtor_retType;
            DAST._IExpression _3153___mcc_h174 = _source94.dtor_expr;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _3154___mcc_h178 = _source94.dtor_name;
            DAST._IType _3155___mcc_h179 = _source94.dtor_typ;
            DAST._IExpression _3156___mcc_h180 = _source94.dtor_value;
            DAST._IExpression _3157___mcc_h181 = _source94.dtor_iifeBody;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_Apply) {
            DAST._IExpression _3158___mcc_h186 = _source94.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _3159___mcc_h187 = _source94.dtor_args;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_TypeTest) {
            DAST._IExpression _3160___mcc_h190 = _source94.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3161___mcc_h191 = _source94.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _3162___mcc_h192 = _source94.dtor_variant;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_InitializationValue) {
            DAST._IType _3163___mcc_h196 = _source94.dtor_typ;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_BoolBoundedPool) {
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_SetBoundedPool) {
            DAST._IExpression _3164___mcc_h198 = _source94.dtor_of;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source94.is_SeqBoundedPool) {
            DAST._IExpression _3165___mcc_h200 = _source94.dtor_of;
            bool _3166___mcc_h201 = _source94.dtor_includeDuplicates;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else {
            DAST._IExpression _3167___mcc_h204 = _source94.dtor_lo;
            DAST._IExpression _3168___mcc_h205 = _source94.dtor_hi;
            {
              _3077_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3077_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          }
          Dafny.ISequence<Dafny.Rune> _3169_receiver;
          _3169_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source95 = _3059_maybeOutVars;
          if (_source95.is_None) {
          } else {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3170___mcc_h208 = _source95.dtor_value;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3171_outVars = _3170___mcc_h208;
            {
              if ((new BigInteger((_3171_outVars).Count)) > (BigInteger.One)) {
                _3169_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
              }
              BigInteger _3172_outI;
              _3172_outI = BigInteger.Zero;
              while ((_3172_outI) < (new BigInteger((_3171_outVars).Count))) {
                if ((_3172_outI).Sign == 1) {
                  _3169_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_3169_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                }
                Dafny.ISequence<Dafny.Rune> _3173_outVar;
                _3173_outVar = (_3171_outVars).Select(_3172_outI);
                _3169_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_3169_receiver, (_3173_outVar));
                _3172_outI = (_3172_outI) + (BigInteger.One);
              }
              if ((new BigInteger((_3171_outVars).Count)) > (BigInteger.One)) {
                _3169_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_3169_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
          }
          Dafny.ISequence<Dafny.Rune> _3174_renderedName;
          _3174_renderedName = ((System.Func<DAST._ICallName, Dafny.ISequence<Dafny.Rune>>)((_source96) => {
            if (_source96.is_Name) {
              Dafny.ISequence<Dafny.Rune> _3175___mcc_h209 = _source96.dtor_name;
              Dafny.ISequence<Dafny.Rune> _3176_name = _3175___mcc_h209;
              return DCOMP.__default.escapeIdent(_3176_name);
            } else if (_source96.is_MapBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else if (_source96.is_MapBuilderBuild) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            } else if (_source96.is_SetBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            }
          }))(_3062_name);
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((!(_3169_receiver).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_3169_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), _3077_enclosingString), _3174_renderedName), _3064_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3068_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");")));
        }
      } else if (_source92.is_Return) {
        DAST._IExpression _3177___mcc_h22 = _source92.dtor_expr;
        DAST._IExpression _3178_expr = _3177___mcc_h22;
        {
          RAST._IExpr _3179_expr;
          DCOMP._IOwnership _3180___v59;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3181_recIdents;
          RAST._IExpr _out130;
          DCOMP._IOwnership _out131;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out132;
          DCOMP.COMP.GenExpr(_3178_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out130, out _out131, out _out132);
          _3179_expr = _out130;
          _3180___v59 = _out131;
          _3181_recIdents = _out132;
          readIdents = _3181_recIdents;
          if (isLast) {
            generated = _3179_expr;
          } else {
            generated = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_Some(_3179_expr));
          }
        }
      } else if (_source92.is_EarlyReturn) {
        {
          generated = earlyReturn;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source92.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _3182___mcc_h23 = _source92.dtor_toLabel;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _3183_toLabel = _3182___mcc_h23;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source97 = _3183_toLabel;
          if (_source97.is_None) {
            {
              generated = RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None());
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3184___mcc_h210 = _source97.dtor_value;
            Dafny.ISequence<Dafny.Rune> _3185_lbl = _3184___mcc_h210;
            {
              generated = RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("label_"), _3185_lbl)));
            }
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source92.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _3186___mcc_h24 = _source92.dtor_body;
        Dafny.ISequence<DAST._IStatement> _3187_body = _3186___mcc_h24;
        {
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
          if (!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) {
            generated = (generated).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self.clone()")))));
          }
          BigInteger _3188_paramI;
          _3188_paramI = BigInteger.Zero;
          while ((_3188_paramI) < (new BigInteger(((env).dtor_names).Count))) {
            Dafny.ISequence<Dafny.Rune> _3189_param;
            _3189_param = ((env).dtor_names).Select(_3188_paramI);
            generated = (generated).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMP.__default.escapeIdent(_3189_param), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.__default.Clone(RAST.Expr.create_Identifier(DCOMP.__default.escapeIdent(_3189_param))))));
            _3188_paramI = (_3188_paramI) + (BigInteger.One);
          }
          RAST._IExpr _3190_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3191_bodyIdents;
          RAST._IExpr _out133;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out134;
          DCOMP.COMP.GenStmts(_3187_body, ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())), DCOMP.Environment.Empty(), false, earlyReturn, out _out133, out _out134);
          _3190_body = _out133;
          _3191_bodyIdents = _out134;
          readIdents = _3191_bodyIdents;
          generated = (generated).Then(RAST.Expr.create_Labelled(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("TAIL_CALL_START"), RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_None(), _3190_body)));
        }
      } else if (_source92.is_JumpTailCallStart) {
        {
          generated = RAST.Expr.create_Continue(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("TAIL_CALL_START")));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source92.is_Halt) {
        {
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else {
        DAST._IExpression _3192___mcc_h25 = _source92.dtor_Print_a0;
        DAST._IExpression _3193_e = _3192___mcc_h25;
        {
          RAST._IExpr _3194_printedExpr;
          DCOMP._IOwnership _3195_recOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3196_recIdents;
          RAST._IExpr _out135;
          DCOMP._IOwnership _out136;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out137;
          DCOMP.COMP.GenExpr(_3193_e, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out135, out _out136, out _out137);
          _3194_printedExpr = _out135;
          _3195_recOwnership = _out136;
          _3196_recIdents = _out137;
          Dafny.ISequence<Dafny.Rune> _3197_printedExprString;
          _3197_printedExprString = (_3194_printedExpr)._ToString(DCOMP.__default.IND);
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print!(\"{}\", ::dafny_runtime::DafnyPrintWrapper("), _3197_printedExprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("));")));
          readIdents = _3196_recIdents;
        }
      }
    }
    public static Std.Wrappers._IOption<RAST._IType> NewtypeToRustType(DAST._IType @base, DAST._INewtypeRange range)
    {
      DAST._INewtypeRange _source98 = range;
      if (_source98.is_U8) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U8());
      } else if (_source98.is_I8) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I8());
      } else if (_source98.is_U16) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U16());
      } else if (_source98.is_I16) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I16());
      } else if (_source98.is_U32) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U32());
      } else if (_source98.is_I32) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I32());
      } else if (_source98.is_U64) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U64());
      } else if (_source98.is_I64) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I64());
      } else if (_source98.is_U128) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U128());
      } else if (_source98.is_I128) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I128());
      } else if (_source98.is_BigInt) {
        return Std.Wrappers.Option<RAST._IType>.create_None();
      } else {
        return Std.Wrappers.Option<RAST._IType>.create_None();
      }
    }
    public static void FromOwned(RAST._IExpr r, DCOMP._IOwnership expectedOwnership, out RAST._IExpr @out, out DCOMP._IOwnership resultingOwnership)
    {
      @out = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      if ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed()))) {
        @out = r;
        resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
      } else if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipBorrowed())) {
        @out = RAST.__default.Borrow(r);
        resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
      } else {
        @out = RAST.__default.BorrowMut(r);
        resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowedMut();
      }
    }
    public static void FromOwnership(RAST._IExpr r, DCOMP._IOwnership ownership, DCOMP._IOwnership expectedOwnership, out RAST._IExpr @out, out DCOMP._IOwnership resultingOwnership)
    {
      @out = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      if (object.Equals(ownership, DCOMP.Ownership.create_OwnershipOwned())) {
        RAST._IExpr _out138;
        DCOMP._IOwnership _out139;
        DCOMP.COMP.FromOwned(r, expectedOwnership, out _out138, out _out139);
        @out = _out138;
        resultingOwnership = _out139;
        return ;
      } else if ((object.Equals(ownership, DCOMP.Ownership.create_OwnershipBorrowed())) || (object.Equals(ownership, DCOMP.Ownership.create_OwnershipBorrowedMut()))) {
        if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          @out = RAST.__default.Clone(r);
        } else if ((object.Equals(expectedOwnership, ownership)) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed()))) {
          resultingOwnership = ownership;
          @out = r;
        } else if ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipBorrowed())) && (object.Equals(ownership, DCOMP.Ownership.create_OwnershipBorrowedMut()))) {
          resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
          @out = r;
        } else {
          resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowedMut();
          @out = RAST.__default.BorrowMut(r);
        }
      } else {
      }
    }
    public static void GenExprLiteral(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source99 = e;
      DAST._ILiteral _3198___mcc_h0 = _source99.dtor_Literal_a0;
      DAST._ILiteral _source100 = _3198___mcc_h0;
      if (_source100.is_BoolLiteral) {
        bool _3199___mcc_h1 = _source100.dtor_BoolLiteral_a0;
        if ((_3199___mcc_h1) == (false)) {
          {
            RAST._IExpr _out140;
            DCOMP._IOwnership _out141;
            DCOMP.COMP.FromOwned(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false")), expectedOwnership, out _out140, out _out141);
            r = _out140;
            resultingOwnership = _out141;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            return ;
          }
        } else {
          {
            RAST._IExpr _out142;
            DCOMP._IOwnership _out143;
            DCOMP.COMP.FromOwned(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true")), expectedOwnership, out _out142, out _out143);
            r = _out142;
            resultingOwnership = _out143;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            return ;
          }
        }
      } else if (_source100.is_IntLiteral) {
        Dafny.ISequence<Dafny.Rune> _3200___mcc_h2 = _source100.dtor_IntLiteral_a0;
        DAST._IType _3201___mcc_h3 = _source100.dtor_IntLiteral_a1;
        DAST._IType _3202_t = _3201___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _3203_i = _3200___mcc_h2;
        {
          DAST._IType _source101 = _3202_t;
          if (_source101.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3204___mcc_h100 = _source101.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3205___mcc_h101 = _source101.dtor_typeArgs;
            DAST._IResolvedType _3206___mcc_h102 = _source101.dtor_resolved;
            DAST._IType _3207_o = _3202_t;
            {
              RAST._IType _3208_genType;
              RAST._IType _out144;
              _out144 = DCOMP.COMP.GenType(_3207_o, false, false);
              _3208_genType = _out144;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3203_i), _3208_genType);
            }
          } else if (_source101.is_Nullable) {
            DAST._IType _3209___mcc_h106 = _source101.dtor_Nullable_a0;
            DAST._IType _3210_o = _3202_t;
            {
              RAST._IType _3211_genType;
              RAST._IType _out145;
              _out145 = DCOMP.COMP.GenType(_3210_o, false, false);
              _3211_genType = _out145;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3203_i), _3211_genType);
            }
          } else if (_source101.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3212___mcc_h108 = _source101.dtor_Tuple_a0;
            DAST._IType _3213_o = _3202_t;
            {
              RAST._IType _3214_genType;
              RAST._IType _out146;
              _out146 = DCOMP.COMP.GenType(_3213_o, false, false);
              _3214_genType = _out146;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3203_i), _3214_genType);
            }
          } else if (_source101.is_Array) {
            DAST._IType _3215___mcc_h110 = _source101.dtor_element;
            BigInteger _3216___mcc_h111 = _source101.dtor_dims;
            DAST._IType _3217_o = _3202_t;
            {
              RAST._IType _3218_genType;
              RAST._IType _out147;
              _out147 = DCOMP.COMP.GenType(_3217_o, false, false);
              _3218_genType = _out147;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3203_i), _3218_genType);
            }
          } else if (_source101.is_Seq) {
            DAST._IType _3219___mcc_h114 = _source101.dtor_element;
            DAST._IType _3220_o = _3202_t;
            {
              RAST._IType _3221_genType;
              RAST._IType _out148;
              _out148 = DCOMP.COMP.GenType(_3220_o, false, false);
              _3221_genType = _out148;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3203_i), _3221_genType);
            }
          } else if (_source101.is_Set) {
            DAST._IType _3222___mcc_h116 = _source101.dtor_element;
            DAST._IType _3223_o = _3202_t;
            {
              RAST._IType _3224_genType;
              RAST._IType _out149;
              _out149 = DCOMP.COMP.GenType(_3223_o, false, false);
              _3224_genType = _out149;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3203_i), _3224_genType);
            }
          } else if (_source101.is_Multiset) {
            DAST._IType _3225___mcc_h118 = _source101.dtor_element;
            DAST._IType _3226_o = _3202_t;
            {
              RAST._IType _3227_genType;
              RAST._IType _out150;
              _out150 = DCOMP.COMP.GenType(_3226_o, false, false);
              _3227_genType = _out150;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3203_i), _3227_genType);
            }
          } else if (_source101.is_Map) {
            DAST._IType _3228___mcc_h120 = _source101.dtor_key;
            DAST._IType _3229___mcc_h121 = _source101.dtor_value;
            DAST._IType _3230_o = _3202_t;
            {
              RAST._IType _3231_genType;
              RAST._IType _out151;
              _out151 = DCOMP.COMP.GenType(_3230_o, false, false);
              _3231_genType = _out151;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3203_i), _3231_genType);
            }
          } else if (_source101.is_SetBuilder) {
            DAST._IType _3232___mcc_h124 = _source101.dtor_element;
            DAST._IType _3233_o = _3202_t;
            {
              RAST._IType _3234_genType;
              RAST._IType _out152;
              _out152 = DCOMP.COMP.GenType(_3233_o, false, false);
              _3234_genType = _out152;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3203_i), _3234_genType);
            }
          } else if (_source101.is_MapBuilder) {
            DAST._IType _3235___mcc_h126 = _source101.dtor_key;
            DAST._IType _3236___mcc_h127 = _source101.dtor_value;
            DAST._IType _3237_o = _3202_t;
            {
              RAST._IType _3238_genType;
              RAST._IType _out153;
              _out153 = DCOMP.COMP.GenType(_3237_o, false, false);
              _3238_genType = _out153;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3203_i), _3238_genType);
            }
          } else if (_source101.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3239___mcc_h130 = _source101.dtor_args;
            DAST._IType _3240___mcc_h131 = _source101.dtor_result;
            DAST._IType _3241_o = _3202_t;
            {
              RAST._IType _3242_genType;
              RAST._IType _out154;
              _out154 = DCOMP.COMP.GenType(_3241_o, false, false);
              _3242_genType = _out154;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3203_i), _3242_genType);
            }
          } else if (_source101.is_Primitive) {
            DAST._IPrimitive _3243___mcc_h134 = _source101.dtor_Primitive_a0;
            DAST._IPrimitive _source102 = _3243___mcc_h134;
            if (_source102.is_Int) {
              {
                if ((new BigInteger((_3203_i).Count)) <= (new BigInteger(4))) {
                  r = (((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyInt"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from"))).Apply1(RAST.Expr.create_LiteralInt(_3203_i));
                } else {
                  r = (((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyInt"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from"))).Apply1(RAST.Expr.create_LiteralString(_3203_i, true));
                }
              }
            } else if (_source102.is_Real) {
              DAST._IType _3244_o = _3202_t;
              {
                RAST._IType _3245_genType;
                RAST._IType _out155;
                _out155 = DCOMP.COMP.GenType(_3244_o, false, false);
                _3245_genType = _out155;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3203_i), _3245_genType);
              }
            } else if (_source102.is_String) {
              DAST._IType _3246_o = _3202_t;
              {
                RAST._IType _3247_genType;
                RAST._IType _out156;
                _out156 = DCOMP.COMP.GenType(_3246_o, false, false);
                _3247_genType = _out156;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3203_i), _3247_genType);
              }
            } else if (_source102.is_Bool) {
              DAST._IType _3248_o = _3202_t;
              {
                RAST._IType _3249_genType;
                RAST._IType _out157;
                _out157 = DCOMP.COMP.GenType(_3248_o, false, false);
                _3249_genType = _out157;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3203_i), _3249_genType);
              }
            } else {
              DAST._IType _3250_o = _3202_t;
              {
                RAST._IType _3251_genType;
                RAST._IType _out158;
                _out158 = DCOMP.COMP.GenType(_3250_o, false, false);
                _3251_genType = _out158;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3203_i), _3251_genType);
              }
            }
          } else if (_source101.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3252___mcc_h136 = _source101.dtor_Passthrough_a0;
            DAST._IType _3253_o = _3202_t;
            {
              RAST._IType _3254_genType;
              RAST._IType _out159;
              _out159 = DCOMP.COMP.GenType(_3253_o, false, false);
              _3254_genType = _out159;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3203_i), _3254_genType);
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3255___mcc_h138 = _source101.dtor_TypeArg_a0;
            DAST._IType _3256_o = _3202_t;
            {
              RAST._IType _3257_genType;
              RAST._IType _out160;
              _out160 = DCOMP.COMP.GenType(_3256_o, false, false);
              _3257_genType = _out160;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3203_i), _3257_genType);
            }
          }
          RAST._IExpr _out161;
          DCOMP._IOwnership _out162;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out161, out _out162);
          r = _out161;
          resultingOwnership = _out162;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source100.is_DecLiteral) {
        Dafny.ISequence<Dafny.Rune> _3258___mcc_h4 = _source100.dtor_DecLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _3259___mcc_h5 = _source100.dtor_DecLiteral_a1;
        DAST._IType _3260___mcc_h6 = _source100.dtor_DecLiteral_a2;
        DAST._IType _3261_t = _3260___mcc_h6;
        Dafny.ISequence<Dafny.Rune> _3262_d = _3259___mcc_h5;
        Dafny.ISequence<Dafny.Rune> _3263_n = _3258___mcc_h4;
        {
          DAST._IType _source103 = _3261_t;
          if (_source103.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3264___mcc_h140 = _source103.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3265___mcc_h141 = _source103.dtor_typeArgs;
            DAST._IResolvedType _3266___mcc_h142 = _source103.dtor_resolved;
            DAST._IType _3267_o = _3261_t;
            {
              RAST._IType _3268_genType;
              RAST._IType _out163;
              _out163 = DCOMP.COMP.GenType(_3267_o, false, false);
              _3268_genType = _out163;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3263_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3262_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3268_genType);
            }
          } else if (_source103.is_Nullable) {
            DAST._IType _3269___mcc_h146 = _source103.dtor_Nullable_a0;
            DAST._IType _3270_o = _3261_t;
            {
              RAST._IType _3271_genType;
              RAST._IType _out164;
              _out164 = DCOMP.COMP.GenType(_3270_o, false, false);
              _3271_genType = _out164;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3263_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3262_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3271_genType);
            }
          } else if (_source103.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3272___mcc_h148 = _source103.dtor_Tuple_a0;
            DAST._IType _3273_o = _3261_t;
            {
              RAST._IType _3274_genType;
              RAST._IType _out165;
              _out165 = DCOMP.COMP.GenType(_3273_o, false, false);
              _3274_genType = _out165;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3263_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3262_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3274_genType);
            }
          } else if (_source103.is_Array) {
            DAST._IType _3275___mcc_h150 = _source103.dtor_element;
            BigInteger _3276___mcc_h151 = _source103.dtor_dims;
            DAST._IType _3277_o = _3261_t;
            {
              RAST._IType _3278_genType;
              RAST._IType _out166;
              _out166 = DCOMP.COMP.GenType(_3277_o, false, false);
              _3278_genType = _out166;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3263_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3262_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3278_genType);
            }
          } else if (_source103.is_Seq) {
            DAST._IType _3279___mcc_h154 = _source103.dtor_element;
            DAST._IType _3280_o = _3261_t;
            {
              RAST._IType _3281_genType;
              RAST._IType _out167;
              _out167 = DCOMP.COMP.GenType(_3280_o, false, false);
              _3281_genType = _out167;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3263_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3262_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3281_genType);
            }
          } else if (_source103.is_Set) {
            DAST._IType _3282___mcc_h156 = _source103.dtor_element;
            DAST._IType _3283_o = _3261_t;
            {
              RAST._IType _3284_genType;
              RAST._IType _out168;
              _out168 = DCOMP.COMP.GenType(_3283_o, false, false);
              _3284_genType = _out168;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3263_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3262_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3284_genType);
            }
          } else if (_source103.is_Multiset) {
            DAST._IType _3285___mcc_h158 = _source103.dtor_element;
            DAST._IType _3286_o = _3261_t;
            {
              RAST._IType _3287_genType;
              RAST._IType _out169;
              _out169 = DCOMP.COMP.GenType(_3286_o, false, false);
              _3287_genType = _out169;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3263_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3262_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3287_genType);
            }
          } else if (_source103.is_Map) {
            DAST._IType _3288___mcc_h160 = _source103.dtor_key;
            DAST._IType _3289___mcc_h161 = _source103.dtor_value;
            DAST._IType _3290_o = _3261_t;
            {
              RAST._IType _3291_genType;
              RAST._IType _out170;
              _out170 = DCOMP.COMP.GenType(_3290_o, false, false);
              _3291_genType = _out170;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3263_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3262_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3291_genType);
            }
          } else if (_source103.is_SetBuilder) {
            DAST._IType _3292___mcc_h164 = _source103.dtor_element;
            DAST._IType _3293_o = _3261_t;
            {
              RAST._IType _3294_genType;
              RAST._IType _out171;
              _out171 = DCOMP.COMP.GenType(_3293_o, false, false);
              _3294_genType = _out171;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3263_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3262_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3294_genType);
            }
          } else if (_source103.is_MapBuilder) {
            DAST._IType _3295___mcc_h166 = _source103.dtor_key;
            DAST._IType _3296___mcc_h167 = _source103.dtor_value;
            DAST._IType _3297_o = _3261_t;
            {
              RAST._IType _3298_genType;
              RAST._IType _out172;
              _out172 = DCOMP.COMP.GenType(_3297_o, false, false);
              _3298_genType = _out172;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3263_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3262_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3298_genType);
            }
          } else if (_source103.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3299___mcc_h170 = _source103.dtor_args;
            DAST._IType _3300___mcc_h171 = _source103.dtor_result;
            DAST._IType _3301_o = _3261_t;
            {
              RAST._IType _3302_genType;
              RAST._IType _out173;
              _out173 = DCOMP.COMP.GenType(_3301_o, false, false);
              _3302_genType = _out173;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3263_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3262_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3302_genType);
            }
          } else if (_source103.is_Primitive) {
            DAST._IPrimitive _3303___mcc_h174 = _source103.dtor_Primitive_a0;
            DAST._IPrimitive _source104 = _3303___mcc_h174;
            if (_source104.is_Int) {
              DAST._IType _3304_o = _3261_t;
              {
                RAST._IType _3305_genType;
                RAST._IType _out174;
                _out174 = DCOMP.COMP.GenType(_3304_o, false, false);
                _3305_genType = _out174;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3263_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3262_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3305_genType);
              }
            } else if (_source104.is_Real) {
              {
                r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::new(::dafny_runtime::BigInt::parse_bytes(b\""), _3263_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap(), ::dafny_runtime::BigInt::parse_bytes(b\"")), _3262_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"))));
              }
            } else if (_source104.is_String) {
              DAST._IType _3306_o = _3261_t;
              {
                RAST._IType _3307_genType;
                RAST._IType _out175;
                _out175 = DCOMP.COMP.GenType(_3306_o, false, false);
                _3307_genType = _out175;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3263_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3262_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3307_genType);
              }
            } else if (_source104.is_Bool) {
              DAST._IType _3308_o = _3261_t;
              {
                RAST._IType _3309_genType;
                RAST._IType _out176;
                _out176 = DCOMP.COMP.GenType(_3308_o, false, false);
                _3309_genType = _out176;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3263_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3262_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3309_genType);
              }
            } else {
              DAST._IType _3310_o = _3261_t;
              {
                RAST._IType _3311_genType;
                RAST._IType _out177;
                _out177 = DCOMP.COMP.GenType(_3310_o, false, false);
                _3311_genType = _out177;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3263_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3262_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3311_genType);
              }
            }
          } else if (_source103.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3312___mcc_h176 = _source103.dtor_Passthrough_a0;
            DAST._IType _3313_o = _3261_t;
            {
              RAST._IType _3314_genType;
              RAST._IType _out178;
              _out178 = DCOMP.COMP.GenType(_3313_o, false, false);
              _3314_genType = _out178;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3263_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3262_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3314_genType);
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3315___mcc_h178 = _source103.dtor_TypeArg_a0;
            DAST._IType _3316_o = _3261_t;
            {
              RAST._IType _3317_genType;
              RAST._IType _out179;
              _out179 = DCOMP.COMP.GenType(_3316_o, false, false);
              _3317_genType = _out179;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3263_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3262_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3317_genType);
            }
          }
          RAST._IExpr _out180;
          DCOMP._IOwnership _out181;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out180, out _out181);
          r = _out180;
          resultingOwnership = _out181;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source100.is_StringLiteral) {
        Dafny.ISequence<Dafny.Rune> _3318___mcc_h7 = _source100.dtor_StringLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _3319_l = _3318___mcc_h7;
        {
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("string_of"))).Apply1(RAST.Expr.create_LiteralString(_3319_l, false));
          RAST._IExpr _out182;
          DCOMP._IOwnership _out183;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out182, out _out183);
          r = _out182;
          resultingOwnership = _out183;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source100.is_CharLiteral) {
        Dafny.Rune _3320___mcc_h8 = _source100.dtor_CharLiteral_a0;
        Dafny.Rune _3321_c = _3320___mcc_h8;
        {
          r = RAST.Expr.create_LiteralInt(Std.Strings.__default.OfNat(new BigInteger((_3321_c).Value)));
          r = RAST.Expr.create_TypeAscription(r, DCOMP.__default.DafnyCharUnderlying);
          r = ((RAST.__default.dafny__runtime).MSel(DCOMP.__default.DafnyChar)).Apply1(r);
          RAST._IExpr _out184;
          DCOMP._IOwnership _out185;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out184, out _out185);
          r = _out184;
          resultingOwnership = _out185;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else {
        DAST._IType _3322___mcc_h9 = _source100.dtor_Null_a0;
        DAST._IType _3323_tpe = _3322___mcc_h9;
        {
          RAST._IType _3324_tpeGen;
          RAST._IType _out186;
          _out186 = DCOMP.COMP.GenType(_3323_tpe, false, false);
          _3324_tpeGen = _out186;
          r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("None")), _3324_tpeGen);
          RAST._IExpr _out187;
          DCOMP._IOwnership _out188;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out187, out _out188);
          r = _out187;
          resultingOwnership = _out188;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      }
    }
    public static void GenExprBinary(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs50 = e;
      DAST._IBinOp _3325_op = _let_tmp_rhs50.dtor_op;
      DAST._IExpression _3326_lExpr = _let_tmp_rhs50.dtor_left;
      DAST._IExpression _3327_rExpr = _let_tmp_rhs50.dtor_right;
      DAST.Format._IBinOpFormat _3328_format = _let_tmp_rhs50.dtor_format2;
      bool _3329_becomesLeftCallsRight;
      _3329_becomesLeftCallsRight = ((System.Func<DAST._IBinOp, bool>)((_source105) => {
        if (_source105.is_Eq) {
          bool _3330___mcc_h0 = _source105.dtor_referential;
          bool _3331___mcc_h1 = _source105.dtor_nullable;
          return false;
        } else if (_source105.is_Div) {
          return false;
        } else if (_source105.is_EuclidianDiv) {
          return false;
        } else if (_source105.is_Mod) {
          return false;
        } else if (_source105.is_EuclidianMod) {
          return false;
        } else if (_source105.is_Lt) {
          return false;
        } else if (_source105.is_LtChar) {
          return false;
        } else if (_source105.is_Plus) {
          return false;
        } else if (_source105.is_Minus) {
          return false;
        } else if (_source105.is_Times) {
          return false;
        } else if (_source105.is_BitwiseAnd) {
          return false;
        } else if (_source105.is_BitwiseOr) {
          return false;
        } else if (_source105.is_BitwiseXor) {
          return false;
        } else if (_source105.is_BitwiseShiftRight) {
          return false;
        } else if (_source105.is_BitwiseShiftLeft) {
          return false;
        } else if (_source105.is_And) {
          return false;
        } else if (_source105.is_Or) {
          return false;
        } else if (_source105.is_In) {
          return false;
        } else if (_source105.is_SeqProperPrefix) {
          return false;
        } else if (_source105.is_SeqPrefix) {
          return false;
        } else if (_source105.is_SetMerge) {
          return true;
        } else if (_source105.is_SetSubtraction) {
          return true;
        } else if (_source105.is_SetIntersection) {
          return true;
        } else if (_source105.is_Subset) {
          return false;
        } else if (_source105.is_ProperSubset) {
          return false;
        } else if (_source105.is_SetDisjoint) {
          return true;
        } else if (_source105.is_MapMerge) {
          return true;
        } else if (_source105.is_MapSubtraction) {
          return true;
        } else if (_source105.is_MultisetMerge) {
          return true;
        } else if (_source105.is_MultisetSubtraction) {
          return true;
        } else if (_source105.is_MultisetIntersection) {
          return true;
        } else if (_source105.is_Submultiset) {
          return false;
        } else if (_source105.is_ProperSubmultiset) {
          return false;
        } else if (_source105.is_MultisetDisjoint) {
          return true;
        } else if (_source105.is_Concat) {
          return true;
        } else {
          Dafny.ISequence<Dafny.Rune> _3332___mcc_h4 = _source105.dtor_Passthrough_a0;
          return false;
        }
      }))(_3325_op);
      bool _3333_becomesRightCallsLeft;
      _3333_becomesRightCallsLeft = ((System.Func<DAST._IBinOp, bool>)((_source106) => {
        if (_source106.is_Eq) {
          bool _3334___mcc_h6 = _source106.dtor_referential;
          bool _3335___mcc_h7 = _source106.dtor_nullable;
          return false;
        } else if (_source106.is_Div) {
          return false;
        } else if (_source106.is_EuclidianDiv) {
          return false;
        } else if (_source106.is_Mod) {
          return false;
        } else if (_source106.is_EuclidianMod) {
          return false;
        } else if (_source106.is_Lt) {
          return false;
        } else if (_source106.is_LtChar) {
          return false;
        } else if (_source106.is_Plus) {
          return false;
        } else if (_source106.is_Minus) {
          return false;
        } else if (_source106.is_Times) {
          return false;
        } else if (_source106.is_BitwiseAnd) {
          return false;
        } else if (_source106.is_BitwiseOr) {
          return false;
        } else if (_source106.is_BitwiseXor) {
          return false;
        } else if (_source106.is_BitwiseShiftRight) {
          return false;
        } else if (_source106.is_BitwiseShiftLeft) {
          return false;
        } else if (_source106.is_And) {
          return false;
        } else if (_source106.is_Or) {
          return false;
        } else if (_source106.is_In) {
          return true;
        } else if (_source106.is_SeqProperPrefix) {
          return false;
        } else if (_source106.is_SeqPrefix) {
          return false;
        } else if (_source106.is_SetMerge) {
          return false;
        } else if (_source106.is_SetSubtraction) {
          return false;
        } else if (_source106.is_SetIntersection) {
          return false;
        } else if (_source106.is_Subset) {
          return false;
        } else if (_source106.is_ProperSubset) {
          return false;
        } else if (_source106.is_SetDisjoint) {
          return false;
        } else if (_source106.is_MapMerge) {
          return false;
        } else if (_source106.is_MapSubtraction) {
          return false;
        } else if (_source106.is_MultisetMerge) {
          return false;
        } else if (_source106.is_MultisetSubtraction) {
          return false;
        } else if (_source106.is_MultisetIntersection) {
          return false;
        } else if (_source106.is_Submultiset) {
          return false;
        } else if (_source106.is_ProperSubmultiset) {
          return false;
        } else if (_source106.is_MultisetDisjoint) {
          return false;
        } else if (_source106.is_Concat) {
          return false;
        } else {
          Dafny.ISequence<Dafny.Rune> _3336___mcc_h10 = _source106.dtor_Passthrough_a0;
          return false;
        }
      }))(_3325_op);
      bool _3337_becomesCallLeftRight;
      _3337_becomesCallLeftRight = ((System.Func<DAST._IBinOp, bool>)((_source107) => {
        if (_source107.is_Eq) {
          bool _3338___mcc_h12 = _source107.dtor_referential;
          bool _3339___mcc_h13 = _source107.dtor_nullable;
          if ((_3338___mcc_h12) == (true)) {
            if ((_3339___mcc_h13) == (false)) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else if (_source107.is_Div) {
          return false;
        } else if (_source107.is_EuclidianDiv) {
          return false;
        } else if (_source107.is_Mod) {
          return false;
        } else if (_source107.is_EuclidianMod) {
          return false;
        } else if (_source107.is_Lt) {
          return false;
        } else if (_source107.is_LtChar) {
          return false;
        } else if (_source107.is_Plus) {
          return false;
        } else if (_source107.is_Minus) {
          return false;
        } else if (_source107.is_Times) {
          return false;
        } else if (_source107.is_BitwiseAnd) {
          return false;
        } else if (_source107.is_BitwiseOr) {
          return false;
        } else if (_source107.is_BitwiseXor) {
          return false;
        } else if (_source107.is_BitwiseShiftRight) {
          return false;
        } else if (_source107.is_BitwiseShiftLeft) {
          return false;
        } else if (_source107.is_And) {
          return false;
        } else if (_source107.is_Or) {
          return false;
        } else if (_source107.is_In) {
          return false;
        } else if (_source107.is_SeqProperPrefix) {
          return false;
        } else if (_source107.is_SeqPrefix) {
          return false;
        } else if (_source107.is_SetMerge) {
          return false;
        } else if (_source107.is_SetSubtraction) {
          return false;
        } else if (_source107.is_SetIntersection) {
          return false;
        } else if (_source107.is_Subset) {
          return false;
        } else if (_source107.is_ProperSubset) {
          return false;
        } else if (_source107.is_SetDisjoint) {
          return false;
        } else if (_source107.is_MapMerge) {
          return false;
        } else if (_source107.is_MapSubtraction) {
          return false;
        } else if (_source107.is_MultisetMerge) {
          return false;
        } else if (_source107.is_MultisetSubtraction) {
          return false;
        } else if (_source107.is_MultisetIntersection) {
          return false;
        } else if (_source107.is_Submultiset) {
          return false;
        } else if (_source107.is_ProperSubmultiset) {
          return false;
        } else if (_source107.is_MultisetDisjoint) {
          return false;
        } else if (_source107.is_Concat) {
          return false;
        } else {
          Dafny.ISequence<Dafny.Rune> _3340___mcc_h16 = _source107.dtor_Passthrough_a0;
          return false;
        }
      }))(_3325_op);
      DCOMP._IOwnership _3341_expectedLeftOwnership;
      _3341_expectedLeftOwnership = ((_3329_becomesLeftCallsRight) ? (DCOMP.Ownership.create_OwnershipAutoBorrowed()) : ((((_3333_becomesRightCallsLeft) || (_3337_becomesCallLeftRight)) ? (DCOMP.Ownership.create_OwnershipBorrowed()) : (DCOMP.Ownership.create_OwnershipOwned()))));
      DCOMP._IOwnership _3342_expectedRightOwnership;
      _3342_expectedRightOwnership = (((_3329_becomesLeftCallsRight) || (_3337_becomesCallLeftRight)) ? (DCOMP.Ownership.create_OwnershipBorrowed()) : (((_3333_becomesRightCallsLeft) ? (DCOMP.Ownership.create_OwnershipAutoBorrowed()) : (DCOMP.Ownership.create_OwnershipOwned()))));
      RAST._IExpr _3343_left;
      DCOMP._IOwnership _3344___v64;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3345_recIdentsL;
      RAST._IExpr _out189;
      DCOMP._IOwnership _out190;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out191;
      DCOMP.COMP.GenExpr(_3326_lExpr, selfIdent, env, _3341_expectedLeftOwnership, out _out189, out _out190, out _out191);
      _3343_left = _out189;
      _3344___v64 = _out190;
      _3345_recIdentsL = _out191;
      RAST._IExpr _3346_right;
      DCOMP._IOwnership _3347___v65;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3348_recIdentsR;
      RAST._IExpr _out192;
      DCOMP._IOwnership _out193;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out194;
      DCOMP.COMP.GenExpr(_3327_rExpr, selfIdent, env, _3342_expectedRightOwnership, out _out192, out _out193, out _out194);
      _3346_right = _out192;
      _3347___v65 = _out193;
      _3348_recIdentsR = _out194;
      DAST._IBinOp _source108 = _3325_op;
      if (_source108.is_Eq) {
        bool _3349___mcc_h18 = _source108.dtor_referential;
        bool _3350___mcc_h19 = _source108.dtor_nullable;
        {
          if ((DCOMP.COMP.OpTable).Contains(_3325_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3325_op), _3343_left, _3346_right, _3328_format);
          } else {
            DAST._IBinOp _source109 = _3325_op;
            if (_source109.is_Eq) {
              bool _3351___mcc_h24 = _source109.dtor_referential;
              bool _3352___mcc_h25 = _source109.dtor_nullable;
              bool _3353_nullable = _3352___mcc_h25;
              bool _3354_referential = _3351___mcc_h24;
              {
                if (_3354_referential) {
                  if (_3353_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3343_left, _3346_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source109.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
              }
            } else if (_source109.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3355___mcc_h26 = _source109.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3356_op = _3355___mcc_h26;
              {
                r = RAST.Expr.create_BinaryOp(_3356_op, _3343_left, _3346_right, _3328_format);
              }
            }
          }
        }
      } else if (_source108.is_Div) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3325_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3325_op), _3343_left, _3346_right, _3328_format);
          } else {
            DAST._IBinOp _source110 = _3325_op;
            if (_source110.is_Eq) {
              bool _3357___mcc_h27 = _source110.dtor_referential;
              bool _3358___mcc_h28 = _source110.dtor_nullable;
              bool _3359_nullable = _3358___mcc_h28;
              bool _3360_referential = _3357___mcc_h27;
              {
                if (_3360_referential) {
                  if (_3359_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3343_left, _3346_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source110.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
              }
            } else if (_source110.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3361___mcc_h29 = _source110.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3362_op = _3361___mcc_h29;
              {
                r = RAST.Expr.create_BinaryOp(_3362_op, _3343_left, _3346_right, _3328_format);
              }
            }
          }
        }
      } else if (_source108.is_EuclidianDiv) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3325_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3325_op), _3343_left, _3346_right, _3328_format);
          } else {
            DAST._IBinOp _source111 = _3325_op;
            if (_source111.is_Eq) {
              bool _3363___mcc_h30 = _source111.dtor_referential;
              bool _3364___mcc_h31 = _source111.dtor_nullable;
              bool _3365_nullable = _3364___mcc_h31;
              bool _3366_referential = _3363___mcc_h30;
              {
                if (_3366_referential) {
                  if (_3365_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3343_left, _3346_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source111.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
              }
            } else if (_source111.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3367___mcc_h32 = _source111.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3368_op = _3367___mcc_h32;
              {
                r = RAST.Expr.create_BinaryOp(_3368_op, _3343_left, _3346_right, _3328_format);
              }
            }
          }
        }
      } else if (_source108.is_Mod) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3325_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3325_op), _3343_left, _3346_right, _3328_format);
          } else {
            DAST._IBinOp _source112 = _3325_op;
            if (_source112.is_Eq) {
              bool _3369___mcc_h33 = _source112.dtor_referential;
              bool _3370___mcc_h34 = _source112.dtor_nullable;
              bool _3371_nullable = _3370___mcc_h34;
              bool _3372_referential = _3369___mcc_h33;
              {
                if (_3372_referential) {
                  if (_3371_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3343_left, _3346_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source112.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
              }
            } else if (_source112.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3373___mcc_h35 = _source112.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3374_op = _3373___mcc_h35;
              {
                r = RAST.Expr.create_BinaryOp(_3374_op, _3343_left, _3346_right, _3328_format);
              }
            }
          }
        }
      } else if (_source108.is_EuclidianMod) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3325_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3325_op), _3343_left, _3346_right, _3328_format);
          } else {
            DAST._IBinOp _source113 = _3325_op;
            if (_source113.is_Eq) {
              bool _3375___mcc_h36 = _source113.dtor_referential;
              bool _3376___mcc_h37 = _source113.dtor_nullable;
              bool _3377_nullable = _3376___mcc_h37;
              bool _3378_referential = _3375___mcc_h36;
              {
                if (_3378_referential) {
                  if (_3377_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3343_left, _3346_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source113.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
              }
            } else if (_source113.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3379___mcc_h38 = _source113.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3380_op = _3379___mcc_h38;
              {
                r = RAST.Expr.create_BinaryOp(_3380_op, _3343_left, _3346_right, _3328_format);
              }
            }
          }
        }
      } else if (_source108.is_Lt) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3325_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3325_op), _3343_left, _3346_right, _3328_format);
          } else {
            DAST._IBinOp _source114 = _3325_op;
            if (_source114.is_Eq) {
              bool _3381___mcc_h39 = _source114.dtor_referential;
              bool _3382___mcc_h40 = _source114.dtor_nullable;
              bool _3383_nullable = _3382___mcc_h40;
              bool _3384_referential = _3381___mcc_h39;
              {
                if (_3384_referential) {
                  if (_3383_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3343_left, _3346_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source114.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
              }
            } else if (_source114.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3385___mcc_h41 = _source114.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3386_op = _3385___mcc_h41;
              {
                r = RAST.Expr.create_BinaryOp(_3386_op, _3343_left, _3346_right, _3328_format);
              }
            }
          }
        }
      } else if (_source108.is_LtChar) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3325_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3325_op), _3343_left, _3346_right, _3328_format);
          } else {
            DAST._IBinOp _source115 = _3325_op;
            if (_source115.is_Eq) {
              bool _3387___mcc_h42 = _source115.dtor_referential;
              bool _3388___mcc_h43 = _source115.dtor_nullable;
              bool _3389_nullable = _3388___mcc_h43;
              bool _3390_referential = _3387___mcc_h42;
              {
                if (_3390_referential) {
                  if (_3389_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3343_left, _3346_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source115.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
              }
            } else if (_source115.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3391___mcc_h44 = _source115.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3392_op = _3391___mcc_h44;
              {
                r = RAST.Expr.create_BinaryOp(_3392_op, _3343_left, _3346_right, _3328_format);
              }
            }
          }
        }
      } else if (_source108.is_Plus) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3325_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3325_op), _3343_left, _3346_right, _3328_format);
          } else {
            DAST._IBinOp _source116 = _3325_op;
            if (_source116.is_Eq) {
              bool _3393___mcc_h45 = _source116.dtor_referential;
              bool _3394___mcc_h46 = _source116.dtor_nullable;
              bool _3395_nullable = _3394___mcc_h46;
              bool _3396_referential = _3393___mcc_h45;
              {
                if (_3396_referential) {
                  if (_3395_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3343_left, _3346_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source116.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
              }
            } else if (_source116.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3397___mcc_h47 = _source116.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3398_op = _3397___mcc_h47;
              {
                r = RAST.Expr.create_BinaryOp(_3398_op, _3343_left, _3346_right, _3328_format);
              }
            }
          }
        }
      } else if (_source108.is_Minus) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3325_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3325_op), _3343_left, _3346_right, _3328_format);
          } else {
            DAST._IBinOp _source117 = _3325_op;
            if (_source117.is_Eq) {
              bool _3399___mcc_h48 = _source117.dtor_referential;
              bool _3400___mcc_h49 = _source117.dtor_nullable;
              bool _3401_nullable = _3400___mcc_h49;
              bool _3402_referential = _3399___mcc_h48;
              {
                if (_3402_referential) {
                  if (_3401_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3343_left, _3346_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source117.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
              }
            } else if (_source117.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3403___mcc_h50 = _source117.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3404_op = _3403___mcc_h50;
              {
                r = RAST.Expr.create_BinaryOp(_3404_op, _3343_left, _3346_right, _3328_format);
              }
            }
          }
        }
      } else if (_source108.is_Times) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3325_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3325_op), _3343_left, _3346_right, _3328_format);
          } else {
            DAST._IBinOp _source118 = _3325_op;
            if (_source118.is_Eq) {
              bool _3405___mcc_h51 = _source118.dtor_referential;
              bool _3406___mcc_h52 = _source118.dtor_nullable;
              bool _3407_nullable = _3406___mcc_h52;
              bool _3408_referential = _3405___mcc_h51;
              {
                if (_3408_referential) {
                  if (_3407_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3343_left, _3346_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source118.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
              }
            } else if (_source118.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3409___mcc_h53 = _source118.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3410_op = _3409___mcc_h53;
              {
                r = RAST.Expr.create_BinaryOp(_3410_op, _3343_left, _3346_right, _3328_format);
              }
            }
          }
        }
      } else if (_source108.is_BitwiseAnd) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3325_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3325_op), _3343_left, _3346_right, _3328_format);
          } else {
            DAST._IBinOp _source119 = _3325_op;
            if (_source119.is_Eq) {
              bool _3411___mcc_h54 = _source119.dtor_referential;
              bool _3412___mcc_h55 = _source119.dtor_nullable;
              bool _3413_nullable = _3412___mcc_h55;
              bool _3414_referential = _3411___mcc_h54;
              {
                if (_3414_referential) {
                  if (_3413_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3343_left, _3346_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source119.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
              }
            } else if (_source119.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3415___mcc_h56 = _source119.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3416_op = _3415___mcc_h56;
              {
                r = RAST.Expr.create_BinaryOp(_3416_op, _3343_left, _3346_right, _3328_format);
              }
            }
          }
        }
      } else if (_source108.is_BitwiseOr) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3325_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3325_op), _3343_left, _3346_right, _3328_format);
          } else {
            DAST._IBinOp _source120 = _3325_op;
            if (_source120.is_Eq) {
              bool _3417___mcc_h57 = _source120.dtor_referential;
              bool _3418___mcc_h58 = _source120.dtor_nullable;
              bool _3419_nullable = _3418___mcc_h58;
              bool _3420_referential = _3417___mcc_h57;
              {
                if (_3420_referential) {
                  if (_3419_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3343_left, _3346_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source120.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
              }
            } else if (_source120.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3421___mcc_h59 = _source120.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3422_op = _3421___mcc_h59;
              {
                r = RAST.Expr.create_BinaryOp(_3422_op, _3343_left, _3346_right, _3328_format);
              }
            }
          }
        }
      } else if (_source108.is_BitwiseXor) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3325_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3325_op), _3343_left, _3346_right, _3328_format);
          } else {
            DAST._IBinOp _source121 = _3325_op;
            if (_source121.is_Eq) {
              bool _3423___mcc_h60 = _source121.dtor_referential;
              bool _3424___mcc_h61 = _source121.dtor_nullable;
              bool _3425_nullable = _3424___mcc_h61;
              bool _3426_referential = _3423___mcc_h60;
              {
                if (_3426_referential) {
                  if (_3425_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3343_left, _3346_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source121.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
              }
            } else if (_source121.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3427___mcc_h62 = _source121.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3428_op = _3427___mcc_h62;
              {
                r = RAST.Expr.create_BinaryOp(_3428_op, _3343_left, _3346_right, _3328_format);
              }
            }
          }
        }
      } else if (_source108.is_BitwiseShiftRight) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3325_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3325_op), _3343_left, _3346_right, _3328_format);
          } else {
            DAST._IBinOp _source122 = _3325_op;
            if (_source122.is_Eq) {
              bool _3429___mcc_h63 = _source122.dtor_referential;
              bool _3430___mcc_h64 = _source122.dtor_nullable;
              bool _3431_nullable = _3430___mcc_h64;
              bool _3432_referential = _3429___mcc_h63;
              {
                if (_3432_referential) {
                  if (_3431_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3343_left, _3346_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source122.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
              }
            } else if (_source122.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3433___mcc_h65 = _source122.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3434_op = _3433___mcc_h65;
              {
                r = RAST.Expr.create_BinaryOp(_3434_op, _3343_left, _3346_right, _3328_format);
              }
            }
          }
        }
      } else if (_source108.is_BitwiseShiftLeft) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3325_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3325_op), _3343_left, _3346_right, _3328_format);
          } else {
            DAST._IBinOp _source123 = _3325_op;
            if (_source123.is_Eq) {
              bool _3435___mcc_h66 = _source123.dtor_referential;
              bool _3436___mcc_h67 = _source123.dtor_nullable;
              bool _3437_nullable = _3436___mcc_h67;
              bool _3438_referential = _3435___mcc_h66;
              {
                if (_3438_referential) {
                  if (_3437_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3343_left, _3346_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source123.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
              }
            } else if (_source123.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3439___mcc_h68 = _source123.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3440_op = _3439___mcc_h68;
              {
                r = RAST.Expr.create_BinaryOp(_3440_op, _3343_left, _3346_right, _3328_format);
              }
            }
          }
        }
      } else if (_source108.is_And) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3325_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3325_op), _3343_left, _3346_right, _3328_format);
          } else {
            DAST._IBinOp _source124 = _3325_op;
            if (_source124.is_Eq) {
              bool _3441___mcc_h69 = _source124.dtor_referential;
              bool _3442___mcc_h70 = _source124.dtor_nullable;
              bool _3443_nullable = _3442___mcc_h70;
              bool _3444_referential = _3441___mcc_h69;
              {
                if (_3444_referential) {
                  if (_3443_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3343_left, _3346_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source124.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
              }
            } else if (_source124.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3445___mcc_h71 = _source124.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3446_op = _3445___mcc_h71;
              {
                r = RAST.Expr.create_BinaryOp(_3446_op, _3343_left, _3346_right, _3328_format);
              }
            }
          }
        }
      } else if (_source108.is_Or) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3325_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3325_op), _3343_left, _3346_right, _3328_format);
          } else {
            DAST._IBinOp _source125 = _3325_op;
            if (_source125.is_Eq) {
              bool _3447___mcc_h72 = _source125.dtor_referential;
              bool _3448___mcc_h73 = _source125.dtor_nullable;
              bool _3449_nullable = _3448___mcc_h73;
              bool _3450_referential = _3447___mcc_h72;
              {
                if (_3450_referential) {
                  if (_3449_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3343_left, _3346_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source125.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
              }
            } else if (_source125.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3451___mcc_h74 = _source125.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3452_op = _3451___mcc_h74;
              {
                r = RAST.Expr.create_BinaryOp(_3452_op, _3343_left, _3346_right, _3328_format);
              }
            }
          }
        }
      } else if (_source108.is_In) {
        {
          r = ((_3346_right).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("contains"))).Apply1(_3343_left);
        }
      } else if (_source108.is_SeqProperPrefix) {
        r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3343_left, _3346_right, _3328_format);
      } else if (_source108.is_SeqPrefix) {
        r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _3343_left, _3346_right, _3328_format);
      } else if (_source108.is_SetMerge) {
        {
          r = ((_3343_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_3346_right);
        }
      } else if (_source108.is_SetSubtraction) {
        {
          r = ((_3343_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_3346_right);
        }
      } else if (_source108.is_SetIntersection) {
        {
          r = ((_3343_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("intersect"))).Apply1(_3346_right);
        }
      } else if (_source108.is_Subset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _3343_left, _3346_right, _3328_format);
        }
      } else if (_source108.is_ProperSubset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3343_left, _3346_right, _3328_format);
        }
      } else if (_source108.is_SetDisjoint) {
        {
          r = ((_3343_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("disjoint"))).Apply1(_3346_right);
        }
      } else if (_source108.is_MapMerge) {
        {
          r = ((_3343_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_3346_right);
        }
      } else if (_source108.is_MapSubtraction) {
        {
          r = ((_3343_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_3346_right);
        }
      } else if (_source108.is_MultisetMerge) {
        {
          r = ((_3343_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_3346_right);
        }
      } else if (_source108.is_MultisetSubtraction) {
        {
          r = ((_3343_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_3346_right);
        }
      } else if (_source108.is_MultisetIntersection) {
        {
          r = ((_3343_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("intersect"))).Apply1(_3346_right);
        }
      } else if (_source108.is_Submultiset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _3343_left, _3346_right, _3328_format);
        }
      } else if (_source108.is_ProperSubmultiset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3343_left, _3346_right, _3328_format);
        }
      } else if (_source108.is_MultisetDisjoint) {
        {
          r = ((_3343_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("disjoint"))).Apply1(_3346_right);
        }
      } else if (_source108.is_Concat) {
        {
          r = ((_3343_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("concat"))).Apply1(_3346_right);
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _3453___mcc_h22 = _source108.dtor_Passthrough_a0;
        {
          if ((DCOMP.COMP.OpTable).Contains(_3325_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3325_op), _3343_left, _3346_right, _3328_format);
          } else {
            DAST._IBinOp _source126 = _3325_op;
            if (_source126.is_Eq) {
              bool _3454___mcc_h75 = _source126.dtor_referential;
              bool _3455___mcc_h76 = _source126.dtor_nullable;
              bool _3456_nullable = _3455___mcc_h76;
              bool _3457_referential = _3454___mcc_h75;
              {
                if (_3457_referential) {
                  if (_3456_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3343_left, _3346_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source126.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
              }
            } else if (_source126.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3343_left, _3346_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3458___mcc_h77 = _source126.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3459_op = _3458___mcc_h77;
              {
                r = RAST.Expr.create_BinaryOp(_3459_op, _3343_left, _3346_right, _3328_format);
              }
            }
          }
        }
      }
      RAST._IExpr _out195;
      DCOMP._IOwnership _out196;
      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out195, out _out196);
      r = _out195;
      resultingOwnership = _out196;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3345_recIdentsL, _3348_recIdentsR);
      return ;
    }
    public static void GenExprConvert(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs51 = e;
      DAST._IExpression _3460_expr = _let_tmp_rhs51.dtor_value;
      DAST._IType _3461_fromTpe = _let_tmp_rhs51.dtor_from;
      DAST._IType _3462_toTpe = _let_tmp_rhs51.dtor_typ;
      if (object.Equals(_3461_fromTpe, _3462_toTpe)) {
        RAST._IExpr _3463_recursiveGen;
        DCOMP._IOwnership _3464_recOwned;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3465_recIdents;
        RAST._IExpr _out197;
        DCOMP._IOwnership _out198;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out199;
        DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out197, out _out198, out _out199);
        _3463_recursiveGen = _out197;
        _3464_recOwned = _out198;
        _3465_recIdents = _out199;
        r = _3463_recursiveGen;
        RAST._IExpr _out200;
        DCOMP._IOwnership _out201;
        DCOMP.COMP.FromOwnership(r, _3464_recOwned, expectedOwnership, out _out200, out _out201);
        r = _out200;
        resultingOwnership = _out201;
        readIdents = _3465_recIdents;
      } else {
        _System._ITuple2<DAST._IType, DAST._IType> _source127 = _System.Tuple2<DAST._IType, DAST._IType>.create(_3461_fromTpe, _3462_toTpe);
        DAST._IType _3466___mcc_h0 = _source127.dtor__0;
        DAST._IType _3467___mcc_h1 = _source127.dtor__1;
        DAST._IType _source128 = _3466___mcc_h0;
        if (_source128.is_Path) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3468___mcc_h4 = _source128.dtor_Path_a0;
          Dafny.ISequence<DAST._IType> _3469___mcc_h5 = _source128.dtor_typeArgs;
          DAST._IResolvedType _3470___mcc_h6 = _source128.dtor_resolved;
          DAST._IResolvedType _source129 = _3470___mcc_h6;
          if (_source129.is_Datatype) {
            DAST._IDatatypeType _3471___mcc_h16 = _source129.dtor_datatypeType;
            DAST._IType _source130 = _3467___mcc_h1;
            if (_source130.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3472___mcc_h20 = _source130.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _3473___mcc_h21 = _source130.dtor_typeArgs;
              DAST._IResolvedType _3474___mcc_h22 = _source130.dtor_resolved;
              DAST._IResolvedType _source131 = _3474___mcc_h22;
              if (_source131.is_Datatype) {
                DAST._IDatatypeType _3475___mcc_h26 = _source131.dtor_datatypeType;
                {
                  RAST._IExpr _3476_recursiveGen;
                  DCOMP._IOwnership _3477_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3478_recIdents;
                  RAST._IExpr _out202;
                  DCOMP._IOwnership _out203;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out204;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out202, out _out203, out _out204);
                  _3476_recursiveGen = _out202;
                  _3477_recOwned = _out203;
                  _3478_recIdents = _out204;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3476_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out205;
                  DCOMP._IOwnership _out206;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out205, out _out206);
                  r = _out205;
                  resultingOwnership = _out206;
                  readIdents = _3478_recIdents;
                }
              } else if (_source131.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3479___mcc_h28 = _source131.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _3480___mcc_h29 = _source131.dtor_attributes;
                {
                  RAST._IExpr _3481_recursiveGen;
                  DCOMP._IOwnership _3482_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3483_recIdents;
                  RAST._IExpr _out207;
                  DCOMP._IOwnership _out208;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out209;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out207, out _out208, out _out209);
                  _3481_recursiveGen = _out207;
                  _3482_recOwned = _out208;
                  _3483_recIdents = _out209;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3481_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out210;
                  DCOMP._IOwnership _out211;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out210, out _out211);
                  r = _out210;
                  resultingOwnership = _out211;
                  readIdents = _3483_recIdents;
                }
              } else {
                DAST._IType _3484___mcc_h32 = _source131.dtor_baseType;
                DAST._INewtypeRange _3485___mcc_h33 = _source131.dtor_range;
                bool _3486___mcc_h34 = _source131.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _3487___mcc_h35 = _source131.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _3488_attributes = _3487___mcc_h35;
                bool _3489_erase = _3486___mcc_h34;
                DAST._INewtypeRange _3490_range = _3485___mcc_h33;
                DAST._IType _3491_b = _3484___mcc_h32;
                {
                  Std.Wrappers._IOption<RAST._IType> _3492_nativeToType;
                  _3492_nativeToType = DCOMP.COMP.NewtypeToRustType(_3491_b, _3490_range);
                  if (object.Equals(_3461_fromTpe, _3491_b)) {
                    RAST._IExpr _3493_recursiveGen;
                    DCOMP._IOwnership _3494_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3495_recIdents;
                    RAST._IExpr _out212;
                    DCOMP._IOwnership _out213;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out214;
                    DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out212, out _out213, out _out214);
                    _3493_recursiveGen = _out212;
                    _3494_recOwned = _out213;
                    _3495_recIdents = _out214;
                    Std.Wrappers._IOption<RAST._IType> _source132 = _3492_nativeToType;
                    if (_source132.is_None) {
                      if (_3489_erase) {
                        r = _3493_recursiveGen;
                      } else {
                        RAST._IType _3496_rhsType;
                        RAST._IType _out215;
                        _out215 = DCOMP.COMP.GenType(_3462_toTpe, true, false);
                        _3496_rhsType = _out215;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3496_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3493_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out216;
                      DCOMP._IOwnership _out217;
                      DCOMP.COMP.FromOwnership(r, _3494_recOwned, expectedOwnership, out _out216, out _out217);
                      r = _out216;
                      resultingOwnership = _out217;
                    } else {
                      RAST._IType _3497___mcc_h1246 = _source132.dtor_value;
                      RAST._IType _3498_v = _3497___mcc_h1246;
                      r = (((_3493_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_3498_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                      RAST._IExpr _out218;
                      DCOMP._IOwnership _out219;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out218, out _out219);
                      r = _out218;
                      resultingOwnership = _out219;
                    }
                    readIdents = _3495_recIdents;
                  } else {
                    if ((_3492_nativeToType).is_Some) {
                      DAST._IType _source133 = _3461_fromTpe;
                      if (_source133.is_Path) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3499___mcc_h1247 = _source133.dtor_Path_a0;
                        Dafny.ISequence<DAST._IType> _3500___mcc_h1248 = _source133.dtor_typeArgs;
                        DAST._IResolvedType _3501___mcc_h1249 = _source133.dtor_resolved;
                        DAST._IResolvedType _source134 = _3501___mcc_h1249;
                        if (_source134.is_Datatype) {
                          DAST._IDatatypeType _3502___mcc_h1253 = _source134.dtor_datatypeType;
                        } else if (_source134.is_Trait) {
                          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3503___mcc_h1255 = _source134.dtor_path;
                          Dafny.ISequence<DAST._IAttribute> _3504___mcc_h1256 = _source134.dtor_attributes;
                        } else {
                          DAST._IType _3505___mcc_h1259 = _source134.dtor_baseType;
                          DAST._INewtypeRange _3506___mcc_h1260 = _source134.dtor_range;
                          bool _3507___mcc_h1261 = _source134.dtor_erase;
                          Dafny.ISequence<DAST._IAttribute> _3508___mcc_h1262 = _source134.dtor_attributes;
                          Dafny.ISequence<DAST._IAttribute> _3509_attributes0 = _3508___mcc_h1262;
                          bool _3510_erase0 = _3507___mcc_h1261;
                          DAST._INewtypeRange _3511_range0 = _3506___mcc_h1260;
                          DAST._IType _3512_b0 = _3505___mcc_h1259;
                          {
                            Std.Wrappers._IOption<RAST._IType> _3513_nativeFromType;
                            _3513_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3512_b0, _3511_range0);
                            if ((_3513_nativeFromType).is_Some) {
                              RAST._IExpr _3514_recursiveGen;
                              DCOMP._IOwnership _3515_recOwned;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3516_recIdents;
                              RAST._IExpr _out220;
                              DCOMP._IOwnership _out221;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out222;
                              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out220, out _out221, out _out222);
                              _3514_recursiveGen = _out220;
                              _3515_recOwned = _out221;
                              _3516_recIdents = _out222;
                              RAST._IExpr _out223;
                              DCOMP._IOwnership _out224;
                              DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_3514_recursiveGen, (_3492_nativeToType).dtor_value), _3515_recOwned, expectedOwnership, out _out223, out _out224);
                              r = _out223;
                              resultingOwnership = _out224;
                              readIdents = _3516_recIdents;
                              return ;
                            }
                          }
                        }
                      } else if (_source133.is_Nullable) {
                        DAST._IType _3517___mcc_h1267 = _source133.dtor_Nullable_a0;
                      } else if (_source133.is_Tuple) {
                        Dafny.ISequence<DAST._IType> _3518___mcc_h1269 = _source133.dtor_Tuple_a0;
                      } else if (_source133.is_Array) {
                        DAST._IType _3519___mcc_h1271 = _source133.dtor_element;
                        BigInteger _3520___mcc_h1272 = _source133.dtor_dims;
                      } else if (_source133.is_Seq) {
                        DAST._IType _3521___mcc_h1275 = _source133.dtor_element;
                      } else if (_source133.is_Set) {
                        DAST._IType _3522___mcc_h1277 = _source133.dtor_element;
                      } else if (_source133.is_Multiset) {
                        DAST._IType _3523___mcc_h1279 = _source133.dtor_element;
                      } else if (_source133.is_Map) {
                        DAST._IType _3524___mcc_h1281 = _source133.dtor_key;
                        DAST._IType _3525___mcc_h1282 = _source133.dtor_value;
                      } else if (_source133.is_SetBuilder) {
                        DAST._IType _3526___mcc_h1285 = _source133.dtor_element;
                      } else if (_source133.is_MapBuilder) {
                        DAST._IType _3527___mcc_h1287 = _source133.dtor_key;
                        DAST._IType _3528___mcc_h1288 = _source133.dtor_value;
                      } else if (_source133.is_Arrow) {
                        Dafny.ISequence<DAST._IType> _3529___mcc_h1291 = _source133.dtor_args;
                        DAST._IType _3530___mcc_h1292 = _source133.dtor_result;
                      } else if (_source133.is_Primitive) {
                        DAST._IPrimitive _3531___mcc_h1295 = _source133.dtor_Primitive_a0;
                      } else if (_source133.is_Passthrough) {
                        Dafny.ISequence<Dafny.Rune> _3532___mcc_h1297 = _source133.dtor_Passthrough_a0;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _3533___mcc_h1299 = _source133.dtor_TypeArg_a0;
                      }
                      if (object.Equals(_3461_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _3534_recursiveGen;
                        DCOMP._IOwnership _3535_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3536_recIdents;
                        RAST._IExpr _out225;
                        DCOMP._IOwnership _out226;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out227;
                        DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out225, out _out226, out _out227);
                        _3534_recursiveGen = _out225;
                        _3535_recOwned = _out226;
                        _3536_recIdents = _out227;
                        RAST._IExpr _out228;
                        DCOMP._IOwnership _out229;
                        DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_3534_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_3492_nativeToType).dtor_value), _3535_recOwned, expectedOwnership, out _out228, out _out229);
                        r = _out228;
                        resultingOwnership = _out229;
                        readIdents = _3536_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out230;
                    DCOMP._IOwnership _out231;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out232;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3460_expr, _3461_fromTpe, _3491_b), _3491_b, _3462_toTpe), selfIdent, env, expectedOwnership, out _out230, out _out231, out _out232);
                    r = _out230;
                    resultingOwnership = _out231;
                    readIdents = _out232;
                  }
                }
              }
            } else if (_source130.is_Nullable) {
              DAST._IType _3537___mcc_h40 = _source130.dtor_Nullable_a0;
              {
                RAST._IExpr _3538_recursiveGen;
                DCOMP._IOwnership _3539_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3540_recIdents;
                RAST._IExpr _out233;
                DCOMP._IOwnership _out234;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out235;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out233, out _out234, out _out235);
                _3538_recursiveGen = _out233;
                _3539_recOwned = _out234;
                _3540_recIdents = _out235;
                r = _3538_recursiveGen;
                if (object.Equals(_3539_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out236;
                DCOMP._IOwnership _out237;
                DCOMP.COMP.FromOwnership(r, _3539_recOwned, expectedOwnership, out _out236, out _out237);
                r = _out236;
                resultingOwnership = _out237;
                readIdents = _3540_recIdents;
              }
            } else if (_source130.is_Tuple) {
              Dafny.ISequence<DAST._IType> _3541___mcc_h42 = _source130.dtor_Tuple_a0;
              {
                RAST._IExpr _3542_recursiveGen;
                DCOMP._IOwnership _3543_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3544_recIdents;
                RAST._IExpr _out238;
                DCOMP._IOwnership _out239;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out240;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out238, out _out239, out _out240);
                _3542_recursiveGen = _out238;
                _3543_recOwned = _out239;
                _3544_recIdents = _out240;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3542_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out241;
                DCOMP._IOwnership _out242;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out241, out _out242);
                r = _out241;
                resultingOwnership = _out242;
                readIdents = _3544_recIdents;
              }
            } else if (_source130.is_Array) {
              DAST._IType _3545___mcc_h44 = _source130.dtor_element;
              BigInteger _3546___mcc_h45 = _source130.dtor_dims;
              {
                RAST._IExpr _3547_recursiveGen;
                DCOMP._IOwnership _3548_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3549_recIdents;
                RAST._IExpr _out243;
                DCOMP._IOwnership _out244;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out245;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out243, out _out244, out _out245);
                _3547_recursiveGen = _out243;
                _3548_recOwned = _out244;
                _3549_recIdents = _out245;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3547_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out246;
                DCOMP._IOwnership _out247;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out246, out _out247);
                r = _out246;
                resultingOwnership = _out247;
                readIdents = _3549_recIdents;
              }
            } else if (_source130.is_Seq) {
              DAST._IType _3550___mcc_h48 = _source130.dtor_element;
              {
                RAST._IExpr _3551_recursiveGen;
                DCOMP._IOwnership _3552_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3553_recIdents;
                RAST._IExpr _out248;
                DCOMP._IOwnership _out249;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out250;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out248, out _out249, out _out250);
                _3551_recursiveGen = _out248;
                _3552_recOwned = _out249;
                _3553_recIdents = _out250;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3551_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out251;
                DCOMP._IOwnership _out252;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out251, out _out252);
                r = _out251;
                resultingOwnership = _out252;
                readIdents = _3553_recIdents;
              }
            } else if (_source130.is_Set) {
              DAST._IType _3554___mcc_h50 = _source130.dtor_element;
              {
                RAST._IExpr _3555_recursiveGen;
                DCOMP._IOwnership _3556_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3557_recIdents;
                RAST._IExpr _out253;
                DCOMP._IOwnership _out254;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out255;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out253, out _out254, out _out255);
                _3555_recursiveGen = _out253;
                _3556_recOwned = _out254;
                _3557_recIdents = _out255;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3555_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out256;
                DCOMP._IOwnership _out257;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out256, out _out257);
                r = _out256;
                resultingOwnership = _out257;
                readIdents = _3557_recIdents;
              }
            } else if (_source130.is_Multiset) {
              DAST._IType _3558___mcc_h52 = _source130.dtor_element;
              {
                RAST._IExpr _3559_recursiveGen;
                DCOMP._IOwnership _3560_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3561_recIdents;
                RAST._IExpr _out258;
                DCOMP._IOwnership _out259;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out260;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out258, out _out259, out _out260);
                _3559_recursiveGen = _out258;
                _3560_recOwned = _out259;
                _3561_recIdents = _out260;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3559_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out261;
                DCOMP._IOwnership _out262;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out261, out _out262);
                r = _out261;
                resultingOwnership = _out262;
                readIdents = _3561_recIdents;
              }
            } else if (_source130.is_Map) {
              DAST._IType _3562___mcc_h54 = _source130.dtor_key;
              DAST._IType _3563___mcc_h55 = _source130.dtor_value;
              {
                RAST._IExpr _3564_recursiveGen;
                DCOMP._IOwnership _3565_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3566_recIdents;
                RAST._IExpr _out263;
                DCOMP._IOwnership _out264;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out265;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out263, out _out264, out _out265);
                _3564_recursiveGen = _out263;
                _3565_recOwned = _out264;
                _3566_recIdents = _out265;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3564_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out266;
                DCOMP._IOwnership _out267;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out266, out _out267);
                r = _out266;
                resultingOwnership = _out267;
                readIdents = _3566_recIdents;
              }
            } else if (_source130.is_SetBuilder) {
              DAST._IType _3567___mcc_h58 = _source130.dtor_element;
              {
                RAST._IExpr _3568_recursiveGen;
                DCOMP._IOwnership _3569_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3570_recIdents;
                RAST._IExpr _out268;
                DCOMP._IOwnership _out269;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out270;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out268, out _out269, out _out270);
                _3568_recursiveGen = _out268;
                _3569_recOwned = _out269;
                _3570_recIdents = _out270;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3568_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out271;
                DCOMP._IOwnership _out272;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out271, out _out272);
                r = _out271;
                resultingOwnership = _out272;
                readIdents = _3570_recIdents;
              }
            } else if (_source130.is_MapBuilder) {
              DAST._IType _3571___mcc_h60 = _source130.dtor_key;
              DAST._IType _3572___mcc_h61 = _source130.dtor_value;
              {
                RAST._IExpr _3573_recursiveGen;
                DCOMP._IOwnership _3574_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3575_recIdents;
                RAST._IExpr _out273;
                DCOMP._IOwnership _out274;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out275;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out273, out _out274, out _out275);
                _3573_recursiveGen = _out273;
                _3574_recOwned = _out274;
                _3575_recIdents = _out275;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3573_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out276;
                DCOMP._IOwnership _out277;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out276, out _out277);
                r = _out276;
                resultingOwnership = _out277;
                readIdents = _3575_recIdents;
              }
            } else if (_source130.is_Arrow) {
              Dafny.ISequence<DAST._IType> _3576___mcc_h64 = _source130.dtor_args;
              DAST._IType _3577___mcc_h65 = _source130.dtor_result;
              {
                RAST._IExpr _3578_recursiveGen;
                DCOMP._IOwnership _3579_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3580_recIdents;
                RAST._IExpr _out278;
                DCOMP._IOwnership _out279;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out280;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out278, out _out279, out _out280);
                _3578_recursiveGen = _out278;
                _3579_recOwned = _out279;
                _3580_recIdents = _out280;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3578_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out281;
                DCOMP._IOwnership _out282;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out281, out _out282);
                r = _out281;
                resultingOwnership = _out282;
                readIdents = _3580_recIdents;
              }
            } else if (_source130.is_Primitive) {
              DAST._IPrimitive _3581___mcc_h68 = _source130.dtor_Primitive_a0;
              {
                RAST._IExpr _3582_recursiveGen;
                DCOMP._IOwnership _3583_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3584_recIdents;
                RAST._IExpr _out283;
                DCOMP._IOwnership _out284;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out285;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out283, out _out284, out _out285);
                _3582_recursiveGen = _out283;
                _3583_recOwned = _out284;
                _3584_recIdents = _out285;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3582_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out286;
                DCOMP._IOwnership _out287;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out286, out _out287);
                r = _out286;
                resultingOwnership = _out287;
                readIdents = _3584_recIdents;
              }
            } else if (_source130.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _3585___mcc_h70 = _source130.dtor_Passthrough_a0;
              {
                RAST._IExpr _3586_recursiveGen;
                DCOMP._IOwnership _3587_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3588_recIdents;
                RAST._IExpr _out288;
                DCOMP._IOwnership _out289;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out290;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out288, out _out289, out _out290);
                _3586_recursiveGen = _out288;
                _3587_recOwned = _out289;
                _3588_recIdents = _out290;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3586_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out291;
                DCOMP._IOwnership _out292;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out291, out _out292);
                r = _out291;
                resultingOwnership = _out292;
                readIdents = _3588_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3589___mcc_h72 = _source130.dtor_TypeArg_a0;
              {
                RAST._IExpr _3590_recursiveGen;
                DCOMP._IOwnership _3591_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3592_recIdents;
                RAST._IExpr _out293;
                DCOMP._IOwnership _out294;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out295;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out293, out _out294, out _out295);
                _3590_recursiveGen = _out293;
                _3591_recOwned = _out294;
                _3592_recIdents = _out295;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3590_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out296;
                DCOMP._IOwnership _out297;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out296, out _out297);
                r = _out296;
                resultingOwnership = _out297;
                readIdents = _3592_recIdents;
              }
            }
          } else if (_source129.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3593___mcc_h74 = _source129.dtor_path;
            Dafny.ISequence<DAST._IAttribute> _3594___mcc_h75 = _source129.dtor_attributes;
            DAST._IType _source135 = _3467___mcc_h1;
            if (_source135.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3595___mcc_h82 = _source135.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _3596___mcc_h83 = _source135.dtor_typeArgs;
              DAST._IResolvedType _3597___mcc_h84 = _source135.dtor_resolved;
              DAST._IResolvedType _source136 = _3597___mcc_h84;
              if (_source136.is_Datatype) {
                DAST._IDatatypeType _3598___mcc_h88 = _source136.dtor_datatypeType;
                {
                  RAST._IExpr _3599_recursiveGen;
                  DCOMP._IOwnership _3600_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3601_recIdents;
                  RAST._IExpr _out298;
                  DCOMP._IOwnership _out299;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out300;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out298, out _out299, out _out300);
                  _3599_recursiveGen = _out298;
                  _3600_recOwned = _out299;
                  _3601_recIdents = _out300;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3599_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out301;
                  DCOMP._IOwnership _out302;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out301, out _out302);
                  r = _out301;
                  resultingOwnership = _out302;
                  readIdents = _3601_recIdents;
                }
              } else if (_source136.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3602___mcc_h90 = _source136.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _3603___mcc_h91 = _source136.dtor_attributes;
                {
                  RAST._IExpr _3604_recursiveGen;
                  DCOMP._IOwnership _3605_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3606_recIdents;
                  RAST._IExpr _out303;
                  DCOMP._IOwnership _out304;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out305;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out303, out _out304, out _out305);
                  _3604_recursiveGen = _out303;
                  _3605_recOwned = _out304;
                  _3606_recIdents = _out305;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3604_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out306;
                  DCOMP._IOwnership _out307;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out306, out _out307);
                  r = _out306;
                  resultingOwnership = _out307;
                  readIdents = _3606_recIdents;
                }
              } else {
                DAST._IType _3607___mcc_h94 = _source136.dtor_baseType;
                DAST._INewtypeRange _3608___mcc_h95 = _source136.dtor_range;
                bool _3609___mcc_h96 = _source136.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _3610___mcc_h97 = _source136.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _3611_attributes = _3610___mcc_h97;
                bool _3612_erase = _3609___mcc_h96;
                DAST._INewtypeRange _3613_range = _3608___mcc_h95;
                DAST._IType _3614_b = _3607___mcc_h94;
                {
                  Std.Wrappers._IOption<RAST._IType> _3615_nativeToType;
                  _3615_nativeToType = DCOMP.COMP.NewtypeToRustType(_3614_b, _3613_range);
                  if (object.Equals(_3461_fromTpe, _3614_b)) {
                    RAST._IExpr _3616_recursiveGen;
                    DCOMP._IOwnership _3617_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3618_recIdents;
                    RAST._IExpr _out308;
                    DCOMP._IOwnership _out309;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out310;
                    DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out308, out _out309, out _out310);
                    _3616_recursiveGen = _out308;
                    _3617_recOwned = _out309;
                    _3618_recIdents = _out310;
                    Std.Wrappers._IOption<RAST._IType> _source137 = _3615_nativeToType;
                    if (_source137.is_None) {
                      if (_3612_erase) {
                        r = _3616_recursiveGen;
                      } else {
                        RAST._IType _3619_rhsType;
                        RAST._IType _out311;
                        _out311 = DCOMP.COMP.GenType(_3462_toTpe, true, false);
                        _3619_rhsType = _out311;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3619_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3616_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out312;
                      DCOMP._IOwnership _out313;
                      DCOMP.COMP.FromOwnership(r, _3617_recOwned, expectedOwnership, out _out312, out _out313);
                      r = _out312;
                      resultingOwnership = _out313;
                    } else {
                      RAST._IType _3620___mcc_h1301 = _source137.dtor_value;
                      RAST._IType _3621_v = _3620___mcc_h1301;
                      r = (((_3616_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_3621_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                      RAST._IExpr _out314;
                      DCOMP._IOwnership _out315;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out314, out _out315);
                      r = _out314;
                      resultingOwnership = _out315;
                    }
                    readIdents = _3618_recIdents;
                  } else {
                    if ((_3615_nativeToType).is_Some) {
                      DAST._IType _source138 = _3461_fromTpe;
                      if (_source138.is_Path) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3622___mcc_h1302 = _source138.dtor_Path_a0;
                        Dafny.ISequence<DAST._IType> _3623___mcc_h1303 = _source138.dtor_typeArgs;
                        DAST._IResolvedType _3624___mcc_h1304 = _source138.dtor_resolved;
                        DAST._IResolvedType _source139 = _3624___mcc_h1304;
                        if (_source139.is_Datatype) {
                          DAST._IDatatypeType _3625___mcc_h1308 = _source139.dtor_datatypeType;
                        } else if (_source139.is_Trait) {
                          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3626___mcc_h1310 = _source139.dtor_path;
                          Dafny.ISequence<DAST._IAttribute> _3627___mcc_h1311 = _source139.dtor_attributes;
                        } else {
                          DAST._IType _3628___mcc_h1314 = _source139.dtor_baseType;
                          DAST._INewtypeRange _3629___mcc_h1315 = _source139.dtor_range;
                          bool _3630___mcc_h1316 = _source139.dtor_erase;
                          Dafny.ISequence<DAST._IAttribute> _3631___mcc_h1317 = _source139.dtor_attributes;
                          Dafny.ISequence<DAST._IAttribute> _3632_attributes0 = _3631___mcc_h1317;
                          bool _3633_erase0 = _3630___mcc_h1316;
                          DAST._INewtypeRange _3634_range0 = _3629___mcc_h1315;
                          DAST._IType _3635_b0 = _3628___mcc_h1314;
                          {
                            Std.Wrappers._IOption<RAST._IType> _3636_nativeFromType;
                            _3636_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3635_b0, _3634_range0);
                            if ((_3636_nativeFromType).is_Some) {
                              RAST._IExpr _3637_recursiveGen;
                              DCOMP._IOwnership _3638_recOwned;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3639_recIdents;
                              RAST._IExpr _out316;
                              DCOMP._IOwnership _out317;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out318;
                              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out316, out _out317, out _out318);
                              _3637_recursiveGen = _out316;
                              _3638_recOwned = _out317;
                              _3639_recIdents = _out318;
                              RAST._IExpr _out319;
                              DCOMP._IOwnership _out320;
                              DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_3637_recursiveGen, (_3615_nativeToType).dtor_value), _3638_recOwned, expectedOwnership, out _out319, out _out320);
                              r = _out319;
                              resultingOwnership = _out320;
                              readIdents = _3639_recIdents;
                              return ;
                            }
                          }
                        }
                      } else if (_source138.is_Nullable) {
                        DAST._IType _3640___mcc_h1322 = _source138.dtor_Nullable_a0;
                      } else if (_source138.is_Tuple) {
                        Dafny.ISequence<DAST._IType> _3641___mcc_h1324 = _source138.dtor_Tuple_a0;
                      } else if (_source138.is_Array) {
                        DAST._IType _3642___mcc_h1326 = _source138.dtor_element;
                        BigInteger _3643___mcc_h1327 = _source138.dtor_dims;
                      } else if (_source138.is_Seq) {
                        DAST._IType _3644___mcc_h1330 = _source138.dtor_element;
                      } else if (_source138.is_Set) {
                        DAST._IType _3645___mcc_h1332 = _source138.dtor_element;
                      } else if (_source138.is_Multiset) {
                        DAST._IType _3646___mcc_h1334 = _source138.dtor_element;
                      } else if (_source138.is_Map) {
                        DAST._IType _3647___mcc_h1336 = _source138.dtor_key;
                        DAST._IType _3648___mcc_h1337 = _source138.dtor_value;
                      } else if (_source138.is_SetBuilder) {
                        DAST._IType _3649___mcc_h1340 = _source138.dtor_element;
                      } else if (_source138.is_MapBuilder) {
                        DAST._IType _3650___mcc_h1342 = _source138.dtor_key;
                        DAST._IType _3651___mcc_h1343 = _source138.dtor_value;
                      } else if (_source138.is_Arrow) {
                        Dafny.ISequence<DAST._IType> _3652___mcc_h1346 = _source138.dtor_args;
                        DAST._IType _3653___mcc_h1347 = _source138.dtor_result;
                      } else if (_source138.is_Primitive) {
                        DAST._IPrimitive _3654___mcc_h1350 = _source138.dtor_Primitive_a0;
                      } else if (_source138.is_Passthrough) {
                        Dafny.ISequence<Dafny.Rune> _3655___mcc_h1352 = _source138.dtor_Passthrough_a0;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _3656___mcc_h1354 = _source138.dtor_TypeArg_a0;
                      }
                      if (object.Equals(_3461_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _3657_recursiveGen;
                        DCOMP._IOwnership _3658_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3659_recIdents;
                        RAST._IExpr _out321;
                        DCOMP._IOwnership _out322;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out323;
                        DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out321, out _out322, out _out323);
                        _3657_recursiveGen = _out321;
                        _3658_recOwned = _out322;
                        _3659_recIdents = _out323;
                        RAST._IExpr _out324;
                        DCOMP._IOwnership _out325;
                        DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_3657_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_3615_nativeToType).dtor_value), _3658_recOwned, expectedOwnership, out _out324, out _out325);
                        r = _out324;
                        resultingOwnership = _out325;
                        readIdents = _3659_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out326;
                    DCOMP._IOwnership _out327;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out328;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3460_expr, _3461_fromTpe, _3614_b), _3614_b, _3462_toTpe), selfIdent, env, expectedOwnership, out _out326, out _out327, out _out328);
                    r = _out326;
                    resultingOwnership = _out327;
                    readIdents = _out328;
                  }
                }
              }
            } else if (_source135.is_Nullable) {
              DAST._IType _3660___mcc_h102 = _source135.dtor_Nullable_a0;
              {
                RAST._IExpr _3661_recursiveGen;
                DCOMP._IOwnership _3662_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3663_recIdents;
                RAST._IExpr _out329;
                DCOMP._IOwnership _out330;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out331;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out329, out _out330, out _out331);
                _3661_recursiveGen = _out329;
                _3662_recOwned = _out330;
                _3663_recIdents = _out331;
                r = _3661_recursiveGen;
                if (object.Equals(_3662_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out332;
                DCOMP._IOwnership _out333;
                DCOMP.COMP.FromOwnership(r, _3662_recOwned, expectedOwnership, out _out332, out _out333);
                r = _out332;
                resultingOwnership = _out333;
                readIdents = _3663_recIdents;
              }
            } else if (_source135.is_Tuple) {
              Dafny.ISequence<DAST._IType> _3664___mcc_h104 = _source135.dtor_Tuple_a0;
              {
                RAST._IExpr _3665_recursiveGen;
                DCOMP._IOwnership _3666_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3667_recIdents;
                RAST._IExpr _out334;
                DCOMP._IOwnership _out335;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out336;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out334, out _out335, out _out336);
                _3665_recursiveGen = _out334;
                _3666_recOwned = _out335;
                _3667_recIdents = _out336;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3665_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out337;
                DCOMP._IOwnership _out338;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out337, out _out338);
                r = _out337;
                resultingOwnership = _out338;
                readIdents = _3667_recIdents;
              }
            } else if (_source135.is_Array) {
              DAST._IType _3668___mcc_h106 = _source135.dtor_element;
              BigInteger _3669___mcc_h107 = _source135.dtor_dims;
              {
                RAST._IExpr _3670_recursiveGen;
                DCOMP._IOwnership _3671_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3672_recIdents;
                RAST._IExpr _out339;
                DCOMP._IOwnership _out340;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out341;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out339, out _out340, out _out341);
                _3670_recursiveGen = _out339;
                _3671_recOwned = _out340;
                _3672_recIdents = _out341;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3670_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out342;
                DCOMP._IOwnership _out343;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out342, out _out343);
                r = _out342;
                resultingOwnership = _out343;
                readIdents = _3672_recIdents;
              }
            } else if (_source135.is_Seq) {
              DAST._IType _3673___mcc_h110 = _source135.dtor_element;
              {
                RAST._IExpr _3674_recursiveGen;
                DCOMP._IOwnership _3675_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3676_recIdents;
                RAST._IExpr _out344;
                DCOMP._IOwnership _out345;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out346;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out344, out _out345, out _out346);
                _3674_recursiveGen = _out344;
                _3675_recOwned = _out345;
                _3676_recIdents = _out346;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3674_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out347;
                DCOMP._IOwnership _out348;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out347, out _out348);
                r = _out347;
                resultingOwnership = _out348;
                readIdents = _3676_recIdents;
              }
            } else if (_source135.is_Set) {
              DAST._IType _3677___mcc_h112 = _source135.dtor_element;
              {
                RAST._IExpr _3678_recursiveGen;
                DCOMP._IOwnership _3679_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3680_recIdents;
                RAST._IExpr _out349;
                DCOMP._IOwnership _out350;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out351;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out349, out _out350, out _out351);
                _3678_recursiveGen = _out349;
                _3679_recOwned = _out350;
                _3680_recIdents = _out351;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3678_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out352;
                DCOMP._IOwnership _out353;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out352, out _out353);
                r = _out352;
                resultingOwnership = _out353;
                readIdents = _3680_recIdents;
              }
            } else if (_source135.is_Multiset) {
              DAST._IType _3681___mcc_h114 = _source135.dtor_element;
              {
                RAST._IExpr _3682_recursiveGen;
                DCOMP._IOwnership _3683_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3684_recIdents;
                RAST._IExpr _out354;
                DCOMP._IOwnership _out355;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out356;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out354, out _out355, out _out356);
                _3682_recursiveGen = _out354;
                _3683_recOwned = _out355;
                _3684_recIdents = _out356;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3682_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out357;
                DCOMP._IOwnership _out358;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out357, out _out358);
                r = _out357;
                resultingOwnership = _out358;
                readIdents = _3684_recIdents;
              }
            } else if (_source135.is_Map) {
              DAST._IType _3685___mcc_h116 = _source135.dtor_key;
              DAST._IType _3686___mcc_h117 = _source135.dtor_value;
              {
                RAST._IExpr _3687_recursiveGen;
                DCOMP._IOwnership _3688_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3689_recIdents;
                RAST._IExpr _out359;
                DCOMP._IOwnership _out360;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out361;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out359, out _out360, out _out361);
                _3687_recursiveGen = _out359;
                _3688_recOwned = _out360;
                _3689_recIdents = _out361;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3687_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out362;
                DCOMP._IOwnership _out363;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out362, out _out363);
                r = _out362;
                resultingOwnership = _out363;
                readIdents = _3689_recIdents;
              }
            } else if (_source135.is_SetBuilder) {
              DAST._IType _3690___mcc_h120 = _source135.dtor_element;
              {
                RAST._IExpr _3691_recursiveGen;
                DCOMP._IOwnership _3692_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3693_recIdents;
                RAST._IExpr _out364;
                DCOMP._IOwnership _out365;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out366;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out364, out _out365, out _out366);
                _3691_recursiveGen = _out364;
                _3692_recOwned = _out365;
                _3693_recIdents = _out366;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3691_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out367;
                DCOMP._IOwnership _out368;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out367, out _out368);
                r = _out367;
                resultingOwnership = _out368;
                readIdents = _3693_recIdents;
              }
            } else if (_source135.is_MapBuilder) {
              DAST._IType _3694___mcc_h122 = _source135.dtor_key;
              DAST._IType _3695___mcc_h123 = _source135.dtor_value;
              {
                RAST._IExpr _3696_recursiveGen;
                DCOMP._IOwnership _3697_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3698_recIdents;
                RAST._IExpr _out369;
                DCOMP._IOwnership _out370;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out371;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out369, out _out370, out _out371);
                _3696_recursiveGen = _out369;
                _3697_recOwned = _out370;
                _3698_recIdents = _out371;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3696_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out372;
                DCOMP._IOwnership _out373;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out372, out _out373);
                r = _out372;
                resultingOwnership = _out373;
                readIdents = _3698_recIdents;
              }
            } else if (_source135.is_Arrow) {
              Dafny.ISequence<DAST._IType> _3699___mcc_h126 = _source135.dtor_args;
              DAST._IType _3700___mcc_h127 = _source135.dtor_result;
              {
                RAST._IExpr _3701_recursiveGen;
                DCOMP._IOwnership _3702_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3703_recIdents;
                RAST._IExpr _out374;
                DCOMP._IOwnership _out375;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out376;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out374, out _out375, out _out376);
                _3701_recursiveGen = _out374;
                _3702_recOwned = _out375;
                _3703_recIdents = _out376;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3701_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out377;
                DCOMP._IOwnership _out378;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out377, out _out378);
                r = _out377;
                resultingOwnership = _out378;
                readIdents = _3703_recIdents;
              }
            } else if (_source135.is_Primitive) {
              DAST._IPrimitive _3704___mcc_h130 = _source135.dtor_Primitive_a0;
              {
                RAST._IExpr _3705_recursiveGen;
                DCOMP._IOwnership _3706_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3707_recIdents;
                RAST._IExpr _out379;
                DCOMP._IOwnership _out380;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out381;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out379, out _out380, out _out381);
                _3705_recursiveGen = _out379;
                _3706_recOwned = _out380;
                _3707_recIdents = _out381;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3705_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out382;
                DCOMP._IOwnership _out383;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out382, out _out383);
                r = _out382;
                resultingOwnership = _out383;
                readIdents = _3707_recIdents;
              }
            } else if (_source135.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _3708___mcc_h132 = _source135.dtor_Passthrough_a0;
              {
                RAST._IExpr _3709_recursiveGen;
                DCOMP._IOwnership _3710_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3711_recIdents;
                RAST._IExpr _out384;
                DCOMP._IOwnership _out385;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out386;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out384, out _out385, out _out386);
                _3709_recursiveGen = _out384;
                _3710_recOwned = _out385;
                _3711_recIdents = _out386;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3709_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out387;
                DCOMP._IOwnership _out388;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out387, out _out388);
                r = _out387;
                resultingOwnership = _out388;
                readIdents = _3711_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3712___mcc_h134 = _source135.dtor_TypeArg_a0;
              {
                RAST._IExpr _3713_recursiveGen;
                DCOMP._IOwnership _3714_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3715_recIdents;
                RAST._IExpr _out389;
                DCOMP._IOwnership _out390;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out391;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out389, out _out390, out _out391);
                _3713_recursiveGen = _out389;
                _3714_recOwned = _out390;
                _3715_recIdents = _out391;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3713_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out392;
                DCOMP._IOwnership _out393;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out392, out _out393);
                r = _out392;
                resultingOwnership = _out393;
                readIdents = _3715_recIdents;
              }
            }
          } else {
            DAST._IType _3716___mcc_h136 = _source129.dtor_baseType;
            DAST._INewtypeRange _3717___mcc_h137 = _source129.dtor_range;
            bool _3718___mcc_h138 = _source129.dtor_erase;
            Dafny.ISequence<DAST._IAttribute> _3719___mcc_h139 = _source129.dtor_attributes;
            DAST._IType _source140 = _3467___mcc_h1;
            if (_source140.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3720___mcc_h152 = _source140.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _3721___mcc_h153 = _source140.dtor_typeArgs;
              DAST._IResolvedType _3722___mcc_h154 = _source140.dtor_resolved;
              DAST._IResolvedType _source141 = _3722___mcc_h154;
              if (_source141.is_Datatype) {
                DAST._IDatatypeType _3723___mcc_h161 = _source141.dtor_datatypeType;
                Dafny.ISequence<DAST._IAttribute> _3724_attributes = _3719___mcc_h139;
                bool _3725_erase = _3718___mcc_h138;
                DAST._INewtypeRange _3726_range = _3717___mcc_h137;
                DAST._IType _3727_b = _3716___mcc_h136;
                {
                  Std.Wrappers._IOption<RAST._IType> _3728_nativeFromType;
                  _3728_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3727_b, _3726_range);
                  if (object.Equals(_3727_b, _3462_toTpe)) {
                    RAST._IExpr _3729_recursiveGen;
                    DCOMP._IOwnership _3730_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3731_recIdents;
                    RAST._IExpr _out394;
                    DCOMP._IOwnership _out395;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out396;
                    DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out394, out _out395, out _out396);
                    _3729_recursiveGen = _out394;
                    _3730_recOwned = _out395;
                    _3731_recIdents = _out396;
                    Std.Wrappers._IOption<RAST._IType> _source142 = _3728_nativeFromType;
                    if (_source142.is_None) {
                      if (_3725_erase) {
                        r = _3729_recursiveGen;
                      } else {
                        r = (_3729_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                      }
                      RAST._IExpr _out397;
                      DCOMP._IOwnership _out398;
                      DCOMP.COMP.FromOwnership(r, _3730_recOwned, expectedOwnership, out _out397, out _out398);
                      r = _out397;
                      resultingOwnership = _out398;
                      readIdents = _3731_recIdents;
                    } else {
                      RAST._IType _3732___mcc_h1356 = _source142.dtor_value;
                      RAST._IType _3733_v = _3732___mcc_h1356;
                      RAST._IType _3734_toTpeRust;
                      RAST._IType _out399;
                      _out399 = DCOMP.COMP.GenType(_3462_toTpe, false, false);
                      _3734_toTpeRust = _out399;
                      r = (((_3729_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_3734_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                      RAST._IExpr _out400;
                      DCOMP._IOwnership _out401;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out400, out _out401);
                      r = _out400;
                      resultingOwnership = _out401;
                    }
                  } else {
                    if ((_3728_nativeFromType).is_Some) {
                      if (object.Equals(_3462_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _3735_recursiveGen;
                        DCOMP._IOwnership _3736_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3737_recIdents;
                        RAST._IExpr _out402;
                        DCOMP._IOwnership _out403;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out404;
                        DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out402, out _out403, out _out404);
                        _3735_recursiveGen = _out402;
                        _3736_recOwned = _out403;
                        _3737_recIdents = _out404;
                        RAST._IExpr _out405;
                        DCOMP._IOwnership _out406;
                        DCOMP.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMP.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_3735_recursiveGen, DCOMP.__default.DafnyCharUnderlying)), _3736_recOwned, expectedOwnership, out _out405, out _out406);
                        r = _out405;
                        resultingOwnership = _out406;
                        readIdents = _3737_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out407;
                    DCOMP._IOwnership _out408;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out409;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3460_expr, _3461_fromTpe, _3727_b), _3727_b, _3462_toTpe), selfIdent, env, expectedOwnership, out _out407, out _out408, out _out409);
                    r = _out407;
                    resultingOwnership = _out408;
                    readIdents = _out409;
                  }
                }
              } else if (_source141.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3738___mcc_h164 = _source141.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _3739___mcc_h165 = _source141.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _3740_attributes = _3719___mcc_h139;
                bool _3741_erase = _3718___mcc_h138;
                DAST._INewtypeRange _3742_range = _3717___mcc_h137;
                DAST._IType _3743_b = _3716___mcc_h136;
                {
                  Std.Wrappers._IOption<RAST._IType> _3744_nativeFromType;
                  _3744_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3743_b, _3742_range);
                  if (object.Equals(_3743_b, _3462_toTpe)) {
                    RAST._IExpr _3745_recursiveGen;
                    DCOMP._IOwnership _3746_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3747_recIdents;
                    RAST._IExpr _out410;
                    DCOMP._IOwnership _out411;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out412;
                    DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out410, out _out411, out _out412);
                    _3745_recursiveGen = _out410;
                    _3746_recOwned = _out411;
                    _3747_recIdents = _out412;
                    Std.Wrappers._IOption<RAST._IType> _source143 = _3744_nativeFromType;
                    if (_source143.is_None) {
                      if (_3741_erase) {
                        r = _3745_recursiveGen;
                      } else {
                        r = (_3745_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                      }
                      RAST._IExpr _out413;
                      DCOMP._IOwnership _out414;
                      DCOMP.COMP.FromOwnership(r, _3746_recOwned, expectedOwnership, out _out413, out _out414);
                      r = _out413;
                      resultingOwnership = _out414;
                      readIdents = _3747_recIdents;
                    } else {
                      RAST._IType _3748___mcc_h1357 = _source143.dtor_value;
                      RAST._IType _3749_v = _3748___mcc_h1357;
                      RAST._IType _3750_toTpeRust;
                      RAST._IType _out415;
                      _out415 = DCOMP.COMP.GenType(_3462_toTpe, false, false);
                      _3750_toTpeRust = _out415;
                      r = (((_3745_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_3750_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                      RAST._IExpr _out416;
                      DCOMP._IOwnership _out417;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out416, out _out417);
                      r = _out416;
                      resultingOwnership = _out417;
                    }
                  } else {
                    if ((_3744_nativeFromType).is_Some) {
                      if (object.Equals(_3462_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _3751_recursiveGen;
                        DCOMP._IOwnership _3752_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3753_recIdents;
                        RAST._IExpr _out418;
                        DCOMP._IOwnership _out419;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out420;
                        DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out418, out _out419, out _out420);
                        _3751_recursiveGen = _out418;
                        _3752_recOwned = _out419;
                        _3753_recIdents = _out420;
                        RAST._IExpr _out421;
                        DCOMP._IOwnership _out422;
                        DCOMP.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMP.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_3751_recursiveGen, DCOMP.__default.DafnyCharUnderlying)), _3752_recOwned, expectedOwnership, out _out421, out _out422);
                        r = _out421;
                        resultingOwnership = _out422;
                        readIdents = _3753_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out423;
                    DCOMP._IOwnership _out424;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out425;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3460_expr, _3461_fromTpe, _3743_b), _3743_b, _3462_toTpe), selfIdent, env, expectedOwnership, out _out423, out _out424, out _out425);
                    r = _out423;
                    resultingOwnership = _out424;
                    readIdents = _out425;
                  }
                }
              } else {
                DAST._IType _3754___mcc_h170 = _source141.dtor_baseType;
                DAST._INewtypeRange _3755___mcc_h171 = _source141.dtor_range;
                bool _3756___mcc_h172 = _source141.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _3757___mcc_h173 = _source141.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _3758_attributes = _3757___mcc_h173;
                bool _3759_erase = _3756___mcc_h172;
                DAST._INewtypeRange _3760_range = _3755___mcc_h171;
                DAST._IType _3761_b = _3754___mcc_h170;
                {
                  Std.Wrappers._IOption<RAST._IType> _3762_nativeToType;
                  _3762_nativeToType = DCOMP.COMP.NewtypeToRustType(_3761_b, _3760_range);
                  if (object.Equals(_3461_fromTpe, _3761_b)) {
                    RAST._IExpr _3763_recursiveGen;
                    DCOMP._IOwnership _3764_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3765_recIdents;
                    RAST._IExpr _out426;
                    DCOMP._IOwnership _out427;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out428;
                    DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out426, out _out427, out _out428);
                    _3763_recursiveGen = _out426;
                    _3764_recOwned = _out427;
                    _3765_recIdents = _out428;
                    Std.Wrappers._IOption<RAST._IType> _source144 = _3762_nativeToType;
                    if (_source144.is_None) {
                      if (_3759_erase) {
                        r = _3763_recursiveGen;
                      } else {
                        RAST._IType _3766_rhsType;
                        RAST._IType _out429;
                        _out429 = DCOMP.COMP.GenType(_3462_toTpe, true, false);
                        _3766_rhsType = _out429;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3766_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3763_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out430;
                      DCOMP._IOwnership _out431;
                      DCOMP.COMP.FromOwnership(r, _3764_recOwned, expectedOwnership, out _out430, out _out431);
                      r = _out430;
                      resultingOwnership = _out431;
                    } else {
                      RAST._IType _3767___mcc_h1358 = _source144.dtor_value;
                      RAST._IType _3768_v = _3767___mcc_h1358;
                      r = (((_3763_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_3768_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                      RAST._IExpr _out432;
                      DCOMP._IOwnership _out433;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out432, out _out433);
                      r = _out432;
                      resultingOwnership = _out433;
                    }
                    readIdents = _3765_recIdents;
                  } else {
                    if ((_3762_nativeToType).is_Some) {
                      DAST._IType _source145 = _3461_fromTpe;
                      if (_source145.is_Path) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3769___mcc_h1359 = _source145.dtor_Path_a0;
                        Dafny.ISequence<DAST._IType> _3770___mcc_h1360 = _source145.dtor_typeArgs;
                        DAST._IResolvedType _3771___mcc_h1361 = _source145.dtor_resolved;
                        DAST._IResolvedType _source146 = _3771___mcc_h1361;
                        if (_source146.is_Datatype) {
                          DAST._IDatatypeType _3772___mcc_h1365 = _source146.dtor_datatypeType;
                        } else if (_source146.is_Trait) {
                          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3773___mcc_h1367 = _source146.dtor_path;
                          Dafny.ISequence<DAST._IAttribute> _3774___mcc_h1368 = _source146.dtor_attributes;
                        } else {
                          DAST._IType _3775___mcc_h1371 = _source146.dtor_baseType;
                          DAST._INewtypeRange _3776___mcc_h1372 = _source146.dtor_range;
                          bool _3777___mcc_h1373 = _source146.dtor_erase;
                          Dafny.ISequence<DAST._IAttribute> _3778___mcc_h1374 = _source146.dtor_attributes;
                          Dafny.ISequence<DAST._IAttribute> _3779_attributes0 = _3778___mcc_h1374;
                          bool _3780_erase0 = _3777___mcc_h1373;
                          DAST._INewtypeRange _3781_range0 = _3776___mcc_h1372;
                          DAST._IType _3782_b0 = _3775___mcc_h1371;
                          {
                            Std.Wrappers._IOption<RAST._IType> _3783_nativeFromType;
                            _3783_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3782_b0, _3781_range0);
                            if ((_3783_nativeFromType).is_Some) {
                              RAST._IExpr _3784_recursiveGen;
                              DCOMP._IOwnership _3785_recOwned;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3786_recIdents;
                              RAST._IExpr _out434;
                              DCOMP._IOwnership _out435;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out436;
                              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out434, out _out435, out _out436);
                              _3784_recursiveGen = _out434;
                              _3785_recOwned = _out435;
                              _3786_recIdents = _out436;
                              RAST._IExpr _out437;
                              DCOMP._IOwnership _out438;
                              DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_3784_recursiveGen, (_3762_nativeToType).dtor_value), _3785_recOwned, expectedOwnership, out _out437, out _out438);
                              r = _out437;
                              resultingOwnership = _out438;
                              readIdents = _3786_recIdents;
                              return ;
                            }
                          }
                        }
                      } else if (_source145.is_Nullable) {
                        DAST._IType _3787___mcc_h1379 = _source145.dtor_Nullable_a0;
                      } else if (_source145.is_Tuple) {
                        Dafny.ISequence<DAST._IType> _3788___mcc_h1381 = _source145.dtor_Tuple_a0;
                      } else if (_source145.is_Array) {
                        DAST._IType _3789___mcc_h1383 = _source145.dtor_element;
                        BigInteger _3790___mcc_h1384 = _source145.dtor_dims;
                      } else if (_source145.is_Seq) {
                        DAST._IType _3791___mcc_h1387 = _source145.dtor_element;
                      } else if (_source145.is_Set) {
                        DAST._IType _3792___mcc_h1389 = _source145.dtor_element;
                      } else if (_source145.is_Multiset) {
                        DAST._IType _3793___mcc_h1391 = _source145.dtor_element;
                      } else if (_source145.is_Map) {
                        DAST._IType _3794___mcc_h1393 = _source145.dtor_key;
                        DAST._IType _3795___mcc_h1394 = _source145.dtor_value;
                      } else if (_source145.is_SetBuilder) {
                        DAST._IType _3796___mcc_h1397 = _source145.dtor_element;
                      } else if (_source145.is_MapBuilder) {
                        DAST._IType _3797___mcc_h1399 = _source145.dtor_key;
                        DAST._IType _3798___mcc_h1400 = _source145.dtor_value;
                      } else if (_source145.is_Arrow) {
                        Dafny.ISequence<DAST._IType> _3799___mcc_h1403 = _source145.dtor_args;
                        DAST._IType _3800___mcc_h1404 = _source145.dtor_result;
                      } else if (_source145.is_Primitive) {
                        DAST._IPrimitive _3801___mcc_h1407 = _source145.dtor_Primitive_a0;
                      } else if (_source145.is_Passthrough) {
                        Dafny.ISequence<Dafny.Rune> _3802___mcc_h1409 = _source145.dtor_Passthrough_a0;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _3803___mcc_h1411 = _source145.dtor_TypeArg_a0;
                      }
                      if (object.Equals(_3461_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _3804_recursiveGen;
                        DCOMP._IOwnership _3805_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3806_recIdents;
                        RAST._IExpr _out439;
                        DCOMP._IOwnership _out440;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out441;
                        DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out439, out _out440, out _out441);
                        _3804_recursiveGen = _out439;
                        _3805_recOwned = _out440;
                        _3806_recIdents = _out441;
                        RAST._IExpr _out442;
                        DCOMP._IOwnership _out443;
                        DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_3804_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_3762_nativeToType).dtor_value), _3805_recOwned, expectedOwnership, out _out442, out _out443);
                        r = _out442;
                        resultingOwnership = _out443;
                        readIdents = _3806_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out444;
                    DCOMP._IOwnership _out445;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out446;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3460_expr, _3461_fromTpe, _3761_b), _3761_b, _3462_toTpe), selfIdent, env, expectedOwnership, out _out444, out _out445, out _out446);
                    r = _out444;
                    resultingOwnership = _out445;
                    readIdents = _out446;
                  }
                }
              }
            } else if (_source140.is_Nullable) {
              DAST._IType _3807___mcc_h182 = _source140.dtor_Nullable_a0;
              {
                RAST._IExpr _3808_recursiveGen;
                DCOMP._IOwnership _3809_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3810_recIdents;
                RAST._IExpr _out447;
                DCOMP._IOwnership _out448;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out449;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out447, out _out448, out _out449);
                _3808_recursiveGen = _out447;
                _3809_recOwned = _out448;
                _3810_recIdents = _out449;
                r = _3808_recursiveGen;
                if (object.Equals(_3809_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out450;
                DCOMP._IOwnership _out451;
                DCOMP.COMP.FromOwnership(r, _3809_recOwned, expectedOwnership, out _out450, out _out451);
                r = _out450;
                resultingOwnership = _out451;
                readIdents = _3810_recIdents;
              }
            } else if (_source140.is_Tuple) {
              Dafny.ISequence<DAST._IType> _3811___mcc_h185 = _source140.dtor_Tuple_a0;
              Dafny.ISequence<DAST._IAttribute> _3812_attributes = _3719___mcc_h139;
              bool _3813_erase = _3718___mcc_h138;
              DAST._INewtypeRange _3814_range = _3717___mcc_h137;
              DAST._IType _3815_b = _3716___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _3816_nativeFromType;
                _3816_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3815_b, _3814_range);
                if (object.Equals(_3815_b, _3462_toTpe)) {
                  RAST._IExpr _3817_recursiveGen;
                  DCOMP._IOwnership _3818_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3819_recIdents;
                  RAST._IExpr _out452;
                  DCOMP._IOwnership _out453;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out454;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out452, out _out453, out _out454);
                  _3817_recursiveGen = _out452;
                  _3818_recOwned = _out453;
                  _3819_recIdents = _out454;
                  Std.Wrappers._IOption<RAST._IType> _source147 = _3816_nativeFromType;
                  if (_source147.is_None) {
                    if (_3813_erase) {
                      r = _3817_recursiveGen;
                    } else {
                      r = (_3817_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out455;
                    DCOMP._IOwnership _out456;
                    DCOMP.COMP.FromOwnership(r, _3818_recOwned, expectedOwnership, out _out455, out _out456);
                    r = _out455;
                    resultingOwnership = _out456;
                    readIdents = _3819_recIdents;
                  } else {
                    RAST._IType _3820___mcc_h1413 = _source147.dtor_value;
                    RAST._IType _3821_v = _3820___mcc_h1413;
                    RAST._IType _3822_toTpeRust;
                    RAST._IType _out457;
                    _out457 = DCOMP.COMP.GenType(_3462_toTpe, false, false);
                    _3822_toTpeRust = _out457;
                    r = (((_3817_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_3822_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out458;
                    DCOMP._IOwnership _out459;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out458, out _out459);
                    r = _out458;
                    resultingOwnership = _out459;
                  }
                } else {
                  if ((_3816_nativeFromType).is_Some) {
                    if (object.Equals(_3462_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _3823_recursiveGen;
                      DCOMP._IOwnership _3824_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3825_recIdents;
                      RAST._IExpr _out460;
                      DCOMP._IOwnership _out461;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out462;
                      DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out460, out _out461, out _out462);
                      _3823_recursiveGen = _out460;
                      _3824_recOwned = _out461;
                      _3825_recIdents = _out462;
                      RAST._IExpr _out463;
                      DCOMP._IOwnership _out464;
                      DCOMP.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMP.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_3823_recursiveGen, DCOMP.__default.DafnyCharUnderlying)), _3824_recOwned, expectedOwnership, out _out463, out _out464);
                      r = _out463;
                      resultingOwnership = _out464;
                      readIdents = _3825_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out465;
                  DCOMP._IOwnership _out466;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out467;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3460_expr, _3461_fromTpe, _3815_b), _3815_b, _3462_toTpe), selfIdent, env, expectedOwnership, out _out465, out _out466, out _out467);
                  r = _out465;
                  resultingOwnership = _out466;
                  readIdents = _out467;
                }
              }
            } else if (_source140.is_Array) {
              DAST._IType _3826___mcc_h188 = _source140.dtor_element;
              BigInteger _3827___mcc_h189 = _source140.dtor_dims;
              Dafny.ISequence<DAST._IAttribute> _3828_attributes = _3719___mcc_h139;
              bool _3829_erase = _3718___mcc_h138;
              DAST._INewtypeRange _3830_range = _3717___mcc_h137;
              DAST._IType _3831_b = _3716___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _3832_nativeFromType;
                _3832_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3831_b, _3830_range);
                if (object.Equals(_3831_b, _3462_toTpe)) {
                  RAST._IExpr _3833_recursiveGen;
                  DCOMP._IOwnership _3834_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3835_recIdents;
                  RAST._IExpr _out468;
                  DCOMP._IOwnership _out469;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out470;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out468, out _out469, out _out470);
                  _3833_recursiveGen = _out468;
                  _3834_recOwned = _out469;
                  _3835_recIdents = _out470;
                  Std.Wrappers._IOption<RAST._IType> _source148 = _3832_nativeFromType;
                  if (_source148.is_None) {
                    if (_3829_erase) {
                      r = _3833_recursiveGen;
                    } else {
                      r = (_3833_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out471;
                    DCOMP._IOwnership _out472;
                    DCOMP.COMP.FromOwnership(r, _3834_recOwned, expectedOwnership, out _out471, out _out472);
                    r = _out471;
                    resultingOwnership = _out472;
                    readIdents = _3835_recIdents;
                  } else {
                    RAST._IType _3836___mcc_h1414 = _source148.dtor_value;
                    RAST._IType _3837_v = _3836___mcc_h1414;
                    RAST._IType _3838_toTpeRust;
                    RAST._IType _out473;
                    _out473 = DCOMP.COMP.GenType(_3462_toTpe, false, false);
                    _3838_toTpeRust = _out473;
                    r = (((_3833_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_3838_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out474;
                    DCOMP._IOwnership _out475;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out474, out _out475);
                    r = _out474;
                    resultingOwnership = _out475;
                  }
                } else {
                  if ((_3832_nativeFromType).is_Some) {
                    if (object.Equals(_3462_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _3839_recursiveGen;
                      DCOMP._IOwnership _3840_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3841_recIdents;
                      RAST._IExpr _out476;
                      DCOMP._IOwnership _out477;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out478;
                      DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out476, out _out477, out _out478);
                      _3839_recursiveGen = _out476;
                      _3840_recOwned = _out477;
                      _3841_recIdents = _out478;
                      RAST._IExpr _out479;
                      DCOMP._IOwnership _out480;
                      DCOMP.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMP.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_3839_recursiveGen, DCOMP.__default.DafnyCharUnderlying)), _3840_recOwned, expectedOwnership, out _out479, out _out480);
                      r = _out479;
                      resultingOwnership = _out480;
                      readIdents = _3841_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out481;
                  DCOMP._IOwnership _out482;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out483;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3460_expr, _3461_fromTpe, _3831_b), _3831_b, _3462_toTpe), selfIdent, env, expectedOwnership, out _out481, out _out482, out _out483);
                  r = _out481;
                  resultingOwnership = _out482;
                  readIdents = _out483;
                }
              }
            } else if (_source140.is_Seq) {
              DAST._IType _3842___mcc_h194 = _source140.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _3843_attributes = _3719___mcc_h139;
              bool _3844_erase = _3718___mcc_h138;
              DAST._INewtypeRange _3845_range = _3717___mcc_h137;
              DAST._IType _3846_b = _3716___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _3847_nativeFromType;
                _3847_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3846_b, _3845_range);
                if (object.Equals(_3846_b, _3462_toTpe)) {
                  RAST._IExpr _3848_recursiveGen;
                  DCOMP._IOwnership _3849_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3850_recIdents;
                  RAST._IExpr _out484;
                  DCOMP._IOwnership _out485;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out486;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out484, out _out485, out _out486);
                  _3848_recursiveGen = _out484;
                  _3849_recOwned = _out485;
                  _3850_recIdents = _out486;
                  Std.Wrappers._IOption<RAST._IType> _source149 = _3847_nativeFromType;
                  if (_source149.is_None) {
                    if (_3844_erase) {
                      r = _3848_recursiveGen;
                    } else {
                      r = (_3848_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out487;
                    DCOMP._IOwnership _out488;
                    DCOMP.COMP.FromOwnership(r, _3849_recOwned, expectedOwnership, out _out487, out _out488);
                    r = _out487;
                    resultingOwnership = _out488;
                    readIdents = _3850_recIdents;
                  } else {
                    RAST._IType _3851___mcc_h1415 = _source149.dtor_value;
                    RAST._IType _3852_v = _3851___mcc_h1415;
                    RAST._IType _3853_toTpeRust;
                    RAST._IType _out489;
                    _out489 = DCOMP.COMP.GenType(_3462_toTpe, false, false);
                    _3853_toTpeRust = _out489;
                    r = (((_3848_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_3853_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out490;
                    DCOMP._IOwnership _out491;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out490, out _out491);
                    r = _out490;
                    resultingOwnership = _out491;
                  }
                } else {
                  if ((_3847_nativeFromType).is_Some) {
                    if (object.Equals(_3462_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _3854_recursiveGen;
                      DCOMP._IOwnership _3855_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3856_recIdents;
                      RAST._IExpr _out492;
                      DCOMP._IOwnership _out493;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out494;
                      DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out492, out _out493, out _out494);
                      _3854_recursiveGen = _out492;
                      _3855_recOwned = _out493;
                      _3856_recIdents = _out494;
                      RAST._IExpr _out495;
                      DCOMP._IOwnership _out496;
                      DCOMP.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMP.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_3854_recursiveGen, DCOMP.__default.DafnyCharUnderlying)), _3855_recOwned, expectedOwnership, out _out495, out _out496);
                      r = _out495;
                      resultingOwnership = _out496;
                      readIdents = _3856_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out497;
                  DCOMP._IOwnership _out498;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out499;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3460_expr, _3461_fromTpe, _3846_b), _3846_b, _3462_toTpe), selfIdent, env, expectedOwnership, out _out497, out _out498, out _out499);
                  r = _out497;
                  resultingOwnership = _out498;
                  readIdents = _out499;
                }
              }
            } else if (_source140.is_Set) {
              DAST._IType _3857___mcc_h197 = _source140.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _3858_attributes = _3719___mcc_h139;
              bool _3859_erase = _3718___mcc_h138;
              DAST._INewtypeRange _3860_range = _3717___mcc_h137;
              DAST._IType _3861_b = _3716___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _3862_nativeFromType;
                _3862_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3861_b, _3860_range);
                if (object.Equals(_3861_b, _3462_toTpe)) {
                  RAST._IExpr _3863_recursiveGen;
                  DCOMP._IOwnership _3864_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3865_recIdents;
                  RAST._IExpr _out500;
                  DCOMP._IOwnership _out501;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out502;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out500, out _out501, out _out502);
                  _3863_recursiveGen = _out500;
                  _3864_recOwned = _out501;
                  _3865_recIdents = _out502;
                  Std.Wrappers._IOption<RAST._IType> _source150 = _3862_nativeFromType;
                  if (_source150.is_None) {
                    if (_3859_erase) {
                      r = _3863_recursiveGen;
                    } else {
                      r = (_3863_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out503;
                    DCOMP._IOwnership _out504;
                    DCOMP.COMP.FromOwnership(r, _3864_recOwned, expectedOwnership, out _out503, out _out504);
                    r = _out503;
                    resultingOwnership = _out504;
                    readIdents = _3865_recIdents;
                  } else {
                    RAST._IType _3866___mcc_h1416 = _source150.dtor_value;
                    RAST._IType _3867_v = _3866___mcc_h1416;
                    RAST._IType _3868_toTpeRust;
                    RAST._IType _out505;
                    _out505 = DCOMP.COMP.GenType(_3462_toTpe, false, false);
                    _3868_toTpeRust = _out505;
                    r = (((_3863_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_3868_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out506;
                    DCOMP._IOwnership _out507;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out506, out _out507);
                    r = _out506;
                    resultingOwnership = _out507;
                  }
                } else {
                  if ((_3862_nativeFromType).is_Some) {
                    if (object.Equals(_3462_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _3869_recursiveGen;
                      DCOMP._IOwnership _3870_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3871_recIdents;
                      RAST._IExpr _out508;
                      DCOMP._IOwnership _out509;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out510;
                      DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out508, out _out509, out _out510);
                      _3869_recursiveGen = _out508;
                      _3870_recOwned = _out509;
                      _3871_recIdents = _out510;
                      RAST._IExpr _out511;
                      DCOMP._IOwnership _out512;
                      DCOMP.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMP.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_3869_recursiveGen, DCOMP.__default.DafnyCharUnderlying)), _3870_recOwned, expectedOwnership, out _out511, out _out512);
                      r = _out511;
                      resultingOwnership = _out512;
                      readIdents = _3871_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out513;
                  DCOMP._IOwnership _out514;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out515;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3460_expr, _3461_fromTpe, _3861_b), _3861_b, _3462_toTpe), selfIdent, env, expectedOwnership, out _out513, out _out514, out _out515);
                  r = _out513;
                  resultingOwnership = _out514;
                  readIdents = _out515;
                }
              }
            } else if (_source140.is_Multiset) {
              DAST._IType _3872___mcc_h200 = _source140.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _3873_attributes = _3719___mcc_h139;
              bool _3874_erase = _3718___mcc_h138;
              DAST._INewtypeRange _3875_range = _3717___mcc_h137;
              DAST._IType _3876_b = _3716___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _3877_nativeFromType;
                _3877_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3876_b, _3875_range);
                if (object.Equals(_3876_b, _3462_toTpe)) {
                  RAST._IExpr _3878_recursiveGen;
                  DCOMP._IOwnership _3879_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3880_recIdents;
                  RAST._IExpr _out516;
                  DCOMP._IOwnership _out517;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out518;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out516, out _out517, out _out518);
                  _3878_recursiveGen = _out516;
                  _3879_recOwned = _out517;
                  _3880_recIdents = _out518;
                  Std.Wrappers._IOption<RAST._IType> _source151 = _3877_nativeFromType;
                  if (_source151.is_None) {
                    if (_3874_erase) {
                      r = _3878_recursiveGen;
                    } else {
                      r = (_3878_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out519;
                    DCOMP._IOwnership _out520;
                    DCOMP.COMP.FromOwnership(r, _3879_recOwned, expectedOwnership, out _out519, out _out520);
                    r = _out519;
                    resultingOwnership = _out520;
                    readIdents = _3880_recIdents;
                  } else {
                    RAST._IType _3881___mcc_h1417 = _source151.dtor_value;
                    RAST._IType _3882_v = _3881___mcc_h1417;
                    RAST._IType _3883_toTpeRust;
                    RAST._IType _out521;
                    _out521 = DCOMP.COMP.GenType(_3462_toTpe, false, false);
                    _3883_toTpeRust = _out521;
                    r = (((_3878_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_3883_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out522;
                    DCOMP._IOwnership _out523;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out522, out _out523);
                    r = _out522;
                    resultingOwnership = _out523;
                  }
                } else {
                  if ((_3877_nativeFromType).is_Some) {
                    if (object.Equals(_3462_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _3884_recursiveGen;
                      DCOMP._IOwnership _3885_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3886_recIdents;
                      RAST._IExpr _out524;
                      DCOMP._IOwnership _out525;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out526;
                      DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out524, out _out525, out _out526);
                      _3884_recursiveGen = _out524;
                      _3885_recOwned = _out525;
                      _3886_recIdents = _out526;
                      RAST._IExpr _out527;
                      DCOMP._IOwnership _out528;
                      DCOMP.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMP.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_3884_recursiveGen, DCOMP.__default.DafnyCharUnderlying)), _3885_recOwned, expectedOwnership, out _out527, out _out528);
                      r = _out527;
                      resultingOwnership = _out528;
                      readIdents = _3886_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out529;
                  DCOMP._IOwnership _out530;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out531;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3460_expr, _3461_fromTpe, _3876_b), _3876_b, _3462_toTpe), selfIdent, env, expectedOwnership, out _out529, out _out530, out _out531);
                  r = _out529;
                  resultingOwnership = _out530;
                  readIdents = _out531;
                }
              }
            } else if (_source140.is_Map) {
              DAST._IType _3887___mcc_h203 = _source140.dtor_key;
              DAST._IType _3888___mcc_h204 = _source140.dtor_value;
              Dafny.ISequence<DAST._IAttribute> _3889_attributes = _3719___mcc_h139;
              bool _3890_erase = _3718___mcc_h138;
              DAST._INewtypeRange _3891_range = _3717___mcc_h137;
              DAST._IType _3892_b = _3716___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _3893_nativeFromType;
                _3893_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3892_b, _3891_range);
                if (object.Equals(_3892_b, _3462_toTpe)) {
                  RAST._IExpr _3894_recursiveGen;
                  DCOMP._IOwnership _3895_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3896_recIdents;
                  RAST._IExpr _out532;
                  DCOMP._IOwnership _out533;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out534;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out532, out _out533, out _out534);
                  _3894_recursiveGen = _out532;
                  _3895_recOwned = _out533;
                  _3896_recIdents = _out534;
                  Std.Wrappers._IOption<RAST._IType> _source152 = _3893_nativeFromType;
                  if (_source152.is_None) {
                    if (_3890_erase) {
                      r = _3894_recursiveGen;
                    } else {
                      r = (_3894_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out535;
                    DCOMP._IOwnership _out536;
                    DCOMP.COMP.FromOwnership(r, _3895_recOwned, expectedOwnership, out _out535, out _out536);
                    r = _out535;
                    resultingOwnership = _out536;
                    readIdents = _3896_recIdents;
                  } else {
                    RAST._IType _3897___mcc_h1418 = _source152.dtor_value;
                    RAST._IType _3898_v = _3897___mcc_h1418;
                    RAST._IType _3899_toTpeRust;
                    RAST._IType _out537;
                    _out537 = DCOMP.COMP.GenType(_3462_toTpe, false, false);
                    _3899_toTpeRust = _out537;
                    r = (((_3894_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_3899_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out538;
                    DCOMP._IOwnership _out539;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out538, out _out539);
                    r = _out538;
                    resultingOwnership = _out539;
                  }
                } else {
                  if ((_3893_nativeFromType).is_Some) {
                    if (object.Equals(_3462_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _3900_recursiveGen;
                      DCOMP._IOwnership _3901_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3902_recIdents;
                      RAST._IExpr _out540;
                      DCOMP._IOwnership _out541;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out542;
                      DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out540, out _out541, out _out542);
                      _3900_recursiveGen = _out540;
                      _3901_recOwned = _out541;
                      _3902_recIdents = _out542;
                      RAST._IExpr _out543;
                      DCOMP._IOwnership _out544;
                      DCOMP.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMP.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_3900_recursiveGen, DCOMP.__default.DafnyCharUnderlying)), _3901_recOwned, expectedOwnership, out _out543, out _out544);
                      r = _out543;
                      resultingOwnership = _out544;
                      readIdents = _3902_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out545;
                  DCOMP._IOwnership _out546;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out547;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3460_expr, _3461_fromTpe, _3892_b), _3892_b, _3462_toTpe), selfIdent, env, expectedOwnership, out _out545, out _out546, out _out547);
                  r = _out545;
                  resultingOwnership = _out546;
                  readIdents = _out547;
                }
              }
            } else if (_source140.is_SetBuilder) {
              DAST._IType _3903___mcc_h209 = _source140.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _3904_attributes = _3719___mcc_h139;
              bool _3905_erase = _3718___mcc_h138;
              DAST._INewtypeRange _3906_range = _3717___mcc_h137;
              DAST._IType _3907_b = _3716___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _3908_nativeFromType;
                _3908_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3907_b, _3906_range);
                if (object.Equals(_3907_b, _3462_toTpe)) {
                  RAST._IExpr _3909_recursiveGen;
                  DCOMP._IOwnership _3910_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3911_recIdents;
                  RAST._IExpr _out548;
                  DCOMP._IOwnership _out549;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out550;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out548, out _out549, out _out550);
                  _3909_recursiveGen = _out548;
                  _3910_recOwned = _out549;
                  _3911_recIdents = _out550;
                  Std.Wrappers._IOption<RAST._IType> _source153 = _3908_nativeFromType;
                  if (_source153.is_None) {
                    if (_3905_erase) {
                      r = _3909_recursiveGen;
                    } else {
                      r = (_3909_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out551;
                    DCOMP._IOwnership _out552;
                    DCOMP.COMP.FromOwnership(r, _3910_recOwned, expectedOwnership, out _out551, out _out552);
                    r = _out551;
                    resultingOwnership = _out552;
                    readIdents = _3911_recIdents;
                  } else {
                    RAST._IType _3912___mcc_h1419 = _source153.dtor_value;
                    RAST._IType _3913_v = _3912___mcc_h1419;
                    RAST._IType _3914_toTpeRust;
                    RAST._IType _out553;
                    _out553 = DCOMP.COMP.GenType(_3462_toTpe, false, false);
                    _3914_toTpeRust = _out553;
                    r = (((_3909_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_3914_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out554;
                    DCOMP._IOwnership _out555;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out554, out _out555);
                    r = _out554;
                    resultingOwnership = _out555;
                  }
                } else {
                  if ((_3908_nativeFromType).is_Some) {
                    if (object.Equals(_3462_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _3915_recursiveGen;
                      DCOMP._IOwnership _3916_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3917_recIdents;
                      RAST._IExpr _out556;
                      DCOMP._IOwnership _out557;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out558;
                      DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out556, out _out557, out _out558);
                      _3915_recursiveGen = _out556;
                      _3916_recOwned = _out557;
                      _3917_recIdents = _out558;
                      RAST._IExpr _out559;
                      DCOMP._IOwnership _out560;
                      DCOMP.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMP.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_3915_recursiveGen, DCOMP.__default.DafnyCharUnderlying)), _3916_recOwned, expectedOwnership, out _out559, out _out560);
                      r = _out559;
                      resultingOwnership = _out560;
                      readIdents = _3917_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out561;
                  DCOMP._IOwnership _out562;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out563;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3460_expr, _3461_fromTpe, _3907_b), _3907_b, _3462_toTpe), selfIdent, env, expectedOwnership, out _out561, out _out562, out _out563);
                  r = _out561;
                  resultingOwnership = _out562;
                  readIdents = _out563;
                }
              }
            } else if (_source140.is_MapBuilder) {
              DAST._IType _3918___mcc_h212 = _source140.dtor_key;
              DAST._IType _3919___mcc_h213 = _source140.dtor_value;
              Dafny.ISequence<DAST._IAttribute> _3920_attributes = _3719___mcc_h139;
              bool _3921_erase = _3718___mcc_h138;
              DAST._INewtypeRange _3922_range = _3717___mcc_h137;
              DAST._IType _3923_b = _3716___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _3924_nativeFromType;
                _3924_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3923_b, _3922_range);
                if (object.Equals(_3923_b, _3462_toTpe)) {
                  RAST._IExpr _3925_recursiveGen;
                  DCOMP._IOwnership _3926_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3927_recIdents;
                  RAST._IExpr _out564;
                  DCOMP._IOwnership _out565;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out566;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out564, out _out565, out _out566);
                  _3925_recursiveGen = _out564;
                  _3926_recOwned = _out565;
                  _3927_recIdents = _out566;
                  Std.Wrappers._IOption<RAST._IType> _source154 = _3924_nativeFromType;
                  if (_source154.is_None) {
                    if (_3921_erase) {
                      r = _3925_recursiveGen;
                    } else {
                      r = (_3925_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out567;
                    DCOMP._IOwnership _out568;
                    DCOMP.COMP.FromOwnership(r, _3926_recOwned, expectedOwnership, out _out567, out _out568);
                    r = _out567;
                    resultingOwnership = _out568;
                    readIdents = _3927_recIdents;
                  } else {
                    RAST._IType _3928___mcc_h1420 = _source154.dtor_value;
                    RAST._IType _3929_v = _3928___mcc_h1420;
                    RAST._IType _3930_toTpeRust;
                    RAST._IType _out569;
                    _out569 = DCOMP.COMP.GenType(_3462_toTpe, false, false);
                    _3930_toTpeRust = _out569;
                    r = (((_3925_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_3930_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out570;
                    DCOMP._IOwnership _out571;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out570, out _out571);
                    r = _out570;
                    resultingOwnership = _out571;
                  }
                } else {
                  if ((_3924_nativeFromType).is_Some) {
                    if (object.Equals(_3462_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _3931_recursiveGen;
                      DCOMP._IOwnership _3932_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3933_recIdents;
                      RAST._IExpr _out572;
                      DCOMP._IOwnership _out573;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out574;
                      DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out572, out _out573, out _out574);
                      _3931_recursiveGen = _out572;
                      _3932_recOwned = _out573;
                      _3933_recIdents = _out574;
                      RAST._IExpr _out575;
                      DCOMP._IOwnership _out576;
                      DCOMP.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMP.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_3931_recursiveGen, DCOMP.__default.DafnyCharUnderlying)), _3932_recOwned, expectedOwnership, out _out575, out _out576);
                      r = _out575;
                      resultingOwnership = _out576;
                      readIdents = _3933_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out577;
                  DCOMP._IOwnership _out578;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out579;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3460_expr, _3461_fromTpe, _3923_b), _3923_b, _3462_toTpe), selfIdent, env, expectedOwnership, out _out577, out _out578, out _out579);
                  r = _out577;
                  resultingOwnership = _out578;
                  readIdents = _out579;
                }
              }
            } else if (_source140.is_Arrow) {
              Dafny.ISequence<DAST._IType> _3934___mcc_h218 = _source140.dtor_args;
              DAST._IType _3935___mcc_h219 = _source140.dtor_result;
              Dafny.ISequence<DAST._IAttribute> _3936_attributes = _3719___mcc_h139;
              bool _3937_erase = _3718___mcc_h138;
              DAST._INewtypeRange _3938_range = _3717___mcc_h137;
              DAST._IType _3939_b = _3716___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _3940_nativeFromType;
                _3940_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3939_b, _3938_range);
                if (object.Equals(_3939_b, _3462_toTpe)) {
                  RAST._IExpr _3941_recursiveGen;
                  DCOMP._IOwnership _3942_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3943_recIdents;
                  RAST._IExpr _out580;
                  DCOMP._IOwnership _out581;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out582;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out580, out _out581, out _out582);
                  _3941_recursiveGen = _out580;
                  _3942_recOwned = _out581;
                  _3943_recIdents = _out582;
                  Std.Wrappers._IOption<RAST._IType> _source155 = _3940_nativeFromType;
                  if (_source155.is_None) {
                    if (_3937_erase) {
                      r = _3941_recursiveGen;
                    } else {
                      r = (_3941_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out583;
                    DCOMP._IOwnership _out584;
                    DCOMP.COMP.FromOwnership(r, _3942_recOwned, expectedOwnership, out _out583, out _out584);
                    r = _out583;
                    resultingOwnership = _out584;
                    readIdents = _3943_recIdents;
                  } else {
                    RAST._IType _3944___mcc_h1421 = _source155.dtor_value;
                    RAST._IType _3945_v = _3944___mcc_h1421;
                    RAST._IType _3946_toTpeRust;
                    RAST._IType _out585;
                    _out585 = DCOMP.COMP.GenType(_3462_toTpe, false, false);
                    _3946_toTpeRust = _out585;
                    r = (((_3941_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_3946_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out586;
                    DCOMP._IOwnership _out587;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out586, out _out587);
                    r = _out586;
                    resultingOwnership = _out587;
                  }
                } else {
                  if ((_3940_nativeFromType).is_Some) {
                    if (object.Equals(_3462_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _3947_recursiveGen;
                      DCOMP._IOwnership _3948_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3949_recIdents;
                      RAST._IExpr _out588;
                      DCOMP._IOwnership _out589;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out590;
                      DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out588, out _out589, out _out590);
                      _3947_recursiveGen = _out588;
                      _3948_recOwned = _out589;
                      _3949_recIdents = _out590;
                      RAST._IExpr _out591;
                      DCOMP._IOwnership _out592;
                      DCOMP.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMP.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_3947_recursiveGen, DCOMP.__default.DafnyCharUnderlying)), _3948_recOwned, expectedOwnership, out _out591, out _out592);
                      r = _out591;
                      resultingOwnership = _out592;
                      readIdents = _3949_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out593;
                  DCOMP._IOwnership _out594;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out595;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3460_expr, _3461_fromTpe, _3939_b), _3939_b, _3462_toTpe), selfIdent, env, expectedOwnership, out _out593, out _out594, out _out595);
                  r = _out593;
                  resultingOwnership = _out594;
                  readIdents = _out595;
                }
              }
            } else if (_source140.is_Primitive) {
              DAST._IPrimitive _3950___mcc_h224 = _source140.dtor_Primitive_a0;
              Dafny.ISequence<DAST._IAttribute> _3951_attributes = _3719___mcc_h139;
              bool _3952_erase = _3718___mcc_h138;
              DAST._INewtypeRange _3953_range = _3717___mcc_h137;
              DAST._IType _3954_b = _3716___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _3955_nativeFromType;
                _3955_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3954_b, _3953_range);
                if (object.Equals(_3954_b, _3462_toTpe)) {
                  RAST._IExpr _3956_recursiveGen;
                  DCOMP._IOwnership _3957_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3958_recIdents;
                  RAST._IExpr _out596;
                  DCOMP._IOwnership _out597;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out598;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out596, out _out597, out _out598);
                  _3956_recursiveGen = _out596;
                  _3957_recOwned = _out597;
                  _3958_recIdents = _out598;
                  Std.Wrappers._IOption<RAST._IType> _source156 = _3955_nativeFromType;
                  if (_source156.is_None) {
                    if (_3952_erase) {
                      r = _3956_recursiveGen;
                    } else {
                      r = (_3956_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out599;
                    DCOMP._IOwnership _out600;
                    DCOMP.COMP.FromOwnership(r, _3957_recOwned, expectedOwnership, out _out599, out _out600);
                    r = _out599;
                    resultingOwnership = _out600;
                    readIdents = _3958_recIdents;
                  } else {
                    RAST._IType _3959___mcc_h1422 = _source156.dtor_value;
                    RAST._IType _3960_v = _3959___mcc_h1422;
                    RAST._IType _3961_toTpeRust;
                    RAST._IType _out601;
                    _out601 = DCOMP.COMP.GenType(_3462_toTpe, false, false);
                    _3961_toTpeRust = _out601;
                    r = (((_3956_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_3961_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out602;
                    DCOMP._IOwnership _out603;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out602, out _out603);
                    r = _out602;
                    resultingOwnership = _out603;
                  }
                } else {
                  if ((_3955_nativeFromType).is_Some) {
                    if (object.Equals(_3462_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _3962_recursiveGen;
                      DCOMP._IOwnership _3963_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3964_recIdents;
                      RAST._IExpr _out604;
                      DCOMP._IOwnership _out605;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out606;
                      DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out604, out _out605, out _out606);
                      _3962_recursiveGen = _out604;
                      _3963_recOwned = _out605;
                      _3964_recIdents = _out606;
                      RAST._IExpr _out607;
                      DCOMP._IOwnership _out608;
                      DCOMP.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMP.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_3962_recursiveGen, DCOMP.__default.DafnyCharUnderlying)), _3963_recOwned, expectedOwnership, out _out607, out _out608);
                      r = _out607;
                      resultingOwnership = _out608;
                      readIdents = _3964_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out609;
                  DCOMP._IOwnership _out610;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out611;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3460_expr, _3461_fromTpe, _3954_b), _3954_b, _3462_toTpe), selfIdent, env, expectedOwnership, out _out609, out _out610, out _out611);
                  r = _out609;
                  resultingOwnership = _out610;
                  readIdents = _out611;
                }
              }
            } else if (_source140.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _3965___mcc_h227 = _source140.dtor_Passthrough_a0;
              Dafny.ISequence<DAST._IAttribute> _3966_attributes = _3719___mcc_h139;
              bool _3967_erase = _3718___mcc_h138;
              DAST._INewtypeRange _3968_range = _3717___mcc_h137;
              DAST._IType _3969_b = _3716___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _3970_nativeFromType;
                _3970_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3969_b, _3968_range);
                if (object.Equals(_3969_b, _3462_toTpe)) {
                  RAST._IExpr _3971_recursiveGen;
                  DCOMP._IOwnership _3972_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3973_recIdents;
                  RAST._IExpr _out612;
                  DCOMP._IOwnership _out613;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out614;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out612, out _out613, out _out614);
                  _3971_recursiveGen = _out612;
                  _3972_recOwned = _out613;
                  _3973_recIdents = _out614;
                  Std.Wrappers._IOption<RAST._IType> _source157 = _3970_nativeFromType;
                  if (_source157.is_None) {
                    if (_3967_erase) {
                      r = _3971_recursiveGen;
                    } else {
                      r = (_3971_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out615;
                    DCOMP._IOwnership _out616;
                    DCOMP.COMP.FromOwnership(r, _3972_recOwned, expectedOwnership, out _out615, out _out616);
                    r = _out615;
                    resultingOwnership = _out616;
                    readIdents = _3973_recIdents;
                  } else {
                    RAST._IType _3974___mcc_h1423 = _source157.dtor_value;
                    RAST._IType _3975_v = _3974___mcc_h1423;
                    RAST._IType _3976_toTpeRust;
                    RAST._IType _out617;
                    _out617 = DCOMP.COMP.GenType(_3462_toTpe, false, false);
                    _3976_toTpeRust = _out617;
                    r = (((_3971_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_3976_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out618;
                    DCOMP._IOwnership _out619;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out618, out _out619);
                    r = _out618;
                    resultingOwnership = _out619;
                  }
                } else {
                  if ((_3970_nativeFromType).is_Some) {
                    if (object.Equals(_3462_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _3977_recursiveGen;
                      DCOMP._IOwnership _3978_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3979_recIdents;
                      RAST._IExpr _out620;
                      DCOMP._IOwnership _out621;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out622;
                      DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out620, out _out621, out _out622);
                      _3977_recursiveGen = _out620;
                      _3978_recOwned = _out621;
                      _3979_recIdents = _out622;
                      RAST._IExpr _out623;
                      DCOMP._IOwnership _out624;
                      DCOMP.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMP.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_3977_recursiveGen, DCOMP.__default.DafnyCharUnderlying)), _3978_recOwned, expectedOwnership, out _out623, out _out624);
                      r = _out623;
                      resultingOwnership = _out624;
                      readIdents = _3979_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out625;
                  DCOMP._IOwnership _out626;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out627;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3460_expr, _3461_fromTpe, _3969_b), _3969_b, _3462_toTpe), selfIdent, env, expectedOwnership, out _out625, out _out626, out _out627);
                  r = _out625;
                  resultingOwnership = _out626;
                  readIdents = _out627;
                }
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3980___mcc_h230 = _source140.dtor_TypeArg_a0;
              Dafny.ISequence<DAST._IAttribute> _3981_attributes = _3719___mcc_h139;
              bool _3982_erase = _3718___mcc_h138;
              DAST._INewtypeRange _3983_range = _3717___mcc_h137;
              DAST._IType _3984_b = _3716___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _3985_nativeFromType;
                _3985_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3984_b, _3983_range);
                if (object.Equals(_3984_b, _3462_toTpe)) {
                  RAST._IExpr _3986_recursiveGen;
                  DCOMP._IOwnership _3987_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3988_recIdents;
                  RAST._IExpr _out628;
                  DCOMP._IOwnership _out629;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out630;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out628, out _out629, out _out630);
                  _3986_recursiveGen = _out628;
                  _3987_recOwned = _out629;
                  _3988_recIdents = _out630;
                  Std.Wrappers._IOption<RAST._IType> _source158 = _3985_nativeFromType;
                  if (_source158.is_None) {
                    if (_3982_erase) {
                      r = _3986_recursiveGen;
                    } else {
                      r = (_3986_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out631;
                    DCOMP._IOwnership _out632;
                    DCOMP.COMP.FromOwnership(r, _3987_recOwned, expectedOwnership, out _out631, out _out632);
                    r = _out631;
                    resultingOwnership = _out632;
                    readIdents = _3988_recIdents;
                  } else {
                    RAST._IType _3989___mcc_h1424 = _source158.dtor_value;
                    RAST._IType _3990_v = _3989___mcc_h1424;
                    RAST._IType _3991_toTpeRust;
                    RAST._IType _out633;
                    _out633 = DCOMP.COMP.GenType(_3462_toTpe, false, false);
                    _3991_toTpeRust = _out633;
                    r = (((_3986_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_3991_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out634;
                    DCOMP._IOwnership _out635;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out634, out _out635);
                    r = _out634;
                    resultingOwnership = _out635;
                  }
                } else {
                  if ((_3985_nativeFromType).is_Some) {
                    if (object.Equals(_3462_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _3992_recursiveGen;
                      DCOMP._IOwnership _3993_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3994_recIdents;
                      RAST._IExpr _out636;
                      DCOMP._IOwnership _out637;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out638;
                      DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out636, out _out637, out _out638);
                      _3992_recursiveGen = _out636;
                      _3993_recOwned = _out637;
                      _3994_recIdents = _out638;
                      RAST._IExpr _out639;
                      DCOMP._IOwnership _out640;
                      DCOMP.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMP.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_3992_recursiveGen, DCOMP.__default.DafnyCharUnderlying)), _3993_recOwned, expectedOwnership, out _out639, out _out640);
                      r = _out639;
                      resultingOwnership = _out640;
                      readIdents = _3994_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out641;
                  DCOMP._IOwnership _out642;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out643;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3460_expr, _3461_fromTpe, _3984_b), _3984_b, _3462_toTpe), selfIdent, env, expectedOwnership, out _out641, out _out642, out _out643);
                  r = _out641;
                  resultingOwnership = _out642;
                  readIdents = _out643;
                }
              }
            }
          }
        } else if (_source128.is_Nullable) {
          DAST._IType _3995___mcc_h233 = _source128.dtor_Nullable_a0;
          DAST._IType _source159 = _3467___mcc_h1;
          if (_source159.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3996___mcc_h237 = _source159.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3997___mcc_h238 = _source159.dtor_typeArgs;
            DAST._IResolvedType _3998___mcc_h239 = _source159.dtor_resolved;
            DAST._IResolvedType _source160 = _3998___mcc_h239;
            if (_source160.is_Datatype) {
              DAST._IDatatypeType _3999___mcc_h246 = _source160.dtor_datatypeType;
              {
                RAST._IExpr _4000_recursiveGen;
                DCOMP._IOwnership _4001_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4002_recIdents;
                RAST._IExpr _out644;
                DCOMP._IOwnership _out645;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out646;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out644, out _out645, out _out646);
                _4000_recursiveGen = _out644;
                _4001_recOwned = _out645;
                _4002_recIdents = _out646;
                r = _4000_recursiveGen;
                if (object.Equals(_4001_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                RAST._IExpr _out647;
                DCOMP._IOwnership _out648;
                DCOMP.COMP.FromOwnership(r, _4001_recOwned, expectedOwnership, out _out647, out _out648);
                r = _out647;
                resultingOwnership = _out648;
                readIdents = _4002_recIdents;
              }
            } else if (_source160.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4003___mcc_h249 = _source160.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4004___mcc_h250 = _source160.dtor_attributes;
              {
                RAST._IExpr _4005_recursiveGen;
                DCOMP._IOwnership _4006_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4007_recIdents;
                RAST._IExpr _out649;
                DCOMP._IOwnership _out650;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out651;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out649, out _out650, out _out651);
                _4005_recursiveGen = _out649;
                _4006_recOwned = _out650;
                _4007_recIdents = _out651;
                r = _4005_recursiveGen;
                if (object.Equals(_4006_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                RAST._IExpr _out652;
                DCOMP._IOwnership _out653;
                DCOMP.COMP.FromOwnership(r, _4006_recOwned, expectedOwnership, out _out652, out _out653);
                r = _out652;
                resultingOwnership = _out653;
                readIdents = _4007_recIdents;
              }
            } else {
              DAST._IType _4008___mcc_h255 = _source160.dtor_baseType;
              DAST._INewtypeRange _4009___mcc_h256 = _source160.dtor_range;
              bool _4010___mcc_h257 = _source160.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4011___mcc_h258 = _source160.dtor_attributes;
              {
                RAST._IExpr _4012_recursiveGen;
                DCOMP._IOwnership _4013_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4014_recIdents;
                RAST._IExpr _out654;
                DCOMP._IOwnership _out655;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out656;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out654, out _out655, out _out656);
                _4012_recursiveGen = _out654;
                _4013_recOwned = _out655;
                _4014_recIdents = _out656;
                r = _4012_recursiveGen;
                if (object.Equals(_4013_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                RAST._IExpr _out657;
                DCOMP._IOwnership _out658;
                DCOMP.COMP.FromOwnership(r, _4013_recOwned, expectedOwnership, out _out657, out _out658);
                r = _out657;
                resultingOwnership = _out658;
                readIdents = _4014_recIdents;
              }
            }
          } else if (_source159.is_Nullable) {
            DAST._IType _4015___mcc_h267 = _source159.dtor_Nullable_a0;
            {
              RAST._IExpr _4016_recursiveGen;
              DCOMP._IOwnership _4017_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4018_recIdents;
              RAST._IExpr _out659;
              DCOMP._IOwnership _out660;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out661;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out659, out _out660, out _out661);
              _4016_recursiveGen = _out659;
              _4017_recOwned = _out660;
              _4018_recIdents = _out661;
              r = _4016_recursiveGen;
              if (object.Equals(_4017_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out662;
              DCOMP._IOwnership _out663;
              DCOMP.COMP.FromOwnership(r, _4017_recOwned, expectedOwnership, out _out662, out _out663);
              r = _out662;
              resultingOwnership = _out663;
              readIdents = _4018_recIdents;
            }
          } else if (_source159.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4019___mcc_h270 = _source159.dtor_Tuple_a0;
            {
              RAST._IExpr _4020_recursiveGen;
              DCOMP._IOwnership _4021_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4022_recIdents;
              RAST._IExpr _out664;
              DCOMP._IOwnership _out665;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out666;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out664, out _out665, out _out666);
              _4020_recursiveGen = _out664;
              _4021_recOwned = _out665;
              _4022_recIdents = _out666;
              r = _4020_recursiveGen;
              if (object.Equals(_4021_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out667;
              DCOMP._IOwnership _out668;
              DCOMP.COMP.FromOwnership(r, _4021_recOwned, expectedOwnership, out _out667, out _out668);
              r = _out667;
              resultingOwnership = _out668;
              readIdents = _4022_recIdents;
            }
          } else if (_source159.is_Array) {
            DAST._IType _4023___mcc_h273 = _source159.dtor_element;
            BigInteger _4024___mcc_h274 = _source159.dtor_dims;
            {
              RAST._IExpr _4025_recursiveGen;
              DCOMP._IOwnership _4026_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4027_recIdents;
              RAST._IExpr _out669;
              DCOMP._IOwnership _out670;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out671;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out669, out _out670, out _out671);
              _4025_recursiveGen = _out669;
              _4026_recOwned = _out670;
              _4027_recIdents = _out671;
              r = _4025_recursiveGen;
              if (object.Equals(_4026_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out672;
              DCOMP._IOwnership _out673;
              DCOMP.COMP.FromOwnership(r, _4026_recOwned, expectedOwnership, out _out672, out _out673);
              r = _out672;
              resultingOwnership = _out673;
              readIdents = _4027_recIdents;
            }
          } else if (_source159.is_Seq) {
            DAST._IType _4028___mcc_h279 = _source159.dtor_element;
            {
              RAST._IExpr _4029_recursiveGen;
              DCOMP._IOwnership _4030_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4031_recIdents;
              RAST._IExpr _out674;
              DCOMP._IOwnership _out675;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out676;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out674, out _out675, out _out676);
              _4029_recursiveGen = _out674;
              _4030_recOwned = _out675;
              _4031_recIdents = _out676;
              r = _4029_recursiveGen;
              if (object.Equals(_4030_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out677;
              DCOMP._IOwnership _out678;
              DCOMP.COMP.FromOwnership(r, _4030_recOwned, expectedOwnership, out _out677, out _out678);
              r = _out677;
              resultingOwnership = _out678;
              readIdents = _4031_recIdents;
            }
          } else if (_source159.is_Set) {
            DAST._IType _4032___mcc_h282 = _source159.dtor_element;
            {
              RAST._IExpr _4033_recursiveGen;
              DCOMP._IOwnership _4034_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4035_recIdents;
              RAST._IExpr _out679;
              DCOMP._IOwnership _out680;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out681;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out679, out _out680, out _out681);
              _4033_recursiveGen = _out679;
              _4034_recOwned = _out680;
              _4035_recIdents = _out681;
              r = _4033_recursiveGen;
              if (object.Equals(_4034_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out682;
              DCOMP._IOwnership _out683;
              DCOMP.COMP.FromOwnership(r, _4034_recOwned, expectedOwnership, out _out682, out _out683);
              r = _out682;
              resultingOwnership = _out683;
              readIdents = _4035_recIdents;
            }
          } else if (_source159.is_Multiset) {
            DAST._IType _4036___mcc_h285 = _source159.dtor_element;
            {
              RAST._IExpr _4037_recursiveGen;
              DCOMP._IOwnership _4038_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4039_recIdents;
              RAST._IExpr _out684;
              DCOMP._IOwnership _out685;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out686;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out684, out _out685, out _out686);
              _4037_recursiveGen = _out684;
              _4038_recOwned = _out685;
              _4039_recIdents = _out686;
              r = _4037_recursiveGen;
              if (object.Equals(_4038_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out687;
              DCOMP._IOwnership _out688;
              DCOMP.COMP.FromOwnership(r, _4038_recOwned, expectedOwnership, out _out687, out _out688);
              r = _out687;
              resultingOwnership = _out688;
              readIdents = _4039_recIdents;
            }
          } else if (_source159.is_Map) {
            DAST._IType _4040___mcc_h288 = _source159.dtor_key;
            DAST._IType _4041___mcc_h289 = _source159.dtor_value;
            {
              RAST._IExpr _4042_recursiveGen;
              DCOMP._IOwnership _4043_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4044_recIdents;
              RAST._IExpr _out689;
              DCOMP._IOwnership _out690;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out691;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out689, out _out690, out _out691);
              _4042_recursiveGen = _out689;
              _4043_recOwned = _out690;
              _4044_recIdents = _out691;
              r = _4042_recursiveGen;
              if (object.Equals(_4043_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out692;
              DCOMP._IOwnership _out693;
              DCOMP.COMP.FromOwnership(r, _4043_recOwned, expectedOwnership, out _out692, out _out693);
              r = _out692;
              resultingOwnership = _out693;
              readIdents = _4044_recIdents;
            }
          } else if (_source159.is_SetBuilder) {
            DAST._IType _4045___mcc_h294 = _source159.dtor_element;
            {
              RAST._IExpr _4046_recursiveGen;
              DCOMP._IOwnership _4047_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4048_recIdents;
              RAST._IExpr _out694;
              DCOMP._IOwnership _out695;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out696;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out694, out _out695, out _out696);
              _4046_recursiveGen = _out694;
              _4047_recOwned = _out695;
              _4048_recIdents = _out696;
              r = _4046_recursiveGen;
              if (object.Equals(_4047_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out697;
              DCOMP._IOwnership _out698;
              DCOMP.COMP.FromOwnership(r, _4047_recOwned, expectedOwnership, out _out697, out _out698);
              r = _out697;
              resultingOwnership = _out698;
              readIdents = _4048_recIdents;
            }
          } else if (_source159.is_MapBuilder) {
            DAST._IType _4049___mcc_h297 = _source159.dtor_key;
            DAST._IType _4050___mcc_h298 = _source159.dtor_value;
            {
              RAST._IExpr _4051_recursiveGen;
              DCOMP._IOwnership _4052_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4053_recIdents;
              RAST._IExpr _out699;
              DCOMP._IOwnership _out700;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out701;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out699, out _out700, out _out701);
              _4051_recursiveGen = _out699;
              _4052_recOwned = _out700;
              _4053_recIdents = _out701;
              r = _4051_recursiveGen;
              if (object.Equals(_4052_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out702;
              DCOMP._IOwnership _out703;
              DCOMP.COMP.FromOwnership(r, _4052_recOwned, expectedOwnership, out _out702, out _out703);
              r = _out702;
              resultingOwnership = _out703;
              readIdents = _4053_recIdents;
            }
          } else if (_source159.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4054___mcc_h303 = _source159.dtor_args;
            DAST._IType _4055___mcc_h304 = _source159.dtor_result;
            {
              RAST._IExpr _4056_recursiveGen;
              DCOMP._IOwnership _4057_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4058_recIdents;
              RAST._IExpr _out704;
              DCOMP._IOwnership _out705;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out706;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out704, out _out705, out _out706);
              _4056_recursiveGen = _out704;
              _4057_recOwned = _out705;
              _4058_recIdents = _out706;
              r = _4056_recursiveGen;
              if (object.Equals(_4057_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out707;
              DCOMP._IOwnership _out708;
              DCOMP.COMP.FromOwnership(r, _4057_recOwned, expectedOwnership, out _out707, out _out708);
              r = _out707;
              resultingOwnership = _out708;
              readIdents = _4058_recIdents;
            }
          } else if (_source159.is_Primitive) {
            DAST._IPrimitive _4059___mcc_h309 = _source159.dtor_Primitive_a0;
            {
              RAST._IExpr _4060_recursiveGen;
              DCOMP._IOwnership _4061_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4062_recIdents;
              RAST._IExpr _out709;
              DCOMP._IOwnership _out710;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out711;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out709, out _out710, out _out711);
              _4060_recursiveGen = _out709;
              _4061_recOwned = _out710;
              _4062_recIdents = _out711;
              r = _4060_recursiveGen;
              if (object.Equals(_4061_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out712;
              DCOMP._IOwnership _out713;
              DCOMP.COMP.FromOwnership(r, _4061_recOwned, expectedOwnership, out _out712, out _out713);
              r = _out712;
              resultingOwnership = _out713;
              readIdents = _4062_recIdents;
            }
          } else if (_source159.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4063___mcc_h312 = _source159.dtor_Passthrough_a0;
            {
              RAST._IExpr _4064_recursiveGen;
              DCOMP._IOwnership _4065_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4066_recIdents;
              RAST._IExpr _out714;
              DCOMP._IOwnership _out715;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out716;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out714, out _out715, out _out716);
              _4064_recursiveGen = _out714;
              _4065_recOwned = _out715;
              _4066_recIdents = _out716;
              r = _4064_recursiveGen;
              if (object.Equals(_4065_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out717;
              DCOMP._IOwnership _out718;
              DCOMP.COMP.FromOwnership(r, _4065_recOwned, expectedOwnership, out _out717, out _out718);
              r = _out717;
              resultingOwnership = _out718;
              readIdents = _4066_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4067___mcc_h315 = _source159.dtor_TypeArg_a0;
            {
              RAST._IExpr _4068_recursiveGen;
              DCOMP._IOwnership _4069_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4070_recIdents;
              RAST._IExpr _out719;
              DCOMP._IOwnership _out720;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out721;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out719, out _out720, out _out721);
              _4068_recursiveGen = _out719;
              _4069_recOwned = _out720;
              _4070_recIdents = _out721;
              r = _4068_recursiveGen;
              if (object.Equals(_4069_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out722;
              DCOMP._IOwnership _out723;
              DCOMP.COMP.FromOwnership(r, _4069_recOwned, expectedOwnership, out _out722, out _out723);
              r = _out722;
              resultingOwnership = _out723;
              readIdents = _4070_recIdents;
            }
          }
        } else if (_source128.is_Tuple) {
          Dafny.ISequence<DAST._IType> _4071___mcc_h318 = _source128.dtor_Tuple_a0;
          DAST._IType _source161 = _3467___mcc_h1;
          if (_source161.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4072___mcc_h322 = _source161.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _4073___mcc_h323 = _source161.dtor_typeArgs;
            DAST._IResolvedType _4074___mcc_h324 = _source161.dtor_resolved;
            DAST._IResolvedType _source162 = _4074___mcc_h324;
            if (_source162.is_Datatype) {
              DAST._IDatatypeType _4075___mcc_h328 = _source162.dtor_datatypeType;
              {
                RAST._IExpr _4076_recursiveGen;
                DCOMP._IOwnership _4077_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4078_recIdents;
                RAST._IExpr _out724;
                DCOMP._IOwnership _out725;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out726;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out724, out _out725, out _out726);
                _4076_recursiveGen = _out724;
                _4077_recOwned = _out725;
                _4078_recIdents = _out726;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4076_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out727;
                DCOMP._IOwnership _out728;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out727, out _out728);
                r = _out727;
                resultingOwnership = _out728;
                readIdents = _4078_recIdents;
              }
            } else if (_source162.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4079___mcc_h330 = _source162.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4080___mcc_h331 = _source162.dtor_attributes;
              {
                RAST._IExpr _4081_recursiveGen;
                DCOMP._IOwnership _4082_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4083_recIdents;
                RAST._IExpr _out729;
                DCOMP._IOwnership _out730;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out731;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out729, out _out730, out _out731);
                _4081_recursiveGen = _out729;
                _4082_recOwned = _out730;
                _4083_recIdents = _out731;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4081_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out732;
                DCOMP._IOwnership _out733;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out732, out _out733);
                r = _out732;
                resultingOwnership = _out733;
                readIdents = _4083_recIdents;
              }
            } else {
              DAST._IType _4084___mcc_h334 = _source162.dtor_baseType;
              DAST._INewtypeRange _4085___mcc_h335 = _source162.dtor_range;
              bool _4086___mcc_h336 = _source162.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4087___mcc_h337 = _source162.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4088_attributes = _4087___mcc_h337;
              bool _4089_erase = _4086___mcc_h336;
              DAST._INewtypeRange _4090_range = _4085___mcc_h335;
              DAST._IType _4091_b = _4084___mcc_h334;
              {
                Std.Wrappers._IOption<RAST._IType> _4092_nativeToType;
                _4092_nativeToType = DCOMP.COMP.NewtypeToRustType(_4091_b, _4090_range);
                if (object.Equals(_3461_fromTpe, _4091_b)) {
                  RAST._IExpr _4093_recursiveGen;
                  DCOMP._IOwnership _4094_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4095_recIdents;
                  RAST._IExpr _out734;
                  DCOMP._IOwnership _out735;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out736;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out734, out _out735, out _out736);
                  _4093_recursiveGen = _out734;
                  _4094_recOwned = _out735;
                  _4095_recIdents = _out736;
                  Std.Wrappers._IOption<RAST._IType> _source163 = _4092_nativeToType;
                  if (_source163.is_None) {
                    if (_4089_erase) {
                      r = _4093_recursiveGen;
                    } else {
                      RAST._IType _4096_rhsType;
                      RAST._IType _out737;
                      _out737 = DCOMP.COMP.GenType(_3462_toTpe, true, false);
                      _4096_rhsType = _out737;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4096_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4093_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out738;
                    DCOMP._IOwnership _out739;
                    DCOMP.COMP.FromOwnership(r, _4094_recOwned, expectedOwnership, out _out738, out _out739);
                    r = _out738;
                    resultingOwnership = _out739;
                  } else {
                    RAST._IType _4097___mcc_h1425 = _source163.dtor_value;
                    RAST._IType _4098_v = _4097___mcc_h1425;
                    r = (((_4093_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_4098_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out740;
                    DCOMP._IOwnership _out741;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out740, out _out741);
                    r = _out740;
                    resultingOwnership = _out741;
                  }
                  readIdents = _4095_recIdents;
                } else {
                  if ((_4092_nativeToType).is_Some) {
                    DAST._IType _source164 = _3461_fromTpe;
                    if (_source164.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4099___mcc_h1426 = _source164.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _4100___mcc_h1427 = _source164.dtor_typeArgs;
                      DAST._IResolvedType _4101___mcc_h1428 = _source164.dtor_resolved;
                      DAST._IResolvedType _source165 = _4101___mcc_h1428;
                      if (_source165.is_Datatype) {
                        DAST._IDatatypeType _4102___mcc_h1432 = _source165.dtor_datatypeType;
                      } else if (_source165.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4103___mcc_h1434 = _source165.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _4104___mcc_h1435 = _source165.dtor_attributes;
                      } else {
                        DAST._IType _4105___mcc_h1438 = _source165.dtor_baseType;
                        DAST._INewtypeRange _4106___mcc_h1439 = _source165.dtor_range;
                        bool _4107___mcc_h1440 = _source165.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _4108___mcc_h1441 = _source165.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _4109_attributes0 = _4108___mcc_h1441;
                        bool _4110_erase0 = _4107___mcc_h1440;
                        DAST._INewtypeRange _4111_range0 = _4106___mcc_h1439;
                        DAST._IType _4112_b0 = _4105___mcc_h1438;
                        {
                          Std.Wrappers._IOption<RAST._IType> _4113_nativeFromType;
                          _4113_nativeFromType = DCOMP.COMP.NewtypeToRustType(_4112_b0, _4111_range0);
                          if ((_4113_nativeFromType).is_Some) {
                            RAST._IExpr _4114_recursiveGen;
                            DCOMP._IOwnership _4115_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4116_recIdents;
                            RAST._IExpr _out742;
                            DCOMP._IOwnership _out743;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out744;
                            DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out742, out _out743, out _out744);
                            _4114_recursiveGen = _out742;
                            _4115_recOwned = _out743;
                            _4116_recIdents = _out744;
                            RAST._IExpr _out745;
                            DCOMP._IOwnership _out746;
                            DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_4114_recursiveGen, (_4092_nativeToType).dtor_value), _4115_recOwned, expectedOwnership, out _out745, out _out746);
                            r = _out745;
                            resultingOwnership = _out746;
                            readIdents = _4116_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source164.is_Nullable) {
                      DAST._IType _4117___mcc_h1446 = _source164.dtor_Nullable_a0;
                    } else if (_source164.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _4118___mcc_h1448 = _source164.dtor_Tuple_a0;
                    } else if (_source164.is_Array) {
                      DAST._IType _4119___mcc_h1450 = _source164.dtor_element;
                      BigInteger _4120___mcc_h1451 = _source164.dtor_dims;
                    } else if (_source164.is_Seq) {
                      DAST._IType _4121___mcc_h1454 = _source164.dtor_element;
                    } else if (_source164.is_Set) {
                      DAST._IType _4122___mcc_h1456 = _source164.dtor_element;
                    } else if (_source164.is_Multiset) {
                      DAST._IType _4123___mcc_h1458 = _source164.dtor_element;
                    } else if (_source164.is_Map) {
                      DAST._IType _4124___mcc_h1460 = _source164.dtor_key;
                      DAST._IType _4125___mcc_h1461 = _source164.dtor_value;
                    } else if (_source164.is_SetBuilder) {
                      DAST._IType _4126___mcc_h1464 = _source164.dtor_element;
                    } else if (_source164.is_MapBuilder) {
                      DAST._IType _4127___mcc_h1466 = _source164.dtor_key;
                      DAST._IType _4128___mcc_h1467 = _source164.dtor_value;
                    } else if (_source164.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _4129___mcc_h1470 = _source164.dtor_args;
                      DAST._IType _4130___mcc_h1471 = _source164.dtor_result;
                    } else if (_source164.is_Primitive) {
                      DAST._IPrimitive _4131___mcc_h1474 = _source164.dtor_Primitive_a0;
                    } else if (_source164.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _4132___mcc_h1476 = _source164.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _4133___mcc_h1478 = _source164.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_3461_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _4134_recursiveGen;
                      DCOMP._IOwnership _4135_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4136_recIdents;
                      RAST._IExpr _out747;
                      DCOMP._IOwnership _out748;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out749;
                      DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out747, out _out748, out _out749);
                      _4134_recursiveGen = _out747;
                      _4135_recOwned = _out748;
                      _4136_recIdents = _out749;
                      RAST._IExpr _out750;
                      DCOMP._IOwnership _out751;
                      DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_4134_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_4092_nativeToType).dtor_value), _4135_recOwned, expectedOwnership, out _out750, out _out751);
                      r = _out750;
                      resultingOwnership = _out751;
                      readIdents = _4136_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out752;
                  DCOMP._IOwnership _out753;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out754;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3460_expr, _3461_fromTpe, _4091_b), _4091_b, _3462_toTpe), selfIdent, env, expectedOwnership, out _out752, out _out753, out _out754);
                  r = _out752;
                  resultingOwnership = _out753;
                  readIdents = _out754;
                }
              }
            }
          } else if (_source161.is_Nullable) {
            DAST._IType _4137___mcc_h342 = _source161.dtor_Nullable_a0;
            {
              RAST._IExpr _4138_recursiveGen;
              DCOMP._IOwnership _4139_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4140_recIdents;
              RAST._IExpr _out755;
              DCOMP._IOwnership _out756;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out757;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out755, out _out756, out _out757);
              _4138_recursiveGen = _out755;
              _4139_recOwned = _out756;
              _4140_recIdents = _out757;
              r = _4138_recursiveGen;
              if (object.Equals(_4139_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out758;
              DCOMP._IOwnership _out759;
              DCOMP.COMP.FromOwnership(r, _4139_recOwned, expectedOwnership, out _out758, out _out759);
              r = _out758;
              resultingOwnership = _out759;
              readIdents = _4140_recIdents;
            }
          } else if (_source161.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4141___mcc_h344 = _source161.dtor_Tuple_a0;
            {
              RAST._IExpr _4142_recursiveGen;
              DCOMP._IOwnership _4143_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4144_recIdents;
              RAST._IExpr _out760;
              DCOMP._IOwnership _out761;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out762;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out760, out _out761, out _out762);
              _4142_recursiveGen = _out760;
              _4143_recOwned = _out761;
              _4144_recIdents = _out762;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4142_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out763;
              DCOMP._IOwnership _out764;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out763, out _out764);
              r = _out763;
              resultingOwnership = _out764;
              readIdents = _4144_recIdents;
            }
          } else if (_source161.is_Array) {
            DAST._IType _4145___mcc_h346 = _source161.dtor_element;
            BigInteger _4146___mcc_h347 = _source161.dtor_dims;
            {
              RAST._IExpr _4147_recursiveGen;
              DCOMP._IOwnership _4148_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4149_recIdents;
              RAST._IExpr _out765;
              DCOMP._IOwnership _out766;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out767;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out765, out _out766, out _out767);
              _4147_recursiveGen = _out765;
              _4148_recOwned = _out766;
              _4149_recIdents = _out767;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4147_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out768;
              DCOMP._IOwnership _out769;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out768, out _out769);
              r = _out768;
              resultingOwnership = _out769;
              readIdents = _4149_recIdents;
            }
          } else if (_source161.is_Seq) {
            DAST._IType _4150___mcc_h350 = _source161.dtor_element;
            {
              RAST._IExpr _4151_recursiveGen;
              DCOMP._IOwnership _4152_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4153_recIdents;
              RAST._IExpr _out770;
              DCOMP._IOwnership _out771;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out772;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out770, out _out771, out _out772);
              _4151_recursiveGen = _out770;
              _4152_recOwned = _out771;
              _4153_recIdents = _out772;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4151_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out773;
              DCOMP._IOwnership _out774;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out773, out _out774);
              r = _out773;
              resultingOwnership = _out774;
              readIdents = _4153_recIdents;
            }
          } else if (_source161.is_Set) {
            DAST._IType _4154___mcc_h352 = _source161.dtor_element;
            {
              RAST._IExpr _4155_recursiveGen;
              DCOMP._IOwnership _4156_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4157_recIdents;
              RAST._IExpr _out775;
              DCOMP._IOwnership _out776;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out777;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out775, out _out776, out _out777);
              _4155_recursiveGen = _out775;
              _4156_recOwned = _out776;
              _4157_recIdents = _out777;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4155_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out778;
              DCOMP._IOwnership _out779;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out778, out _out779);
              r = _out778;
              resultingOwnership = _out779;
              readIdents = _4157_recIdents;
            }
          } else if (_source161.is_Multiset) {
            DAST._IType _4158___mcc_h354 = _source161.dtor_element;
            {
              RAST._IExpr _4159_recursiveGen;
              DCOMP._IOwnership _4160_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4161_recIdents;
              RAST._IExpr _out780;
              DCOMP._IOwnership _out781;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out782;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out780, out _out781, out _out782);
              _4159_recursiveGen = _out780;
              _4160_recOwned = _out781;
              _4161_recIdents = _out782;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4159_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out783;
              DCOMP._IOwnership _out784;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out783, out _out784);
              r = _out783;
              resultingOwnership = _out784;
              readIdents = _4161_recIdents;
            }
          } else if (_source161.is_Map) {
            DAST._IType _4162___mcc_h356 = _source161.dtor_key;
            DAST._IType _4163___mcc_h357 = _source161.dtor_value;
            {
              RAST._IExpr _4164_recursiveGen;
              DCOMP._IOwnership _4165_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4166_recIdents;
              RAST._IExpr _out785;
              DCOMP._IOwnership _out786;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out787;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out785, out _out786, out _out787);
              _4164_recursiveGen = _out785;
              _4165_recOwned = _out786;
              _4166_recIdents = _out787;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4164_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out788;
              DCOMP._IOwnership _out789;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out788, out _out789);
              r = _out788;
              resultingOwnership = _out789;
              readIdents = _4166_recIdents;
            }
          } else if (_source161.is_SetBuilder) {
            DAST._IType _4167___mcc_h360 = _source161.dtor_element;
            {
              RAST._IExpr _4168_recursiveGen;
              DCOMP._IOwnership _4169_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4170_recIdents;
              RAST._IExpr _out790;
              DCOMP._IOwnership _out791;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out792;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out790, out _out791, out _out792);
              _4168_recursiveGen = _out790;
              _4169_recOwned = _out791;
              _4170_recIdents = _out792;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4168_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out793;
              DCOMP._IOwnership _out794;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out793, out _out794);
              r = _out793;
              resultingOwnership = _out794;
              readIdents = _4170_recIdents;
            }
          } else if (_source161.is_MapBuilder) {
            DAST._IType _4171___mcc_h362 = _source161.dtor_key;
            DAST._IType _4172___mcc_h363 = _source161.dtor_value;
            {
              RAST._IExpr _4173_recursiveGen;
              DCOMP._IOwnership _4174_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4175_recIdents;
              RAST._IExpr _out795;
              DCOMP._IOwnership _out796;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out797;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out795, out _out796, out _out797);
              _4173_recursiveGen = _out795;
              _4174_recOwned = _out796;
              _4175_recIdents = _out797;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4173_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out798;
              DCOMP._IOwnership _out799;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out798, out _out799);
              r = _out798;
              resultingOwnership = _out799;
              readIdents = _4175_recIdents;
            }
          } else if (_source161.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4176___mcc_h366 = _source161.dtor_args;
            DAST._IType _4177___mcc_h367 = _source161.dtor_result;
            {
              RAST._IExpr _4178_recursiveGen;
              DCOMP._IOwnership _4179_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4180_recIdents;
              RAST._IExpr _out800;
              DCOMP._IOwnership _out801;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out802;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out800, out _out801, out _out802);
              _4178_recursiveGen = _out800;
              _4179_recOwned = _out801;
              _4180_recIdents = _out802;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4178_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out803;
              DCOMP._IOwnership _out804;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out803, out _out804);
              r = _out803;
              resultingOwnership = _out804;
              readIdents = _4180_recIdents;
            }
          } else if (_source161.is_Primitive) {
            DAST._IPrimitive _4181___mcc_h370 = _source161.dtor_Primitive_a0;
            {
              RAST._IExpr _4182_recursiveGen;
              DCOMP._IOwnership _4183_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4184_recIdents;
              RAST._IExpr _out805;
              DCOMP._IOwnership _out806;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out807;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out805, out _out806, out _out807);
              _4182_recursiveGen = _out805;
              _4183_recOwned = _out806;
              _4184_recIdents = _out807;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4182_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out808;
              DCOMP._IOwnership _out809;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out808, out _out809);
              r = _out808;
              resultingOwnership = _out809;
              readIdents = _4184_recIdents;
            }
          } else if (_source161.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4185___mcc_h372 = _source161.dtor_Passthrough_a0;
            {
              RAST._IExpr _4186_recursiveGen;
              DCOMP._IOwnership _4187_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4188_recIdents;
              RAST._IExpr _out810;
              DCOMP._IOwnership _out811;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out812;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out810, out _out811, out _out812);
              _4186_recursiveGen = _out810;
              _4187_recOwned = _out811;
              _4188_recIdents = _out812;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4186_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out813;
              DCOMP._IOwnership _out814;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out813, out _out814);
              r = _out813;
              resultingOwnership = _out814;
              readIdents = _4188_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4189___mcc_h374 = _source161.dtor_TypeArg_a0;
            {
              RAST._IExpr _4190_recursiveGen;
              DCOMP._IOwnership _4191_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4192_recIdents;
              RAST._IExpr _out815;
              DCOMP._IOwnership _out816;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out817;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out815, out _out816, out _out817);
              _4190_recursiveGen = _out815;
              _4191_recOwned = _out816;
              _4192_recIdents = _out817;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4190_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out818;
              DCOMP._IOwnership _out819;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out818, out _out819);
              r = _out818;
              resultingOwnership = _out819;
              readIdents = _4192_recIdents;
            }
          }
        } else if (_source128.is_Array) {
          DAST._IType _4193___mcc_h376 = _source128.dtor_element;
          BigInteger _4194___mcc_h377 = _source128.dtor_dims;
          DAST._IType _source166 = _3467___mcc_h1;
          if (_source166.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4195___mcc_h384 = _source166.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _4196___mcc_h385 = _source166.dtor_typeArgs;
            DAST._IResolvedType _4197___mcc_h386 = _source166.dtor_resolved;
            DAST._IResolvedType _source167 = _4197___mcc_h386;
            if (_source167.is_Datatype) {
              DAST._IDatatypeType _4198___mcc_h390 = _source167.dtor_datatypeType;
              {
                RAST._IExpr _4199_recursiveGen;
                DCOMP._IOwnership _4200_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4201_recIdents;
                RAST._IExpr _out820;
                DCOMP._IOwnership _out821;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out822;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out820, out _out821, out _out822);
                _4199_recursiveGen = _out820;
                _4200_recOwned = _out821;
                _4201_recIdents = _out822;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4199_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out823;
                DCOMP._IOwnership _out824;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out823, out _out824);
                r = _out823;
                resultingOwnership = _out824;
                readIdents = _4201_recIdents;
              }
            } else if (_source167.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4202___mcc_h392 = _source167.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4203___mcc_h393 = _source167.dtor_attributes;
              {
                RAST._IExpr _4204_recursiveGen;
                DCOMP._IOwnership _4205_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4206_recIdents;
                RAST._IExpr _out825;
                DCOMP._IOwnership _out826;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out827;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out825, out _out826, out _out827);
                _4204_recursiveGen = _out825;
                _4205_recOwned = _out826;
                _4206_recIdents = _out827;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4204_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out828;
                DCOMP._IOwnership _out829;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out828, out _out829);
                r = _out828;
                resultingOwnership = _out829;
                readIdents = _4206_recIdents;
              }
            } else {
              DAST._IType _4207___mcc_h396 = _source167.dtor_baseType;
              DAST._INewtypeRange _4208___mcc_h397 = _source167.dtor_range;
              bool _4209___mcc_h398 = _source167.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4210___mcc_h399 = _source167.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4211_attributes = _4210___mcc_h399;
              bool _4212_erase = _4209___mcc_h398;
              DAST._INewtypeRange _4213_range = _4208___mcc_h397;
              DAST._IType _4214_b = _4207___mcc_h396;
              {
                Std.Wrappers._IOption<RAST._IType> _4215_nativeToType;
                _4215_nativeToType = DCOMP.COMP.NewtypeToRustType(_4214_b, _4213_range);
                if (object.Equals(_3461_fromTpe, _4214_b)) {
                  RAST._IExpr _4216_recursiveGen;
                  DCOMP._IOwnership _4217_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4218_recIdents;
                  RAST._IExpr _out830;
                  DCOMP._IOwnership _out831;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out832;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out830, out _out831, out _out832);
                  _4216_recursiveGen = _out830;
                  _4217_recOwned = _out831;
                  _4218_recIdents = _out832;
                  Std.Wrappers._IOption<RAST._IType> _source168 = _4215_nativeToType;
                  if (_source168.is_None) {
                    if (_4212_erase) {
                      r = _4216_recursiveGen;
                    } else {
                      RAST._IType _4219_rhsType;
                      RAST._IType _out833;
                      _out833 = DCOMP.COMP.GenType(_3462_toTpe, true, false);
                      _4219_rhsType = _out833;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4219_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4216_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out834;
                    DCOMP._IOwnership _out835;
                    DCOMP.COMP.FromOwnership(r, _4217_recOwned, expectedOwnership, out _out834, out _out835);
                    r = _out834;
                    resultingOwnership = _out835;
                  } else {
                    RAST._IType _4220___mcc_h1480 = _source168.dtor_value;
                    RAST._IType _4221_v = _4220___mcc_h1480;
                    r = (((_4216_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_4221_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out836;
                    DCOMP._IOwnership _out837;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out836, out _out837);
                    r = _out836;
                    resultingOwnership = _out837;
                  }
                  readIdents = _4218_recIdents;
                } else {
                  if ((_4215_nativeToType).is_Some) {
                    DAST._IType _source169 = _3461_fromTpe;
                    if (_source169.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4222___mcc_h1481 = _source169.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _4223___mcc_h1482 = _source169.dtor_typeArgs;
                      DAST._IResolvedType _4224___mcc_h1483 = _source169.dtor_resolved;
                      DAST._IResolvedType _source170 = _4224___mcc_h1483;
                      if (_source170.is_Datatype) {
                        DAST._IDatatypeType _4225___mcc_h1487 = _source170.dtor_datatypeType;
                      } else if (_source170.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4226___mcc_h1489 = _source170.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _4227___mcc_h1490 = _source170.dtor_attributes;
                      } else {
                        DAST._IType _4228___mcc_h1493 = _source170.dtor_baseType;
                        DAST._INewtypeRange _4229___mcc_h1494 = _source170.dtor_range;
                        bool _4230___mcc_h1495 = _source170.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _4231___mcc_h1496 = _source170.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _4232_attributes0 = _4231___mcc_h1496;
                        bool _4233_erase0 = _4230___mcc_h1495;
                        DAST._INewtypeRange _4234_range0 = _4229___mcc_h1494;
                        DAST._IType _4235_b0 = _4228___mcc_h1493;
                        {
                          Std.Wrappers._IOption<RAST._IType> _4236_nativeFromType;
                          _4236_nativeFromType = DCOMP.COMP.NewtypeToRustType(_4235_b0, _4234_range0);
                          if ((_4236_nativeFromType).is_Some) {
                            RAST._IExpr _4237_recursiveGen;
                            DCOMP._IOwnership _4238_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4239_recIdents;
                            RAST._IExpr _out838;
                            DCOMP._IOwnership _out839;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out840;
                            DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out838, out _out839, out _out840);
                            _4237_recursiveGen = _out838;
                            _4238_recOwned = _out839;
                            _4239_recIdents = _out840;
                            RAST._IExpr _out841;
                            DCOMP._IOwnership _out842;
                            DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_4237_recursiveGen, (_4215_nativeToType).dtor_value), _4238_recOwned, expectedOwnership, out _out841, out _out842);
                            r = _out841;
                            resultingOwnership = _out842;
                            readIdents = _4239_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source169.is_Nullable) {
                      DAST._IType _4240___mcc_h1501 = _source169.dtor_Nullable_a0;
                    } else if (_source169.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _4241___mcc_h1503 = _source169.dtor_Tuple_a0;
                    } else if (_source169.is_Array) {
                      DAST._IType _4242___mcc_h1505 = _source169.dtor_element;
                      BigInteger _4243___mcc_h1506 = _source169.dtor_dims;
                    } else if (_source169.is_Seq) {
                      DAST._IType _4244___mcc_h1509 = _source169.dtor_element;
                    } else if (_source169.is_Set) {
                      DAST._IType _4245___mcc_h1511 = _source169.dtor_element;
                    } else if (_source169.is_Multiset) {
                      DAST._IType _4246___mcc_h1513 = _source169.dtor_element;
                    } else if (_source169.is_Map) {
                      DAST._IType _4247___mcc_h1515 = _source169.dtor_key;
                      DAST._IType _4248___mcc_h1516 = _source169.dtor_value;
                    } else if (_source169.is_SetBuilder) {
                      DAST._IType _4249___mcc_h1519 = _source169.dtor_element;
                    } else if (_source169.is_MapBuilder) {
                      DAST._IType _4250___mcc_h1521 = _source169.dtor_key;
                      DAST._IType _4251___mcc_h1522 = _source169.dtor_value;
                    } else if (_source169.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _4252___mcc_h1525 = _source169.dtor_args;
                      DAST._IType _4253___mcc_h1526 = _source169.dtor_result;
                    } else if (_source169.is_Primitive) {
                      DAST._IPrimitive _4254___mcc_h1529 = _source169.dtor_Primitive_a0;
                    } else if (_source169.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _4255___mcc_h1531 = _source169.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _4256___mcc_h1533 = _source169.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_3461_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _4257_recursiveGen;
                      DCOMP._IOwnership _4258_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4259_recIdents;
                      RAST._IExpr _out843;
                      DCOMP._IOwnership _out844;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out845;
                      DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out843, out _out844, out _out845);
                      _4257_recursiveGen = _out843;
                      _4258_recOwned = _out844;
                      _4259_recIdents = _out845;
                      RAST._IExpr _out846;
                      DCOMP._IOwnership _out847;
                      DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_4257_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_4215_nativeToType).dtor_value), _4258_recOwned, expectedOwnership, out _out846, out _out847);
                      r = _out846;
                      resultingOwnership = _out847;
                      readIdents = _4259_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out848;
                  DCOMP._IOwnership _out849;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out850;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3460_expr, _3461_fromTpe, _4214_b), _4214_b, _3462_toTpe), selfIdent, env, expectedOwnership, out _out848, out _out849, out _out850);
                  r = _out848;
                  resultingOwnership = _out849;
                  readIdents = _out850;
                }
              }
            }
          } else if (_source166.is_Nullable) {
            DAST._IType _4260___mcc_h404 = _source166.dtor_Nullable_a0;
            {
              RAST._IExpr _4261_recursiveGen;
              DCOMP._IOwnership _4262_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4263_recIdents;
              RAST._IExpr _out851;
              DCOMP._IOwnership _out852;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out853;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out851, out _out852, out _out853);
              _4261_recursiveGen = _out851;
              _4262_recOwned = _out852;
              _4263_recIdents = _out853;
              r = _4261_recursiveGen;
              if (object.Equals(_4262_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out854;
              DCOMP._IOwnership _out855;
              DCOMP.COMP.FromOwnership(r, _4262_recOwned, expectedOwnership, out _out854, out _out855);
              r = _out854;
              resultingOwnership = _out855;
              readIdents = _4263_recIdents;
            }
          } else if (_source166.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4264___mcc_h406 = _source166.dtor_Tuple_a0;
            {
              RAST._IExpr _4265_recursiveGen;
              DCOMP._IOwnership _4266_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4267_recIdents;
              RAST._IExpr _out856;
              DCOMP._IOwnership _out857;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out858;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out856, out _out857, out _out858);
              _4265_recursiveGen = _out856;
              _4266_recOwned = _out857;
              _4267_recIdents = _out858;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4265_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out859;
              DCOMP._IOwnership _out860;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out859, out _out860);
              r = _out859;
              resultingOwnership = _out860;
              readIdents = _4267_recIdents;
            }
          } else if (_source166.is_Array) {
            DAST._IType _4268___mcc_h408 = _source166.dtor_element;
            BigInteger _4269___mcc_h409 = _source166.dtor_dims;
            {
              RAST._IExpr _4270_recursiveGen;
              DCOMP._IOwnership _4271_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4272_recIdents;
              RAST._IExpr _out861;
              DCOMP._IOwnership _out862;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out863;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out861, out _out862, out _out863);
              _4270_recursiveGen = _out861;
              _4271_recOwned = _out862;
              _4272_recIdents = _out863;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4270_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out864;
              DCOMP._IOwnership _out865;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out864, out _out865);
              r = _out864;
              resultingOwnership = _out865;
              readIdents = _4272_recIdents;
            }
          } else if (_source166.is_Seq) {
            DAST._IType _4273___mcc_h412 = _source166.dtor_element;
            {
              RAST._IExpr _4274_recursiveGen;
              DCOMP._IOwnership _4275_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4276_recIdents;
              RAST._IExpr _out866;
              DCOMP._IOwnership _out867;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out868;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out866, out _out867, out _out868);
              _4274_recursiveGen = _out866;
              _4275_recOwned = _out867;
              _4276_recIdents = _out868;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4274_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out869;
              DCOMP._IOwnership _out870;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out869, out _out870);
              r = _out869;
              resultingOwnership = _out870;
              readIdents = _4276_recIdents;
            }
          } else if (_source166.is_Set) {
            DAST._IType _4277___mcc_h414 = _source166.dtor_element;
            {
              RAST._IExpr _4278_recursiveGen;
              DCOMP._IOwnership _4279_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4280_recIdents;
              RAST._IExpr _out871;
              DCOMP._IOwnership _out872;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out873;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out871, out _out872, out _out873);
              _4278_recursiveGen = _out871;
              _4279_recOwned = _out872;
              _4280_recIdents = _out873;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4278_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out874;
              DCOMP._IOwnership _out875;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out874, out _out875);
              r = _out874;
              resultingOwnership = _out875;
              readIdents = _4280_recIdents;
            }
          } else if (_source166.is_Multiset) {
            DAST._IType _4281___mcc_h416 = _source166.dtor_element;
            {
              RAST._IExpr _4282_recursiveGen;
              DCOMP._IOwnership _4283_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4284_recIdents;
              RAST._IExpr _out876;
              DCOMP._IOwnership _out877;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out878;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out876, out _out877, out _out878);
              _4282_recursiveGen = _out876;
              _4283_recOwned = _out877;
              _4284_recIdents = _out878;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4282_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out879;
              DCOMP._IOwnership _out880;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out879, out _out880);
              r = _out879;
              resultingOwnership = _out880;
              readIdents = _4284_recIdents;
            }
          } else if (_source166.is_Map) {
            DAST._IType _4285___mcc_h418 = _source166.dtor_key;
            DAST._IType _4286___mcc_h419 = _source166.dtor_value;
            {
              RAST._IExpr _4287_recursiveGen;
              DCOMP._IOwnership _4288_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4289_recIdents;
              RAST._IExpr _out881;
              DCOMP._IOwnership _out882;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out883;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out881, out _out882, out _out883);
              _4287_recursiveGen = _out881;
              _4288_recOwned = _out882;
              _4289_recIdents = _out883;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4287_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out884;
              DCOMP._IOwnership _out885;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out884, out _out885);
              r = _out884;
              resultingOwnership = _out885;
              readIdents = _4289_recIdents;
            }
          } else if (_source166.is_SetBuilder) {
            DAST._IType _4290___mcc_h422 = _source166.dtor_element;
            {
              RAST._IExpr _4291_recursiveGen;
              DCOMP._IOwnership _4292_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4293_recIdents;
              RAST._IExpr _out886;
              DCOMP._IOwnership _out887;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out888;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out886, out _out887, out _out888);
              _4291_recursiveGen = _out886;
              _4292_recOwned = _out887;
              _4293_recIdents = _out888;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4291_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out889;
              DCOMP._IOwnership _out890;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out889, out _out890);
              r = _out889;
              resultingOwnership = _out890;
              readIdents = _4293_recIdents;
            }
          } else if (_source166.is_MapBuilder) {
            DAST._IType _4294___mcc_h424 = _source166.dtor_key;
            DAST._IType _4295___mcc_h425 = _source166.dtor_value;
            {
              RAST._IExpr _4296_recursiveGen;
              DCOMP._IOwnership _4297_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4298_recIdents;
              RAST._IExpr _out891;
              DCOMP._IOwnership _out892;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out893;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out891, out _out892, out _out893);
              _4296_recursiveGen = _out891;
              _4297_recOwned = _out892;
              _4298_recIdents = _out893;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4296_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out894;
              DCOMP._IOwnership _out895;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out894, out _out895);
              r = _out894;
              resultingOwnership = _out895;
              readIdents = _4298_recIdents;
            }
          } else if (_source166.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4299___mcc_h428 = _source166.dtor_args;
            DAST._IType _4300___mcc_h429 = _source166.dtor_result;
            {
              RAST._IExpr _4301_recursiveGen;
              DCOMP._IOwnership _4302_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4303_recIdents;
              RAST._IExpr _out896;
              DCOMP._IOwnership _out897;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out898;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out896, out _out897, out _out898);
              _4301_recursiveGen = _out896;
              _4302_recOwned = _out897;
              _4303_recIdents = _out898;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4301_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out899;
              DCOMP._IOwnership _out900;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out899, out _out900);
              r = _out899;
              resultingOwnership = _out900;
              readIdents = _4303_recIdents;
            }
          } else if (_source166.is_Primitive) {
            DAST._IPrimitive _4304___mcc_h432 = _source166.dtor_Primitive_a0;
            {
              RAST._IExpr _4305_recursiveGen;
              DCOMP._IOwnership _4306_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4307_recIdents;
              RAST._IExpr _out901;
              DCOMP._IOwnership _out902;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out903;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out901, out _out902, out _out903);
              _4305_recursiveGen = _out901;
              _4306_recOwned = _out902;
              _4307_recIdents = _out903;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4305_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out904;
              DCOMP._IOwnership _out905;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out904, out _out905);
              r = _out904;
              resultingOwnership = _out905;
              readIdents = _4307_recIdents;
            }
          } else if (_source166.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4308___mcc_h434 = _source166.dtor_Passthrough_a0;
            {
              RAST._IExpr _4309_recursiveGen;
              DCOMP._IOwnership _4310_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4311_recIdents;
              RAST._IExpr _out906;
              DCOMP._IOwnership _out907;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out908;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out906, out _out907, out _out908);
              _4309_recursiveGen = _out906;
              _4310_recOwned = _out907;
              _4311_recIdents = _out908;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4309_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out909;
              DCOMP._IOwnership _out910;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out909, out _out910);
              r = _out909;
              resultingOwnership = _out910;
              readIdents = _4311_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4312___mcc_h436 = _source166.dtor_TypeArg_a0;
            {
              RAST._IExpr _4313_recursiveGen;
              DCOMP._IOwnership _4314_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4315_recIdents;
              RAST._IExpr _out911;
              DCOMP._IOwnership _out912;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out913;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out911, out _out912, out _out913);
              _4313_recursiveGen = _out911;
              _4314_recOwned = _out912;
              _4315_recIdents = _out913;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4313_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out914;
              DCOMP._IOwnership _out915;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out914, out _out915);
              r = _out914;
              resultingOwnership = _out915;
              readIdents = _4315_recIdents;
            }
          }
        } else if (_source128.is_Seq) {
          DAST._IType _4316___mcc_h438 = _source128.dtor_element;
          DAST._IType _source171 = _3467___mcc_h1;
          if (_source171.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4317___mcc_h442 = _source171.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _4318___mcc_h443 = _source171.dtor_typeArgs;
            DAST._IResolvedType _4319___mcc_h444 = _source171.dtor_resolved;
            DAST._IResolvedType _source172 = _4319___mcc_h444;
            if (_source172.is_Datatype) {
              DAST._IDatatypeType _4320___mcc_h448 = _source172.dtor_datatypeType;
              {
                RAST._IExpr _4321_recursiveGen;
                DCOMP._IOwnership _4322_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4323_recIdents;
                RAST._IExpr _out916;
                DCOMP._IOwnership _out917;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out918;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out916, out _out917, out _out918);
                _4321_recursiveGen = _out916;
                _4322_recOwned = _out917;
                _4323_recIdents = _out918;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4321_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out919;
                DCOMP._IOwnership _out920;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out919, out _out920);
                r = _out919;
                resultingOwnership = _out920;
                readIdents = _4323_recIdents;
              }
            } else if (_source172.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4324___mcc_h450 = _source172.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4325___mcc_h451 = _source172.dtor_attributes;
              {
                RAST._IExpr _4326_recursiveGen;
                DCOMP._IOwnership _4327_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4328_recIdents;
                RAST._IExpr _out921;
                DCOMP._IOwnership _out922;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out923;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out921, out _out922, out _out923);
                _4326_recursiveGen = _out921;
                _4327_recOwned = _out922;
                _4328_recIdents = _out923;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4326_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out924;
                DCOMP._IOwnership _out925;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out924, out _out925);
                r = _out924;
                resultingOwnership = _out925;
                readIdents = _4328_recIdents;
              }
            } else {
              DAST._IType _4329___mcc_h454 = _source172.dtor_baseType;
              DAST._INewtypeRange _4330___mcc_h455 = _source172.dtor_range;
              bool _4331___mcc_h456 = _source172.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4332___mcc_h457 = _source172.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4333_attributes = _4332___mcc_h457;
              bool _4334_erase = _4331___mcc_h456;
              DAST._INewtypeRange _4335_range = _4330___mcc_h455;
              DAST._IType _4336_b = _4329___mcc_h454;
              {
                Std.Wrappers._IOption<RAST._IType> _4337_nativeToType;
                _4337_nativeToType = DCOMP.COMP.NewtypeToRustType(_4336_b, _4335_range);
                if (object.Equals(_3461_fromTpe, _4336_b)) {
                  RAST._IExpr _4338_recursiveGen;
                  DCOMP._IOwnership _4339_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4340_recIdents;
                  RAST._IExpr _out926;
                  DCOMP._IOwnership _out927;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out928;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out926, out _out927, out _out928);
                  _4338_recursiveGen = _out926;
                  _4339_recOwned = _out927;
                  _4340_recIdents = _out928;
                  Std.Wrappers._IOption<RAST._IType> _source173 = _4337_nativeToType;
                  if (_source173.is_None) {
                    if (_4334_erase) {
                      r = _4338_recursiveGen;
                    } else {
                      RAST._IType _4341_rhsType;
                      RAST._IType _out929;
                      _out929 = DCOMP.COMP.GenType(_3462_toTpe, true, false);
                      _4341_rhsType = _out929;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4341_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4338_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out930;
                    DCOMP._IOwnership _out931;
                    DCOMP.COMP.FromOwnership(r, _4339_recOwned, expectedOwnership, out _out930, out _out931);
                    r = _out930;
                    resultingOwnership = _out931;
                  } else {
                    RAST._IType _4342___mcc_h1535 = _source173.dtor_value;
                    RAST._IType _4343_v = _4342___mcc_h1535;
                    r = (((_4338_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_4343_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out932;
                    DCOMP._IOwnership _out933;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out932, out _out933);
                    r = _out932;
                    resultingOwnership = _out933;
                  }
                  readIdents = _4340_recIdents;
                } else {
                  if ((_4337_nativeToType).is_Some) {
                    DAST._IType _source174 = _3461_fromTpe;
                    if (_source174.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4344___mcc_h1536 = _source174.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _4345___mcc_h1537 = _source174.dtor_typeArgs;
                      DAST._IResolvedType _4346___mcc_h1538 = _source174.dtor_resolved;
                      DAST._IResolvedType _source175 = _4346___mcc_h1538;
                      if (_source175.is_Datatype) {
                        DAST._IDatatypeType _4347___mcc_h1542 = _source175.dtor_datatypeType;
                      } else if (_source175.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4348___mcc_h1544 = _source175.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _4349___mcc_h1545 = _source175.dtor_attributes;
                      } else {
                        DAST._IType _4350___mcc_h1548 = _source175.dtor_baseType;
                        DAST._INewtypeRange _4351___mcc_h1549 = _source175.dtor_range;
                        bool _4352___mcc_h1550 = _source175.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _4353___mcc_h1551 = _source175.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _4354_attributes0 = _4353___mcc_h1551;
                        bool _4355_erase0 = _4352___mcc_h1550;
                        DAST._INewtypeRange _4356_range0 = _4351___mcc_h1549;
                        DAST._IType _4357_b0 = _4350___mcc_h1548;
                        {
                          Std.Wrappers._IOption<RAST._IType> _4358_nativeFromType;
                          _4358_nativeFromType = DCOMP.COMP.NewtypeToRustType(_4357_b0, _4356_range0);
                          if ((_4358_nativeFromType).is_Some) {
                            RAST._IExpr _4359_recursiveGen;
                            DCOMP._IOwnership _4360_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4361_recIdents;
                            RAST._IExpr _out934;
                            DCOMP._IOwnership _out935;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out936;
                            DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out934, out _out935, out _out936);
                            _4359_recursiveGen = _out934;
                            _4360_recOwned = _out935;
                            _4361_recIdents = _out936;
                            RAST._IExpr _out937;
                            DCOMP._IOwnership _out938;
                            DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_4359_recursiveGen, (_4337_nativeToType).dtor_value), _4360_recOwned, expectedOwnership, out _out937, out _out938);
                            r = _out937;
                            resultingOwnership = _out938;
                            readIdents = _4361_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source174.is_Nullable) {
                      DAST._IType _4362___mcc_h1556 = _source174.dtor_Nullable_a0;
                    } else if (_source174.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _4363___mcc_h1558 = _source174.dtor_Tuple_a0;
                    } else if (_source174.is_Array) {
                      DAST._IType _4364___mcc_h1560 = _source174.dtor_element;
                      BigInteger _4365___mcc_h1561 = _source174.dtor_dims;
                    } else if (_source174.is_Seq) {
                      DAST._IType _4366___mcc_h1564 = _source174.dtor_element;
                    } else if (_source174.is_Set) {
                      DAST._IType _4367___mcc_h1566 = _source174.dtor_element;
                    } else if (_source174.is_Multiset) {
                      DAST._IType _4368___mcc_h1568 = _source174.dtor_element;
                    } else if (_source174.is_Map) {
                      DAST._IType _4369___mcc_h1570 = _source174.dtor_key;
                      DAST._IType _4370___mcc_h1571 = _source174.dtor_value;
                    } else if (_source174.is_SetBuilder) {
                      DAST._IType _4371___mcc_h1574 = _source174.dtor_element;
                    } else if (_source174.is_MapBuilder) {
                      DAST._IType _4372___mcc_h1576 = _source174.dtor_key;
                      DAST._IType _4373___mcc_h1577 = _source174.dtor_value;
                    } else if (_source174.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _4374___mcc_h1580 = _source174.dtor_args;
                      DAST._IType _4375___mcc_h1581 = _source174.dtor_result;
                    } else if (_source174.is_Primitive) {
                      DAST._IPrimitive _4376___mcc_h1584 = _source174.dtor_Primitive_a0;
                    } else if (_source174.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _4377___mcc_h1586 = _source174.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _4378___mcc_h1588 = _source174.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_3461_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _4379_recursiveGen;
                      DCOMP._IOwnership _4380_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4381_recIdents;
                      RAST._IExpr _out939;
                      DCOMP._IOwnership _out940;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out941;
                      DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out939, out _out940, out _out941);
                      _4379_recursiveGen = _out939;
                      _4380_recOwned = _out940;
                      _4381_recIdents = _out941;
                      RAST._IExpr _out942;
                      DCOMP._IOwnership _out943;
                      DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_4379_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_4337_nativeToType).dtor_value), _4380_recOwned, expectedOwnership, out _out942, out _out943);
                      r = _out942;
                      resultingOwnership = _out943;
                      readIdents = _4381_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out944;
                  DCOMP._IOwnership _out945;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out946;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3460_expr, _3461_fromTpe, _4336_b), _4336_b, _3462_toTpe), selfIdent, env, expectedOwnership, out _out944, out _out945, out _out946);
                  r = _out944;
                  resultingOwnership = _out945;
                  readIdents = _out946;
                }
              }
            }
          } else if (_source171.is_Nullable) {
            DAST._IType _4382___mcc_h462 = _source171.dtor_Nullable_a0;
            {
              RAST._IExpr _4383_recursiveGen;
              DCOMP._IOwnership _4384_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4385_recIdents;
              RAST._IExpr _out947;
              DCOMP._IOwnership _out948;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out949;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out947, out _out948, out _out949);
              _4383_recursiveGen = _out947;
              _4384_recOwned = _out948;
              _4385_recIdents = _out949;
              r = _4383_recursiveGen;
              if (object.Equals(_4384_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out950;
              DCOMP._IOwnership _out951;
              DCOMP.COMP.FromOwnership(r, _4384_recOwned, expectedOwnership, out _out950, out _out951);
              r = _out950;
              resultingOwnership = _out951;
              readIdents = _4385_recIdents;
            }
          } else if (_source171.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4386___mcc_h464 = _source171.dtor_Tuple_a0;
            {
              RAST._IExpr _4387_recursiveGen;
              DCOMP._IOwnership _4388_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4389_recIdents;
              RAST._IExpr _out952;
              DCOMP._IOwnership _out953;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out954;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out952, out _out953, out _out954);
              _4387_recursiveGen = _out952;
              _4388_recOwned = _out953;
              _4389_recIdents = _out954;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4387_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out955;
              DCOMP._IOwnership _out956;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out955, out _out956);
              r = _out955;
              resultingOwnership = _out956;
              readIdents = _4389_recIdents;
            }
          } else if (_source171.is_Array) {
            DAST._IType _4390___mcc_h466 = _source171.dtor_element;
            BigInteger _4391___mcc_h467 = _source171.dtor_dims;
            {
              RAST._IExpr _4392_recursiveGen;
              DCOMP._IOwnership _4393_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4394_recIdents;
              RAST._IExpr _out957;
              DCOMP._IOwnership _out958;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out959;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out957, out _out958, out _out959);
              _4392_recursiveGen = _out957;
              _4393_recOwned = _out958;
              _4394_recIdents = _out959;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4392_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out960;
              DCOMP._IOwnership _out961;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out960, out _out961);
              r = _out960;
              resultingOwnership = _out961;
              readIdents = _4394_recIdents;
            }
          } else if (_source171.is_Seq) {
            DAST._IType _4395___mcc_h470 = _source171.dtor_element;
            {
              RAST._IExpr _4396_recursiveGen;
              DCOMP._IOwnership _4397_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4398_recIdents;
              RAST._IExpr _out962;
              DCOMP._IOwnership _out963;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out964;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out962, out _out963, out _out964);
              _4396_recursiveGen = _out962;
              _4397_recOwned = _out963;
              _4398_recIdents = _out964;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4396_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out965;
              DCOMP._IOwnership _out966;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out965, out _out966);
              r = _out965;
              resultingOwnership = _out966;
              readIdents = _4398_recIdents;
            }
          } else if (_source171.is_Set) {
            DAST._IType _4399___mcc_h472 = _source171.dtor_element;
            {
              RAST._IExpr _4400_recursiveGen;
              DCOMP._IOwnership _4401_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4402_recIdents;
              RAST._IExpr _out967;
              DCOMP._IOwnership _out968;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out969;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out967, out _out968, out _out969);
              _4400_recursiveGen = _out967;
              _4401_recOwned = _out968;
              _4402_recIdents = _out969;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4400_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out970;
              DCOMP._IOwnership _out971;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out970, out _out971);
              r = _out970;
              resultingOwnership = _out971;
              readIdents = _4402_recIdents;
            }
          } else if (_source171.is_Multiset) {
            DAST._IType _4403___mcc_h474 = _source171.dtor_element;
            {
              RAST._IExpr _4404_recursiveGen;
              DCOMP._IOwnership _4405_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4406_recIdents;
              RAST._IExpr _out972;
              DCOMP._IOwnership _out973;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out974;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out972, out _out973, out _out974);
              _4404_recursiveGen = _out972;
              _4405_recOwned = _out973;
              _4406_recIdents = _out974;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4404_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out975;
              DCOMP._IOwnership _out976;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out975, out _out976);
              r = _out975;
              resultingOwnership = _out976;
              readIdents = _4406_recIdents;
            }
          } else if (_source171.is_Map) {
            DAST._IType _4407___mcc_h476 = _source171.dtor_key;
            DAST._IType _4408___mcc_h477 = _source171.dtor_value;
            {
              RAST._IExpr _4409_recursiveGen;
              DCOMP._IOwnership _4410_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4411_recIdents;
              RAST._IExpr _out977;
              DCOMP._IOwnership _out978;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out979;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out977, out _out978, out _out979);
              _4409_recursiveGen = _out977;
              _4410_recOwned = _out978;
              _4411_recIdents = _out979;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4409_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out980;
              DCOMP._IOwnership _out981;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out980, out _out981);
              r = _out980;
              resultingOwnership = _out981;
              readIdents = _4411_recIdents;
            }
          } else if (_source171.is_SetBuilder) {
            DAST._IType _4412___mcc_h480 = _source171.dtor_element;
            {
              RAST._IExpr _4413_recursiveGen;
              DCOMP._IOwnership _4414_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4415_recIdents;
              RAST._IExpr _out982;
              DCOMP._IOwnership _out983;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out984;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out982, out _out983, out _out984);
              _4413_recursiveGen = _out982;
              _4414_recOwned = _out983;
              _4415_recIdents = _out984;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4413_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out985;
              DCOMP._IOwnership _out986;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out985, out _out986);
              r = _out985;
              resultingOwnership = _out986;
              readIdents = _4415_recIdents;
            }
          } else if (_source171.is_MapBuilder) {
            DAST._IType _4416___mcc_h482 = _source171.dtor_key;
            DAST._IType _4417___mcc_h483 = _source171.dtor_value;
            {
              RAST._IExpr _4418_recursiveGen;
              DCOMP._IOwnership _4419_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4420_recIdents;
              RAST._IExpr _out987;
              DCOMP._IOwnership _out988;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out989;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out987, out _out988, out _out989);
              _4418_recursiveGen = _out987;
              _4419_recOwned = _out988;
              _4420_recIdents = _out989;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4418_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out990;
              DCOMP._IOwnership _out991;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out990, out _out991);
              r = _out990;
              resultingOwnership = _out991;
              readIdents = _4420_recIdents;
            }
          } else if (_source171.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4421___mcc_h486 = _source171.dtor_args;
            DAST._IType _4422___mcc_h487 = _source171.dtor_result;
            {
              RAST._IExpr _4423_recursiveGen;
              DCOMP._IOwnership _4424_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4425_recIdents;
              RAST._IExpr _out992;
              DCOMP._IOwnership _out993;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out994;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out992, out _out993, out _out994);
              _4423_recursiveGen = _out992;
              _4424_recOwned = _out993;
              _4425_recIdents = _out994;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4423_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out995;
              DCOMP._IOwnership _out996;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out995, out _out996);
              r = _out995;
              resultingOwnership = _out996;
              readIdents = _4425_recIdents;
            }
          } else if (_source171.is_Primitive) {
            DAST._IPrimitive _4426___mcc_h490 = _source171.dtor_Primitive_a0;
            {
              RAST._IExpr _4427_recursiveGen;
              DCOMP._IOwnership _4428_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4429_recIdents;
              RAST._IExpr _out997;
              DCOMP._IOwnership _out998;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out999;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out997, out _out998, out _out999);
              _4427_recursiveGen = _out997;
              _4428_recOwned = _out998;
              _4429_recIdents = _out999;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4427_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1000;
              DCOMP._IOwnership _out1001;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1000, out _out1001);
              r = _out1000;
              resultingOwnership = _out1001;
              readIdents = _4429_recIdents;
            }
          } else if (_source171.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4430___mcc_h492 = _source171.dtor_Passthrough_a0;
            {
              RAST._IExpr _4431_recursiveGen;
              DCOMP._IOwnership _4432_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4433_recIdents;
              RAST._IExpr _out1002;
              DCOMP._IOwnership _out1003;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1004;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1002, out _out1003, out _out1004);
              _4431_recursiveGen = _out1002;
              _4432_recOwned = _out1003;
              _4433_recIdents = _out1004;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4431_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1005;
              DCOMP._IOwnership _out1006;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1005, out _out1006);
              r = _out1005;
              resultingOwnership = _out1006;
              readIdents = _4433_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4434___mcc_h494 = _source171.dtor_TypeArg_a0;
            {
              RAST._IExpr _4435_recursiveGen;
              DCOMP._IOwnership _4436_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4437_recIdents;
              RAST._IExpr _out1007;
              DCOMP._IOwnership _out1008;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1009;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1007, out _out1008, out _out1009);
              _4435_recursiveGen = _out1007;
              _4436_recOwned = _out1008;
              _4437_recIdents = _out1009;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4435_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1010;
              DCOMP._IOwnership _out1011;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1010, out _out1011);
              r = _out1010;
              resultingOwnership = _out1011;
              readIdents = _4437_recIdents;
            }
          }
        } else if (_source128.is_Set) {
          DAST._IType _4438___mcc_h496 = _source128.dtor_element;
          DAST._IType _source176 = _3467___mcc_h1;
          if (_source176.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4439___mcc_h500 = _source176.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _4440___mcc_h501 = _source176.dtor_typeArgs;
            DAST._IResolvedType _4441___mcc_h502 = _source176.dtor_resolved;
            DAST._IResolvedType _source177 = _4441___mcc_h502;
            if (_source177.is_Datatype) {
              DAST._IDatatypeType _4442___mcc_h506 = _source177.dtor_datatypeType;
              {
                RAST._IExpr _4443_recursiveGen;
                DCOMP._IOwnership _4444_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4445_recIdents;
                RAST._IExpr _out1012;
                DCOMP._IOwnership _out1013;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1014;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1012, out _out1013, out _out1014);
                _4443_recursiveGen = _out1012;
                _4444_recOwned = _out1013;
                _4445_recIdents = _out1014;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4443_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1015;
                DCOMP._IOwnership _out1016;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1015, out _out1016);
                r = _out1015;
                resultingOwnership = _out1016;
                readIdents = _4445_recIdents;
              }
            } else if (_source177.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4446___mcc_h508 = _source177.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4447___mcc_h509 = _source177.dtor_attributes;
              {
                RAST._IExpr _4448_recursiveGen;
                DCOMP._IOwnership _4449_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4450_recIdents;
                RAST._IExpr _out1017;
                DCOMP._IOwnership _out1018;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1019;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1017, out _out1018, out _out1019);
                _4448_recursiveGen = _out1017;
                _4449_recOwned = _out1018;
                _4450_recIdents = _out1019;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4448_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1020;
                DCOMP._IOwnership _out1021;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1020, out _out1021);
                r = _out1020;
                resultingOwnership = _out1021;
                readIdents = _4450_recIdents;
              }
            } else {
              DAST._IType _4451___mcc_h512 = _source177.dtor_baseType;
              DAST._INewtypeRange _4452___mcc_h513 = _source177.dtor_range;
              bool _4453___mcc_h514 = _source177.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4454___mcc_h515 = _source177.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4455_attributes = _4454___mcc_h515;
              bool _4456_erase = _4453___mcc_h514;
              DAST._INewtypeRange _4457_range = _4452___mcc_h513;
              DAST._IType _4458_b = _4451___mcc_h512;
              {
                Std.Wrappers._IOption<RAST._IType> _4459_nativeToType;
                _4459_nativeToType = DCOMP.COMP.NewtypeToRustType(_4458_b, _4457_range);
                if (object.Equals(_3461_fromTpe, _4458_b)) {
                  RAST._IExpr _4460_recursiveGen;
                  DCOMP._IOwnership _4461_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4462_recIdents;
                  RAST._IExpr _out1022;
                  DCOMP._IOwnership _out1023;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1024;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1022, out _out1023, out _out1024);
                  _4460_recursiveGen = _out1022;
                  _4461_recOwned = _out1023;
                  _4462_recIdents = _out1024;
                  Std.Wrappers._IOption<RAST._IType> _source178 = _4459_nativeToType;
                  if (_source178.is_None) {
                    if (_4456_erase) {
                      r = _4460_recursiveGen;
                    } else {
                      RAST._IType _4463_rhsType;
                      RAST._IType _out1025;
                      _out1025 = DCOMP.COMP.GenType(_3462_toTpe, true, false);
                      _4463_rhsType = _out1025;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4463_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4460_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out1026;
                    DCOMP._IOwnership _out1027;
                    DCOMP.COMP.FromOwnership(r, _4461_recOwned, expectedOwnership, out _out1026, out _out1027);
                    r = _out1026;
                    resultingOwnership = _out1027;
                  } else {
                    RAST._IType _4464___mcc_h1590 = _source178.dtor_value;
                    RAST._IType _4465_v = _4464___mcc_h1590;
                    r = (((_4460_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_4465_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out1028;
                    DCOMP._IOwnership _out1029;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1028, out _out1029);
                    r = _out1028;
                    resultingOwnership = _out1029;
                  }
                  readIdents = _4462_recIdents;
                } else {
                  if ((_4459_nativeToType).is_Some) {
                    DAST._IType _source179 = _3461_fromTpe;
                    if (_source179.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4466___mcc_h1591 = _source179.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _4467___mcc_h1592 = _source179.dtor_typeArgs;
                      DAST._IResolvedType _4468___mcc_h1593 = _source179.dtor_resolved;
                      DAST._IResolvedType _source180 = _4468___mcc_h1593;
                      if (_source180.is_Datatype) {
                        DAST._IDatatypeType _4469___mcc_h1597 = _source180.dtor_datatypeType;
                      } else if (_source180.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4470___mcc_h1599 = _source180.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _4471___mcc_h1600 = _source180.dtor_attributes;
                      } else {
                        DAST._IType _4472___mcc_h1603 = _source180.dtor_baseType;
                        DAST._INewtypeRange _4473___mcc_h1604 = _source180.dtor_range;
                        bool _4474___mcc_h1605 = _source180.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _4475___mcc_h1606 = _source180.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _4476_attributes0 = _4475___mcc_h1606;
                        bool _4477_erase0 = _4474___mcc_h1605;
                        DAST._INewtypeRange _4478_range0 = _4473___mcc_h1604;
                        DAST._IType _4479_b0 = _4472___mcc_h1603;
                        {
                          Std.Wrappers._IOption<RAST._IType> _4480_nativeFromType;
                          _4480_nativeFromType = DCOMP.COMP.NewtypeToRustType(_4479_b0, _4478_range0);
                          if ((_4480_nativeFromType).is_Some) {
                            RAST._IExpr _4481_recursiveGen;
                            DCOMP._IOwnership _4482_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4483_recIdents;
                            RAST._IExpr _out1030;
                            DCOMP._IOwnership _out1031;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1032;
                            DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1030, out _out1031, out _out1032);
                            _4481_recursiveGen = _out1030;
                            _4482_recOwned = _out1031;
                            _4483_recIdents = _out1032;
                            RAST._IExpr _out1033;
                            DCOMP._IOwnership _out1034;
                            DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_4481_recursiveGen, (_4459_nativeToType).dtor_value), _4482_recOwned, expectedOwnership, out _out1033, out _out1034);
                            r = _out1033;
                            resultingOwnership = _out1034;
                            readIdents = _4483_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source179.is_Nullable) {
                      DAST._IType _4484___mcc_h1611 = _source179.dtor_Nullable_a0;
                    } else if (_source179.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _4485___mcc_h1613 = _source179.dtor_Tuple_a0;
                    } else if (_source179.is_Array) {
                      DAST._IType _4486___mcc_h1615 = _source179.dtor_element;
                      BigInteger _4487___mcc_h1616 = _source179.dtor_dims;
                    } else if (_source179.is_Seq) {
                      DAST._IType _4488___mcc_h1619 = _source179.dtor_element;
                    } else if (_source179.is_Set) {
                      DAST._IType _4489___mcc_h1621 = _source179.dtor_element;
                    } else if (_source179.is_Multiset) {
                      DAST._IType _4490___mcc_h1623 = _source179.dtor_element;
                    } else if (_source179.is_Map) {
                      DAST._IType _4491___mcc_h1625 = _source179.dtor_key;
                      DAST._IType _4492___mcc_h1626 = _source179.dtor_value;
                    } else if (_source179.is_SetBuilder) {
                      DAST._IType _4493___mcc_h1629 = _source179.dtor_element;
                    } else if (_source179.is_MapBuilder) {
                      DAST._IType _4494___mcc_h1631 = _source179.dtor_key;
                      DAST._IType _4495___mcc_h1632 = _source179.dtor_value;
                    } else if (_source179.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _4496___mcc_h1635 = _source179.dtor_args;
                      DAST._IType _4497___mcc_h1636 = _source179.dtor_result;
                    } else if (_source179.is_Primitive) {
                      DAST._IPrimitive _4498___mcc_h1639 = _source179.dtor_Primitive_a0;
                    } else if (_source179.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _4499___mcc_h1641 = _source179.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _4500___mcc_h1643 = _source179.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_3461_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _4501_recursiveGen;
                      DCOMP._IOwnership _4502_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4503_recIdents;
                      RAST._IExpr _out1035;
                      DCOMP._IOwnership _out1036;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1037;
                      DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1035, out _out1036, out _out1037);
                      _4501_recursiveGen = _out1035;
                      _4502_recOwned = _out1036;
                      _4503_recIdents = _out1037;
                      RAST._IExpr _out1038;
                      DCOMP._IOwnership _out1039;
                      DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_4501_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_4459_nativeToType).dtor_value), _4502_recOwned, expectedOwnership, out _out1038, out _out1039);
                      r = _out1038;
                      resultingOwnership = _out1039;
                      readIdents = _4503_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out1040;
                  DCOMP._IOwnership _out1041;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1042;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3460_expr, _3461_fromTpe, _4458_b), _4458_b, _3462_toTpe), selfIdent, env, expectedOwnership, out _out1040, out _out1041, out _out1042);
                  r = _out1040;
                  resultingOwnership = _out1041;
                  readIdents = _out1042;
                }
              }
            }
          } else if (_source176.is_Nullable) {
            DAST._IType _4504___mcc_h520 = _source176.dtor_Nullable_a0;
            {
              RAST._IExpr _4505_recursiveGen;
              DCOMP._IOwnership _4506_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4507_recIdents;
              RAST._IExpr _out1043;
              DCOMP._IOwnership _out1044;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1045;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1043, out _out1044, out _out1045);
              _4505_recursiveGen = _out1043;
              _4506_recOwned = _out1044;
              _4507_recIdents = _out1045;
              r = _4505_recursiveGen;
              if (object.Equals(_4506_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out1046;
              DCOMP._IOwnership _out1047;
              DCOMP.COMP.FromOwnership(r, _4506_recOwned, expectedOwnership, out _out1046, out _out1047);
              r = _out1046;
              resultingOwnership = _out1047;
              readIdents = _4507_recIdents;
            }
          } else if (_source176.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4508___mcc_h522 = _source176.dtor_Tuple_a0;
            {
              RAST._IExpr _4509_recursiveGen;
              DCOMP._IOwnership _4510_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4511_recIdents;
              RAST._IExpr _out1048;
              DCOMP._IOwnership _out1049;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1050;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1048, out _out1049, out _out1050);
              _4509_recursiveGen = _out1048;
              _4510_recOwned = _out1049;
              _4511_recIdents = _out1050;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4509_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1051;
              DCOMP._IOwnership _out1052;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1051, out _out1052);
              r = _out1051;
              resultingOwnership = _out1052;
              readIdents = _4511_recIdents;
            }
          } else if (_source176.is_Array) {
            DAST._IType _4512___mcc_h524 = _source176.dtor_element;
            BigInteger _4513___mcc_h525 = _source176.dtor_dims;
            {
              RAST._IExpr _4514_recursiveGen;
              DCOMP._IOwnership _4515_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4516_recIdents;
              RAST._IExpr _out1053;
              DCOMP._IOwnership _out1054;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1055;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1053, out _out1054, out _out1055);
              _4514_recursiveGen = _out1053;
              _4515_recOwned = _out1054;
              _4516_recIdents = _out1055;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4514_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1056;
              DCOMP._IOwnership _out1057;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1056, out _out1057);
              r = _out1056;
              resultingOwnership = _out1057;
              readIdents = _4516_recIdents;
            }
          } else if (_source176.is_Seq) {
            DAST._IType _4517___mcc_h528 = _source176.dtor_element;
            {
              RAST._IExpr _4518_recursiveGen;
              DCOMP._IOwnership _4519_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4520_recIdents;
              RAST._IExpr _out1058;
              DCOMP._IOwnership _out1059;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1060;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1058, out _out1059, out _out1060);
              _4518_recursiveGen = _out1058;
              _4519_recOwned = _out1059;
              _4520_recIdents = _out1060;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4518_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1061;
              DCOMP._IOwnership _out1062;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1061, out _out1062);
              r = _out1061;
              resultingOwnership = _out1062;
              readIdents = _4520_recIdents;
            }
          } else if (_source176.is_Set) {
            DAST._IType _4521___mcc_h530 = _source176.dtor_element;
            {
              RAST._IExpr _4522_recursiveGen;
              DCOMP._IOwnership _4523_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4524_recIdents;
              RAST._IExpr _out1063;
              DCOMP._IOwnership _out1064;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1065;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1063, out _out1064, out _out1065);
              _4522_recursiveGen = _out1063;
              _4523_recOwned = _out1064;
              _4524_recIdents = _out1065;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4522_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1066;
              DCOMP._IOwnership _out1067;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1066, out _out1067);
              r = _out1066;
              resultingOwnership = _out1067;
              readIdents = _4524_recIdents;
            }
          } else if (_source176.is_Multiset) {
            DAST._IType _4525___mcc_h532 = _source176.dtor_element;
            {
              RAST._IExpr _4526_recursiveGen;
              DCOMP._IOwnership _4527_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4528_recIdents;
              RAST._IExpr _out1068;
              DCOMP._IOwnership _out1069;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1070;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1068, out _out1069, out _out1070);
              _4526_recursiveGen = _out1068;
              _4527_recOwned = _out1069;
              _4528_recIdents = _out1070;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4526_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1071;
              DCOMP._IOwnership _out1072;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1071, out _out1072);
              r = _out1071;
              resultingOwnership = _out1072;
              readIdents = _4528_recIdents;
            }
          } else if (_source176.is_Map) {
            DAST._IType _4529___mcc_h534 = _source176.dtor_key;
            DAST._IType _4530___mcc_h535 = _source176.dtor_value;
            {
              RAST._IExpr _4531_recursiveGen;
              DCOMP._IOwnership _4532_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4533_recIdents;
              RAST._IExpr _out1073;
              DCOMP._IOwnership _out1074;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1075;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1073, out _out1074, out _out1075);
              _4531_recursiveGen = _out1073;
              _4532_recOwned = _out1074;
              _4533_recIdents = _out1075;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4531_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1076;
              DCOMP._IOwnership _out1077;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1076, out _out1077);
              r = _out1076;
              resultingOwnership = _out1077;
              readIdents = _4533_recIdents;
            }
          } else if (_source176.is_SetBuilder) {
            DAST._IType _4534___mcc_h538 = _source176.dtor_element;
            {
              RAST._IExpr _4535_recursiveGen;
              DCOMP._IOwnership _4536_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4537_recIdents;
              RAST._IExpr _out1078;
              DCOMP._IOwnership _out1079;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1080;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1078, out _out1079, out _out1080);
              _4535_recursiveGen = _out1078;
              _4536_recOwned = _out1079;
              _4537_recIdents = _out1080;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4535_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1081;
              DCOMP._IOwnership _out1082;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1081, out _out1082);
              r = _out1081;
              resultingOwnership = _out1082;
              readIdents = _4537_recIdents;
            }
          } else if (_source176.is_MapBuilder) {
            DAST._IType _4538___mcc_h540 = _source176.dtor_key;
            DAST._IType _4539___mcc_h541 = _source176.dtor_value;
            {
              RAST._IExpr _4540_recursiveGen;
              DCOMP._IOwnership _4541_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4542_recIdents;
              RAST._IExpr _out1083;
              DCOMP._IOwnership _out1084;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1085;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1083, out _out1084, out _out1085);
              _4540_recursiveGen = _out1083;
              _4541_recOwned = _out1084;
              _4542_recIdents = _out1085;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4540_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1086;
              DCOMP._IOwnership _out1087;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1086, out _out1087);
              r = _out1086;
              resultingOwnership = _out1087;
              readIdents = _4542_recIdents;
            }
          } else if (_source176.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4543___mcc_h544 = _source176.dtor_args;
            DAST._IType _4544___mcc_h545 = _source176.dtor_result;
            {
              RAST._IExpr _4545_recursiveGen;
              DCOMP._IOwnership _4546_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4547_recIdents;
              RAST._IExpr _out1088;
              DCOMP._IOwnership _out1089;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1090;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1088, out _out1089, out _out1090);
              _4545_recursiveGen = _out1088;
              _4546_recOwned = _out1089;
              _4547_recIdents = _out1090;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4545_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1091;
              DCOMP._IOwnership _out1092;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1091, out _out1092);
              r = _out1091;
              resultingOwnership = _out1092;
              readIdents = _4547_recIdents;
            }
          } else if (_source176.is_Primitive) {
            DAST._IPrimitive _4548___mcc_h548 = _source176.dtor_Primitive_a0;
            {
              RAST._IExpr _4549_recursiveGen;
              DCOMP._IOwnership _4550_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4551_recIdents;
              RAST._IExpr _out1093;
              DCOMP._IOwnership _out1094;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1095;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1093, out _out1094, out _out1095);
              _4549_recursiveGen = _out1093;
              _4550_recOwned = _out1094;
              _4551_recIdents = _out1095;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4549_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1096;
              DCOMP._IOwnership _out1097;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1096, out _out1097);
              r = _out1096;
              resultingOwnership = _out1097;
              readIdents = _4551_recIdents;
            }
          } else if (_source176.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4552___mcc_h550 = _source176.dtor_Passthrough_a0;
            {
              RAST._IExpr _4553_recursiveGen;
              DCOMP._IOwnership _4554_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4555_recIdents;
              RAST._IExpr _out1098;
              DCOMP._IOwnership _out1099;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1100;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1098, out _out1099, out _out1100);
              _4553_recursiveGen = _out1098;
              _4554_recOwned = _out1099;
              _4555_recIdents = _out1100;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4553_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1101;
              DCOMP._IOwnership _out1102;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1101, out _out1102);
              r = _out1101;
              resultingOwnership = _out1102;
              readIdents = _4555_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4556___mcc_h552 = _source176.dtor_TypeArg_a0;
            {
              RAST._IExpr _4557_recursiveGen;
              DCOMP._IOwnership _4558_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4559_recIdents;
              RAST._IExpr _out1103;
              DCOMP._IOwnership _out1104;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1105;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1103, out _out1104, out _out1105);
              _4557_recursiveGen = _out1103;
              _4558_recOwned = _out1104;
              _4559_recIdents = _out1105;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4557_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1106;
              DCOMP._IOwnership _out1107;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1106, out _out1107);
              r = _out1106;
              resultingOwnership = _out1107;
              readIdents = _4559_recIdents;
            }
          }
        } else if (_source128.is_Multiset) {
          DAST._IType _4560___mcc_h554 = _source128.dtor_element;
          DAST._IType _source181 = _3467___mcc_h1;
          if (_source181.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4561___mcc_h558 = _source181.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _4562___mcc_h559 = _source181.dtor_typeArgs;
            DAST._IResolvedType _4563___mcc_h560 = _source181.dtor_resolved;
            DAST._IResolvedType _source182 = _4563___mcc_h560;
            if (_source182.is_Datatype) {
              DAST._IDatatypeType _4564___mcc_h564 = _source182.dtor_datatypeType;
              {
                RAST._IExpr _4565_recursiveGen;
                DCOMP._IOwnership _4566_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4567_recIdents;
                RAST._IExpr _out1108;
                DCOMP._IOwnership _out1109;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1110;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1108, out _out1109, out _out1110);
                _4565_recursiveGen = _out1108;
                _4566_recOwned = _out1109;
                _4567_recIdents = _out1110;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4565_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1111;
                DCOMP._IOwnership _out1112;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1111, out _out1112);
                r = _out1111;
                resultingOwnership = _out1112;
                readIdents = _4567_recIdents;
              }
            } else if (_source182.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4568___mcc_h566 = _source182.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4569___mcc_h567 = _source182.dtor_attributes;
              {
                RAST._IExpr _4570_recursiveGen;
                DCOMP._IOwnership _4571_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4572_recIdents;
                RAST._IExpr _out1113;
                DCOMP._IOwnership _out1114;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1115;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1113, out _out1114, out _out1115);
                _4570_recursiveGen = _out1113;
                _4571_recOwned = _out1114;
                _4572_recIdents = _out1115;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4570_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1116;
                DCOMP._IOwnership _out1117;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1116, out _out1117);
                r = _out1116;
                resultingOwnership = _out1117;
                readIdents = _4572_recIdents;
              }
            } else {
              DAST._IType _4573___mcc_h570 = _source182.dtor_baseType;
              DAST._INewtypeRange _4574___mcc_h571 = _source182.dtor_range;
              bool _4575___mcc_h572 = _source182.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4576___mcc_h573 = _source182.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4577_attributes = _4576___mcc_h573;
              bool _4578_erase = _4575___mcc_h572;
              DAST._INewtypeRange _4579_range = _4574___mcc_h571;
              DAST._IType _4580_b = _4573___mcc_h570;
              {
                Std.Wrappers._IOption<RAST._IType> _4581_nativeToType;
                _4581_nativeToType = DCOMP.COMP.NewtypeToRustType(_4580_b, _4579_range);
                if (object.Equals(_3461_fromTpe, _4580_b)) {
                  RAST._IExpr _4582_recursiveGen;
                  DCOMP._IOwnership _4583_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4584_recIdents;
                  RAST._IExpr _out1118;
                  DCOMP._IOwnership _out1119;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1120;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1118, out _out1119, out _out1120);
                  _4582_recursiveGen = _out1118;
                  _4583_recOwned = _out1119;
                  _4584_recIdents = _out1120;
                  Std.Wrappers._IOption<RAST._IType> _source183 = _4581_nativeToType;
                  if (_source183.is_None) {
                    if (_4578_erase) {
                      r = _4582_recursiveGen;
                    } else {
                      RAST._IType _4585_rhsType;
                      RAST._IType _out1121;
                      _out1121 = DCOMP.COMP.GenType(_3462_toTpe, true, false);
                      _4585_rhsType = _out1121;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4585_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4582_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out1122;
                    DCOMP._IOwnership _out1123;
                    DCOMP.COMP.FromOwnership(r, _4583_recOwned, expectedOwnership, out _out1122, out _out1123);
                    r = _out1122;
                    resultingOwnership = _out1123;
                  } else {
                    RAST._IType _4586___mcc_h1645 = _source183.dtor_value;
                    RAST._IType _4587_v = _4586___mcc_h1645;
                    r = (((_4582_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_4587_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out1124;
                    DCOMP._IOwnership _out1125;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1124, out _out1125);
                    r = _out1124;
                    resultingOwnership = _out1125;
                  }
                  readIdents = _4584_recIdents;
                } else {
                  if ((_4581_nativeToType).is_Some) {
                    DAST._IType _source184 = _3461_fromTpe;
                    if (_source184.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4588___mcc_h1646 = _source184.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _4589___mcc_h1647 = _source184.dtor_typeArgs;
                      DAST._IResolvedType _4590___mcc_h1648 = _source184.dtor_resolved;
                      DAST._IResolvedType _source185 = _4590___mcc_h1648;
                      if (_source185.is_Datatype) {
                        DAST._IDatatypeType _4591___mcc_h1652 = _source185.dtor_datatypeType;
                      } else if (_source185.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4592___mcc_h1654 = _source185.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _4593___mcc_h1655 = _source185.dtor_attributes;
                      } else {
                        DAST._IType _4594___mcc_h1658 = _source185.dtor_baseType;
                        DAST._INewtypeRange _4595___mcc_h1659 = _source185.dtor_range;
                        bool _4596___mcc_h1660 = _source185.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _4597___mcc_h1661 = _source185.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _4598_attributes0 = _4597___mcc_h1661;
                        bool _4599_erase0 = _4596___mcc_h1660;
                        DAST._INewtypeRange _4600_range0 = _4595___mcc_h1659;
                        DAST._IType _4601_b0 = _4594___mcc_h1658;
                        {
                          Std.Wrappers._IOption<RAST._IType> _4602_nativeFromType;
                          _4602_nativeFromType = DCOMP.COMP.NewtypeToRustType(_4601_b0, _4600_range0);
                          if ((_4602_nativeFromType).is_Some) {
                            RAST._IExpr _4603_recursiveGen;
                            DCOMP._IOwnership _4604_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4605_recIdents;
                            RAST._IExpr _out1126;
                            DCOMP._IOwnership _out1127;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1128;
                            DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1126, out _out1127, out _out1128);
                            _4603_recursiveGen = _out1126;
                            _4604_recOwned = _out1127;
                            _4605_recIdents = _out1128;
                            RAST._IExpr _out1129;
                            DCOMP._IOwnership _out1130;
                            DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_4603_recursiveGen, (_4581_nativeToType).dtor_value), _4604_recOwned, expectedOwnership, out _out1129, out _out1130);
                            r = _out1129;
                            resultingOwnership = _out1130;
                            readIdents = _4605_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source184.is_Nullable) {
                      DAST._IType _4606___mcc_h1666 = _source184.dtor_Nullable_a0;
                    } else if (_source184.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _4607___mcc_h1668 = _source184.dtor_Tuple_a0;
                    } else if (_source184.is_Array) {
                      DAST._IType _4608___mcc_h1670 = _source184.dtor_element;
                      BigInteger _4609___mcc_h1671 = _source184.dtor_dims;
                    } else if (_source184.is_Seq) {
                      DAST._IType _4610___mcc_h1674 = _source184.dtor_element;
                    } else if (_source184.is_Set) {
                      DAST._IType _4611___mcc_h1676 = _source184.dtor_element;
                    } else if (_source184.is_Multiset) {
                      DAST._IType _4612___mcc_h1678 = _source184.dtor_element;
                    } else if (_source184.is_Map) {
                      DAST._IType _4613___mcc_h1680 = _source184.dtor_key;
                      DAST._IType _4614___mcc_h1681 = _source184.dtor_value;
                    } else if (_source184.is_SetBuilder) {
                      DAST._IType _4615___mcc_h1684 = _source184.dtor_element;
                    } else if (_source184.is_MapBuilder) {
                      DAST._IType _4616___mcc_h1686 = _source184.dtor_key;
                      DAST._IType _4617___mcc_h1687 = _source184.dtor_value;
                    } else if (_source184.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _4618___mcc_h1690 = _source184.dtor_args;
                      DAST._IType _4619___mcc_h1691 = _source184.dtor_result;
                    } else if (_source184.is_Primitive) {
                      DAST._IPrimitive _4620___mcc_h1694 = _source184.dtor_Primitive_a0;
                    } else if (_source184.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _4621___mcc_h1696 = _source184.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _4622___mcc_h1698 = _source184.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_3461_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _4623_recursiveGen;
                      DCOMP._IOwnership _4624_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4625_recIdents;
                      RAST._IExpr _out1131;
                      DCOMP._IOwnership _out1132;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1133;
                      DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1131, out _out1132, out _out1133);
                      _4623_recursiveGen = _out1131;
                      _4624_recOwned = _out1132;
                      _4625_recIdents = _out1133;
                      RAST._IExpr _out1134;
                      DCOMP._IOwnership _out1135;
                      DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_4623_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_4581_nativeToType).dtor_value), _4624_recOwned, expectedOwnership, out _out1134, out _out1135);
                      r = _out1134;
                      resultingOwnership = _out1135;
                      readIdents = _4625_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out1136;
                  DCOMP._IOwnership _out1137;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1138;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3460_expr, _3461_fromTpe, _4580_b), _4580_b, _3462_toTpe), selfIdent, env, expectedOwnership, out _out1136, out _out1137, out _out1138);
                  r = _out1136;
                  resultingOwnership = _out1137;
                  readIdents = _out1138;
                }
              }
            }
          } else if (_source181.is_Nullable) {
            DAST._IType _4626___mcc_h578 = _source181.dtor_Nullable_a0;
            {
              RAST._IExpr _4627_recursiveGen;
              DCOMP._IOwnership _4628_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4629_recIdents;
              RAST._IExpr _out1139;
              DCOMP._IOwnership _out1140;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1141;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1139, out _out1140, out _out1141);
              _4627_recursiveGen = _out1139;
              _4628_recOwned = _out1140;
              _4629_recIdents = _out1141;
              r = _4627_recursiveGen;
              if (object.Equals(_4628_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out1142;
              DCOMP._IOwnership _out1143;
              DCOMP.COMP.FromOwnership(r, _4628_recOwned, expectedOwnership, out _out1142, out _out1143);
              r = _out1142;
              resultingOwnership = _out1143;
              readIdents = _4629_recIdents;
            }
          } else if (_source181.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4630___mcc_h580 = _source181.dtor_Tuple_a0;
            {
              RAST._IExpr _4631_recursiveGen;
              DCOMP._IOwnership _4632_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4633_recIdents;
              RAST._IExpr _out1144;
              DCOMP._IOwnership _out1145;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1146;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1144, out _out1145, out _out1146);
              _4631_recursiveGen = _out1144;
              _4632_recOwned = _out1145;
              _4633_recIdents = _out1146;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4631_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1147;
              DCOMP._IOwnership _out1148;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1147, out _out1148);
              r = _out1147;
              resultingOwnership = _out1148;
              readIdents = _4633_recIdents;
            }
          } else if (_source181.is_Array) {
            DAST._IType _4634___mcc_h582 = _source181.dtor_element;
            BigInteger _4635___mcc_h583 = _source181.dtor_dims;
            {
              RAST._IExpr _4636_recursiveGen;
              DCOMP._IOwnership _4637_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4638_recIdents;
              RAST._IExpr _out1149;
              DCOMP._IOwnership _out1150;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1151;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1149, out _out1150, out _out1151);
              _4636_recursiveGen = _out1149;
              _4637_recOwned = _out1150;
              _4638_recIdents = _out1151;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4636_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1152;
              DCOMP._IOwnership _out1153;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1152, out _out1153);
              r = _out1152;
              resultingOwnership = _out1153;
              readIdents = _4638_recIdents;
            }
          } else if (_source181.is_Seq) {
            DAST._IType _4639___mcc_h586 = _source181.dtor_element;
            {
              RAST._IExpr _4640_recursiveGen;
              DCOMP._IOwnership _4641_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4642_recIdents;
              RAST._IExpr _out1154;
              DCOMP._IOwnership _out1155;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1156;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1154, out _out1155, out _out1156);
              _4640_recursiveGen = _out1154;
              _4641_recOwned = _out1155;
              _4642_recIdents = _out1156;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4640_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1157;
              DCOMP._IOwnership _out1158;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1157, out _out1158);
              r = _out1157;
              resultingOwnership = _out1158;
              readIdents = _4642_recIdents;
            }
          } else if (_source181.is_Set) {
            DAST._IType _4643___mcc_h588 = _source181.dtor_element;
            {
              RAST._IExpr _4644_recursiveGen;
              DCOMP._IOwnership _4645_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4646_recIdents;
              RAST._IExpr _out1159;
              DCOMP._IOwnership _out1160;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1161;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1159, out _out1160, out _out1161);
              _4644_recursiveGen = _out1159;
              _4645_recOwned = _out1160;
              _4646_recIdents = _out1161;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4644_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1162;
              DCOMP._IOwnership _out1163;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1162, out _out1163);
              r = _out1162;
              resultingOwnership = _out1163;
              readIdents = _4646_recIdents;
            }
          } else if (_source181.is_Multiset) {
            DAST._IType _4647___mcc_h590 = _source181.dtor_element;
            {
              RAST._IExpr _4648_recursiveGen;
              DCOMP._IOwnership _4649_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4650_recIdents;
              RAST._IExpr _out1164;
              DCOMP._IOwnership _out1165;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1166;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1164, out _out1165, out _out1166);
              _4648_recursiveGen = _out1164;
              _4649_recOwned = _out1165;
              _4650_recIdents = _out1166;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4648_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1167;
              DCOMP._IOwnership _out1168;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1167, out _out1168);
              r = _out1167;
              resultingOwnership = _out1168;
              readIdents = _4650_recIdents;
            }
          } else if (_source181.is_Map) {
            DAST._IType _4651___mcc_h592 = _source181.dtor_key;
            DAST._IType _4652___mcc_h593 = _source181.dtor_value;
            {
              RAST._IExpr _4653_recursiveGen;
              DCOMP._IOwnership _4654_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4655_recIdents;
              RAST._IExpr _out1169;
              DCOMP._IOwnership _out1170;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1171;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1169, out _out1170, out _out1171);
              _4653_recursiveGen = _out1169;
              _4654_recOwned = _out1170;
              _4655_recIdents = _out1171;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4653_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1172;
              DCOMP._IOwnership _out1173;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1172, out _out1173);
              r = _out1172;
              resultingOwnership = _out1173;
              readIdents = _4655_recIdents;
            }
          } else if (_source181.is_SetBuilder) {
            DAST._IType _4656___mcc_h596 = _source181.dtor_element;
            {
              RAST._IExpr _4657_recursiveGen;
              DCOMP._IOwnership _4658_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4659_recIdents;
              RAST._IExpr _out1174;
              DCOMP._IOwnership _out1175;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1176;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1174, out _out1175, out _out1176);
              _4657_recursiveGen = _out1174;
              _4658_recOwned = _out1175;
              _4659_recIdents = _out1176;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4657_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1177;
              DCOMP._IOwnership _out1178;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1177, out _out1178);
              r = _out1177;
              resultingOwnership = _out1178;
              readIdents = _4659_recIdents;
            }
          } else if (_source181.is_MapBuilder) {
            DAST._IType _4660___mcc_h598 = _source181.dtor_key;
            DAST._IType _4661___mcc_h599 = _source181.dtor_value;
            {
              RAST._IExpr _4662_recursiveGen;
              DCOMP._IOwnership _4663_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4664_recIdents;
              RAST._IExpr _out1179;
              DCOMP._IOwnership _out1180;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1181;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1179, out _out1180, out _out1181);
              _4662_recursiveGen = _out1179;
              _4663_recOwned = _out1180;
              _4664_recIdents = _out1181;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4662_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1182;
              DCOMP._IOwnership _out1183;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1182, out _out1183);
              r = _out1182;
              resultingOwnership = _out1183;
              readIdents = _4664_recIdents;
            }
          } else if (_source181.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4665___mcc_h602 = _source181.dtor_args;
            DAST._IType _4666___mcc_h603 = _source181.dtor_result;
            {
              RAST._IExpr _4667_recursiveGen;
              DCOMP._IOwnership _4668_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4669_recIdents;
              RAST._IExpr _out1184;
              DCOMP._IOwnership _out1185;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1186;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1184, out _out1185, out _out1186);
              _4667_recursiveGen = _out1184;
              _4668_recOwned = _out1185;
              _4669_recIdents = _out1186;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4667_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1187;
              DCOMP._IOwnership _out1188;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1187, out _out1188);
              r = _out1187;
              resultingOwnership = _out1188;
              readIdents = _4669_recIdents;
            }
          } else if (_source181.is_Primitive) {
            DAST._IPrimitive _4670___mcc_h606 = _source181.dtor_Primitive_a0;
            {
              RAST._IExpr _4671_recursiveGen;
              DCOMP._IOwnership _4672_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4673_recIdents;
              RAST._IExpr _out1189;
              DCOMP._IOwnership _out1190;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1191;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1189, out _out1190, out _out1191);
              _4671_recursiveGen = _out1189;
              _4672_recOwned = _out1190;
              _4673_recIdents = _out1191;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4671_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1192;
              DCOMP._IOwnership _out1193;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1192, out _out1193);
              r = _out1192;
              resultingOwnership = _out1193;
              readIdents = _4673_recIdents;
            }
          } else if (_source181.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4674___mcc_h608 = _source181.dtor_Passthrough_a0;
            {
              RAST._IExpr _4675_recursiveGen;
              DCOMP._IOwnership _4676_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4677_recIdents;
              RAST._IExpr _out1194;
              DCOMP._IOwnership _out1195;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1196;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1194, out _out1195, out _out1196);
              _4675_recursiveGen = _out1194;
              _4676_recOwned = _out1195;
              _4677_recIdents = _out1196;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4675_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1197;
              DCOMP._IOwnership _out1198;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1197, out _out1198);
              r = _out1197;
              resultingOwnership = _out1198;
              readIdents = _4677_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4678___mcc_h610 = _source181.dtor_TypeArg_a0;
            {
              RAST._IExpr _4679_recursiveGen;
              DCOMP._IOwnership _4680_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4681_recIdents;
              RAST._IExpr _out1199;
              DCOMP._IOwnership _out1200;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1201;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1199, out _out1200, out _out1201);
              _4679_recursiveGen = _out1199;
              _4680_recOwned = _out1200;
              _4681_recIdents = _out1201;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4679_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1202;
              DCOMP._IOwnership _out1203;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1202, out _out1203);
              r = _out1202;
              resultingOwnership = _out1203;
              readIdents = _4681_recIdents;
            }
          }
        } else if (_source128.is_Map) {
          DAST._IType _4682___mcc_h612 = _source128.dtor_key;
          DAST._IType _4683___mcc_h613 = _source128.dtor_value;
          DAST._IType _source186 = _3467___mcc_h1;
          if (_source186.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4684___mcc_h620 = _source186.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _4685___mcc_h621 = _source186.dtor_typeArgs;
            DAST._IResolvedType _4686___mcc_h622 = _source186.dtor_resolved;
            DAST._IResolvedType _source187 = _4686___mcc_h622;
            if (_source187.is_Datatype) {
              DAST._IDatatypeType _4687___mcc_h626 = _source187.dtor_datatypeType;
              {
                RAST._IExpr _4688_recursiveGen;
                DCOMP._IOwnership _4689_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4690_recIdents;
                RAST._IExpr _out1204;
                DCOMP._IOwnership _out1205;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1206;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1204, out _out1205, out _out1206);
                _4688_recursiveGen = _out1204;
                _4689_recOwned = _out1205;
                _4690_recIdents = _out1206;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4688_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1207;
                DCOMP._IOwnership _out1208;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1207, out _out1208);
                r = _out1207;
                resultingOwnership = _out1208;
                readIdents = _4690_recIdents;
              }
            } else if (_source187.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4691___mcc_h628 = _source187.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4692___mcc_h629 = _source187.dtor_attributes;
              {
                RAST._IExpr _4693_recursiveGen;
                DCOMP._IOwnership _4694_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4695_recIdents;
                RAST._IExpr _out1209;
                DCOMP._IOwnership _out1210;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1211;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1209, out _out1210, out _out1211);
                _4693_recursiveGen = _out1209;
                _4694_recOwned = _out1210;
                _4695_recIdents = _out1211;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4693_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1212;
                DCOMP._IOwnership _out1213;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1212, out _out1213);
                r = _out1212;
                resultingOwnership = _out1213;
                readIdents = _4695_recIdents;
              }
            } else {
              DAST._IType _4696___mcc_h632 = _source187.dtor_baseType;
              DAST._INewtypeRange _4697___mcc_h633 = _source187.dtor_range;
              bool _4698___mcc_h634 = _source187.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4699___mcc_h635 = _source187.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4700_attributes = _4699___mcc_h635;
              bool _4701_erase = _4698___mcc_h634;
              DAST._INewtypeRange _4702_range = _4697___mcc_h633;
              DAST._IType _4703_b = _4696___mcc_h632;
              {
                Std.Wrappers._IOption<RAST._IType> _4704_nativeToType;
                _4704_nativeToType = DCOMP.COMP.NewtypeToRustType(_4703_b, _4702_range);
                if (object.Equals(_3461_fromTpe, _4703_b)) {
                  RAST._IExpr _4705_recursiveGen;
                  DCOMP._IOwnership _4706_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4707_recIdents;
                  RAST._IExpr _out1214;
                  DCOMP._IOwnership _out1215;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1216;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1214, out _out1215, out _out1216);
                  _4705_recursiveGen = _out1214;
                  _4706_recOwned = _out1215;
                  _4707_recIdents = _out1216;
                  Std.Wrappers._IOption<RAST._IType> _source188 = _4704_nativeToType;
                  if (_source188.is_None) {
                    if (_4701_erase) {
                      r = _4705_recursiveGen;
                    } else {
                      RAST._IType _4708_rhsType;
                      RAST._IType _out1217;
                      _out1217 = DCOMP.COMP.GenType(_3462_toTpe, true, false);
                      _4708_rhsType = _out1217;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4708_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4705_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out1218;
                    DCOMP._IOwnership _out1219;
                    DCOMP.COMP.FromOwnership(r, _4706_recOwned, expectedOwnership, out _out1218, out _out1219);
                    r = _out1218;
                    resultingOwnership = _out1219;
                  } else {
                    RAST._IType _4709___mcc_h1700 = _source188.dtor_value;
                    RAST._IType _4710_v = _4709___mcc_h1700;
                    r = (((_4705_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_4710_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out1220;
                    DCOMP._IOwnership _out1221;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1220, out _out1221);
                    r = _out1220;
                    resultingOwnership = _out1221;
                  }
                  readIdents = _4707_recIdents;
                } else {
                  if ((_4704_nativeToType).is_Some) {
                    DAST._IType _source189 = _3461_fromTpe;
                    if (_source189.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4711___mcc_h1701 = _source189.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _4712___mcc_h1702 = _source189.dtor_typeArgs;
                      DAST._IResolvedType _4713___mcc_h1703 = _source189.dtor_resolved;
                      DAST._IResolvedType _source190 = _4713___mcc_h1703;
                      if (_source190.is_Datatype) {
                        DAST._IDatatypeType _4714___mcc_h1707 = _source190.dtor_datatypeType;
                      } else if (_source190.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4715___mcc_h1709 = _source190.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _4716___mcc_h1710 = _source190.dtor_attributes;
                      } else {
                        DAST._IType _4717___mcc_h1713 = _source190.dtor_baseType;
                        DAST._INewtypeRange _4718___mcc_h1714 = _source190.dtor_range;
                        bool _4719___mcc_h1715 = _source190.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _4720___mcc_h1716 = _source190.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _4721_attributes0 = _4720___mcc_h1716;
                        bool _4722_erase0 = _4719___mcc_h1715;
                        DAST._INewtypeRange _4723_range0 = _4718___mcc_h1714;
                        DAST._IType _4724_b0 = _4717___mcc_h1713;
                        {
                          Std.Wrappers._IOption<RAST._IType> _4725_nativeFromType;
                          _4725_nativeFromType = DCOMP.COMP.NewtypeToRustType(_4724_b0, _4723_range0);
                          if ((_4725_nativeFromType).is_Some) {
                            RAST._IExpr _4726_recursiveGen;
                            DCOMP._IOwnership _4727_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4728_recIdents;
                            RAST._IExpr _out1222;
                            DCOMP._IOwnership _out1223;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1224;
                            DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1222, out _out1223, out _out1224);
                            _4726_recursiveGen = _out1222;
                            _4727_recOwned = _out1223;
                            _4728_recIdents = _out1224;
                            RAST._IExpr _out1225;
                            DCOMP._IOwnership _out1226;
                            DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_4726_recursiveGen, (_4704_nativeToType).dtor_value), _4727_recOwned, expectedOwnership, out _out1225, out _out1226);
                            r = _out1225;
                            resultingOwnership = _out1226;
                            readIdents = _4728_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source189.is_Nullable) {
                      DAST._IType _4729___mcc_h1721 = _source189.dtor_Nullable_a0;
                    } else if (_source189.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _4730___mcc_h1723 = _source189.dtor_Tuple_a0;
                    } else if (_source189.is_Array) {
                      DAST._IType _4731___mcc_h1725 = _source189.dtor_element;
                      BigInteger _4732___mcc_h1726 = _source189.dtor_dims;
                    } else if (_source189.is_Seq) {
                      DAST._IType _4733___mcc_h1729 = _source189.dtor_element;
                    } else if (_source189.is_Set) {
                      DAST._IType _4734___mcc_h1731 = _source189.dtor_element;
                    } else if (_source189.is_Multiset) {
                      DAST._IType _4735___mcc_h1733 = _source189.dtor_element;
                    } else if (_source189.is_Map) {
                      DAST._IType _4736___mcc_h1735 = _source189.dtor_key;
                      DAST._IType _4737___mcc_h1736 = _source189.dtor_value;
                    } else if (_source189.is_SetBuilder) {
                      DAST._IType _4738___mcc_h1739 = _source189.dtor_element;
                    } else if (_source189.is_MapBuilder) {
                      DAST._IType _4739___mcc_h1741 = _source189.dtor_key;
                      DAST._IType _4740___mcc_h1742 = _source189.dtor_value;
                    } else if (_source189.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _4741___mcc_h1745 = _source189.dtor_args;
                      DAST._IType _4742___mcc_h1746 = _source189.dtor_result;
                    } else if (_source189.is_Primitive) {
                      DAST._IPrimitive _4743___mcc_h1749 = _source189.dtor_Primitive_a0;
                    } else if (_source189.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _4744___mcc_h1751 = _source189.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _4745___mcc_h1753 = _source189.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_3461_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _4746_recursiveGen;
                      DCOMP._IOwnership _4747_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4748_recIdents;
                      RAST._IExpr _out1227;
                      DCOMP._IOwnership _out1228;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1229;
                      DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1227, out _out1228, out _out1229);
                      _4746_recursiveGen = _out1227;
                      _4747_recOwned = _out1228;
                      _4748_recIdents = _out1229;
                      RAST._IExpr _out1230;
                      DCOMP._IOwnership _out1231;
                      DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_4746_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_4704_nativeToType).dtor_value), _4747_recOwned, expectedOwnership, out _out1230, out _out1231);
                      r = _out1230;
                      resultingOwnership = _out1231;
                      readIdents = _4748_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out1232;
                  DCOMP._IOwnership _out1233;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1234;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3460_expr, _3461_fromTpe, _4703_b), _4703_b, _3462_toTpe), selfIdent, env, expectedOwnership, out _out1232, out _out1233, out _out1234);
                  r = _out1232;
                  resultingOwnership = _out1233;
                  readIdents = _out1234;
                }
              }
            }
          } else if (_source186.is_Nullable) {
            DAST._IType _4749___mcc_h640 = _source186.dtor_Nullable_a0;
            {
              RAST._IExpr _4750_recursiveGen;
              DCOMP._IOwnership _4751_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4752_recIdents;
              RAST._IExpr _out1235;
              DCOMP._IOwnership _out1236;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1237;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1235, out _out1236, out _out1237);
              _4750_recursiveGen = _out1235;
              _4751_recOwned = _out1236;
              _4752_recIdents = _out1237;
              r = _4750_recursiveGen;
              if (object.Equals(_4751_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out1238;
              DCOMP._IOwnership _out1239;
              DCOMP.COMP.FromOwnership(r, _4751_recOwned, expectedOwnership, out _out1238, out _out1239);
              r = _out1238;
              resultingOwnership = _out1239;
              readIdents = _4752_recIdents;
            }
          } else if (_source186.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4753___mcc_h642 = _source186.dtor_Tuple_a0;
            {
              RAST._IExpr _4754_recursiveGen;
              DCOMP._IOwnership _4755_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4756_recIdents;
              RAST._IExpr _out1240;
              DCOMP._IOwnership _out1241;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1242;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1240, out _out1241, out _out1242);
              _4754_recursiveGen = _out1240;
              _4755_recOwned = _out1241;
              _4756_recIdents = _out1242;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4754_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1243;
              DCOMP._IOwnership _out1244;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1243, out _out1244);
              r = _out1243;
              resultingOwnership = _out1244;
              readIdents = _4756_recIdents;
            }
          } else if (_source186.is_Array) {
            DAST._IType _4757___mcc_h644 = _source186.dtor_element;
            BigInteger _4758___mcc_h645 = _source186.dtor_dims;
            {
              RAST._IExpr _4759_recursiveGen;
              DCOMP._IOwnership _4760_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4761_recIdents;
              RAST._IExpr _out1245;
              DCOMP._IOwnership _out1246;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1247;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1245, out _out1246, out _out1247);
              _4759_recursiveGen = _out1245;
              _4760_recOwned = _out1246;
              _4761_recIdents = _out1247;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4759_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1248;
              DCOMP._IOwnership _out1249;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1248, out _out1249);
              r = _out1248;
              resultingOwnership = _out1249;
              readIdents = _4761_recIdents;
            }
          } else if (_source186.is_Seq) {
            DAST._IType _4762___mcc_h648 = _source186.dtor_element;
            {
              RAST._IExpr _4763_recursiveGen;
              DCOMP._IOwnership _4764_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4765_recIdents;
              RAST._IExpr _out1250;
              DCOMP._IOwnership _out1251;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1252;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1250, out _out1251, out _out1252);
              _4763_recursiveGen = _out1250;
              _4764_recOwned = _out1251;
              _4765_recIdents = _out1252;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4763_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1253;
              DCOMP._IOwnership _out1254;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1253, out _out1254);
              r = _out1253;
              resultingOwnership = _out1254;
              readIdents = _4765_recIdents;
            }
          } else if (_source186.is_Set) {
            DAST._IType _4766___mcc_h650 = _source186.dtor_element;
            {
              RAST._IExpr _4767_recursiveGen;
              DCOMP._IOwnership _4768_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4769_recIdents;
              RAST._IExpr _out1255;
              DCOMP._IOwnership _out1256;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1257;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1255, out _out1256, out _out1257);
              _4767_recursiveGen = _out1255;
              _4768_recOwned = _out1256;
              _4769_recIdents = _out1257;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4767_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1258;
              DCOMP._IOwnership _out1259;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1258, out _out1259);
              r = _out1258;
              resultingOwnership = _out1259;
              readIdents = _4769_recIdents;
            }
          } else if (_source186.is_Multiset) {
            DAST._IType _4770___mcc_h652 = _source186.dtor_element;
            {
              RAST._IExpr _4771_recursiveGen;
              DCOMP._IOwnership _4772_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4773_recIdents;
              RAST._IExpr _out1260;
              DCOMP._IOwnership _out1261;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1262;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1260, out _out1261, out _out1262);
              _4771_recursiveGen = _out1260;
              _4772_recOwned = _out1261;
              _4773_recIdents = _out1262;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4771_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1263;
              DCOMP._IOwnership _out1264;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1263, out _out1264);
              r = _out1263;
              resultingOwnership = _out1264;
              readIdents = _4773_recIdents;
            }
          } else if (_source186.is_Map) {
            DAST._IType _4774___mcc_h654 = _source186.dtor_key;
            DAST._IType _4775___mcc_h655 = _source186.dtor_value;
            {
              RAST._IExpr _4776_recursiveGen;
              DCOMP._IOwnership _4777_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4778_recIdents;
              RAST._IExpr _out1265;
              DCOMP._IOwnership _out1266;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1267;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1265, out _out1266, out _out1267);
              _4776_recursiveGen = _out1265;
              _4777_recOwned = _out1266;
              _4778_recIdents = _out1267;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4776_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1268;
              DCOMP._IOwnership _out1269;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1268, out _out1269);
              r = _out1268;
              resultingOwnership = _out1269;
              readIdents = _4778_recIdents;
            }
          } else if (_source186.is_SetBuilder) {
            DAST._IType _4779___mcc_h658 = _source186.dtor_element;
            {
              RAST._IExpr _4780_recursiveGen;
              DCOMP._IOwnership _4781_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4782_recIdents;
              RAST._IExpr _out1270;
              DCOMP._IOwnership _out1271;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1272;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1270, out _out1271, out _out1272);
              _4780_recursiveGen = _out1270;
              _4781_recOwned = _out1271;
              _4782_recIdents = _out1272;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4780_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1273;
              DCOMP._IOwnership _out1274;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1273, out _out1274);
              r = _out1273;
              resultingOwnership = _out1274;
              readIdents = _4782_recIdents;
            }
          } else if (_source186.is_MapBuilder) {
            DAST._IType _4783___mcc_h660 = _source186.dtor_key;
            DAST._IType _4784___mcc_h661 = _source186.dtor_value;
            {
              RAST._IExpr _4785_recursiveGen;
              DCOMP._IOwnership _4786_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4787_recIdents;
              RAST._IExpr _out1275;
              DCOMP._IOwnership _out1276;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1277;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1275, out _out1276, out _out1277);
              _4785_recursiveGen = _out1275;
              _4786_recOwned = _out1276;
              _4787_recIdents = _out1277;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4785_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1278;
              DCOMP._IOwnership _out1279;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1278, out _out1279);
              r = _out1278;
              resultingOwnership = _out1279;
              readIdents = _4787_recIdents;
            }
          } else if (_source186.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4788___mcc_h664 = _source186.dtor_args;
            DAST._IType _4789___mcc_h665 = _source186.dtor_result;
            {
              RAST._IExpr _4790_recursiveGen;
              DCOMP._IOwnership _4791_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4792_recIdents;
              RAST._IExpr _out1280;
              DCOMP._IOwnership _out1281;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1282;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1280, out _out1281, out _out1282);
              _4790_recursiveGen = _out1280;
              _4791_recOwned = _out1281;
              _4792_recIdents = _out1282;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4790_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1283;
              DCOMP._IOwnership _out1284;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1283, out _out1284);
              r = _out1283;
              resultingOwnership = _out1284;
              readIdents = _4792_recIdents;
            }
          } else if (_source186.is_Primitive) {
            DAST._IPrimitive _4793___mcc_h668 = _source186.dtor_Primitive_a0;
            {
              RAST._IExpr _4794_recursiveGen;
              DCOMP._IOwnership _4795_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4796_recIdents;
              RAST._IExpr _out1285;
              DCOMP._IOwnership _out1286;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1287;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1285, out _out1286, out _out1287);
              _4794_recursiveGen = _out1285;
              _4795_recOwned = _out1286;
              _4796_recIdents = _out1287;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4794_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1288;
              DCOMP._IOwnership _out1289;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1288, out _out1289);
              r = _out1288;
              resultingOwnership = _out1289;
              readIdents = _4796_recIdents;
            }
          } else if (_source186.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4797___mcc_h670 = _source186.dtor_Passthrough_a0;
            {
              RAST._IExpr _4798_recursiveGen;
              DCOMP._IOwnership _4799_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4800_recIdents;
              RAST._IExpr _out1290;
              DCOMP._IOwnership _out1291;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1292;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1290, out _out1291, out _out1292);
              _4798_recursiveGen = _out1290;
              _4799_recOwned = _out1291;
              _4800_recIdents = _out1292;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4798_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1293;
              DCOMP._IOwnership _out1294;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1293, out _out1294);
              r = _out1293;
              resultingOwnership = _out1294;
              readIdents = _4800_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4801___mcc_h672 = _source186.dtor_TypeArg_a0;
            {
              RAST._IExpr _4802_recursiveGen;
              DCOMP._IOwnership _4803_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4804_recIdents;
              RAST._IExpr _out1295;
              DCOMP._IOwnership _out1296;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1297;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1295, out _out1296, out _out1297);
              _4802_recursiveGen = _out1295;
              _4803_recOwned = _out1296;
              _4804_recIdents = _out1297;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4802_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1298;
              DCOMP._IOwnership _out1299;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1298, out _out1299);
              r = _out1298;
              resultingOwnership = _out1299;
              readIdents = _4804_recIdents;
            }
          }
        } else if (_source128.is_SetBuilder) {
          DAST._IType _4805___mcc_h674 = _source128.dtor_element;
          DAST._IType _source191 = _3467___mcc_h1;
          if (_source191.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4806___mcc_h678 = _source191.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _4807___mcc_h679 = _source191.dtor_typeArgs;
            DAST._IResolvedType _4808___mcc_h680 = _source191.dtor_resolved;
            DAST._IResolvedType _source192 = _4808___mcc_h680;
            if (_source192.is_Datatype) {
              DAST._IDatatypeType _4809___mcc_h684 = _source192.dtor_datatypeType;
              {
                RAST._IExpr _4810_recursiveGen;
                DCOMP._IOwnership _4811_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4812_recIdents;
                RAST._IExpr _out1300;
                DCOMP._IOwnership _out1301;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1302;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1300, out _out1301, out _out1302);
                _4810_recursiveGen = _out1300;
                _4811_recOwned = _out1301;
                _4812_recIdents = _out1302;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4810_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1303;
                DCOMP._IOwnership _out1304;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1303, out _out1304);
                r = _out1303;
                resultingOwnership = _out1304;
                readIdents = _4812_recIdents;
              }
            } else if (_source192.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4813___mcc_h686 = _source192.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4814___mcc_h687 = _source192.dtor_attributes;
              {
                RAST._IExpr _4815_recursiveGen;
                DCOMP._IOwnership _4816_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4817_recIdents;
                RAST._IExpr _out1305;
                DCOMP._IOwnership _out1306;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1307;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1305, out _out1306, out _out1307);
                _4815_recursiveGen = _out1305;
                _4816_recOwned = _out1306;
                _4817_recIdents = _out1307;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4815_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1308;
                DCOMP._IOwnership _out1309;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1308, out _out1309);
                r = _out1308;
                resultingOwnership = _out1309;
                readIdents = _4817_recIdents;
              }
            } else {
              DAST._IType _4818___mcc_h690 = _source192.dtor_baseType;
              DAST._INewtypeRange _4819___mcc_h691 = _source192.dtor_range;
              bool _4820___mcc_h692 = _source192.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4821___mcc_h693 = _source192.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4822_attributes = _4821___mcc_h693;
              bool _4823_erase = _4820___mcc_h692;
              DAST._INewtypeRange _4824_range = _4819___mcc_h691;
              DAST._IType _4825_b = _4818___mcc_h690;
              {
                Std.Wrappers._IOption<RAST._IType> _4826_nativeToType;
                _4826_nativeToType = DCOMP.COMP.NewtypeToRustType(_4825_b, _4824_range);
                if (object.Equals(_3461_fromTpe, _4825_b)) {
                  RAST._IExpr _4827_recursiveGen;
                  DCOMP._IOwnership _4828_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4829_recIdents;
                  RAST._IExpr _out1310;
                  DCOMP._IOwnership _out1311;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1312;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1310, out _out1311, out _out1312);
                  _4827_recursiveGen = _out1310;
                  _4828_recOwned = _out1311;
                  _4829_recIdents = _out1312;
                  Std.Wrappers._IOption<RAST._IType> _source193 = _4826_nativeToType;
                  if (_source193.is_None) {
                    if (_4823_erase) {
                      r = _4827_recursiveGen;
                    } else {
                      RAST._IType _4830_rhsType;
                      RAST._IType _out1313;
                      _out1313 = DCOMP.COMP.GenType(_3462_toTpe, true, false);
                      _4830_rhsType = _out1313;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4830_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4827_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out1314;
                    DCOMP._IOwnership _out1315;
                    DCOMP.COMP.FromOwnership(r, _4828_recOwned, expectedOwnership, out _out1314, out _out1315);
                    r = _out1314;
                    resultingOwnership = _out1315;
                  } else {
                    RAST._IType _4831___mcc_h1755 = _source193.dtor_value;
                    RAST._IType _4832_v = _4831___mcc_h1755;
                    r = (((_4827_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_4832_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out1316;
                    DCOMP._IOwnership _out1317;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1316, out _out1317);
                    r = _out1316;
                    resultingOwnership = _out1317;
                  }
                  readIdents = _4829_recIdents;
                } else {
                  if ((_4826_nativeToType).is_Some) {
                    DAST._IType _source194 = _3461_fromTpe;
                    if (_source194.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4833___mcc_h1756 = _source194.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _4834___mcc_h1757 = _source194.dtor_typeArgs;
                      DAST._IResolvedType _4835___mcc_h1758 = _source194.dtor_resolved;
                      DAST._IResolvedType _source195 = _4835___mcc_h1758;
                      if (_source195.is_Datatype) {
                        DAST._IDatatypeType _4836___mcc_h1762 = _source195.dtor_datatypeType;
                      } else if (_source195.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4837___mcc_h1764 = _source195.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _4838___mcc_h1765 = _source195.dtor_attributes;
                      } else {
                        DAST._IType _4839___mcc_h1768 = _source195.dtor_baseType;
                        DAST._INewtypeRange _4840___mcc_h1769 = _source195.dtor_range;
                        bool _4841___mcc_h1770 = _source195.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _4842___mcc_h1771 = _source195.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _4843_attributes0 = _4842___mcc_h1771;
                        bool _4844_erase0 = _4841___mcc_h1770;
                        DAST._INewtypeRange _4845_range0 = _4840___mcc_h1769;
                        DAST._IType _4846_b0 = _4839___mcc_h1768;
                        {
                          Std.Wrappers._IOption<RAST._IType> _4847_nativeFromType;
                          _4847_nativeFromType = DCOMP.COMP.NewtypeToRustType(_4846_b0, _4845_range0);
                          if ((_4847_nativeFromType).is_Some) {
                            RAST._IExpr _4848_recursiveGen;
                            DCOMP._IOwnership _4849_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4850_recIdents;
                            RAST._IExpr _out1318;
                            DCOMP._IOwnership _out1319;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1320;
                            DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1318, out _out1319, out _out1320);
                            _4848_recursiveGen = _out1318;
                            _4849_recOwned = _out1319;
                            _4850_recIdents = _out1320;
                            RAST._IExpr _out1321;
                            DCOMP._IOwnership _out1322;
                            DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_4848_recursiveGen, (_4826_nativeToType).dtor_value), _4849_recOwned, expectedOwnership, out _out1321, out _out1322);
                            r = _out1321;
                            resultingOwnership = _out1322;
                            readIdents = _4850_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source194.is_Nullable) {
                      DAST._IType _4851___mcc_h1776 = _source194.dtor_Nullable_a0;
                    } else if (_source194.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _4852___mcc_h1778 = _source194.dtor_Tuple_a0;
                    } else if (_source194.is_Array) {
                      DAST._IType _4853___mcc_h1780 = _source194.dtor_element;
                      BigInteger _4854___mcc_h1781 = _source194.dtor_dims;
                    } else if (_source194.is_Seq) {
                      DAST._IType _4855___mcc_h1784 = _source194.dtor_element;
                    } else if (_source194.is_Set) {
                      DAST._IType _4856___mcc_h1786 = _source194.dtor_element;
                    } else if (_source194.is_Multiset) {
                      DAST._IType _4857___mcc_h1788 = _source194.dtor_element;
                    } else if (_source194.is_Map) {
                      DAST._IType _4858___mcc_h1790 = _source194.dtor_key;
                      DAST._IType _4859___mcc_h1791 = _source194.dtor_value;
                    } else if (_source194.is_SetBuilder) {
                      DAST._IType _4860___mcc_h1794 = _source194.dtor_element;
                    } else if (_source194.is_MapBuilder) {
                      DAST._IType _4861___mcc_h1796 = _source194.dtor_key;
                      DAST._IType _4862___mcc_h1797 = _source194.dtor_value;
                    } else if (_source194.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _4863___mcc_h1800 = _source194.dtor_args;
                      DAST._IType _4864___mcc_h1801 = _source194.dtor_result;
                    } else if (_source194.is_Primitive) {
                      DAST._IPrimitive _4865___mcc_h1804 = _source194.dtor_Primitive_a0;
                    } else if (_source194.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _4866___mcc_h1806 = _source194.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _4867___mcc_h1808 = _source194.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_3461_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _4868_recursiveGen;
                      DCOMP._IOwnership _4869_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4870_recIdents;
                      RAST._IExpr _out1323;
                      DCOMP._IOwnership _out1324;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1325;
                      DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1323, out _out1324, out _out1325);
                      _4868_recursiveGen = _out1323;
                      _4869_recOwned = _out1324;
                      _4870_recIdents = _out1325;
                      RAST._IExpr _out1326;
                      DCOMP._IOwnership _out1327;
                      DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_4868_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_4826_nativeToType).dtor_value), _4869_recOwned, expectedOwnership, out _out1326, out _out1327);
                      r = _out1326;
                      resultingOwnership = _out1327;
                      readIdents = _4870_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out1328;
                  DCOMP._IOwnership _out1329;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1330;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3460_expr, _3461_fromTpe, _4825_b), _4825_b, _3462_toTpe), selfIdent, env, expectedOwnership, out _out1328, out _out1329, out _out1330);
                  r = _out1328;
                  resultingOwnership = _out1329;
                  readIdents = _out1330;
                }
              }
            }
          } else if (_source191.is_Nullable) {
            DAST._IType _4871___mcc_h698 = _source191.dtor_Nullable_a0;
            {
              RAST._IExpr _4872_recursiveGen;
              DCOMP._IOwnership _4873_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4874_recIdents;
              RAST._IExpr _out1331;
              DCOMP._IOwnership _out1332;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1333;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1331, out _out1332, out _out1333);
              _4872_recursiveGen = _out1331;
              _4873_recOwned = _out1332;
              _4874_recIdents = _out1333;
              r = _4872_recursiveGen;
              if (object.Equals(_4873_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out1334;
              DCOMP._IOwnership _out1335;
              DCOMP.COMP.FromOwnership(r, _4873_recOwned, expectedOwnership, out _out1334, out _out1335);
              r = _out1334;
              resultingOwnership = _out1335;
              readIdents = _4874_recIdents;
            }
          } else if (_source191.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4875___mcc_h700 = _source191.dtor_Tuple_a0;
            {
              RAST._IExpr _4876_recursiveGen;
              DCOMP._IOwnership _4877_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4878_recIdents;
              RAST._IExpr _out1336;
              DCOMP._IOwnership _out1337;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1338;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1336, out _out1337, out _out1338);
              _4876_recursiveGen = _out1336;
              _4877_recOwned = _out1337;
              _4878_recIdents = _out1338;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4876_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1339;
              DCOMP._IOwnership _out1340;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1339, out _out1340);
              r = _out1339;
              resultingOwnership = _out1340;
              readIdents = _4878_recIdents;
            }
          } else if (_source191.is_Array) {
            DAST._IType _4879___mcc_h702 = _source191.dtor_element;
            BigInteger _4880___mcc_h703 = _source191.dtor_dims;
            {
              RAST._IExpr _4881_recursiveGen;
              DCOMP._IOwnership _4882_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4883_recIdents;
              RAST._IExpr _out1341;
              DCOMP._IOwnership _out1342;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1343;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1341, out _out1342, out _out1343);
              _4881_recursiveGen = _out1341;
              _4882_recOwned = _out1342;
              _4883_recIdents = _out1343;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4881_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1344;
              DCOMP._IOwnership _out1345;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1344, out _out1345);
              r = _out1344;
              resultingOwnership = _out1345;
              readIdents = _4883_recIdents;
            }
          } else if (_source191.is_Seq) {
            DAST._IType _4884___mcc_h706 = _source191.dtor_element;
            {
              RAST._IExpr _4885_recursiveGen;
              DCOMP._IOwnership _4886_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4887_recIdents;
              RAST._IExpr _out1346;
              DCOMP._IOwnership _out1347;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1348;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1346, out _out1347, out _out1348);
              _4885_recursiveGen = _out1346;
              _4886_recOwned = _out1347;
              _4887_recIdents = _out1348;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4885_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1349;
              DCOMP._IOwnership _out1350;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1349, out _out1350);
              r = _out1349;
              resultingOwnership = _out1350;
              readIdents = _4887_recIdents;
            }
          } else if (_source191.is_Set) {
            DAST._IType _4888___mcc_h708 = _source191.dtor_element;
            {
              RAST._IExpr _4889_recursiveGen;
              DCOMP._IOwnership _4890_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4891_recIdents;
              RAST._IExpr _out1351;
              DCOMP._IOwnership _out1352;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1353;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1351, out _out1352, out _out1353);
              _4889_recursiveGen = _out1351;
              _4890_recOwned = _out1352;
              _4891_recIdents = _out1353;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4889_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1354;
              DCOMP._IOwnership _out1355;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1354, out _out1355);
              r = _out1354;
              resultingOwnership = _out1355;
              readIdents = _4891_recIdents;
            }
          } else if (_source191.is_Multiset) {
            DAST._IType _4892___mcc_h710 = _source191.dtor_element;
            {
              RAST._IExpr _4893_recursiveGen;
              DCOMP._IOwnership _4894_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4895_recIdents;
              RAST._IExpr _out1356;
              DCOMP._IOwnership _out1357;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1358;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1356, out _out1357, out _out1358);
              _4893_recursiveGen = _out1356;
              _4894_recOwned = _out1357;
              _4895_recIdents = _out1358;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4893_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1359;
              DCOMP._IOwnership _out1360;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1359, out _out1360);
              r = _out1359;
              resultingOwnership = _out1360;
              readIdents = _4895_recIdents;
            }
          } else if (_source191.is_Map) {
            DAST._IType _4896___mcc_h712 = _source191.dtor_key;
            DAST._IType _4897___mcc_h713 = _source191.dtor_value;
            {
              RAST._IExpr _4898_recursiveGen;
              DCOMP._IOwnership _4899_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4900_recIdents;
              RAST._IExpr _out1361;
              DCOMP._IOwnership _out1362;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1363;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1361, out _out1362, out _out1363);
              _4898_recursiveGen = _out1361;
              _4899_recOwned = _out1362;
              _4900_recIdents = _out1363;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4898_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1364;
              DCOMP._IOwnership _out1365;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1364, out _out1365);
              r = _out1364;
              resultingOwnership = _out1365;
              readIdents = _4900_recIdents;
            }
          } else if (_source191.is_SetBuilder) {
            DAST._IType _4901___mcc_h716 = _source191.dtor_element;
            {
              RAST._IExpr _4902_recursiveGen;
              DCOMP._IOwnership _4903_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4904_recIdents;
              RAST._IExpr _out1366;
              DCOMP._IOwnership _out1367;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1368;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1366, out _out1367, out _out1368);
              _4902_recursiveGen = _out1366;
              _4903_recOwned = _out1367;
              _4904_recIdents = _out1368;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4902_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1369;
              DCOMP._IOwnership _out1370;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1369, out _out1370);
              r = _out1369;
              resultingOwnership = _out1370;
              readIdents = _4904_recIdents;
            }
          } else if (_source191.is_MapBuilder) {
            DAST._IType _4905___mcc_h718 = _source191.dtor_key;
            DAST._IType _4906___mcc_h719 = _source191.dtor_value;
            {
              RAST._IExpr _4907_recursiveGen;
              DCOMP._IOwnership _4908_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4909_recIdents;
              RAST._IExpr _out1371;
              DCOMP._IOwnership _out1372;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1373;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1371, out _out1372, out _out1373);
              _4907_recursiveGen = _out1371;
              _4908_recOwned = _out1372;
              _4909_recIdents = _out1373;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4907_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1374;
              DCOMP._IOwnership _out1375;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1374, out _out1375);
              r = _out1374;
              resultingOwnership = _out1375;
              readIdents = _4909_recIdents;
            }
          } else if (_source191.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4910___mcc_h722 = _source191.dtor_args;
            DAST._IType _4911___mcc_h723 = _source191.dtor_result;
            {
              RAST._IExpr _4912_recursiveGen;
              DCOMP._IOwnership _4913_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4914_recIdents;
              RAST._IExpr _out1376;
              DCOMP._IOwnership _out1377;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1378;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1376, out _out1377, out _out1378);
              _4912_recursiveGen = _out1376;
              _4913_recOwned = _out1377;
              _4914_recIdents = _out1378;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4912_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1379;
              DCOMP._IOwnership _out1380;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1379, out _out1380);
              r = _out1379;
              resultingOwnership = _out1380;
              readIdents = _4914_recIdents;
            }
          } else if (_source191.is_Primitive) {
            DAST._IPrimitive _4915___mcc_h726 = _source191.dtor_Primitive_a0;
            {
              RAST._IExpr _4916_recursiveGen;
              DCOMP._IOwnership _4917_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4918_recIdents;
              RAST._IExpr _out1381;
              DCOMP._IOwnership _out1382;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1383;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1381, out _out1382, out _out1383);
              _4916_recursiveGen = _out1381;
              _4917_recOwned = _out1382;
              _4918_recIdents = _out1383;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4916_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1384;
              DCOMP._IOwnership _out1385;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1384, out _out1385);
              r = _out1384;
              resultingOwnership = _out1385;
              readIdents = _4918_recIdents;
            }
          } else if (_source191.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4919___mcc_h728 = _source191.dtor_Passthrough_a0;
            {
              RAST._IExpr _4920_recursiveGen;
              DCOMP._IOwnership _4921_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4922_recIdents;
              RAST._IExpr _out1386;
              DCOMP._IOwnership _out1387;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1388;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1386, out _out1387, out _out1388);
              _4920_recursiveGen = _out1386;
              _4921_recOwned = _out1387;
              _4922_recIdents = _out1388;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4920_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1389;
              DCOMP._IOwnership _out1390;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1389, out _out1390);
              r = _out1389;
              resultingOwnership = _out1390;
              readIdents = _4922_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4923___mcc_h730 = _source191.dtor_TypeArg_a0;
            {
              RAST._IExpr _4924_recursiveGen;
              DCOMP._IOwnership _4925_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4926_recIdents;
              RAST._IExpr _out1391;
              DCOMP._IOwnership _out1392;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1393;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1391, out _out1392, out _out1393);
              _4924_recursiveGen = _out1391;
              _4925_recOwned = _out1392;
              _4926_recIdents = _out1393;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4924_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1394;
              DCOMP._IOwnership _out1395;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1394, out _out1395);
              r = _out1394;
              resultingOwnership = _out1395;
              readIdents = _4926_recIdents;
            }
          }
        } else if (_source128.is_MapBuilder) {
          DAST._IType _4927___mcc_h732 = _source128.dtor_key;
          DAST._IType _4928___mcc_h733 = _source128.dtor_value;
          DAST._IType _source196 = _3467___mcc_h1;
          if (_source196.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4929___mcc_h740 = _source196.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _4930___mcc_h741 = _source196.dtor_typeArgs;
            DAST._IResolvedType _4931___mcc_h742 = _source196.dtor_resolved;
            DAST._IResolvedType _source197 = _4931___mcc_h742;
            if (_source197.is_Datatype) {
              DAST._IDatatypeType _4932___mcc_h746 = _source197.dtor_datatypeType;
              {
                RAST._IExpr _4933_recursiveGen;
                DCOMP._IOwnership _4934_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4935_recIdents;
                RAST._IExpr _out1396;
                DCOMP._IOwnership _out1397;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1398;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1396, out _out1397, out _out1398);
                _4933_recursiveGen = _out1396;
                _4934_recOwned = _out1397;
                _4935_recIdents = _out1398;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4933_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1399;
                DCOMP._IOwnership _out1400;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1399, out _out1400);
                r = _out1399;
                resultingOwnership = _out1400;
                readIdents = _4935_recIdents;
              }
            } else if (_source197.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4936___mcc_h748 = _source197.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4937___mcc_h749 = _source197.dtor_attributes;
              {
                RAST._IExpr _4938_recursiveGen;
                DCOMP._IOwnership _4939_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4940_recIdents;
                RAST._IExpr _out1401;
                DCOMP._IOwnership _out1402;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1403;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1401, out _out1402, out _out1403);
                _4938_recursiveGen = _out1401;
                _4939_recOwned = _out1402;
                _4940_recIdents = _out1403;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4938_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1404;
                DCOMP._IOwnership _out1405;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1404, out _out1405);
                r = _out1404;
                resultingOwnership = _out1405;
                readIdents = _4940_recIdents;
              }
            } else {
              DAST._IType _4941___mcc_h752 = _source197.dtor_baseType;
              DAST._INewtypeRange _4942___mcc_h753 = _source197.dtor_range;
              bool _4943___mcc_h754 = _source197.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4944___mcc_h755 = _source197.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4945_attributes = _4944___mcc_h755;
              bool _4946_erase = _4943___mcc_h754;
              DAST._INewtypeRange _4947_range = _4942___mcc_h753;
              DAST._IType _4948_b = _4941___mcc_h752;
              {
                Std.Wrappers._IOption<RAST._IType> _4949_nativeToType;
                _4949_nativeToType = DCOMP.COMP.NewtypeToRustType(_4948_b, _4947_range);
                if (object.Equals(_3461_fromTpe, _4948_b)) {
                  RAST._IExpr _4950_recursiveGen;
                  DCOMP._IOwnership _4951_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4952_recIdents;
                  RAST._IExpr _out1406;
                  DCOMP._IOwnership _out1407;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1408;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1406, out _out1407, out _out1408);
                  _4950_recursiveGen = _out1406;
                  _4951_recOwned = _out1407;
                  _4952_recIdents = _out1408;
                  Std.Wrappers._IOption<RAST._IType> _source198 = _4949_nativeToType;
                  if (_source198.is_None) {
                    if (_4946_erase) {
                      r = _4950_recursiveGen;
                    } else {
                      RAST._IType _4953_rhsType;
                      RAST._IType _out1409;
                      _out1409 = DCOMP.COMP.GenType(_3462_toTpe, true, false);
                      _4953_rhsType = _out1409;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4953_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4950_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out1410;
                    DCOMP._IOwnership _out1411;
                    DCOMP.COMP.FromOwnership(r, _4951_recOwned, expectedOwnership, out _out1410, out _out1411);
                    r = _out1410;
                    resultingOwnership = _out1411;
                  } else {
                    RAST._IType _4954___mcc_h1810 = _source198.dtor_value;
                    RAST._IType _4955_v = _4954___mcc_h1810;
                    r = (((_4950_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_4955_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out1412;
                    DCOMP._IOwnership _out1413;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1412, out _out1413);
                    r = _out1412;
                    resultingOwnership = _out1413;
                  }
                  readIdents = _4952_recIdents;
                } else {
                  if ((_4949_nativeToType).is_Some) {
                    DAST._IType _source199 = _3461_fromTpe;
                    if (_source199.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4956___mcc_h1811 = _source199.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _4957___mcc_h1812 = _source199.dtor_typeArgs;
                      DAST._IResolvedType _4958___mcc_h1813 = _source199.dtor_resolved;
                      DAST._IResolvedType _source200 = _4958___mcc_h1813;
                      if (_source200.is_Datatype) {
                        DAST._IDatatypeType _4959___mcc_h1817 = _source200.dtor_datatypeType;
                      } else if (_source200.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4960___mcc_h1819 = _source200.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _4961___mcc_h1820 = _source200.dtor_attributes;
                      } else {
                        DAST._IType _4962___mcc_h1823 = _source200.dtor_baseType;
                        DAST._INewtypeRange _4963___mcc_h1824 = _source200.dtor_range;
                        bool _4964___mcc_h1825 = _source200.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _4965___mcc_h1826 = _source200.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _4966_attributes0 = _4965___mcc_h1826;
                        bool _4967_erase0 = _4964___mcc_h1825;
                        DAST._INewtypeRange _4968_range0 = _4963___mcc_h1824;
                        DAST._IType _4969_b0 = _4962___mcc_h1823;
                        {
                          Std.Wrappers._IOption<RAST._IType> _4970_nativeFromType;
                          _4970_nativeFromType = DCOMP.COMP.NewtypeToRustType(_4969_b0, _4968_range0);
                          if ((_4970_nativeFromType).is_Some) {
                            RAST._IExpr _4971_recursiveGen;
                            DCOMP._IOwnership _4972_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4973_recIdents;
                            RAST._IExpr _out1414;
                            DCOMP._IOwnership _out1415;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1416;
                            DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1414, out _out1415, out _out1416);
                            _4971_recursiveGen = _out1414;
                            _4972_recOwned = _out1415;
                            _4973_recIdents = _out1416;
                            RAST._IExpr _out1417;
                            DCOMP._IOwnership _out1418;
                            DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_4971_recursiveGen, (_4949_nativeToType).dtor_value), _4972_recOwned, expectedOwnership, out _out1417, out _out1418);
                            r = _out1417;
                            resultingOwnership = _out1418;
                            readIdents = _4973_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source199.is_Nullable) {
                      DAST._IType _4974___mcc_h1831 = _source199.dtor_Nullable_a0;
                    } else if (_source199.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _4975___mcc_h1833 = _source199.dtor_Tuple_a0;
                    } else if (_source199.is_Array) {
                      DAST._IType _4976___mcc_h1835 = _source199.dtor_element;
                      BigInteger _4977___mcc_h1836 = _source199.dtor_dims;
                    } else if (_source199.is_Seq) {
                      DAST._IType _4978___mcc_h1839 = _source199.dtor_element;
                    } else if (_source199.is_Set) {
                      DAST._IType _4979___mcc_h1841 = _source199.dtor_element;
                    } else if (_source199.is_Multiset) {
                      DAST._IType _4980___mcc_h1843 = _source199.dtor_element;
                    } else if (_source199.is_Map) {
                      DAST._IType _4981___mcc_h1845 = _source199.dtor_key;
                      DAST._IType _4982___mcc_h1846 = _source199.dtor_value;
                    } else if (_source199.is_SetBuilder) {
                      DAST._IType _4983___mcc_h1849 = _source199.dtor_element;
                    } else if (_source199.is_MapBuilder) {
                      DAST._IType _4984___mcc_h1851 = _source199.dtor_key;
                      DAST._IType _4985___mcc_h1852 = _source199.dtor_value;
                    } else if (_source199.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _4986___mcc_h1855 = _source199.dtor_args;
                      DAST._IType _4987___mcc_h1856 = _source199.dtor_result;
                    } else if (_source199.is_Primitive) {
                      DAST._IPrimitive _4988___mcc_h1859 = _source199.dtor_Primitive_a0;
                    } else if (_source199.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _4989___mcc_h1861 = _source199.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _4990___mcc_h1863 = _source199.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_3461_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _4991_recursiveGen;
                      DCOMP._IOwnership _4992_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4993_recIdents;
                      RAST._IExpr _out1419;
                      DCOMP._IOwnership _out1420;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1421;
                      DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1419, out _out1420, out _out1421);
                      _4991_recursiveGen = _out1419;
                      _4992_recOwned = _out1420;
                      _4993_recIdents = _out1421;
                      RAST._IExpr _out1422;
                      DCOMP._IOwnership _out1423;
                      DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_4991_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_4949_nativeToType).dtor_value), _4992_recOwned, expectedOwnership, out _out1422, out _out1423);
                      r = _out1422;
                      resultingOwnership = _out1423;
                      readIdents = _4993_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out1424;
                  DCOMP._IOwnership _out1425;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1426;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3460_expr, _3461_fromTpe, _4948_b), _4948_b, _3462_toTpe), selfIdent, env, expectedOwnership, out _out1424, out _out1425, out _out1426);
                  r = _out1424;
                  resultingOwnership = _out1425;
                  readIdents = _out1426;
                }
              }
            }
          } else if (_source196.is_Nullable) {
            DAST._IType _4994___mcc_h760 = _source196.dtor_Nullable_a0;
            {
              RAST._IExpr _4995_recursiveGen;
              DCOMP._IOwnership _4996_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4997_recIdents;
              RAST._IExpr _out1427;
              DCOMP._IOwnership _out1428;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1429;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1427, out _out1428, out _out1429);
              _4995_recursiveGen = _out1427;
              _4996_recOwned = _out1428;
              _4997_recIdents = _out1429;
              r = _4995_recursiveGen;
              if (object.Equals(_4996_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out1430;
              DCOMP._IOwnership _out1431;
              DCOMP.COMP.FromOwnership(r, _4996_recOwned, expectedOwnership, out _out1430, out _out1431);
              r = _out1430;
              resultingOwnership = _out1431;
              readIdents = _4997_recIdents;
            }
          } else if (_source196.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4998___mcc_h762 = _source196.dtor_Tuple_a0;
            {
              RAST._IExpr _4999_recursiveGen;
              DCOMP._IOwnership _5000_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5001_recIdents;
              RAST._IExpr _out1432;
              DCOMP._IOwnership _out1433;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1434;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1432, out _out1433, out _out1434);
              _4999_recursiveGen = _out1432;
              _5000_recOwned = _out1433;
              _5001_recIdents = _out1434;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4999_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1435;
              DCOMP._IOwnership _out1436;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1435, out _out1436);
              r = _out1435;
              resultingOwnership = _out1436;
              readIdents = _5001_recIdents;
            }
          } else if (_source196.is_Array) {
            DAST._IType _5002___mcc_h764 = _source196.dtor_element;
            BigInteger _5003___mcc_h765 = _source196.dtor_dims;
            {
              RAST._IExpr _5004_recursiveGen;
              DCOMP._IOwnership _5005_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5006_recIdents;
              RAST._IExpr _out1437;
              DCOMP._IOwnership _out1438;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1439;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1437, out _out1438, out _out1439);
              _5004_recursiveGen = _out1437;
              _5005_recOwned = _out1438;
              _5006_recIdents = _out1439;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5004_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1440;
              DCOMP._IOwnership _out1441;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1440, out _out1441);
              r = _out1440;
              resultingOwnership = _out1441;
              readIdents = _5006_recIdents;
            }
          } else if (_source196.is_Seq) {
            DAST._IType _5007___mcc_h768 = _source196.dtor_element;
            {
              RAST._IExpr _5008_recursiveGen;
              DCOMP._IOwnership _5009_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5010_recIdents;
              RAST._IExpr _out1442;
              DCOMP._IOwnership _out1443;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1444;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1442, out _out1443, out _out1444);
              _5008_recursiveGen = _out1442;
              _5009_recOwned = _out1443;
              _5010_recIdents = _out1444;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5008_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1445;
              DCOMP._IOwnership _out1446;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1445, out _out1446);
              r = _out1445;
              resultingOwnership = _out1446;
              readIdents = _5010_recIdents;
            }
          } else if (_source196.is_Set) {
            DAST._IType _5011___mcc_h770 = _source196.dtor_element;
            {
              RAST._IExpr _5012_recursiveGen;
              DCOMP._IOwnership _5013_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5014_recIdents;
              RAST._IExpr _out1447;
              DCOMP._IOwnership _out1448;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1449;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1447, out _out1448, out _out1449);
              _5012_recursiveGen = _out1447;
              _5013_recOwned = _out1448;
              _5014_recIdents = _out1449;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5012_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1450;
              DCOMP._IOwnership _out1451;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1450, out _out1451);
              r = _out1450;
              resultingOwnership = _out1451;
              readIdents = _5014_recIdents;
            }
          } else if (_source196.is_Multiset) {
            DAST._IType _5015___mcc_h772 = _source196.dtor_element;
            {
              RAST._IExpr _5016_recursiveGen;
              DCOMP._IOwnership _5017_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5018_recIdents;
              RAST._IExpr _out1452;
              DCOMP._IOwnership _out1453;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1454;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1452, out _out1453, out _out1454);
              _5016_recursiveGen = _out1452;
              _5017_recOwned = _out1453;
              _5018_recIdents = _out1454;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5016_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1455;
              DCOMP._IOwnership _out1456;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1455, out _out1456);
              r = _out1455;
              resultingOwnership = _out1456;
              readIdents = _5018_recIdents;
            }
          } else if (_source196.is_Map) {
            DAST._IType _5019___mcc_h774 = _source196.dtor_key;
            DAST._IType _5020___mcc_h775 = _source196.dtor_value;
            {
              RAST._IExpr _5021_recursiveGen;
              DCOMP._IOwnership _5022_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5023_recIdents;
              RAST._IExpr _out1457;
              DCOMP._IOwnership _out1458;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1459;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1457, out _out1458, out _out1459);
              _5021_recursiveGen = _out1457;
              _5022_recOwned = _out1458;
              _5023_recIdents = _out1459;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5021_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1460;
              DCOMP._IOwnership _out1461;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1460, out _out1461);
              r = _out1460;
              resultingOwnership = _out1461;
              readIdents = _5023_recIdents;
            }
          } else if (_source196.is_SetBuilder) {
            DAST._IType _5024___mcc_h778 = _source196.dtor_element;
            {
              RAST._IExpr _5025_recursiveGen;
              DCOMP._IOwnership _5026_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5027_recIdents;
              RAST._IExpr _out1462;
              DCOMP._IOwnership _out1463;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1464;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1462, out _out1463, out _out1464);
              _5025_recursiveGen = _out1462;
              _5026_recOwned = _out1463;
              _5027_recIdents = _out1464;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5025_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1465;
              DCOMP._IOwnership _out1466;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1465, out _out1466);
              r = _out1465;
              resultingOwnership = _out1466;
              readIdents = _5027_recIdents;
            }
          } else if (_source196.is_MapBuilder) {
            DAST._IType _5028___mcc_h780 = _source196.dtor_key;
            DAST._IType _5029___mcc_h781 = _source196.dtor_value;
            {
              RAST._IExpr _5030_recursiveGen;
              DCOMP._IOwnership _5031_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5032_recIdents;
              RAST._IExpr _out1467;
              DCOMP._IOwnership _out1468;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1469;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1467, out _out1468, out _out1469);
              _5030_recursiveGen = _out1467;
              _5031_recOwned = _out1468;
              _5032_recIdents = _out1469;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5030_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1470;
              DCOMP._IOwnership _out1471;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1470, out _out1471);
              r = _out1470;
              resultingOwnership = _out1471;
              readIdents = _5032_recIdents;
            }
          } else if (_source196.is_Arrow) {
            Dafny.ISequence<DAST._IType> _5033___mcc_h784 = _source196.dtor_args;
            DAST._IType _5034___mcc_h785 = _source196.dtor_result;
            {
              RAST._IExpr _5035_recursiveGen;
              DCOMP._IOwnership _5036_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5037_recIdents;
              RAST._IExpr _out1472;
              DCOMP._IOwnership _out1473;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1474;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1472, out _out1473, out _out1474);
              _5035_recursiveGen = _out1472;
              _5036_recOwned = _out1473;
              _5037_recIdents = _out1474;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5035_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1475;
              DCOMP._IOwnership _out1476;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1475, out _out1476);
              r = _out1475;
              resultingOwnership = _out1476;
              readIdents = _5037_recIdents;
            }
          } else if (_source196.is_Primitive) {
            DAST._IPrimitive _5038___mcc_h788 = _source196.dtor_Primitive_a0;
            {
              RAST._IExpr _5039_recursiveGen;
              DCOMP._IOwnership _5040_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5041_recIdents;
              RAST._IExpr _out1477;
              DCOMP._IOwnership _out1478;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1479;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1477, out _out1478, out _out1479);
              _5039_recursiveGen = _out1477;
              _5040_recOwned = _out1478;
              _5041_recIdents = _out1479;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5039_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1480;
              DCOMP._IOwnership _out1481;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1480, out _out1481);
              r = _out1480;
              resultingOwnership = _out1481;
              readIdents = _5041_recIdents;
            }
          } else if (_source196.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _5042___mcc_h790 = _source196.dtor_Passthrough_a0;
            {
              RAST._IExpr _5043_recursiveGen;
              DCOMP._IOwnership _5044_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5045_recIdents;
              RAST._IExpr _out1482;
              DCOMP._IOwnership _out1483;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1484;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1482, out _out1483, out _out1484);
              _5043_recursiveGen = _out1482;
              _5044_recOwned = _out1483;
              _5045_recIdents = _out1484;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5043_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1485;
              DCOMP._IOwnership _out1486;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1485, out _out1486);
              r = _out1485;
              resultingOwnership = _out1486;
              readIdents = _5045_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _5046___mcc_h792 = _source196.dtor_TypeArg_a0;
            {
              RAST._IExpr _5047_recursiveGen;
              DCOMP._IOwnership _5048_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5049_recIdents;
              RAST._IExpr _out1487;
              DCOMP._IOwnership _out1488;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1489;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1487, out _out1488, out _out1489);
              _5047_recursiveGen = _out1487;
              _5048_recOwned = _out1488;
              _5049_recIdents = _out1489;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5047_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1490;
              DCOMP._IOwnership _out1491;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1490, out _out1491);
              r = _out1490;
              resultingOwnership = _out1491;
              readIdents = _5049_recIdents;
            }
          }
        } else if (_source128.is_Arrow) {
          Dafny.ISequence<DAST._IType> _5050___mcc_h794 = _source128.dtor_args;
          DAST._IType _5051___mcc_h795 = _source128.dtor_result;
          DAST._IType _source201 = _3467___mcc_h1;
          if (_source201.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5052___mcc_h802 = _source201.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _5053___mcc_h803 = _source201.dtor_typeArgs;
            DAST._IResolvedType _5054___mcc_h804 = _source201.dtor_resolved;
            DAST._IResolvedType _source202 = _5054___mcc_h804;
            if (_source202.is_Datatype) {
              DAST._IDatatypeType _5055___mcc_h808 = _source202.dtor_datatypeType;
              {
                RAST._IExpr _5056_recursiveGen;
                DCOMP._IOwnership _5057_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5058_recIdents;
                RAST._IExpr _out1492;
                DCOMP._IOwnership _out1493;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1494;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1492, out _out1493, out _out1494);
                _5056_recursiveGen = _out1492;
                _5057_recOwned = _out1493;
                _5058_recIdents = _out1494;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5056_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1495;
                DCOMP._IOwnership _out1496;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1495, out _out1496);
                r = _out1495;
                resultingOwnership = _out1496;
                readIdents = _5058_recIdents;
              }
            } else if (_source202.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5059___mcc_h810 = _source202.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _5060___mcc_h811 = _source202.dtor_attributes;
              {
                RAST._IExpr _5061_recursiveGen;
                DCOMP._IOwnership _5062_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5063_recIdents;
                RAST._IExpr _out1497;
                DCOMP._IOwnership _out1498;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1499;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1497, out _out1498, out _out1499);
                _5061_recursiveGen = _out1497;
                _5062_recOwned = _out1498;
                _5063_recIdents = _out1499;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5061_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1500;
                DCOMP._IOwnership _out1501;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1500, out _out1501);
                r = _out1500;
                resultingOwnership = _out1501;
                readIdents = _5063_recIdents;
              }
            } else {
              DAST._IType _5064___mcc_h814 = _source202.dtor_baseType;
              DAST._INewtypeRange _5065___mcc_h815 = _source202.dtor_range;
              bool _5066___mcc_h816 = _source202.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _5067___mcc_h817 = _source202.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _5068_attributes = _5067___mcc_h817;
              bool _5069_erase = _5066___mcc_h816;
              DAST._INewtypeRange _5070_range = _5065___mcc_h815;
              DAST._IType _5071_b = _5064___mcc_h814;
              {
                Std.Wrappers._IOption<RAST._IType> _5072_nativeToType;
                _5072_nativeToType = DCOMP.COMP.NewtypeToRustType(_5071_b, _5070_range);
                if (object.Equals(_3461_fromTpe, _5071_b)) {
                  RAST._IExpr _5073_recursiveGen;
                  DCOMP._IOwnership _5074_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5075_recIdents;
                  RAST._IExpr _out1502;
                  DCOMP._IOwnership _out1503;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1504;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1502, out _out1503, out _out1504);
                  _5073_recursiveGen = _out1502;
                  _5074_recOwned = _out1503;
                  _5075_recIdents = _out1504;
                  Std.Wrappers._IOption<RAST._IType> _source203 = _5072_nativeToType;
                  if (_source203.is_None) {
                    if (_5069_erase) {
                      r = _5073_recursiveGen;
                    } else {
                      RAST._IType _5076_rhsType;
                      RAST._IType _out1505;
                      _out1505 = DCOMP.COMP.GenType(_3462_toTpe, true, false);
                      _5076_rhsType = _out1505;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_5076_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_5073_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out1506;
                    DCOMP._IOwnership _out1507;
                    DCOMP.COMP.FromOwnership(r, _5074_recOwned, expectedOwnership, out _out1506, out _out1507);
                    r = _out1506;
                    resultingOwnership = _out1507;
                  } else {
                    RAST._IType _5077___mcc_h1865 = _source203.dtor_value;
                    RAST._IType _5078_v = _5077___mcc_h1865;
                    r = (((_5073_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_5078_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out1508;
                    DCOMP._IOwnership _out1509;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1508, out _out1509);
                    r = _out1508;
                    resultingOwnership = _out1509;
                  }
                  readIdents = _5075_recIdents;
                } else {
                  if ((_5072_nativeToType).is_Some) {
                    DAST._IType _source204 = _3461_fromTpe;
                    if (_source204.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5079___mcc_h1866 = _source204.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _5080___mcc_h1867 = _source204.dtor_typeArgs;
                      DAST._IResolvedType _5081___mcc_h1868 = _source204.dtor_resolved;
                      DAST._IResolvedType _source205 = _5081___mcc_h1868;
                      if (_source205.is_Datatype) {
                        DAST._IDatatypeType _5082___mcc_h1872 = _source205.dtor_datatypeType;
                      } else if (_source205.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5083___mcc_h1874 = _source205.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _5084___mcc_h1875 = _source205.dtor_attributes;
                      } else {
                        DAST._IType _5085___mcc_h1878 = _source205.dtor_baseType;
                        DAST._INewtypeRange _5086___mcc_h1879 = _source205.dtor_range;
                        bool _5087___mcc_h1880 = _source205.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _5088___mcc_h1881 = _source205.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _5089_attributes0 = _5088___mcc_h1881;
                        bool _5090_erase0 = _5087___mcc_h1880;
                        DAST._INewtypeRange _5091_range0 = _5086___mcc_h1879;
                        DAST._IType _5092_b0 = _5085___mcc_h1878;
                        {
                          Std.Wrappers._IOption<RAST._IType> _5093_nativeFromType;
                          _5093_nativeFromType = DCOMP.COMP.NewtypeToRustType(_5092_b0, _5091_range0);
                          if ((_5093_nativeFromType).is_Some) {
                            RAST._IExpr _5094_recursiveGen;
                            DCOMP._IOwnership _5095_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5096_recIdents;
                            RAST._IExpr _out1510;
                            DCOMP._IOwnership _out1511;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1512;
                            DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1510, out _out1511, out _out1512);
                            _5094_recursiveGen = _out1510;
                            _5095_recOwned = _out1511;
                            _5096_recIdents = _out1512;
                            RAST._IExpr _out1513;
                            DCOMP._IOwnership _out1514;
                            DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_5094_recursiveGen, (_5072_nativeToType).dtor_value), _5095_recOwned, expectedOwnership, out _out1513, out _out1514);
                            r = _out1513;
                            resultingOwnership = _out1514;
                            readIdents = _5096_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source204.is_Nullable) {
                      DAST._IType _5097___mcc_h1886 = _source204.dtor_Nullable_a0;
                    } else if (_source204.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _5098___mcc_h1888 = _source204.dtor_Tuple_a0;
                    } else if (_source204.is_Array) {
                      DAST._IType _5099___mcc_h1890 = _source204.dtor_element;
                      BigInteger _5100___mcc_h1891 = _source204.dtor_dims;
                    } else if (_source204.is_Seq) {
                      DAST._IType _5101___mcc_h1894 = _source204.dtor_element;
                    } else if (_source204.is_Set) {
                      DAST._IType _5102___mcc_h1896 = _source204.dtor_element;
                    } else if (_source204.is_Multiset) {
                      DAST._IType _5103___mcc_h1898 = _source204.dtor_element;
                    } else if (_source204.is_Map) {
                      DAST._IType _5104___mcc_h1900 = _source204.dtor_key;
                      DAST._IType _5105___mcc_h1901 = _source204.dtor_value;
                    } else if (_source204.is_SetBuilder) {
                      DAST._IType _5106___mcc_h1904 = _source204.dtor_element;
                    } else if (_source204.is_MapBuilder) {
                      DAST._IType _5107___mcc_h1906 = _source204.dtor_key;
                      DAST._IType _5108___mcc_h1907 = _source204.dtor_value;
                    } else if (_source204.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _5109___mcc_h1910 = _source204.dtor_args;
                      DAST._IType _5110___mcc_h1911 = _source204.dtor_result;
                    } else if (_source204.is_Primitive) {
                      DAST._IPrimitive _5111___mcc_h1914 = _source204.dtor_Primitive_a0;
                    } else if (_source204.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _5112___mcc_h1916 = _source204.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _5113___mcc_h1918 = _source204.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_3461_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _5114_recursiveGen;
                      DCOMP._IOwnership _5115_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5116_recIdents;
                      RAST._IExpr _out1515;
                      DCOMP._IOwnership _out1516;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1517;
                      DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1515, out _out1516, out _out1517);
                      _5114_recursiveGen = _out1515;
                      _5115_recOwned = _out1516;
                      _5116_recIdents = _out1517;
                      RAST._IExpr _out1518;
                      DCOMP._IOwnership _out1519;
                      DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_5114_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_5072_nativeToType).dtor_value), _5115_recOwned, expectedOwnership, out _out1518, out _out1519);
                      r = _out1518;
                      resultingOwnership = _out1519;
                      readIdents = _5116_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out1520;
                  DCOMP._IOwnership _out1521;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1522;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3460_expr, _3461_fromTpe, _5071_b), _5071_b, _3462_toTpe), selfIdent, env, expectedOwnership, out _out1520, out _out1521, out _out1522);
                  r = _out1520;
                  resultingOwnership = _out1521;
                  readIdents = _out1522;
                }
              }
            }
          } else if (_source201.is_Nullable) {
            DAST._IType _5117___mcc_h822 = _source201.dtor_Nullable_a0;
            {
              RAST._IExpr _5118_recursiveGen;
              DCOMP._IOwnership _5119_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5120_recIdents;
              RAST._IExpr _out1523;
              DCOMP._IOwnership _out1524;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1525;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1523, out _out1524, out _out1525);
              _5118_recursiveGen = _out1523;
              _5119_recOwned = _out1524;
              _5120_recIdents = _out1525;
              r = _5118_recursiveGen;
              if (object.Equals(_5119_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out1526;
              DCOMP._IOwnership _out1527;
              DCOMP.COMP.FromOwnership(r, _5119_recOwned, expectedOwnership, out _out1526, out _out1527);
              r = _out1526;
              resultingOwnership = _out1527;
              readIdents = _5120_recIdents;
            }
          } else if (_source201.is_Tuple) {
            Dafny.ISequence<DAST._IType> _5121___mcc_h824 = _source201.dtor_Tuple_a0;
            {
              RAST._IExpr _5122_recursiveGen;
              DCOMP._IOwnership _5123_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5124_recIdents;
              RAST._IExpr _out1528;
              DCOMP._IOwnership _out1529;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1530;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1528, out _out1529, out _out1530);
              _5122_recursiveGen = _out1528;
              _5123_recOwned = _out1529;
              _5124_recIdents = _out1530;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5122_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1531;
              DCOMP._IOwnership _out1532;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1531, out _out1532);
              r = _out1531;
              resultingOwnership = _out1532;
              readIdents = _5124_recIdents;
            }
          } else if (_source201.is_Array) {
            DAST._IType _5125___mcc_h826 = _source201.dtor_element;
            BigInteger _5126___mcc_h827 = _source201.dtor_dims;
            {
              RAST._IExpr _5127_recursiveGen;
              DCOMP._IOwnership _5128_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5129_recIdents;
              RAST._IExpr _out1533;
              DCOMP._IOwnership _out1534;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1535;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1533, out _out1534, out _out1535);
              _5127_recursiveGen = _out1533;
              _5128_recOwned = _out1534;
              _5129_recIdents = _out1535;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5127_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1536;
              DCOMP._IOwnership _out1537;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1536, out _out1537);
              r = _out1536;
              resultingOwnership = _out1537;
              readIdents = _5129_recIdents;
            }
          } else if (_source201.is_Seq) {
            DAST._IType _5130___mcc_h830 = _source201.dtor_element;
            {
              RAST._IExpr _5131_recursiveGen;
              DCOMP._IOwnership _5132_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5133_recIdents;
              RAST._IExpr _out1538;
              DCOMP._IOwnership _out1539;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1540;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1538, out _out1539, out _out1540);
              _5131_recursiveGen = _out1538;
              _5132_recOwned = _out1539;
              _5133_recIdents = _out1540;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5131_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1541;
              DCOMP._IOwnership _out1542;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1541, out _out1542);
              r = _out1541;
              resultingOwnership = _out1542;
              readIdents = _5133_recIdents;
            }
          } else if (_source201.is_Set) {
            DAST._IType _5134___mcc_h832 = _source201.dtor_element;
            {
              RAST._IExpr _5135_recursiveGen;
              DCOMP._IOwnership _5136_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5137_recIdents;
              RAST._IExpr _out1543;
              DCOMP._IOwnership _out1544;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1545;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1543, out _out1544, out _out1545);
              _5135_recursiveGen = _out1543;
              _5136_recOwned = _out1544;
              _5137_recIdents = _out1545;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5135_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1546;
              DCOMP._IOwnership _out1547;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1546, out _out1547);
              r = _out1546;
              resultingOwnership = _out1547;
              readIdents = _5137_recIdents;
            }
          } else if (_source201.is_Multiset) {
            DAST._IType _5138___mcc_h834 = _source201.dtor_element;
            {
              RAST._IExpr _5139_recursiveGen;
              DCOMP._IOwnership _5140_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5141_recIdents;
              RAST._IExpr _out1548;
              DCOMP._IOwnership _out1549;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1550;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1548, out _out1549, out _out1550);
              _5139_recursiveGen = _out1548;
              _5140_recOwned = _out1549;
              _5141_recIdents = _out1550;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5139_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1551;
              DCOMP._IOwnership _out1552;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1551, out _out1552);
              r = _out1551;
              resultingOwnership = _out1552;
              readIdents = _5141_recIdents;
            }
          } else if (_source201.is_Map) {
            DAST._IType _5142___mcc_h836 = _source201.dtor_key;
            DAST._IType _5143___mcc_h837 = _source201.dtor_value;
            {
              RAST._IExpr _5144_recursiveGen;
              DCOMP._IOwnership _5145_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5146_recIdents;
              RAST._IExpr _out1553;
              DCOMP._IOwnership _out1554;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1555;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1553, out _out1554, out _out1555);
              _5144_recursiveGen = _out1553;
              _5145_recOwned = _out1554;
              _5146_recIdents = _out1555;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5144_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1556;
              DCOMP._IOwnership _out1557;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1556, out _out1557);
              r = _out1556;
              resultingOwnership = _out1557;
              readIdents = _5146_recIdents;
            }
          } else if (_source201.is_SetBuilder) {
            DAST._IType _5147___mcc_h840 = _source201.dtor_element;
            {
              RAST._IExpr _5148_recursiveGen;
              DCOMP._IOwnership _5149_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5150_recIdents;
              RAST._IExpr _out1558;
              DCOMP._IOwnership _out1559;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1560;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1558, out _out1559, out _out1560);
              _5148_recursiveGen = _out1558;
              _5149_recOwned = _out1559;
              _5150_recIdents = _out1560;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5148_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1561;
              DCOMP._IOwnership _out1562;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1561, out _out1562);
              r = _out1561;
              resultingOwnership = _out1562;
              readIdents = _5150_recIdents;
            }
          } else if (_source201.is_MapBuilder) {
            DAST._IType _5151___mcc_h842 = _source201.dtor_key;
            DAST._IType _5152___mcc_h843 = _source201.dtor_value;
            {
              RAST._IExpr _5153_recursiveGen;
              DCOMP._IOwnership _5154_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5155_recIdents;
              RAST._IExpr _out1563;
              DCOMP._IOwnership _out1564;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1565;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1563, out _out1564, out _out1565);
              _5153_recursiveGen = _out1563;
              _5154_recOwned = _out1564;
              _5155_recIdents = _out1565;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5153_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1566;
              DCOMP._IOwnership _out1567;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1566, out _out1567);
              r = _out1566;
              resultingOwnership = _out1567;
              readIdents = _5155_recIdents;
            }
          } else if (_source201.is_Arrow) {
            Dafny.ISequence<DAST._IType> _5156___mcc_h846 = _source201.dtor_args;
            DAST._IType _5157___mcc_h847 = _source201.dtor_result;
            {
              RAST._IExpr _5158_recursiveGen;
              DCOMP._IOwnership _5159_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5160_recIdents;
              RAST._IExpr _out1568;
              DCOMP._IOwnership _out1569;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1570;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1568, out _out1569, out _out1570);
              _5158_recursiveGen = _out1568;
              _5159_recOwned = _out1569;
              _5160_recIdents = _out1570;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5158_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1571;
              DCOMP._IOwnership _out1572;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1571, out _out1572);
              r = _out1571;
              resultingOwnership = _out1572;
              readIdents = _5160_recIdents;
            }
          } else if (_source201.is_Primitive) {
            DAST._IPrimitive _5161___mcc_h850 = _source201.dtor_Primitive_a0;
            {
              RAST._IExpr _5162_recursiveGen;
              DCOMP._IOwnership _5163_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5164_recIdents;
              RAST._IExpr _out1573;
              DCOMP._IOwnership _out1574;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1575;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1573, out _out1574, out _out1575);
              _5162_recursiveGen = _out1573;
              _5163_recOwned = _out1574;
              _5164_recIdents = _out1575;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5162_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1576;
              DCOMP._IOwnership _out1577;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1576, out _out1577);
              r = _out1576;
              resultingOwnership = _out1577;
              readIdents = _5164_recIdents;
            }
          } else if (_source201.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _5165___mcc_h852 = _source201.dtor_Passthrough_a0;
            {
              RAST._IExpr _5166_recursiveGen;
              DCOMP._IOwnership _5167_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5168_recIdents;
              RAST._IExpr _out1578;
              DCOMP._IOwnership _out1579;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1580;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1578, out _out1579, out _out1580);
              _5166_recursiveGen = _out1578;
              _5167_recOwned = _out1579;
              _5168_recIdents = _out1580;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5166_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1581;
              DCOMP._IOwnership _out1582;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1581, out _out1582);
              r = _out1581;
              resultingOwnership = _out1582;
              readIdents = _5168_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _5169___mcc_h854 = _source201.dtor_TypeArg_a0;
            {
              RAST._IExpr _5170_recursiveGen;
              DCOMP._IOwnership _5171_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5172_recIdents;
              RAST._IExpr _out1583;
              DCOMP._IOwnership _out1584;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1585;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1583, out _out1584, out _out1585);
              _5170_recursiveGen = _out1583;
              _5171_recOwned = _out1584;
              _5172_recIdents = _out1585;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5170_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1586;
              DCOMP._IOwnership _out1587;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1586, out _out1587);
              r = _out1586;
              resultingOwnership = _out1587;
              readIdents = _5172_recIdents;
            }
          }
        } else if (_source128.is_Primitive) {
          DAST._IPrimitive _5173___mcc_h856 = _source128.dtor_Primitive_a0;
          DAST._IPrimitive _source206 = _5173___mcc_h856;
          if (_source206.is_Int) {
            DAST._IType _source207 = _3467___mcc_h1;
            if (_source207.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5174___mcc_h860 = _source207.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _5175___mcc_h861 = _source207.dtor_typeArgs;
              DAST._IResolvedType _5176___mcc_h862 = _source207.dtor_resolved;
              DAST._IResolvedType _source208 = _5176___mcc_h862;
              if (_source208.is_Datatype) {
                DAST._IDatatypeType _5177___mcc_h866 = _source208.dtor_datatypeType;
                {
                  RAST._IExpr _5178_recursiveGen;
                  DCOMP._IOwnership _5179_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5180_recIdents;
                  RAST._IExpr _out1588;
                  DCOMP._IOwnership _out1589;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1590;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1588, out _out1589, out _out1590);
                  _5178_recursiveGen = _out1588;
                  _5179_recOwned = _out1589;
                  _5180_recIdents = _out1590;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5178_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1591;
                  DCOMP._IOwnership _out1592;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1591, out _out1592);
                  r = _out1591;
                  resultingOwnership = _out1592;
                  readIdents = _5180_recIdents;
                }
              } else if (_source208.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5181___mcc_h868 = _source208.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _5182___mcc_h869 = _source208.dtor_attributes;
                {
                  RAST._IExpr _5183_recursiveGen;
                  DCOMP._IOwnership _5184_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5185_recIdents;
                  RAST._IExpr _out1593;
                  DCOMP._IOwnership _out1594;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1595;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1593, out _out1594, out _out1595);
                  _5183_recursiveGen = _out1593;
                  _5184_recOwned = _out1594;
                  _5185_recIdents = _out1595;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5183_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1596;
                  DCOMP._IOwnership _out1597;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1596, out _out1597);
                  r = _out1596;
                  resultingOwnership = _out1597;
                  readIdents = _5185_recIdents;
                }
              } else {
                DAST._IType _5186___mcc_h872 = _source208.dtor_baseType;
                DAST._INewtypeRange _5187___mcc_h873 = _source208.dtor_range;
                bool _5188___mcc_h874 = _source208.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _5189___mcc_h875 = _source208.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _5190_attributes = _5189___mcc_h875;
                bool _5191_erase = _5188___mcc_h874;
                DAST._INewtypeRange _5192_range = _5187___mcc_h873;
                DAST._IType _5193_b = _5186___mcc_h872;
                {
                  Std.Wrappers._IOption<RAST._IType> _5194_nativeToType;
                  _5194_nativeToType = DCOMP.COMP.NewtypeToRustType(_5193_b, _5192_range);
                  if (object.Equals(_3461_fromTpe, _5193_b)) {
                    RAST._IExpr _5195_recursiveGen;
                    DCOMP._IOwnership _5196_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5197_recIdents;
                    RAST._IExpr _out1598;
                    DCOMP._IOwnership _out1599;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1600;
                    DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1598, out _out1599, out _out1600);
                    _5195_recursiveGen = _out1598;
                    _5196_recOwned = _out1599;
                    _5197_recIdents = _out1600;
                    Std.Wrappers._IOption<RAST._IType> _source209 = _5194_nativeToType;
                    if (_source209.is_None) {
                      if (_5191_erase) {
                        r = _5195_recursiveGen;
                      } else {
                        RAST._IType _5198_rhsType;
                        RAST._IType _out1601;
                        _out1601 = DCOMP.COMP.GenType(_3462_toTpe, true, false);
                        _5198_rhsType = _out1601;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_5198_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_5195_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out1602;
                      DCOMP._IOwnership _out1603;
                      DCOMP.COMP.FromOwnership(r, _5196_recOwned, expectedOwnership, out _out1602, out _out1603);
                      r = _out1602;
                      resultingOwnership = _out1603;
                    } else {
                      RAST._IType _5199___mcc_h1920 = _source209.dtor_value;
                      RAST._IType _5200_v = _5199___mcc_h1920;
                      r = (((_5195_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_5200_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                      RAST._IExpr _out1604;
                      DCOMP._IOwnership _out1605;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1604, out _out1605);
                      r = _out1604;
                      resultingOwnership = _out1605;
                    }
                    readIdents = _5197_recIdents;
                  } else {
                    if ((_5194_nativeToType).is_Some) {
                      DAST._IType _source210 = _3461_fromTpe;
                      if (_source210.is_Path) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5201___mcc_h1921 = _source210.dtor_Path_a0;
                        Dafny.ISequence<DAST._IType> _5202___mcc_h1922 = _source210.dtor_typeArgs;
                        DAST._IResolvedType _5203___mcc_h1923 = _source210.dtor_resolved;
                        DAST._IResolvedType _source211 = _5203___mcc_h1923;
                        if (_source211.is_Datatype) {
                          DAST._IDatatypeType _5204___mcc_h1927 = _source211.dtor_datatypeType;
                        } else if (_source211.is_Trait) {
                          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5205___mcc_h1929 = _source211.dtor_path;
                          Dafny.ISequence<DAST._IAttribute> _5206___mcc_h1930 = _source211.dtor_attributes;
                        } else {
                          DAST._IType _5207___mcc_h1933 = _source211.dtor_baseType;
                          DAST._INewtypeRange _5208___mcc_h1934 = _source211.dtor_range;
                          bool _5209___mcc_h1935 = _source211.dtor_erase;
                          Dafny.ISequence<DAST._IAttribute> _5210___mcc_h1936 = _source211.dtor_attributes;
                          Dafny.ISequence<DAST._IAttribute> _5211_attributes0 = _5210___mcc_h1936;
                          bool _5212_erase0 = _5209___mcc_h1935;
                          DAST._INewtypeRange _5213_range0 = _5208___mcc_h1934;
                          DAST._IType _5214_b0 = _5207___mcc_h1933;
                          {
                            Std.Wrappers._IOption<RAST._IType> _5215_nativeFromType;
                            _5215_nativeFromType = DCOMP.COMP.NewtypeToRustType(_5214_b0, _5213_range0);
                            if ((_5215_nativeFromType).is_Some) {
                              RAST._IExpr _5216_recursiveGen;
                              DCOMP._IOwnership _5217_recOwned;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5218_recIdents;
                              RAST._IExpr _out1606;
                              DCOMP._IOwnership _out1607;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1608;
                              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1606, out _out1607, out _out1608);
                              _5216_recursiveGen = _out1606;
                              _5217_recOwned = _out1607;
                              _5218_recIdents = _out1608;
                              RAST._IExpr _out1609;
                              DCOMP._IOwnership _out1610;
                              DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_5216_recursiveGen, (_5194_nativeToType).dtor_value), _5217_recOwned, expectedOwnership, out _out1609, out _out1610);
                              r = _out1609;
                              resultingOwnership = _out1610;
                              readIdents = _5218_recIdents;
                              return ;
                            }
                          }
                        }
                      } else if (_source210.is_Nullable) {
                        DAST._IType _5219___mcc_h1941 = _source210.dtor_Nullable_a0;
                      } else if (_source210.is_Tuple) {
                        Dafny.ISequence<DAST._IType> _5220___mcc_h1943 = _source210.dtor_Tuple_a0;
                      } else if (_source210.is_Array) {
                        DAST._IType _5221___mcc_h1945 = _source210.dtor_element;
                        BigInteger _5222___mcc_h1946 = _source210.dtor_dims;
                      } else if (_source210.is_Seq) {
                        DAST._IType _5223___mcc_h1949 = _source210.dtor_element;
                      } else if (_source210.is_Set) {
                        DAST._IType _5224___mcc_h1951 = _source210.dtor_element;
                      } else if (_source210.is_Multiset) {
                        DAST._IType _5225___mcc_h1953 = _source210.dtor_element;
                      } else if (_source210.is_Map) {
                        DAST._IType _5226___mcc_h1955 = _source210.dtor_key;
                        DAST._IType _5227___mcc_h1956 = _source210.dtor_value;
                      } else if (_source210.is_SetBuilder) {
                        DAST._IType _5228___mcc_h1959 = _source210.dtor_element;
                      } else if (_source210.is_MapBuilder) {
                        DAST._IType _5229___mcc_h1961 = _source210.dtor_key;
                        DAST._IType _5230___mcc_h1962 = _source210.dtor_value;
                      } else if (_source210.is_Arrow) {
                        Dafny.ISequence<DAST._IType> _5231___mcc_h1965 = _source210.dtor_args;
                        DAST._IType _5232___mcc_h1966 = _source210.dtor_result;
                      } else if (_source210.is_Primitive) {
                        DAST._IPrimitive _5233___mcc_h1969 = _source210.dtor_Primitive_a0;
                      } else if (_source210.is_Passthrough) {
                        Dafny.ISequence<Dafny.Rune> _5234___mcc_h1971 = _source210.dtor_Passthrough_a0;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _5235___mcc_h1973 = _source210.dtor_TypeArg_a0;
                      }
                      if (object.Equals(_3461_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _5236_recursiveGen;
                        DCOMP._IOwnership _5237_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5238_recIdents;
                        RAST._IExpr _out1611;
                        DCOMP._IOwnership _out1612;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1613;
                        DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1611, out _out1612, out _out1613);
                        _5236_recursiveGen = _out1611;
                        _5237_recOwned = _out1612;
                        _5238_recIdents = _out1613;
                        RAST._IExpr _out1614;
                        DCOMP._IOwnership _out1615;
                        DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_5236_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_5194_nativeToType).dtor_value), _5237_recOwned, expectedOwnership, out _out1614, out _out1615);
                        r = _out1614;
                        resultingOwnership = _out1615;
                        readIdents = _5238_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out1616;
                    DCOMP._IOwnership _out1617;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1618;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3460_expr, _3461_fromTpe, _5193_b), _5193_b, _3462_toTpe), selfIdent, env, expectedOwnership, out _out1616, out _out1617, out _out1618);
                    r = _out1616;
                    resultingOwnership = _out1617;
                    readIdents = _out1618;
                  }
                }
              }
            } else if (_source207.is_Nullable) {
              DAST._IType _5239___mcc_h880 = _source207.dtor_Nullable_a0;
              {
                RAST._IExpr _5240_recursiveGen;
                DCOMP._IOwnership _5241_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5242_recIdents;
                RAST._IExpr _out1619;
                DCOMP._IOwnership _out1620;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1621;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1619, out _out1620, out _out1621);
                _5240_recursiveGen = _out1619;
                _5241_recOwned = _out1620;
                _5242_recIdents = _out1621;
                r = _5240_recursiveGen;
                if (object.Equals(_5241_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out1622;
                DCOMP._IOwnership _out1623;
                DCOMP.COMP.FromOwnership(r, _5241_recOwned, expectedOwnership, out _out1622, out _out1623);
                r = _out1622;
                resultingOwnership = _out1623;
                readIdents = _5242_recIdents;
              }
            } else if (_source207.is_Tuple) {
              Dafny.ISequence<DAST._IType> _5243___mcc_h882 = _source207.dtor_Tuple_a0;
              {
                RAST._IExpr _5244_recursiveGen;
                DCOMP._IOwnership _5245_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5246_recIdents;
                RAST._IExpr _out1624;
                DCOMP._IOwnership _out1625;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1626;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1624, out _out1625, out _out1626);
                _5244_recursiveGen = _out1624;
                _5245_recOwned = _out1625;
                _5246_recIdents = _out1626;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5244_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1627;
                DCOMP._IOwnership _out1628;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1627, out _out1628);
                r = _out1627;
                resultingOwnership = _out1628;
                readIdents = _5246_recIdents;
              }
            } else if (_source207.is_Array) {
              DAST._IType _5247___mcc_h884 = _source207.dtor_element;
              BigInteger _5248___mcc_h885 = _source207.dtor_dims;
              {
                RAST._IExpr _5249_recursiveGen;
                DCOMP._IOwnership _5250_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5251_recIdents;
                RAST._IExpr _out1629;
                DCOMP._IOwnership _out1630;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1631;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1629, out _out1630, out _out1631);
                _5249_recursiveGen = _out1629;
                _5250_recOwned = _out1630;
                _5251_recIdents = _out1631;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5249_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1632;
                DCOMP._IOwnership _out1633;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1632, out _out1633);
                r = _out1632;
                resultingOwnership = _out1633;
                readIdents = _5251_recIdents;
              }
            } else if (_source207.is_Seq) {
              DAST._IType _5252___mcc_h888 = _source207.dtor_element;
              {
                RAST._IExpr _5253_recursiveGen;
                DCOMP._IOwnership _5254_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5255_recIdents;
                RAST._IExpr _out1634;
                DCOMP._IOwnership _out1635;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1636;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1634, out _out1635, out _out1636);
                _5253_recursiveGen = _out1634;
                _5254_recOwned = _out1635;
                _5255_recIdents = _out1636;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5253_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1637;
                DCOMP._IOwnership _out1638;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1637, out _out1638);
                r = _out1637;
                resultingOwnership = _out1638;
                readIdents = _5255_recIdents;
              }
            } else if (_source207.is_Set) {
              DAST._IType _5256___mcc_h890 = _source207.dtor_element;
              {
                RAST._IExpr _5257_recursiveGen;
                DCOMP._IOwnership _5258_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5259_recIdents;
                RAST._IExpr _out1639;
                DCOMP._IOwnership _out1640;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1641;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1639, out _out1640, out _out1641);
                _5257_recursiveGen = _out1639;
                _5258_recOwned = _out1640;
                _5259_recIdents = _out1641;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5257_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1642;
                DCOMP._IOwnership _out1643;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1642, out _out1643);
                r = _out1642;
                resultingOwnership = _out1643;
                readIdents = _5259_recIdents;
              }
            } else if (_source207.is_Multiset) {
              DAST._IType _5260___mcc_h892 = _source207.dtor_element;
              {
                RAST._IExpr _5261_recursiveGen;
                DCOMP._IOwnership _5262_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5263_recIdents;
                RAST._IExpr _out1644;
                DCOMP._IOwnership _out1645;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1646;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1644, out _out1645, out _out1646);
                _5261_recursiveGen = _out1644;
                _5262_recOwned = _out1645;
                _5263_recIdents = _out1646;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5261_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1647;
                DCOMP._IOwnership _out1648;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1647, out _out1648);
                r = _out1647;
                resultingOwnership = _out1648;
                readIdents = _5263_recIdents;
              }
            } else if (_source207.is_Map) {
              DAST._IType _5264___mcc_h894 = _source207.dtor_key;
              DAST._IType _5265___mcc_h895 = _source207.dtor_value;
              {
                RAST._IExpr _5266_recursiveGen;
                DCOMP._IOwnership _5267_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5268_recIdents;
                RAST._IExpr _out1649;
                DCOMP._IOwnership _out1650;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1651;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1649, out _out1650, out _out1651);
                _5266_recursiveGen = _out1649;
                _5267_recOwned = _out1650;
                _5268_recIdents = _out1651;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5266_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1652;
                DCOMP._IOwnership _out1653;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1652, out _out1653);
                r = _out1652;
                resultingOwnership = _out1653;
                readIdents = _5268_recIdents;
              }
            } else if (_source207.is_SetBuilder) {
              DAST._IType _5269___mcc_h898 = _source207.dtor_element;
              {
                RAST._IExpr _5270_recursiveGen;
                DCOMP._IOwnership _5271_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5272_recIdents;
                RAST._IExpr _out1654;
                DCOMP._IOwnership _out1655;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1656;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1654, out _out1655, out _out1656);
                _5270_recursiveGen = _out1654;
                _5271_recOwned = _out1655;
                _5272_recIdents = _out1656;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5270_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1657;
                DCOMP._IOwnership _out1658;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1657, out _out1658);
                r = _out1657;
                resultingOwnership = _out1658;
                readIdents = _5272_recIdents;
              }
            } else if (_source207.is_MapBuilder) {
              DAST._IType _5273___mcc_h900 = _source207.dtor_key;
              DAST._IType _5274___mcc_h901 = _source207.dtor_value;
              {
                RAST._IExpr _5275_recursiveGen;
                DCOMP._IOwnership _5276_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5277_recIdents;
                RAST._IExpr _out1659;
                DCOMP._IOwnership _out1660;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1661;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1659, out _out1660, out _out1661);
                _5275_recursiveGen = _out1659;
                _5276_recOwned = _out1660;
                _5277_recIdents = _out1661;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5275_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1662;
                DCOMP._IOwnership _out1663;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1662, out _out1663);
                r = _out1662;
                resultingOwnership = _out1663;
                readIdents = _5277_recIdents;
              }
            } else if (_source207.is_Arrow) {
              Dafny.ISequence<DAST._IType> _5278___mcc_h904 = _source207.dtor_args;
              DAST._IType _5279___mcc_h905 = _source207.dtor_result;
              {
                RAST._IExpr _5280_recursiveGen;
                DCOMP._IOwnership _5281_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5282_recIdents;
                RAST._IExpr _out1664;
                DCOMP._IOwnership _out1665;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1666;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1664, out _out1665, out _out1666);
                _5280_recursiveGen = _out1664;
                _5281_recOwned = _out1665;
                _5282_recIdents = _out1666;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5280_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1667;
                DCOMP._IOwnership _out1668;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1667, out _out1668);
                r = _out1667;
                resultingOwnership = _out1668;
                readIdents = _5282_recIdents;
              }
            } else if (_source207.is_Primitive) {
              DAST._IPrimitive _5283___mcc_h908 = _source207.dtor_Primitive_a0;
              DAST._IPrimitive _source212 = _5283___mcc_h908;
              if (_source212.is_Int) {
                {
                  RAST._IExpr _5284_recursiveGen;
                  DCOMP._IOwnership _5285_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5286_recIdents;
                  RAST._IExpr _out1669;
                  DCOMP._IOwnership _out1670;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1671;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1669, out _out1670, out _out1671);
                  _5284_recursiveGen = _out1669;
                  _5285_recOwned = _out1670;
                  _5286_recIdents = _out1671;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5284_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1672;
                  DCOMP._IOwnership _out1673;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1672, out _out1673);
                  r = _out1672;
                  resultingOwnership = _out1673;
                  readIdents = _5286_recIdents;
                }
              } else if (_source212.is_Real) {
                {
                  RAST._IExpr _5287_recursiveGen;
                  DCOMP._IOwnership _5288___v80;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5289_recIdents;
                  RAST._IExpr _out1674;
                  DCOMP._IOwnership _out1675;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1676;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1674, out _out1675, out _out1676);
                  _5287_recursiveGen = _out1674;
                  _5288___v80 = _out1675;
                  _5289_recIdents = _out1676;
                  r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::from_integer("), (_5287_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))));
                  RAST._IExpr _out1677;
                  DCOMP._IOwnership _out1678;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1677, out _out1678);
                  r = _out1677;
                  resultingOwnership = _out1678;
                  readIdents = _5289_recIdents;
                }
              } else if (_source212.is_String) {
                {
                  RAST._IExpr _5290_recursiveGen;
                  DCOMP._IOwnership _5291_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5292_recIdents;
                  RAST._IExpr _out1679;
                  DCOMP._IOwnership _out1680;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1681;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1679, out _out1680, out _out1681);
                  _5290_recursiveGen = _out1679;
                  _5291_recOwned = _out1680;
                  _5292_recIdents = _out1681;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5290_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1682;
                  DCOMP._IOwnership _out1683;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1682, out _out1683);
                  r = _out1682;
                  resultingOwnership = _out1683;
                  readIdents = _5292_recIdents;
                }
              } else if (_source212.is_Bool) {
                {
                  RAST._IExpr _5293_recursiveGen;
                  DCOMP._IOwnership _5294_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5295_recIdents;
                  RAST._IExpr _out1684;
                  DCOMP._IOwnership _out1685;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1686;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1684, out _out1685, out _out1686);
                  _5293_recursiveGen = _out1684;
                  _5294_recOwned = _out1685;
                  _5295_recIdents = _out1686;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5293_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1687;
                  DCOMP._IOwnership _out1688;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1687, out _out1688);
                  r = _out1687;
                  resultingOwnership = _out1688;
                  readIdents = _5295_recIdents;
                }
              } else {
                {
                  RAST._IType _5296_rhsType;
                  RAST._IType _out1689;
                  _out1689 = DCOMP.COMP.GenType(_3462_toTpe, true, false);
                  _5296_rhsType = _out1689;
                  RAST._IExpr _5297_recursiveGen;
                  DCOMP._IOwnership _5298___v86;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5299_recIdents;
                  RAST._IExpr _out1690;
                  DCOMP._IOwnership _out1691;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1692;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1690, out _out1691, out _out1692);
                  _5297_recursiveGen = _out1690;
                  _5298___v86 = _out1691;
                  _5299_recIdents = _out1692;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char::from_u32(<u32 as ::dafny_runtime::NumCast>::from("), (_5297_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()).unwrap()")));
                  RAST._IExpr _out1693;
                  DCOMP._IOwnership _out1694;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1693, out _out1694);
                  r = _out1693;
                  resultingOwnership = _out1694;
                  readIdents = _5299_recIdents;
                }
              }
            } else if (_source207.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _5300___mcc_h910 = _source207.dtor_Passthrough_a0;
              {
                RAST._IType _5301_rhsType;
                RAST._IType _out1695;
                _out1695 = DCOMP.COMP.GenType(_3462_toTpe, true, false);
                _5301_rhsType = _out1695;
                RAST._IExpr _5302_recursiveGen;
                DCOMP._IOwnership _5303___v83;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5304_recIdents;
                RAST._IExpr _out1696;
                DCOMP._IOwnership _out1697;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1698;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1696, out _out1697, out _out1698);
                _5302_recursiveGen = _out1696;
                _5303___v83 = _out1697;
                _5304_recIdents = _out1698;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_5301_rhsType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::NumCast>::from(")), (_5302_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()")));
                RAST._IExpr _out1699;
                DCOMP._IOwnership _out1700;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1699, out _out1700);
                r = _out1699;
                resultingOwnership = _out1700;
                readIdents = _5304_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _5305___mcc_h912 = _source207.dtor_TypeArg_a0;
              {
                RAST._IExpr _5306_recursiveGen;
                DCOMP._IOwnership _5307_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5308_recIdents;
                RAST._IExpr _out1701;
                DCOMP._IOwnership _out1702;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1703;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1701, out _out1702, out _out1703);
                _5306_recursiveGen = _out1701;
                _5307_recOwned = _out1702;
                _5308_recIdents = _out1703;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5306_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1704;
                DCOMP._IOwnership _out1705;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1704, out _out1705);
                r = _out1704;
                resultingOwnership = _out1705;
                readIdents = _5308_recIdents;
              }
            }
          } else if (_source206.is_Real) {
            DAST._IType _source213 = _3467___mcc_h1;
            if (_source213.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5309___mcc_h914 = _source213.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _5310___mcc_h915 = _source213.dtor_typeArgs;
              DAST._IResolvedType _5311___mcc_h916 = _source213.dtor_resolved;
              DAST._IResolvedType _source214 = _5311___mcc_h916;
              if (_source214.is_Datatype) {
                DAST._IDatatypeType _5312___mcc_h920 = _source214.dtor_datatypeType;
                {
                  RAST._IExpr _5313_recursiveGen;
                  DCOMP._IOwnership _5314_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5315_recIdents;
                  RAST._IExpr _out1706;
                  DCOMP._IOwnership _out1707;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1708;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1706, out _out1707, out _out1708);
                  _5313_recursiveGen = _out1706;
                  _5314_recOwned = _out1707;
                  _5315_recIdents = _out1708;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5313_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1709;
                  DCOMP._IOwnership _out1710;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1709, out _out1710);
                  r = _out1709;
                  resultingOwnership = _out1710;
                  readIdents = _5315_recIdents;
                }
              } else if (_source214.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5316___mcc_h922 = _source214.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _5317___mcc_h923 = _source214.dtor_attributes;
                {
                  RAST._IExpr _5318_recursiveGen;
                  DCOMP._IOwnership _5319_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5320_recIdents;
                  RAST._IExpr _out1711;
                  DCOMP._IOwnership _out1712;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1713;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1711, out _out1712, out _out1713);
                  _5318_recursiveGen = _out1711;
                  _5319_recOwned = _out1712;
                  _5320_recIdents = _out1713;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5318_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1714;
                  DCOMP._IOwnership _out1715;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1714, out _out1715);
                  r = _out1714;
                  resultingOwnership = _out1715;
                  readIdents = _5320_recIdents;
                }
              } else {
                DAST._IType _5321___mcc_h926 = _source214.dtor_baseType;
                DAST._INewtypeRange _5322___mcc_h927 = _source214.dtor_range;
                bool _5323___mcc_h928 = _source214.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _5324___mcc_h929 = _source214.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _5325_attributes = _5324___mcc_h929;
                bool _5326_erase = _5323___mcc_h928;
                DAST._INewtypeRange _5327_range = _5322___mcc_h927;
                DAST._IType _5328_b = _5321___mcc_h926;
                {
                  Std.Wrappers._IOption<RAST._IType> _5329_nativeToType;
                  _5329_nativeToType = DCOMP.COMP.NewtypeToRustType(_5328_b, _5327_range);
                  if (object.Equals(_3461_fromTpe, _5328_b)) {
                    RAST._IExpr _5330_recursiveGen;
                    DCOMP._IOwnership _5331_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5332_recIdents;
                    RAST._IExpr _out1716;
                    DCOMP._IOwnership _out1717;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1718;
                    DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1716, out _out1717, out _out1718);
                    _5330_recursiveGen = _out1716;
                    _5331_recOwned = _out1717;
                    _5332_recIdents = _out1718;
                    Std.Wrappers._IOption<RAST._IType> _source215 = _5329_nativeToType;
                    if (_source215.is_None) {
                      if (_5326_erase) {
                        r = _5330_recursiveGen;
                      } else {
                        RAST._IType _5333_rhsType;
                        RAST._IType _out1719;
                        _out1719 = DCOMP.COMP.GenType(_3462_toTpe, true, false);
                        _5333_rhsType = _out1719;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_5333_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_5330_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out1720;
                      DCOMP._IOwnership _out1721;
                      DCOMP.COMP.FromOwnership(r, _5331_recOwned, expectedOwnership, out _out1720, out _out1721);
                      r = _out1720;
                      resultingOwnership = _out1721;
                    } else {
                      RAST._IType _5334___mcc_h1975 = _source215.dtor_value;
                      RAST._IType _5335_v = _5334___mcc_h1975;
                      r = (((_5330_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_5335_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                      RAST._IExpr _out1722;
                      DCOMP._IOwnership _out1723;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1722, out _out1723);
                      r = _out1722;
                      resultingOwnership = _out1723;
                    }
                    readIdents = _5332_recIdents;
                  } else {
                    if ((_5329_nativeToType).is_Some) {
                      DAST._IType _source216 = _3461_fromTpe;
                      if (_source216.is_Path) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5336___mcc_h1976 = _source216.dtor_Path_a0;
                        Dafny.ISequence<DAST._IType> _5337___mcc_h1977 = _source216.dtor_typeArgs;
                        DAST._IResolvedType _5338___mcc_h1978 = _source216.dtor_resolved;
                        DAST._IResolvedType _source217 = _5338___mcc_h1978;
                        if (_source217.is_Datatype) {
                          DAST._IDatatypeType _5339___mcc_h1982 = _source217.dtor_datatypeType;
                        } else if (_source217.is_Trait) {
                          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5340___mcc_h1984 = _source217.dtor_path;
                          Dafny.ISequence<DAST._IAttribute> _5341___mcc_h1985 = _source217.dtor_attributes;
                        } else {
                          DAST._IType _5342___mcc_h1988 = _source217.dtor_baseType;
                          DAST._INewtypeRange _5343___mcc_h1989 = _source217.dtor_range;
                          bool _5344___mcc_h1990 = _source217.dtor_erase;
                          Dafny.ISequence<DAST._IAttribute> _5345___mcc_h1991 = _source217.dtor_attributes;
                          Dafny.ISequence<DAST._IAttribute> _5346_attributes0 = _5345___mcc_h1991;
                          bool _5347_erase0 = _5344___mcc_h1990;
                          DAST._INewtypeRange _5348_range0 = _5343___mcc_h1989;
                          DAST._IType _5349_b0 = _5342___mcc_h1988;
                          {
                            Std.Wrappers._IOption<RAST._IType> _5350_nativeFromType;
                            _5350_nativeFromType = DCOMP.COMP.NewtypeToRustType(_5349_b0, _5348_range0);
                            if ((_5350_nativeFromType).is_Some) {
                              RAST._IExpr _5351_recursiveGen;
                              DCOMP._IOwnership _5352_recOwned;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5353_recIdents;
                              RAST._IExpr _out1724;
                              DCOMP._IOwnership _out1725;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1726;
                              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1724, out _out1725, out _out1726);
                              _5351_recursiveGen = _out1724;
                              _5352_recOwned = _out1725;
                              _5353_recIdents = _out1726;
                              RAST._IExpr _out1727;
                              DCOMP._IOwnership _out1728;
                              DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_5351_recursiveGen, (_5329_nativeToType).dtor_value), _5352_recOwned, expectedOwnership, out _out1727, out _out1728);
                              r = _out1727;
                              resultingOwnership = _out1728;
                              readIdents = _5353_recIdents;
                              return ;
                            }
                          }
                        }
                      } else if (_source216.is_Nullable) {
                        DAST._IType _5354___mcc_h1996 = _source216.dtor_Nullable_a0;
                      } else if (_source216.is_Tuple) {
                        Dafny.ISequence<DAST._IType> _5355___mcc_h1998 = _source216.dtor_Tuple_a0;
                      } else if (_source216.is_Array) {
                        DAST._IType _5356___mcc_h2000 = _source216.dtor_element;
                        BigInteger _5357___mcc_h2001 = _source216.dtor_dims;
                      } else if (_source216.is_Seq) {
                        DAST._IType _5358___mcc_h2004 = _source216.dtor_element;
                      } else if (_source216.is_Set) {
                        DAST._IType _5359___mcc_h2006 = _source216.dtor_element;
                      } else if (_source216.is_Multiset) {
                        DAST._IType _5360___mcc_h2008 = _source216.dtor_element;
                      } else if (_source216.is_Map) {
                        DAST._IType _5361___mcc_h2010 = _source216.dtor_key;
                        DAST._IType _5362___mcc_h2011 = _source216.dtor_value;
                      } else if (_source216.is_SetBuilder) {
                        DAST._IType _5363___mcc_h2014 = _source216.dtor_element;
                      } else if (_source216.is_MapBuilder) {
                        DAST._IType _5364___mcc_h2016 = _source216.dtor_key;
                        DAST._IType _5365___mcc_h2017 = _source216.dtor_value;
                      } else if (_source216.is_Arrow) {
                        Dafny.ISequence<DAST._IType> _5366___mcc_h2020 = _source216.dtor_args;
                        DAST._IType _5367___mcc_h2021 = _source216.dtor_result;
                      } else if (_source216.is_Primitive) {
                        DAST._IPrimitive _5368___mcc_h2024 = _source216.dtor_Primitive_a0;
                      } else if (_source216.is_Passthrough) {
                        Dafny.ISequence<Dafny.Rune> _5369___mcc_h2026 = _source216.dtor_Passthrough_a0;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _5370___mcc_h2028 = _source216.dtor_TypeArg_a0;
                      }
                      if (object.Equals(_3461_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _5371_recursiveGen;
                        DCOMP._IOwnership _5372_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5373_recIdents;
                        RAST._IExpr _out1729;
                        DCOMP._IOwnership _out1730;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1731;
                        DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1729, out _out1730, out _out1731);
                        _5371_recursiveGen = _out1729;
                        _5372_recOwned = _out1730;
                        _5373_recIdents = _out1731;
                        RAST._IExpr _out1732;
                        DCOMP._IOwnership _out1733;
                        DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_5371_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_5329_nativeToType).dtor_value), _5372_recOwned, expectedOwnership, out _out1732, out _out1733);
                        r = _out1732;
                        resultingOwnership = _out1733;
                        readIdents = _5373_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out1734;
                    DCOMP._IOwnership _out1735;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1736;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3460_expr, _3461_fromTpe, _5328_b), _5328_b, _3462_toTpe), selfIdent, env, expectedOwnership, out _out1734, out _out1735, out _out1736);
                    r = _out1734;
                    resultingOwnership = _out1735;
                    readIdents = _out1736;
                  }
                }
              }
            } else if (_source213.is_Nullable) {
              DAST._IType _5374___mcc_h934 = _source213.dtor_Nullable_a0;
              {
                RAST._IExpr _5375_recursiveGen;
                DCOMP._IOwnership _5376_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5377_recIdents;
                RAST._IExpr _out1737;
                DCOMP._IOwnership _out1738;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1739;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1737, out _out1738, out _out1739);
                _5375_recursiveGen = _out1737;
                _5376_recOwned = _out1738;
                _5377_recIdents = _out1739;
                r = _5375_recursiveGen;
                if (object.Equals(_5376_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out1740;
                DCOMP._IOwnership _out1741;
                DCOMP.COMP.FromOwnership(r, _5376_recOwned, expectedOwnership, out _out1740, out _out1741);
                r = _out1740;
                resultingOwnership = _out1741;
                readIdents = _5377_recIdents;
              }
            } else if (_source213.is_Tuple) {
              Dafny.ISequence<DAST._IType> _5378___mcc_h936 = _source213.dtor_Tuple_a0;
              {
                RAST._IExpr _5379_recursiveGen;
                DCOMP._IOwnership _5380_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5381_recIdents;
                RAST._IExpr _out1742;
                DCOMP._IOwnership _out1743;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1744;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1742, out _out1743, out _out1744);
                _5379_recursiveGen = _out1742;
                _5380_recOwned = _out1743;
                _5381_recIdents = _out1744;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5379_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1745;
                DCOMP._IOwnership _out1746;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1745, out _out1746);
                r = _out1745;
                resultingOwnership = _out1746;
                readIdents = _5381_recIdents;
              }
            } else if (_source213.is_Array) {
              DAST._IType _5382___mcc_h938 = _source213.dtor_element;
              BigInteger _5383___mcc_h939 = _source213.dtor_dims;
              {
                RAST._IExpr _5384_recursiveGen;
                DCOMP._IOwnership _5385_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5386_recIdents;
                RAST._IExpr _out1747;
                DCOMP._IOwnership _out1748;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1749;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1747, out _out1748, out _out1749);
                _5384_recursiveGen = _out1747;
                _5385_recOwned = _out1748;
                _5386_recIdents = _out1749;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5384_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1750;
                DCOMP._IOwnership _out1751;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1750, out _out1751);
                r = _out1750;
                resultingOwnership = _out1751;
                readIdents = _5386_recIdents;
              }
            } else if (_source213.is_Seq) {
              DAST._IType _5387___mcc_h942 = _source213.dtor_element;
              {
                RAST._IExpr _5388_recursiveGen;
                DCOMP._IOwnership _5389_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5390_recIdents;
                RAST._IExpr _out1752;
                DCOMP._IOwnership _out1753;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1754;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1752, out _out1753, out _out1754);
                _5388_recursiveGen = _out1752;
                _5389_recOwned = _out1753;
                _5390_recIdents = _out1754;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5388_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1755;
                DCOMP._IOwnership _out1756;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1755, out _out1756);
                r = _out1755;
                resultingOwnership = _out1756;
                readIdents = _5390_recIdents;
              }
            } else if (_source213.is_Set) {
              DAST._IType _5391___mcc_h944 = _source213.dtor_element;
              {
                RAST._IExpr _5392_recursiveGen;
                DCOMP._IOwnership _5393_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5394_recIdents;
                RAST._IExpr _out1757;
                DCOMP._IOwnership _out1758;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1759;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1757, out _out1758, out _out1759);
                _5392_recursiveGen = _out1757;
                _5393_recOwned = _out1758;
                _5394_recIdents = _out1759;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5392_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1760;
                DCOMP._IOwnership _out1761;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1760, out _out1761);
                r = _out1760;
                resultingOwnership = _out1761;
                readIdents = _5394_recIdents;
              }
            } else if (_source213.is_Multiset) {
              DAST._IType _5395___mcc_h946 = _source213.dtor_element;
              {
                RAST._IExpr _5396_recursiveGen;
                DCOMP._IOwnership _5397_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5398_recIdents;
                RAST._IExpr _out1762;
                DCOMP._IOwnership _out1763;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1764;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1762, out _out1763, out _out1764);
                _5396_recursiveGen = _out1762;
                _5397_recOwned = _out1763;
                _5398_recIdents = _out1764;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5396_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1765;
                DCOMP._IOwnership _out1766;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1765, out _out1766);
                r = _out1765;
                resultingOwnership = _out1766;
                readIdents = _5398_recIdents;
              }
            } else if (_source213.is_Map) {
              DAST._IType _5399___mcc_h948 = _source213.dtor_key;
              DAST._IType _5400___mcc_h949 = _source213.dtor_value;
              {
                RAST._IExpr _5401_recursiveGen;
                DCOMP._IOwnership _5402_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5403_recIdents;
                RAST._IExpr _out1767;
                DCOMP._IOwnership _out1768;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1769;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1767, out _out1768, out _out1769);
                _5401_recursiveGen = _out1767;
                _5402_recOwned = _out1768;
                _5403_recIdents = _out1769;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5401_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1770;
                DCOMP._IOwnership _out1771;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1770, out _out1771);
                r = _out1770;
                resultingOwnership = _out1771;
                readIdents = _5403_recIdents;
              }
            } else if (_source213.is_SetBuilder) {
              DAST._IType _5404___mcc_h952 = _source213.dtor_element;
              {
                RAST._IExpr _5405_recursiveGen;
                DCOMP._IOwnership _5406_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5407_recIdents;
                RAST._IExpr _out1772;
                DCOMP._IOwnership _out1773;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1774;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1772, out _out1773, out _out1774);
                _5405_recursiveGen = _out1772;
                _5406_recOwned = _out1773;
                _5407_recIdents = _out1774;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5405_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1775;
                DCOMP._IOwnership _out1776;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1775, out _out1776);
                r = _out1775;
                resultingOwnership = _out1776;
                readIdents = _5407_recIdents;
              }
            } else if (_source213.is_MapBuilder) {
              DAST._IType _5408___mcc_h954 = _source213.dtor_key;
              DAST._IType _5409___mcc_h955 = _source213.dtor_value;
              {
                RAST._IExpr _5410_recursiveGen;
                DCOMP._IOwnership _5411_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5412_recIdents;
                RAST._IExpr _out1777;
                DCOMP._IOwnership _out1778;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1779;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1777, out _out1778, out _out1779);
                _5410_recursiveGen = _out1777;
                _5411_recOwned = _out1778;
                _5412_recIdents = _out1779;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5410_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1780;
                DCOMP._IOwnership _out1781;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1780, out _out1781);
                r = _out1780;
                resultingOwnership = _out1781;
                readIdents = _5412_recIdents;
              }
            } else if (_source213.is_Arrow) {
              Dafny.ISequence<DAST._IType> _5413___mcc_h958 = _source213.dtor_args;
              DAST._IType _5414___mcc_h959 = _source213.dtor_result;
              {
                RAST._IExpr _5415_recursiveGen;
                DCOMP._IOwnership _5416_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5417_recIdents;
                RAST._IExpr _out1782;
                DCOMP._IOwnership _out1783;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1784;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1782, out _out1783, out _out1784);
                _5415_recursiveGen = _out1782;
                _5416_recOwned = _out1783;
                _5417_recIdents = _out1784;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5415_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1785;
                DCOMP._IOwnership _out1786;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1785, out _out1786);
                r = _out1785;
                resultingOwnership = _out1786;
                readIdents = _5417_recIdents;
              }
            } else if (_source213.is_Primitive) {
              DAST._IPrimitive _5418___mcc_h962 = _source213.dtor_Primitive_a0;
              DAST._IPrimitive _source218 = _5418___mcc_h962;
              if (_source218.is_Int) {
                {
                  RAST._IExpr _5419_recursiveGen;
                  DCOMP._IOwnership _5420___v81;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5421_recIdents;
                  RAST._IExpr _out1787;
                  DCOMP._IOwnership _out1788;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1789;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1787, out _out1788, out _out1789);
                  _5419_recursiveGen = _out1787;
                  _5420___v81 = _out1788;
                  _5421_recIdents = _out1789;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::dafny_rational_to_int("), (_5419_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  RAST._IExpr _out1790;
                  DCOMP._IOwnership _out1791;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1790, out _out1791);
                  r = _out1790;
                  resultingOwnership = _out1791;
                  readIdents = _5421_recIdents;
                }
              } else if (_source218.is_Real) {
                {
                  RAST._IExpr _5422_recursiveGen;
                  DCOMP._IOwnership _5423_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5424_recIdents;
                  RAST._IExpr _out1792;
                  DCOMP._IOwnership _out1793;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1794;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1792, out _out1793, out _out1794);
                  _5422_recursiveGen = _out1792;
                  _5423_recOwned = _out1793;
                  _5424_recIdents = _out1794;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5422_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1795;
                  DCOMP._IOwnership _out1796;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1795, out _out1796);
                  r = _out1795;
                  resultingOwnership = _out1796;
                  readIdents = _5424_recIdents;
                }
              } else if (_source218.is_String) {
                {
                  RAST._IExpr _5425_recursiveGen;
                  DCOMP._IOwnership _5426_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5427_recIdents;
                  RAST._IExpr _out1797;
                  DCOMP._IOwnership _out1798;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1799;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1797, out _out1798, out _out1799);
                  _5425_recursiveGen = _out1797;
                  _5426_recOwned = _out1798;
                  _5427_recIdents = _out1799;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5425_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1800;
                  DCOMP._IOwnership _out1801;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1800, out _out1801);
                  r = _out1800;
                  resultingOwnership = _out1801;
                  readIdents = _5427_recIdents;
                }
              } else if (_source218.is_Bool) {
                {
                  RAST._IExpr _5428_recursiveGen;
                  DCOMP._IOwnership _5429_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5430_recIdents;
                  RAST._IExpr _out1802;
                  DCOMP._IOwnership _out1803;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1804;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1802, out _out1803, out _out1804);
                  _5428_recursiveGen = _out1802;
                  _5429_recOwned = _out1803;
                  _5430_recIdents = _out1804;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5428_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1805;
                  DCOMP._IOwnership _out1806;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1805, out _out1806);
                  r = _out1805;
                  resultingOwnership = _out1806;
                  readIdents = _5430_recIdents;
                }
              } else {
                {
                  RAST._IExpr _5431_recursiveGen;
                  DCOMP._IOwnership _5432_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5433_recIdents;
                  RAST._IExpr _out1807;
                  DCOMP._IOwnership _out1808;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1809;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1807, out _out1808, out _out1809);
                  _5431_recursiveGen = _out1807;
                  _5432_recOwned = _out1808;
                  _5433_recIdents = _out1809;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5431_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1810;
                  DCOMP._IOwnership _out1811;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1810, out _out1811);
                  r = _out1810;
                  resultingOwnership = _out1811;
                  readIdents = _5433_recIdents;
                }
              }
            } else if (_source213.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _5434___mcc_h964 = _source213.dtor_Passthrough_a0;
              {
                RAST._IExpr _5435_recursiveGen;
                DCOMP._IOwnership _5436_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5437_recIdents;
                RAST._IExpr _out1812;
                DCOMP._IOwnership _out1813;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1814;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1812, out _out1813, out _out1814);
                _5435_recursiveGen = _out1812;
                _5436_recOwned = _out1813;
                _5437_recIdents = _out1814;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5435_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1815;
                DCOMP._IOwnership _out1816;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1815, out _out1816);
                r = _out1815;
                resultingOwnership = _out1816;
                readIdents = _5437_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _5438___mcc_h966 = _source213.dtor_TypeArg_a0;
              {
                RAST._IExpr _5439_recursiveGen;
                DCOMP._IOwnership _5440_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5441_recIdents;
                RAST._IExpr _out1817;
                DCOMP._IOwnership _out1818;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1819;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1817, out _out1818, out _out1819);
                _5439_recursiveGen = _out1817;
                _5440_recOwned = _out1818;
                _5441_recIdents = _out1819;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5439_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1820;
                DCOMP._IOwnership _out1821;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1820, out _out1821);
                r = _out1820;
                resultingOwnership = _out1821;
                readIdents = _5441_recIdents;
              }
            }
          } else if (_source206.is_String) {
            DAST._IType _source219 = _3467___mcc_h1;
            if (_source219.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5442___mcc_h968 = _source219.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _5443___mcc_h969 = _source219.dtor_typeArgs;
              DAST._IResolvedType _5444___mcc_h970 = _source219.dtor_resolved;
              DAST._IResolvedType _source220 = _5444___mcc_h970;
              if (_source220.is_Datatype) {
                DAST._IDatatypeType _5445___mcc_h974 = _source220.dtor_datatypeType;
                {
                  RAST._IExpr _5446_recursiveGen;
                  DCOMP._IOwnership _5447_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5448_recIdents;
                  RAST._IExpr _out1822;
                  DCOMP._IOwnership _out1823;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1824;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1822, out _out1823, out _out1824);
                  _5446_recursiveGen = _out1822;
                  _5447_recOwned = _out1823;
                  _5448_recIdents = _out1824;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5446_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1825;
                  DCOMP._IOwnership _out1826;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1825, out _out1826);
                  r = _out1825;
                  resultingOwnership = _out1826;
                  readIdents = _5448_recIdents;
                }
              } else if (_source220.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5449___mcc_h976 = _source220.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _5450___mcc_h977 = _source220.dtor_attributes;
                {
                  RAST._IExpr _5451_recursiveGen;
                  DCOMP._IOwnership _5452_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5453_recIdents;
                  RAST._IExpr _out1827;
                  DCOMP._IOwnership _out1828;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1829;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1827, out _out1828, out _out1829);
                  _5451_recursiveGen = _out1827;
                  _5452_recOwned = _out1828;
                  _5453_recIdents = _out1829;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5451_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1830;
                  DCOMP._IOwnership _out1831;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1830, out _out1831);
                  r = _out1830;
                  resultingOwnership = _out1831;
                  readIdents = _5453_recIdents;
                }
              } else {
                DAST._IType _5454___mcc_h980 = _source220.dtor_baseType;
                DAST._INewtypeRange _5455___mcc_h981 = _source220.dtor_range;
                bool _5456___mcc_h982 = _source220.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _5457___mcc_h983 = _source220.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _5458_attributes = _5457___mcc_h983;
                bool _5459_erase = _5456___mcc_h982;
                DAST._INewtypeRange _5460_range = _5455___mcc_h981;
                DAST._IType _5461_b = _5454___mcc_h980;
                {
                  Std.Wrappers._IOption<RAST._IType> _5462_nativeToType;
                  _5462_nativeToType = DCOMP.COMP.NewtypeToRustType(_5461_b, _5460_range);
                  if (object.Equals(_3461_fromTpe, _5461_b)) {
                    RAST._IExpr _5463_recursiveGen;
                    DCOMP._IOwnership _5464_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5465_recIdents;
                    RAST._IExpr _out1832;
                    DCOMP._IOwnership _out1833;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1834;
                    DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1832, out _out1833, out _out1834);
                    _5463_recursiveGen = _out1832;
                    _5464_recOwned = _out1833;
                    _5465_recIdents = _out1834;
                    Std.Wrappers._IOption<RAST._IType> _source221 = _5462_nativeToType;
                    if (_source221.is_None) {
                      if (_5459_erase) {
                        r = _5463_recursiveGen;
                      } else {
                        RAST._IType _5466_rhsType;
                        RAST._IType _out1835;
                        _out1835 = DCOMP.COMP.GenType(_3462_toTpe, true, false);
                        _5466_rhsType = _out1835;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_5466_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_5463_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out1836;
                      DCOMP._IOwnership _out1837;
                      DCOMP.COMP.FromOwnership(r, _5464_recOwned, expectedOwnership, out _out1836, out _out1837);
                      r = _out1836;
                      resultingOwnership = _out1837;
                    } else {
                      RAST._IType _5467___mcc_h2030 = _source221.dtor_value;
                      RAST._IType _5468_v = _5467___mcc_h2030;
                      r = (((_5463_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_5468_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                      RAST._IExpr _out1838;
                      DCOMP._IOwnership _out1839;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1838, out _out1839);
                      r = _out1838;
                      resultingOwnership = _out1839;
                    }
                    readIdents = _5465_recIdents;
                  } else {
                    if ((_5462_nativeToType).is_Some) {
                      DAST._IType _source222 = _3461_fromTpe;
                      if (_source222.is_Path) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5469___mcc_h2031 = _source222.dtor_Path_a0;
                        Dafny.ISequence<DAST._IType> _5470___mcc_h2032 = _source222.dtor_typeArgs;
                        DAST._IResolvedType _5471___mcc_h2033 = _source222.dtor_resolved;
                        DAST._IResolvedType _source223 = _5471___mcc_h2033;
                        if (_source223.is_Datatype) {
                          DAST._IDatatypeType _5472___mcc_h2037 = _source223.dtor_datatypeType;
                        } else if (_source223.is_Trait) {
                          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5473___mcc_h2039 = _source223.dtor_path;
                          Dafny.ISequence<DAST._IAttribute> _5474___mcc_h2040 = _source223.dtor_attributes;
                        } else {
                          DAST._IType _5475___mcc_h2043 = _source223.dtor_baseType;
                          DAST._INewtypeRange _5476___mcc_h2044 = _source223.dtor_range;
                          bool _5477___mcc_h2045 = _source223.dtor_erase;
                          Dafny.ISequence<DAST._IAttribute> _5478___mcc_h2046 = _source223.dtor_attributes;
                          Dafny.ISequence<DAST._IAttribute> _5479_attributes0 = _5478___mcc_h2046;
                          bool _5480_erase0 = _5477___mcc_h2045;
                          DAST._INewtypeRange _5481_range0 = _5476___mcc_h2044;
                          DAST._IType _5482_b0 = _5475___mcc_h2043;
                          {
                            Std.Wrappers._IOption<RAST._IType> _5483_nativeFromType;
                            _5483_nativeFromType = DCOMP.COMP.NewtypeToRustType(_5482_b0, _5481_range0);
                            if ((_5483_nativeFromType).is_Some) {
                              RAST._IExpr _5484_recursiveGen;
                              DCOMP._IOwnership _5485_recOwned;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5486_recIdents;
                              RAST._IExpr _out1840;
                              DCOMP._IOwnership _out1841;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1842;
                              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1840, out _out1841, out _out1842);
                              _5484_recursiveGen = _out1840;
                              _5485_recOwned = _out1841;
                              _5486_recIdents = _out1842;
                              RAST._IExpr _out1843;
                              DCOMP._IOwnership _out1844;
                              DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_5484_recursiveGen, (_5462_nativeToType).dtor_value), _5485_recOwned, expectedOwnership, out _out1843, out _out1844);
                              r = _out1843;
                              resultingOwnership = _out1844;
                              readIdents = _5486_recIdents;
                              return ;
                            }
                          }
                        }
                      } else if (_source222.is_Nullable) {
                        DAST._IType _5487___mcc_h2051 = _source222.dtor_Nullable_a0;
                      } else if (_source222.is_Tuple) {
                        Dafny.ISequence<DAST._IType> _5488___mcc_h2053 = _source222.dtor_Tuple_a0;
                      } else if (_source222.is_Array) {
                        DAST._IType _5489___mcc_h2055 = _source222.dtor_element;
                        BigInteger _5490___mcc_h2056 = _source222.dtor_dims;
                      } else if (_source222.is_Seq) {
                        DAST._IType _5491___mcc_h2059 = _source222.dtor_element;
                      } else if (_source222.is_Set) {
                        DAST._IType _5492___mcc_h2061 = _source222.dtor_element;
                      } else if (_source222.is_Multiset) {
                        DAST._IType _5493___mcc_h2063 = _source222.dtor_element;
                      } else if (_source222.is_Map) {
                        DAST._IType _5494___mcc_h2065 = _source222.dtor_key;
                        DAST._IType _5495___mcc_h2066 = _source222.dtor_value;
                      } else if (_source222.is_SetBuilder) {
                        DAST._IType _5496___mcc_h2069 = _source222.dtor_element;
                      } else if (_source222.is_MapBuilder) {
                        DAST._IType _5497___mcc_h2071 = _source222.dtor_key;
                        DAST._IType _5498___mcc_h2072 = _source222.dtor_value;
                      } else if (_source222.is_Arrow) {
                        Dafny.ISequence<DAST._IType> _5499___mcc_h2075 = _source222.dtor_args;
                        DAST._IType _5500___mcc_h2076 = _source222.dtor_result;
                      } else if (_source222.is_Primitive) {
                        DAST._IPrimitive _5501___mcc_h2079 = _source222.dtor_Primitive_a0;
                      } else if (_source222.is_Passthrough) {
                        Dafny.ISequence<Dafny.Rune> _5502___mcc_h2081 = _source222.dtor_Passthrough_a0;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _5503___mcc_h2083 = _source222.dtor_TypeArg_a0;
                      }
                      if (object.Equals(_3461_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _5504_recursiveGen;
                        DCOMP._IOwnership _5505_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5506_recIdents;
                        RAST._IExpr _out1845;
                        DCOMP._IOwnership _out1846;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1847;
                        DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1845, out _out1846, out _out1847);
                        _5504_recursiveGen = _out1845;
                        _5505_recOwned = _out1846;
                        _5506_recIdents = _out1847;
                        RAST._IExpr _out1848;
                        DCOMP._IOwnership _out1849;
                        DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_5504_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_5462_nativeToType).dtor_value), _5505_recOwned, expectedOwnership, out _out1848, out _out1849);
                        r = _out1848;
                        resultingOwnership = _out1849;
                        readIdents = _5506_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out1850;
                    DCOMP._IOwnership _out1851;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1852;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3460_expr, _3461_fromTpe, _5461_b), _5461_b, _3462_toTpe), selfIdent, env, expectedOwnership, out _out1850, out _out1851, out _out1852);
                    r = _out1850;
                    resultingOwnership = _out1851;
                    readIdents = _out1852;
                  }
                }
              }
            } else if (_source219.is_Nullable) {
              DAST._IType _5507___mcc_h988 = _source219.dtor_Nullable_a0;
              {
                RAST._IExpr _5508_recursiveGen;
                DCOMP._IOwnership _5509_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5510_recIdents;
                RAST._IExpr _out1853;
                DCOMP._IOwnership _out1854;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1855;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1853, out _out1854, out _out1855);
                _5508_recursiveGen = _out1853;
                _5509_recOwned = _out1854;
                _5510_recIdents = _out1855;
                r = _5508_recursiveGen;
                if (object.Equals(_5509_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out1856;
                DCOMP._IOwnership _out1857;
                DCOMP.COMP.FromOwnership(r, _5509_recOwned, expectedOwnership, out _out1856, out _out1857);
                r = _out1856;
                resultingOwnership = _out1857;
                readIdents = _5510_recIdents;
              }
            } else if (_source219.is_Tuple) {
              Dafny.ISequence<DAST._IType> _5511___mcc_h990 = _source219.dtor_Tuple_a0;
              {
                RAST._IExpr _5512_recursiveGen;
                DCOMP._IOwnership _5513_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5514_recIdents;
                RAST._IExpr _out1858;
                DCOMP._IOwnership _out1859;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1860;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1858, out _out1859, out _out1860);
                _5512_recursiveGen = _out1858;
                _5513_recOwned = _out1859;
                _5514_recIdents = _out1860;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5512_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1861;
                DCOMP._IOwnership _out1862;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1861, out _out1862);
                r = _out1861;
                resultingOwnership = _out1862;
                readIdents = _5514_recIdents;
              }
            } else if (_source219.is_Array) {
              DAST._IType _5515___mcc_h992 = _source219.dtor_element;
              BigInteger _5516___mcc_h993 = _source219.dtor_dims;
              {
                RAST._IExpr _5517_recursiveGen;
                DCOMP._IOwnership _5518_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5519_recIdents;
                RAST._IExpr _out1863;
                DCOMP._IOwnership _out1864;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1865;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1863, out _out1864, out _out1865);
                _5517_recursiveGen = _out1863;
                _5518_recOwned = _out1864;
                _5519_recIdents = _out1865;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5517_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1866;
                DCOMP._IOwnership _out1867;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1866, out _out1867);
                r = _out1866;
                resultingOwnership = _out1867;
                readIdents = _5519_recIdents;
              }
            } else if (_source219.is_Seq) {
              DAST._IType _5520___mcc_h996 = _source219.dtor_element;
              {
                RAST._IExpr _5521_recursiveGen;
                DCOMP._IOwnership _5522_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5523_recIdents;
                RAST._IExpr _out1868;
                DCOMP._IOwnership _out1869;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1870;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1868, out _out1869, out _out1870);
                _5521_recursiveGen = _out1868;
                _5522_recOwned = _out1869;
                _5523_recIdents = _out1870;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5521_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1871;
                DCOMP._IOwnership _out1872;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1871, out _out1872);
                r = _out1871;
                resultingOwnership = _out1872;
                readIdents = _5523_recIdents;
              }
            } else if (_source219.is_Set) {
              DAST._IType _5524___mcc_h998 = _source219.dtor_element;
              {
                RAST._IExpr _5525_recursiveGen;
                DCOMP._IOwnership _5526_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5527_recIdents;
                RAST._IExpr _out1873;
                DCOMP._IOwnership _out1874;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1875;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1873, out _out1874, out _out1875);
                _5525_recursiveGen = _out1873;
                _5526_recOwned = _out1874;
                _5527_recIdents = _out1875;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5525_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1876;
                DCOMP._IOwnership _out1877;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1876, out _out1877);
                r = _out1876;
                resultingOwnership = _out1877;
                readIdents = _5527_recIdents;
              }
            } else if (_source219.is_Multiset) {
              DAST._IType _5528___mcc_h1000 = _source219.dtor_element;
              {
                RAST._IExpr _5529_recursiveGen;
                DCOMP._IOwnership _5530_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5531_recIdents;
                RAST._IExpr _out1878;
                DCOMP._IOwnership _out1879;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1880;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1878, out _out1879, out _out1880);
                _5529_recursiveGen = _out1878;
                _5530_recOwned = _out1879;
                _5531_recIdents = _out1880;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5529_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1881;
                DCOMP._IOwnership _out1882;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1881, out _out1882);
                r = _out1881;
                resultingOwnership = _out1882;
                readIdents = _5531_recIdents;
              }
            } else if (_source219.is_Map) {
              DAST._IType _5532___mcc_h1002 = _source219.dtor_key;
              DAST._IType _5533___mcc_h1003 = _source219.dtor_value;
              {
                RAST._IExpr _5534_recursiveGen;
                DCOMP._IOwnership _5535_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5536_recIdents;
                RAST._IExpr _out1883;
                DCOMP._IOwnership _out1884;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1885;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1883, out _out1884, out _out1885);
                _5534_recursiveGen = _out1883;
                _5535_recOwned = _out1884;
                _5536_recIdents = _out1885;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5534_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1886;
                DCOMP._IOwnership _out1887;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1886, out _out1887);
                r = _out1886;
                resultingOwnership = _out1887;
                readIdents = _5536_recIdents;
              }
            } else if (_source219.is_SetBuilder) {
              DAST._IType _5537___mcc_h1006 = _source219.dtor_element;
              {
                RAST._IExpr _5538_recursiveGen;
                DCOMP._IOwnership _5539_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5540_recIdents;
                RAST._IExpr _out1888;
                DCOMP._IOwnership _out1889;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1890;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1888, out _out1889, out _out1890);
                _5538_recursiveGen = _out1888;
                _5539_recOwned = _out1889;
                _5540_recIdents = _out1890;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5538_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1891;
                DCOMP._IOwnership _out1892;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1891, out _out1892);
                r = _out1891;
                resultingOwnership = _out1892;
                readIdents = _5540_recIdents;
              }
            } else if (_source219.is_MapBuilder) {
              DAST._IType _5541___mcc_h1008 = _source219.dtor_key;
              DAST._IType _5542___mcc_h1009 = _source219.dtor_value;
              {
                RAST._IExpr _5543_recursiveGen;
                DCOMP._IOwnership _5544_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5545_recIdents;
                RAST._IExpr _out1893;
                DCOMP._IOwnership _out1894;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1895;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1893, out _out1894, out _out1895);
                _5543_recursiveGen = _out1893;
                _5544_recOwned = _out1894;
                _5545_recIdents = _out1895;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5543_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1896;
                DCOMP._IOwnership _out1897;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1896, out _out1897);
                r = _out1896;
                resultingOwnership = _out1897;
                readIdents = _5545_recIdents;
              }
            } else if (_source219.is_Arrow) {
              Dafny.ISequence<DAST._IType> _5546___mcc_h1012 = _source219.dtor_args;
              DAST._IType _5547___mcc_h1013 = _source219.dtor_result;
              {
                RAST._IExpr _5548_recursiveGen;
                DCOMP._IOwnership _5549_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5550_recIdents;
                RAST._IExpr _out1898;
                DCOMP._IOwnership _out1899;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1900;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1898, out _out1899, out _out1900);
                _5548_recursiveGen = _out1898;
                _5549_recOwned = _out1899;
                _5550_recIdents = _out1900;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5548_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1901;
                DCOMP._IOwnership _out1902;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1901, out _out1902);
                r = _out1901;
                resultingOwnership = _out1902;
                readIdents = _5550_recIdents;
              }
            } else if (_source219.is_Primitive) {
              DAST._IPrimitive _5551___mcc_h1016 = _source219.dtor_Primitive_a0;
              {
                RAST._IExpr _5552_recursiveGen;
                DCOMP._IOwnership _5553_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5554_recIdents;
                RAST._IExpr _out1903;
                DCOMP._IOwnership _out1904;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1905;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1903, out _out1904, out _out1905);
                _5552_recursiveGen = _out1903;
                _5553_recOwned = _out1904;
                _5554_recIdents = _out1905;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5552_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1906;
                DCOMP._IOwnership _out1907;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1906, out _out1907);
                r = _out1906;
                resultingOwnership = _out1907;
                readIdents = _5554_recIdents;
              }
            } else if (_source219.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _5555___mcc_h1018 = _source219.dtor_Passthrough_a0;
              {
                RAST._IExpr _5556_recursiveGen;
                DCOMP._IOwnership _5557_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5558_recIdents;
                RAST._IExpr _out1908;
                DCOMP._IOwnership _out1909;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1910;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1908, out _out1909, out _out1910);
                _5556_recursiveGen = _out1908;
                _5557_recOwned = _out1909;
                _5558_recIdents = _out1910;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5556_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1911;
                DCOMP._IOwnership _out1912;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1911, out _out1912);
                r = _out1911;
                resultingOwnership = _out1912;
                readIdents = _5558_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _5559___mcc_h1020 = _source219.dtor_TypeArg_a0;
              {
                RAST._IExpr _5560_recursiveGen;
                DCOMP._IOwnership _5561_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5562_recIdents;
                RAST._IExpr _out1913;
                DCOMP._IOwnership _out1914;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1915;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1913, out _out1914, out _out1915);
                _5560_recursiveGen = _out1913;
                _5561_recOwned = _out1914;
                _5562_recIdents = _out1915;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5560_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1916;
                DCOMP._IOwnership _out1917;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1916, out _out1917);
                r = _out1916;
                resultingOwnership = _out1917;
                readIdents = _5562_recIdents;
              }
            }
          } else if (_source206.is_Bool) {
            DAST._IType _source224 = _3467___mcc_h1;
            if (_source224.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5563___mcc_h1022 = _source224.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _5564___mcc_h1023 = _source224.dtor_typeArgs;
              DAST._IResolvedType _5565___mcc_h1024 = _source224.dtor_resolved;
              DAST._IResolvedType _source225 = _5565___mcc_h1024;
              if (_source225.is_Datatype) {
                DAST._IDatatypeType _5566___mcc_h1028 = _source225.dtor_datatypeType;
                {
                  RAST._IExpr _5567_recursiveGen;
                  DCOMP._IOwnership _5568_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5569_recIdents;
                  RAST._IExpr _out1918;
                  DCOMP._IOwnership _out1919;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1920;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1918, out _out1919, out _out1920);
                  _5567_recursiveGen = _out1918;
                  _5568_recOwned = _out1919;
                  _5569_recIdents = _out1920;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5567_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1921;
                  DCOMP._IOwnership _out1922;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1921, out _out1922);
                  r = _out1921;
                  resultingOwnership = _out1922;
                  readIdents = _5569_recIdents;
                }
              } else if (_source225.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5570___mcc_h1030 = _source225.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _5571___mcc_h1031 = _source225.dtor_attributes;
                {
                  RAST._IExpr _5572_recursiveGen;
                  DCOMP._IOwnership _5573_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5574_recIdents;
                  RAST._IExpr _out1923;
                  DCOMP._IOwnership _out1924;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1925;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1923, out _out1924, out _out1925);
                  _5572_recursiveGen = _out1923;
                  _5573_recOwned = _out1924;
                  _5574_recIdents = _out1925;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5572_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1926;
                  DCOMP._IOwnership _out1927;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1926, out _out1927);
                  r = _out1926;
                  resultingOwnership = _out1927;
                  readIdents = _5574_recIdents;
                }
              } else {
                DAST._IType _5575___mcc_h1034 = _source225.dtor_baseType;
                DAST._INewtypeRange _5576___mcc_h1035 = _source225.dtor_range;
                bool _5577___mcc_h1036 = _source225.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _5578___mcc_h1037 = _source225.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _5579_attributes = _5578___mcc_h1037;
                bool _5580_erase = _5577___mcc_h1036;
                DAST._INewtypeRange _5581_range = _5576___mcc_h1035;
                DAST._IType _5582_b = _5575___mcc_h1034;
                {
                  Std.Wrappers._IOption<RAST._IType> _5583_nativeToType;
                  _5583_nativeToType = DCOMP.COMP.NewtypeToRustType(_5582_b, _5581_range);
                  if (object.Equals(_3461_fromTpe, _5582_b)) {
                    RAST._IExpr _5584_recursiveGen;
                    DCOMP._IOwnership _5585_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5586_recIdents;
                    RAST._IExpr _out1928;
                    DCOMP._IOwnership _out1929;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1930;
                    DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1928, out _out1929, out _out1930);
                    _5584_recursiveGen = _out1928;
                    _5585_recOwned = _out1929;
                    _5586_recIdents = _out1930;
                    Std.Wrappers._IOption<RAST._IType> _source226 = _5583_nativeToType;
                    if (_source226.is_None) {
                      if (_5580_erase) {
                        r = _5584_recursiveGen;
                      } else {
                        RAST._IType _5587_rhsType;
                        RAST._IType _out1931;
                        _out1931 = DCOMP.COMP.GenType(_3462_toTpe, true, false);
                        _5587_rhsType = _out1931;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_5587_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_5584_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out1932;
                      DCOMP._IOwnership _out1933;
                      DCOMP.COMP.FromOwnership(r, _5585_recOwned, expectedOwnership, out _out1932, out _out1933);
                      r = _out1932;
                      resultingOwnership = _out1933;
                    } else {
                      RAST._IType _5588___mcc_h2085 = _source226.dtor_value;
                      RAST._IType _5589_v = _5588___mcc_h2085;
                      r = (((_5584_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_5589_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                      RAST._IExpr _out1934;
                      DCOMP._IOwnership _out1935;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1934, out _out1935);
                      r = _out1934;
                      resultingOwnership = _out1935;
                    }
                    readIdents = _5586_recIdents;
                  } else {
                    if ((_5583_nativeToType).is_Some) {
                      DAST._IType _source227 = _3461_fromTpe;
                      if (_source227.is_Path) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5590___mcc_h2086 = _source227.dtor_Path_a0;
                        Dafny.ISequence<DAST._IType> _5591___mcc_h2087 = _source227.dtor_typeArgs;
                        DAST._IResolvedType _5592___mcc_h2088 = _source227.dtor_resolved;
                        DAST._IResolvedType _source228 = _5592___mcc_h2088;
                        if (_source228.is_Datatype) {
                          DAST._IDatatypeType _5593___mcc_h2092 = _source228.dtor_datatypeType;
                        } else if (_source228.is_Trait) {
                          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5594___mcc_h2094 = _source228.dtor_path;
                          Dafny.ISequence<DAST._IAttribute> _5595___mcc_h2095 = _source228.dtor_attributes;
                        } else {
                          DAST._IType _5596___mcc_h2098 = _source228.dtor_baseType;
                          DAST._INewtypeRange _5597___mcc_h2099 = _source228.dtor_range;
                          bool _5598___mcc_h2100 = _source228.dtor_erase;
                          Dafny.ISequence<DAST._IAttribute> _5599___mcc_h2101 = _source228.dtor_attributes;
                          Dafny.ISequence<DAST._IAttribute> _5600_attributes0 = _5599___mcc_h2101;
                          bool _5601_erase0 = _5598___mcc_h2100;
                          DAST._INewtypeRange _5602_range0 = _5597___mcc_h2099;
                          DAST._IType _5603_b0 = _5596___mcc_h2098;
                          {
                            Std.Wrappers._IOption<RAST._IType> _5604_nativeFromType;
                            _5604_nativeFromType = DCOMP.COMP.NewtypeToRustType(_5603_b0, _5602_range0);
                            if ((_5604_nativeFromType).is_Some) {
                              RAST._IExpr _5605_recursiveGen;
                              DCOMP._IOwnership _5606_recOwned;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5607_recIdents;
                              RAST._IExpr _out1936;
                              DCOMP._IOwnership _out1937;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1938;
                              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1936, out _out1937, out _out1938);
                              _5605_recursiveGen = _out1936;
                              _5606_recOwned = _out1937;
                              _5607_recIdents = _out1938;
                              RAST._IExpr _out1939;
                              DCOMP._IOwnership _out1940;
                              DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_5605_recursiveGen, (_5583_nativeToType).dtor_value), _5606_recOwned, expectedOwnership, out _out1939, out _out1940);
                              r = _out1939;
                              resultingOwnership = _out1940;
                              readIdents = _5607_recIdents;
                              return ;
                            }
                          }
                        }
                      } else if (_source227.is_Nullable) {
                        DAST._IType _5608___mcc_h2106 = _source227.dtor_Nullable_a0;
                      } else if (_source227.is_Tuple) {
                        Dafny.ISequence<DAST._IType> _5609___mcc_h2108 = _source227.dtor_Tuple_a0;
                      } else if (_source227.is_Array) {
                        DAST._IType _5610___mcc_h2110 = _source227.dtor_element;
                        BigInteger _5611___mcc_h2111 = _source227.dtor_dims;
                      } else if (_source227.is_Seq) {
                        DAST._IType _5612___mcc_h2114 = _source227.dtor_element;
                      } else if (_source227.is_Set) {
                        DAST._IType _5613___mcc_h2116 = _source227.dtor_element;
                      } else if (_source227.is_Multiset) {
                        DAST._IType _5614___mcc_h2118 = _source227.dtor_element;
                      } else if (_source227.is_Map) {
                        DAST._IType _5615___mcc_h2120 = _source227.dtor_key;
                        DAST._IType _5616___mcc_h2121 = _source227.dtor_value;
                      } else if (_source227.is_SetBuilder) {
                        DAST._IType _5617___mcc_h2124 = _source227.dtor_element;
                      } else if (_source227.is_MapBuilder) {
                        DAST._IType _5618___mcc_h2126 = _source227.dtor_key;
                        DAST._IType _5619___mcc_h2127 = _source227.dtor_value;
                      } else if (_source227.is_Arrow) {
                        Dafny.ISequence<DAST._IType> _5620___mcc_h2130 = _source227.dtor_args;
                        DAST._IType _5621___mcc_h2131 = _source227.dtor_result;
                      } else if (_source227.is_Primitive) {
                        DAST._IPrimitive _5622___mcc_h2134 = _source227.dtor_Primitive_a0;
                      } else if (_source227.is_Passthrough) {
                        Dafny.ISequence<Dafny.Rune> _5623___mcc_h2136 = _source227.dtor_Passthrough_a0;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _5624___mcc_h2138 = _source227.dtor_TypeArg_a0;
                      }
                      if (object.Equals(_3461_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _5625_recursiveGen;
                        DCOMP._IOwnership _5626_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5627_recIdents;
                        RAST._IExpr _out1941;
                        DCOMP._IOwnership _out1942;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1943;
                        DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1941, out _out1942, out _out1943);
                        _5625_recursiveGen = _out1941;
                        _5626_recOwned = _out1942;
                        _5627_recIdents = _out1943;
                        RAST._IExpr _out1944;
                        DCOMP._IOwnership _out1945;
                        DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_5625_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_5583_nativeToType).dtor_value), _5626_recOwned, expectedOwnership, out _out1944, out _out1945);
                        r = _out1944;
                        resultingOwnership = _out1945;
                        readIdents = _5627_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out1946;
                    DCOMP._IOwnership _out1947;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1948;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3460_expr, _3461_fromTpe, _5582_b), _5582_b, _3462_toTpe), selfIdent, env, expectedOwnership, out _out1946, out _out1947, out _out1948);
                    r = _out1946;
                    resultingOwnership = _out1947;
                    readIdents = _out1948;
                  }
                }
              }
            } else if (_source224.is_Nullable) {
              DAST._IType _5628___mcc_h1042 = _source224.dtor_Nullable_a0;
              {
                RAST._IExpr _5629_recursiveGen;
                DCOMP._IOwnership _5630_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5631_recIdents;
                RAST._IExpr _out1949;
                DCOMP._IOwnership _out1950;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1951;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1949, out _out1950, out _out1951);
                _5629_recursiveGen = _out1949;
                _5630_recOwned = _out1950;
                _5631_recIdents = _out1951;
                r = _5629_recursiveGen;
                if (object.Equals(_5630_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out1952;
                DCOMP._IOwnership _out1953;
                DCOMP.COMP.FromOwnership(r, _5630_recOwned, expectedOwnership, out _out1952, out _out1953);
                r = _out1952;
                resultingOwnership = _out1953;
                readIdents = _5631_recIdents;
              }
            } else if (_source224.is_Tuple) {
              Dafny.ISequence<DAST._IType> _5632___mcc_h1044 = _source224.dtor_Tuple_a0;
              {
                RAST._IExpr _5633_recursiveGen;
                DCOMP._IOwnership _5634_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5635_recIdents;
                RAST._IExpr _out1954;
                DCOMP._IOwnership _out1955;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1956;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1954, out _out1955, out _out1956);
                _5633_recursiveGen = _out1954;
                _5634_recOwned = _out1955;
                _5635_recIdents = _out1956;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5633_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1957;
                DCOMP._IOwnership _out1958;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1957, out _out1958);
                r = _out1957;
                resultingOwnership = _out1958;
                readIdents = _5635_recIdents;
              }
            } else if (_source224.is_Array) {
              DAST._IType _5636___mcc_h1046 = _source224.dtor_element;
              BigInteger _5637___mcc_h1047 = _source224.dtor_dims;
              {
                RAST._IExpr _5638_recursiveGen;
                DCOMP._IOwnership _5639_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5640_recIdents;
                RAST._IExpr _out1959;
                DCOMP._IOwnership _out1960;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1961;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1959, out _out1960, out _out1961);
                _5638_recursiveGen = _out1959;
                _5639_recOwned = _out1960;
                _5640_recIdents = _out1961;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5638_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1962;
                DCOMP._IOwnership _out1963;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1962, out _out1963);
                r = _out1962;
                resultingOwnership = _out1963;
                readIdents = _5640_recIdents;
              }
            } else if (_source224.is_Seq) {
              DAST._IType _5641___mcc_h1050 = _source224.dtor_element;
              {
                RAST._IExpr _5642_recursiveGen;
                DCOMP._IOwnership _5643_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5644_recIdents;
                RAST._IExpr _out1964;
                DCOMP._IOwnership _out1965;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1966;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1964, out _out1965, out _out1966);
                _5642_recursiveGen = _out1964;
                _5643_recOwned = _out1965;
                _5644_recIdents = _out1966;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5642_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1967;
                DCOMP._IOwnership _out1968;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1967, out _out1968);
                r = _out1967;
                resultingOwnership = _out1968;
                readIdents = _5644_recIdents;
              }
            } else if (_source224.is_Set) {
              DAST._IType _5645___mcc_h1052 = _source224.dtor_element;
              {
                RAST._IExpr _5646_recursiveGen;
                DCOMP._IOwnership _5647_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5648_recIdents;
                RAST._IExpr _out1969;
                DCOMP._IOwnership _out1970;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1971;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1969, out _out1970, out _out1971);
                _5646_recursiveGen = _out1969;
                _5647_recOwned = _out1970;
                _5648_recIdents = _out1971;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5646_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1972;
                DCOMP._IOwnership _out1973;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1972, out _out1973);
                r = _out1972;
                resultingOwnership = _out1973;
                readIdents = _5648_recIdents;
              }
            } else if (_source224.is_Multiset) {
              DAST._IType _5649___mcc_h1054 = _source224.dtor_element;
              {
                RAST._IExpr _5650_recursiveGen;
                DCOMP._IOwnership _5651_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5652_recIdents;
                RAST._IExpr _out1974;
                DCOMP._IOwnership _out1975;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1976;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1974, out _out1975, out _out1976);
                _5650_recursiveGen = _out1974;
                _5651_recOwned = _out1975;
                _5652_recIdents = _out1976;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5650_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1977;
                DCOMP._IOwnership _out1978;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1977, out _out1978);
                r = _out1977;
                resultingOwnership = _out1978;
                readIdents = _5652_recIdents;
              }
            } else if (_source224.is_Map) {
              DAST._IType _5653___mcc_h1056 = _source224.dtor_key;
              DAST._IType _5654___mcc_h1057 = _source224.dtor_value;
              {
                RAST._IExpr _5655_recursiveGen;
                DCOMP._IOwnership _5656_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5657_recIdents;
                RAST._IExpr _out1979;
                DCOMP._IOwnership _out1980;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1981;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1979, out _out1980, out _out1981);
                _5655_recursiveGen = _out1979;
                _5656_recOwned = _out1980;
                _5657_recIdents = _out1981;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5655_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1982;
                DCOMP._IOwnership _out1983;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1982, out _out1983);
                r = _out1982;
                resultingOwnership = _out1983;
                readIdents = _5657_recIdents;
              }
            } else if (_source224.is_SetBuilder) {
              DAST._IType _5658___mcc_h1060 = _source224.dtor_element;
              {
                RAST._IExpr _5659_recursiveGen;
                DCOMP._IOwnership _5660_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5661_recIdents;
                RAST._IExpr _out1984;
                DCOMP._IOwnership _out1985;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1986;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1984, out _out1985, out _out1986);
                _5659_recursiveGen = _out1984;
                _5660_recOwned = _out1985;
                _5661_recIdents = _out1986;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5659_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1987;
                DCOMP._IOwnership _out1988;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1987, out _out1988);
                r = _out1987;
                resultingOwnership = _out1988;
                readIdents = _5661_recIdents;
              }
            } else if (_source224.is_MapBuilder) {
              DAST._IType _5662___mcc_h1062 = _source224.dtor_key;
              DAST._IType _5663___mcc_h1063 = _source224.dtor_value;
              {
                RAST._IExpr _5664_recursiveGen;
                DCOMP._IOwnership _5665_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5666_recIdents;
                RAST._IExpr _out1989;
                DCOMP._IOwnership _out1990;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1991;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1989, out _out1990, out _out1991);
                _5664_recursiveGen = _out1989;
                _5665_recOwned = _out1990;
                _5666_recIdents = _out1991;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5664_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1992;
                DCOMP._IOwnership _out1993;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1992, out _out1993);
                r = _out1992;
                resultingOwnership = _out1993;
                readIdents = _5666_recIdents;
              }
            } else if (_source224.is_Arrow) {
              Dafny.ISequence<DAST._IType> _5667___mcc_h1066 = _source224.dtor_args;
              DAST._IType _5668___mcc_h1067 = _source224.dtor_result;
              {
                RAST._IExpr _5669_recursiveGen;
                DCOMP._IOwnership _5670_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5671_recIdents;
                RAST._IExpr _out1994;
                DCOMP._IOwnership _out1995;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1996;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1994, out _out1995, out _out1996);
                _5669_recursiveGen = _out1994;
                _5670_recOwned = _out1995;
                _5671_recIdents = _out1996;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5669_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1997;
                DCOMP._IOwnership _out1998;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1997, out _out1998);
                r = _out1997;
                resultingOwnership = _out1998;
                readIdents = _5671_recIdents;
              }
            } else if (_source224.is_Primitive) {
              DAST._IPrimitive _5672___mcc_h1070 = _source224.dtor_Primitive_a0;
              {
                RAST._IExpr _5673_recursiveGen;
                DCOMP._IOwnership _5674_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5675_recIdents;
                RAST._IExpr _out1999;
                DCOMP._IOwnership _out2000;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2001;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out1999, out _out2000, out _out2001);
                _5673_recursiveGen = _out1999;
                _5674_recOwned = _out2000;
                _5675_recIdents = _out2001;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5673_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2002;
                DCOMP._IOwnership _out2003;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2002, out _out2003);
                r = _out2002;
                resultingOwnership = _out2003;
                readIdents = _5675_recIdents;
              }
            } else if (_source224.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _5676___mcc_h1072 = _source224.dtor_Passthrough_a0;
              {
                RAST._IExpr _5677_recursiveGen;
                DCOMP._IOwnership _5678_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5679_recIdents;
                RAST._IExpr _out2004;
                DCOMP._IOwnership _out2005;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2006;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2004, out _out2005, out _out2006);
                _5677_recursiveGen = _out2004;
                _5678_recOwned = _out2005;
                _5679_recIdents = _out2006;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5677_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2007;
                DCOMP._IOwnership _out2008;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2007, out _out2008);
                r = _out2007;
                resultingOwnership = _out2008;
                readIdents = _5679_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _5680___mcc_h1074 = _source224.dtor_TypeArg_a0;
              {
                RAST._IExpr _5681_recursiveGen;
                DCOMP._IOwnership _5682_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5683_recIdents;
                RAST._IExpr _out2009;
                DCOMP._IOwnership _out2010;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2011;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2009, out _out2010, out _out2011);
                _5681_recursiveGen = _out2009;
                _5682_recOwned = _out2010;
                _5683_recIdents = _out2011;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5681_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2012;
                DCOMP._IOwnership _out2013;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2012, out _out2013);
                r = _out2012;
                resultingOwnership = _out2013;
                readIdents = _5683_recIdents;
              }
            }
          } else {
            DAST._IType _source229 = _3467___mcc_h1;
            if (_source229.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5684___mcc_h1076 = _source229.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _5685___mcc_h1077 = _source229.dtor_typeArgs;
              DAST._IResolvedType _5686___mcc_h1078 = _source229.dtor_resolved;
              DAST._IResolvedType _source230 = _5686___mcc_h1078;
              if (_source230.is_Datatype) {
                DAST._IDatatypeType _5687___mcc_h1082 = _source230.dtor_datatypeType;
                {
                  RAST._IExpr _5688_recursiveGen;
                  DCOMP._IOwnership _5689_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5690_recIdents;
                  RAST._IExpr _out2014;
                  DCOMP._IOwnership _out2015;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2016;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2014, out _out2015, out _out2016);
                  _5688_recursiveGen = _out2014;
                  _5689_recOwned = _out2015;
                  _5690_recIdents = _out2016;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5688_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out2017;
                  DCOMP._IOwnership _out2018;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2017, out _out2018);
                  r = _out2017;
                  resultingOwnership = _out2018;
                  readIdents = _5690_recIdents;
                }
              } else if (_source230.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5691___mcc_h1084 = _source230.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _5692___mcc_h1085 = _source230.dtor_attributes;
                {
                  RAST._IExpr _5693_recursiveGen;
                  DCOMP._IOwnership _5694_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5695_recIdents;
                  RAST._IExpr _out2019;
                  DCOMP._IOwnership _out2020;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2021;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2019, out _out2020, out _out2021);
                  _5693_recursiveGen = _out2019;
                  _5694_recOwned = _out2020;
                  _5695_recIdents = _out2021;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5693_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out2022;
                  DCOMP._IOwnership _out2023;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2022, out _out2023);
                  r = _out2022;
                  resultingOwnership = _out2023;
                  readIdents = _5695_recIdents;
                }
              } else {
                DAST._IType _5696___mcc_h1088 = _source230.dtor_baseType;
                DAST._INewtypeRange _5697___mcc_h1089 = _source230.dtor_range;
                bool _5698___mcc_h1090 = _source230.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _5699___mcc_h1091 = _source230.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _5700_attributes = _5699___mcc_h1091;
                bool _5701_erase = _5698___mcc_h1090;
                DAST._INewtypeRange _5702_range = _5697___mcc_h1089;
                DAST._IType _5703_b = _5696___mcc_h1088;
                {
                  Std.Wrappers._IOption<RAST._IType> _5704_nativeToType;
                  _5704_nativeToType = DCOMP.COMP.NewtypeToRustType(_5703_b, _5702_range);
                  if (object.Equals(_3461_fromTpe, _5703_b)) {
                    RAST._IExpr _5705_recursiveGen;
                    DCOMP._IOwnership _5706_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5707_recIdents;
                    RAST._IExpr _out2024;
                    DCOMP._IOwnership _out2025;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2026;
                    DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2024, out _out2025, out _out2026);
                    _5705_recursiveGen = _out2024;
                    _5706_recOwned = _out2025;
                    _5707_recIdents = _out2026;
                    Std.Wrappers._IOption<RAST._IType> _source231 = _5704_nativeToType;
                    if (_source231.is_None) {
                      if (_5701_erase) {
                        r = _5705_recursiveGen;
                      } else {
                        RAST._IType _5708_rhsType;
                        RAST._IType _out2027;
                        _out2027 = DCOMP.COMP.GenType(_3462_toTpe, true, false);
                        _5708_rhsType = _out2027;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_5708_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_5705_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out2028;
                      DCOMP._IOwnership _out2029;
                      DCOMP.COMP.FromOwnership(r, _5706_recOwned, expectedOwnership, out _out2028, out _out2029);
                      r = _out2028;
                      resultingOwnership = _out2029;
                    } else {
                      RAST._IType _5709___mcc_h2140 = _source231.dtor_value;
                      RAST._IType _5710_v = _5709___mcc_h2140;
                      r = (((_5705_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_5710_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                      RAST._IExpr _out2030;
                      DCOMP._IOwnership _out2031;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2030, out _out2031);
                      r = _out2030;
                      resultingOwnership = _out2031;
                    }
                    readIdents = _5707_recIdents;
                  } else {
                    if ((_5704_nativeToType).is_Some) {
                      DAST._IType _source232 = _3461_fromTpe;
                      if (_source232.is_Path) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5711___mcc_h2141 = _source232.dtor_Path_a0;
                        Dafny.ISequence<DAST._IType> _5712___mcc_h2142 = _source232.dtor_typeArgs;
                        DAST._IResolvedType _5713___mcc_h2143 = _source232.dtor_resolved;
                        DAST._IResolvedType _source233 = _5713___mcc_h2143;
                        if (_source233.is_Datatype) {
                          DAST._IDatatypeType _5714___mcc_h2147 = _source233.dtor_datatypeType;
                        } else if (_source233.is_Trait) {
                          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5715___mcc_h2149 = _source233.dtor_path;
                          Dafny.ISequence<DAST._IAttribute> _5716___mcc_h2150 = _source233.dtor_attributes;
                        } else {
                          DAST._IType _5717___mcc_h2153 = _source233.dtor_baseType;
                          DAST._INewtypeRange _5718___mcc_h2154 = _source233.dtor_range;
                          bool _5719___mcc_h2155 = _source233.dtor_erase;
                          Dafny.ISequence<DAST._IAttribute> _5720___mcc_h2156 = _source233.dtor_attributes;
                          Dafny.ISequence<DAST._IAttribute> _5721_attributes0 = _5720___mcc_h2156;
                          bool _5722_erase0 = _5719___mcc_h2155;
                          DAST._INewtypeRange _5723_range0 = _5718___mcc_h2154;
                          DAST._IType _5724_b0 = _5717___mcc_h2153;
                          {
                            Std.Wrappers._IOption<RAST._IType> _5725_nativeFromType;
                            _5725_nativeFromType = DCOMP.COMP.NewtypeToRustType(_5724_b0, _5723_range0);
                            if ((_5725_nativeFromType).is_Some) {
                              RAST._IExpr _5726_recursiveGen;
                              DCOMP._IOwnership _5727_recOwned;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5728_recIdents;
                              RAST._IExpr _out2032;
                              DCOMP._IOwnership _out2033;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2034;
                              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2032, out _out2033, out _out2034);
                              _5726_recursiveGen = _out2032;
                              _5727_recOwned = _out2033;
                              _5728_recIdents = _out2034;
                              RAST._IExpr _out2035;
                              DCOMP._IOwnership _out2036;
                              DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_5726_recursiveGen, (_5704_nativeToType).dtor_value), _5727_recOwned, expectedOwnership, out _out2035, out _out2036);
                              r = _out2035;
                              resultingOwnership = _out2036;
                              readIdents = _5728_recIdents;
                              return ;
                            }
                          }
                        }
                      } else if (_source232.is_Nullable) {
                        DAST._IType _5729___mcc_h2161 = _source232.dtor_Nullable_a0;
                      } else if (_source232.is_Tuple) {
                        Dafny.ISequence<DAST._IType> _5730___mcc_h2163 = _source232.dtor_Tuple_a0;
                      } else if (_source232.is_Array) {
                        DAST._IType _5731___mcc_h2165 = _source232.dtor_element;
                        BigInteger _5732___mcc_h2166 = _source232.dtor_dims;
                      } else if (_source232.is_Seq) {
                        DAST._IType _5733___mcc_h2169 = _source232.dtor_element;
                      } else if (_source232.is_Set) {
                        DAST._IType _5734___mcc_h2171 = _source232.dtor_element;
                      } else if (_source232.is_Multiset) {
                        DAST._IType _5735___mcc_h2173 = _source232.dtor_element;
                      } else if (_source232.is_Map) {
                        DAST._IType _5736___mcc_h2175 = _source232.dtor_key;
                        DAST._IType _5737___mcc_h2176 = _source232.dtor_value;
                      } else if (_source232.is_SetBuilder) {
                        DAST._IType _5738___mcc_h2179 = _source232.dtor_element;
                      } else if (_source232.is_MapBuilder) {
                        DAST._IType _5739___mcc_h2181 = _source232.dtor_key;
                        DAST._IType _5740___mcc_h2182 = _source232.dtor_value;
                      } else if (_source232.is_Arrow) {
                        Dafny.ISequence<DAST._IType> _5741___mcc_h2185 = _source232.dtor_args;
                        DAST._IType _5742___mcc_h2186 = _source232.dtor_result;
                      } else if (_source232.is_Primitive) {
                        DAST._IPrimitive _5743___mcc_h2189 = _source232.dtor_Primitive_a0;
                      } else if (_source232.is_Passthrough) {
                        Dafny.ISequence<Dafny.Rune> _5744___mcc_h2191 = _source232.dtor_Passthrough_a0;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _5745___mcc_h2193 = _source232.dtor_TypeArg_a0;
                      }
                      if (object.Equals(_3461_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _5746_recursiveGen;
                        DCOMP._IOwnership _5747_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5748_recIdents;
                        RAST._IExpr _out2037;
                        DCOMP._IOwnership _out2038;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2039;
                        DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2037, out _out2038, out _out2039);
                        _5746_recursiveGen = _out2037;
                        _5747_recOwned = _out2038;
                        _5748_recIdents = _out2039;
                        RAST._IExpr _out2040;
                        DCOMP._IOwnership _out2041;
                        DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_5746_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_5704_nativeToType).dtor_value), _5747_recOwned, expectedOwnership, out _out2040, out _out2041);
                        r = _out2040;
                        resultingOwnership = _out2041;
                        readIdents = _5748_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out2042;
                    DCOMP._IOwnership _out2043;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2044;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3460_expr, _3461_fromTpe, _5703_b), _5703_b, _3462_toTpe), selfIdent, env, expectedOwnership, out _out2042, out _out2043, out _out2044);
                    r = _out2042;
                    resultingOwnership = _out2043;
                    readIdents = _out2044;
                  }
                }
              }
            } else if (_source229.is_Nullable) {
              DAST._IType _5749___mcc_h1096 = _source229.dtor_Nullable_a0;
              {
                RAST._IExpr _5750_recursiveGen;
                DCOMP._IOwnership _5751_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5752_recIdents;
                RAST._IExpr _out2045;
                DCOMP._IOwnership _out2046;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2047;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2045, out _out2046, out _out2047);
                _5750_recursiveGen = _out2045;
                _5751_recOwned = _out2046;
                _5752_recIdents = _out2047;
                r = _5750_recursiveGen;
                if (object.Equals(_5751_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out2048;
                DCOMP._IOwnership _out2049;
                DCOMP.COMP.FromOwnership(r, _5751_recOwned, expectedOwnership, out _out2048, out _out2049);
                r = _out2048;
                resultingOwnership = _out2049;
                readIdents = _5752_recIdents;
              }
            } else if (_source229.is_Tuple) {
              Dafny.ISequence<DAST._IType> _5753___mcc_h1098 = _source229.dtor_Tuple_a0;
              {
                RAST._IExpr _5754_recursiveGen;
                DCOMP._IOwnership _5755_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5756_recIdents;
                RAST._IExpr _out2050;
                DCOMP._IOwnership _out2051;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2052;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2050, out _out2051, out _out2052);
                _5754_recursiveGen = _out2050;
                _5755_recOwned = _out2051;
                _5756_recIdents = _out2052;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5754_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2053;
                DCOMP._IOwnership _out2054;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2053, out _out2054);
                r = _out2053;
                resultingOwnership = _out2054;
                readIdents = _5756_recIdents;
              }
            } else if (_source229.is_Array) {
              DAST._IType _5757___mcc_h1100 = _source229.dtor_element;
              BigInteger _5758___mcc_h1101 = _source229.dtor_dims;
              {
                RAST._IExpr _5759_recursiveGen;
                DCOMP._IOwnership _5760_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5761_recIdents;
                RAST._IExpr _out2055;
                DCOMP._IOwnership _out2056;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2057;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2055, out _out2056, out _out2057);
                _5759_recursiveGen = _out2055;
                _5760_recOwned = _out2056;
                _5761_recIdents = _out2057;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5759_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2058;
                DCOMP._IOwnership _out2059;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2058, out _out2059);
                r = _out2058;
                resultingOwnership = _out2059;
                readIdents = _5761_recIdents;
              }
            } else if (_source229.is_Seq) {
              DAST._IType _5762___mcc_h1104 = _source229.dtor_element;
              {
                RAST._IExpr _5763_recursiveGen;
                DCOMP._IOwnership _5764_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5765_recIdents;
                RAST._IExpr _out2060;
                DCOMP._IOwnership _out2061;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2062;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2060, out _out2061, out _out2062);
                _5763_recursiveGen = _out2060;
                _5764_recOwned = _out2061;
                _5765_recIdents = _out2062;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5763_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2063;
                DCOMP._IOwnership _out2064;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2063, out _out2064);
                r = _out2063;
                resultingOwnership = _out2064;
                readIdents = _5765_recIdents;
              }
            } else if (_source229.is_Set) {
              DAST._IType _5766___mcc_h1106 = _source229.dtor_element;
              {
                RAST._IExpr _5767_recursiveGen;
                DCOMP._IOwnership _5768_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5769_recIdents;
                RAST._IExpr _out2065;
                DCOMP._IOwnership _out2066;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2067;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2065, out _out2066, out _out2067);
                _5767_recursiveGen = _out2065;
                _5768_recOwned = _out2066;
                _5769_recIdents = _out2067;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5767_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2068;
                DCOMP._IOwnership _out2069;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2068, out _out2069);
                r = _out2068;
                resultingOwnership = _out2069;
                readIdents = _5769_recIdents;
              }
            } else if (_source229.is_Multiset) {
              DAST._IType _5770___mcc_h1108 = _source229.dtor_element;
              {
                RAST._IExpr _5771_recursiveGen;
                DCOMP._IOwnership _5772_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5773_recIdents;
                RAST._IExpr _out2070;
                DCOMP._IOwnership _out2071;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2072;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2070, out _out2071, out _out2072);
                _5771_recursiveGen = _out2070;
                _5772_recOwned = _out2071;
                _5773_recIdents = _out2072;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5771_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2073;
                DCOMP._IOwnership _out2074;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2073, out _out2074);
                r = _out2073;
                resultingOwnership = _out2074;
                readIdents = _5773_recIdents;
              }
            } else if (_source229.is_Map) {
              DAST._IType _5774___mcc_h1110 = _source229.dtor_key;
              DAST._IType _5775___mcc_h1111 = _source229.dtor_value;
              {
                RAST._IExpr _5776_recursiveGen;
                DCOMP._IOwnership _5777_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5778_recIdents;
                RAST._IExpr _out2075;
                DCOMP._IOwnership _out2076;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2077;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2075, out _out2076, out _out2077);
                _5776_recursiveGen = _out2075;
                _5777_recOwned = _out2076;
                _5778_recIdents = _out2077;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5776_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2078;
                DCOMP._IOwnership _out2079;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2078, out _out2079);
                r = _out2078;
                resultingOwnership = _out2079;
                readIdents = _5778_recIdents;
              }
            } else if (_source229.is_SetBuilder) {
              DAST._IType _5779___mcc_h1114 = _source229.dtor_element;
              {
                RAST._IExpr _5780_recursiveGen;
                DCOMP._IOwnership _5781_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5782_recIdents;
                RAST._IExpr _out2080;
                DCOMP._IOwnership _out2081;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2082;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2080, out _out2081, out _out2082);
                _5780_recursiveGen = _out2080;
                _5781_recOwned = _out2081;
                _5782_recIdents = _out2082;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5780_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2083;
                DCOMP._IOwnership _out2084;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2083, out _out2084);
                r = _out2083;
                resultingOwnership = _out2084;
                readIdents = _5782_recIdents;
              }
            } else if (_source229.is_MapBuilder) {
              DAST._IType _5783___mcc_h1116 = _source229.dtor_key;
              DAST._IType _5784___mcc_h1117 = _source229.dtor_value;
              {
                RAST._IExpr _5785_recursiveGen;
                DCOMP._IOwnership _5786_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5787_recIdents;
                RAST._IExpr _out2085;
                DCOMP._IOwnership _out2086;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2087;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2085, out _out2086, out _out2087);
                _5785_recursiveGen = _out2085;
                _5786_recOwned = _out2086;
                _5787_recIdents = _out2087;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5785_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2088;
                DCOMP._IOwnership _out2089;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2088, out _out2089);
                r = _out2088;
                resultingOwnership = _out2089;
                readIdents = _5787_recIdents;
              }
            } else if (_source229.is_Arrow) {
              Dafny.ISequence<DAST._IType> _5788___mcc_h1120 = _source229.dtor_args;
              DAST._IType _5789___mcc_h1121 = _source229.dtor_result;
              {
                RAST._IExpr _5790_recursiveGen;
                DCOMP._IOwnership _5791_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5792_recIdents;
                RAST._IExpr _out2090;
                DCOMP._IOwnership _out2091;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2092;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2090, out _out2091, out _out2092);
                _5790_recursiveGen = _out2090;
                _5791_recOwned = _out2091;
                _5792_recIdents = _out2092;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5790_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2093;
                DCOMP._IOwnership _out2094;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2093, out _out2094);
                r = _out2093;
                resultingOwnership = _out2094;
                readIdents = _5792_recIdents;
              }
            } else if (_source229.is_Primitive) {
              DAST._IPrimitive _5793___mcc_h1124 = _source229.dtor_Primitive_a0;
              DAST._IPrimitive _source234 = _5793___mcc_h1124;
              if (_source234.is_Int) {
                {
                  RAST._IType _5794_rhsType;
                  RAST._IType _out2095;
                  _out2095 = DCOMP.COMP.GenType(_3461_fromTpe, true, false);
                  _5794_rhsType = _out2095;
                  RAST._IExpr _5795_recursiveGen;
                  DCOMP._IOwnership _5796___v87;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5797_recIdents;
                  RAST._IExpr _out2096;
                  DCOMP._IOwnership _out2097;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2098;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2096, out _out2097, out _out2098);
                  _5795_recursiveGen = _out2096;
                  _5796___v87 = _out2097;
                  _5797_recIdents = _out2098;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyInt{data: ::dafny_runtime::BigInt::from("), (_5795_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as u32)}")));
                  RAST._IExpr _out2099;
                  DCOMP._IOwnership _out2100;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2099, out _out2100);
                  r = _out2099;
                  resultingOwnership = _out2100;
                  readIdents = _5797_recIdents;
                }
              } else if (_source234.is_Real) {
                {
                  RAST._IExpr _5798_recursiveGen;
                  DCOMP._IOwnership _5799_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5800_recIdents;
                  RAST._IExpr _out2101;
                  DCOMP._IOwnership _out2102;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2103;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2101, out _out2102, out _out2103);
                  _5798_recursiveGen = _out2101;
                  _5799_recOwned = _out2102;
                  _5800_recIdents = _out2103;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5798_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out2104;
                  DCOMP._IOwnership _out2105;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2104, out _out2105);
                  r = _out2104;
                  resultingOwnership = _out2105;
                  readIdents = _5800_recIdents;
                }
              } else if (_source234.is_String) {
                {
                  RAST._IExpr _5801_recursiveGen;
                  DCOMP._IOwnership _5802_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5803_recIdents;
                  RAST._IExpr _out2106;
                  DCOMP._IOwnership _out2107;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2108;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2106, out _out2107, out _out2108);
                  _5801_recursiveGen = _out2106;
                  _5802_recOwned = _out2107;
                  _5803_recIdents = _out2108;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5801_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out2109;
                  DCOMP._IOwnership _out2110;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2109, out _out2110);
                  r = _out2109;
                  resultingOwnership = _out2110;
                  readIdents = _5803_recIdents;
                }
              } else if (_source234.is_Bool) {
                {
                  RAST._IExpr _5804_recursiveGen;
                  DCOMP._IOwnership _5805_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5806_recIdents;
                  RAST._IExpr _out2111;
                  DCOMP._IOwnership _out2112;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2113;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2111, out _out2112, out _out2113);
                  _5804_recursiveGen = _out2111;
                  _5805_recOwned = _out2112;
                  _5806_recIdents = _out2113;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5804_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out2114;
                  DCOMP._IOwnership _out2115;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2114, out _out2115);
                  r = _out2114;
                  resultingOwnership = _out2115;
                  readIdents = _5806_recIdents;
                }
              } else {
                {
                  RAST._IExpr _5807_recursiveGen;
                  DCOMP._IOwnership _5808_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5809_recIdents;
                  RAST._IExpr _out2116;
                  DCOMP._IOwnership _out2117;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2118;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2116, out _out2117, out _out2118);
                  _5807_recursiveGen = _out2116;
                  _5808_recOwned = _out2117;
                  _5809_recIdents = _out2118;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5807_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out2119;
                  DCOMP._IOwnership _out2120;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2119, out _out2120);
                  r = _out2119;
                  resultingOwnership = _out2120;
                  readIdents = _5809_recIdents;
                }
              }
            } else if (_source229.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _5810___mcc_h1126 = _source229.dtor_Passthrough_a0;
              {
                RAST._IExpr _5811_recursiveGen;
                DCOMP._IOwnership _5812_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5813_recIdents;
                RAST._IExpr _out2121;
                DCOMP._IOwnership _out2122;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2123;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2121, out _out2122, out _out2123);
                _5811_recursiveGen = _out2121;
                _5812_recOwned = _out2122;
                _5813_recIdents = _out2123;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5811_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2124;
                DCOMP._IOwnership _out2125;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2124, out _out2125);
                r = _out2124;
                resultingOwnership = _out2125;
                readIdents = _5813_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _5814___mcc_h1128 = _source229.dtor_TypeArg_a0;
              {
                RAST._IExpr _5815_recursiveGen;
                DCOMP._IOwnership _5816_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5817_recIdents;
                RAST._IExpr _out2126;
                DCOMP._IOwnership _out2127;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2128;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2126, out _out2127, out _out2128);
                _5815_recursiveGen = _out2126;
                _5816_recOwned = _out2127;
                _5817_recIdents = _out2128;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5815_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2129;
                DCOMP._IOwnership _out2130;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2129, out _out2130);
                r = _out2129;
                resultingOwnership = _out2130;
                readIdents = _5817_recIdents;
              }
            }
          }
        } else if (_source128.is_Passthrough) {
          Dafny.ISequence<Dafny.Rune> _5818___mcc_h1130 = _source128.dtor_Passthrough_a0;
          DAST._IType _source235 = _3467___mcc_h1;
          if (_source235.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5819___mcc_h1134 = _source235.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _5820___mcc_h1135 = _source235.dtor_typeArgs;
            DAST._IResolvedType _5821___mcc_h1136 = _source235.dtor_resolved;
            DAST._IResolvedType _source236 = _5821___mcc_h1136;
            if (_source236.is_Datatype) {
              DAST._IDatatypeType _5822___mcc_h1140 = _source236.dtor_datatypeType;
              {
                RAST._IExpr _5823_recursiveGen;
                DCOMP._IOwnership _5824_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5825_recIdents;
                RAST._IExpr _out2131;
                DCOMP._IOwnership _out2132;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2133;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2131, out _out2132, out _out2133);
                _5823_recursiveGen = _out2131;
                _5824_recOwned = _out2132;
                _5825_recIdents = _out2133;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5823_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2134;
                DCOMP._IOwnership _out2135;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2134, out _out2135);
                r = _out2134;
                resultingOwnership = _out2135;
                readIdents = _5825_recIdents;
              }
            } else if (_source236.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5826___mcc_h1142 = _source236.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _5827___mcc_h1143 = _source236.dtor_attributes;
              {
                RAST._IExpr _5828_recursiveGen;
                DCOMP._IOwnership _5829_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5830_recIdents;
                RAST._IExpr _out2136;
                DCOMP._IOwnership _out2137;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2138;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2136, out _out2137, out _out2138);
                _5828_recursiveGen = _out2136;
                _5829_recOwned = _out2137;
                _5830_recIdents = _out2138;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5828_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2139;
                DCOMP._IOwnership _out2140;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2139, out _out2140);
                r = _out2139;
                resultingOwnership = _out2140;
                readIdents = _5830_recIdents;
              }
            } else {
              DAST._IType _5831___mcc_h1146 = _source236.dtor_baseType;
              DAST._INewtypeRange _5832___mcc_h1147 = _source236.dtor_range;
              bool _5833___mcc_h1148 = _source236.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _5834___mcc_h1149 = _source236.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _5835_attributes = _5834___mcc_h1149;
              bool _5836_erase = _5833___mcc_h1148;
              DAST._INewtypeRange _5837_range = _5832___mcc_h1147;
              DAST._IType _5838_b = _5831___mcc_h1146;
              {
                Std.Wrappers._IOption<RAST._IType> _5839_nativeToType;
                _5839_nativeToType = DCOMP.COMP.NewtypeToRustType(_5838_b, _5837_range);
                if (object.Equals(_3461_fromTpe, _5838_b)) {
                  RAST._IExpr _5840_recursiveGen;
                  DCOMP._IOwnership _5841_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5842_recIdents;
                  RAST._IExpr _out2141;
                  DCOMP._IOwnership _out2142;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2143;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2141, out _out2142, out _out2143);
                  _5840_recursiveGen = _out2141;
                  _5841_recOwned = _out2142;
                  _5842_recIdents = _out2143;
                  Std.Wrappers._IOption<RAST._IType> _source237 = _5839_nativeToType;
                  if (_source237.is_None) {
                    if (_5836_erase) {
                      r = _5840_recursiveGen;
                    } else {
                      RAST._IType _5843_rhsType;
                      RAST._IType _out2144;
                      _out2144 = DCOMP.COMP.GenType(_3462_toTpe, true, false);
                      _5843_rhsType = _out2144;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_5843_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_5840_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out2145;
                    DCOMP._IOwnership _out2146;
                    DCOMP.COMP.FromOwnership(r, _5841_recOwned, expectedOwnership, out _out2145, out _out2146);
                    r = _out2145;
                    resultingOwnership = _out2146;
                  } else {
                    RAST._IType _5844___mcc_h2195 = _source237.dtor_value;
                    RAST._IType _5845_v = _5844___mcc_h2195;
                    r = (((_5840_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_5845_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out2147;
                    DCOMP._IOwnership _out2148;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2147, out _out2148);
                    r = _out2147;
                    resultingOwnership = _out2148;
                  }
                  readIdents = _5842_recIdents;
                } else {
                  if ((_5839_nativeToType).is_Some) {
                    DAST._IType _source238 = _3461_fromTpe;
                    if (_source238.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5846___mcc_h2196 = _source238.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _5847___mcc_h2197 = _source238.dtor_typeArgs;
                      DAST._IResolvedType _5848___mcc_h2198 = _source238.dtor_resolved;
                      DAST._IResolvedType _source239 = _5848___mcc_h2198;
                      if (_source239.is_Datatype) {
                        DAST._IDatatypeType _5849___mcc_h2202 = _source239.dtor_datatypeType;
                      } else if (_source239.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5850___mcc_h2204 = _source239.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _5851___mcc_h2205 = _source239.dtor_attributes;
                      } else {
                        DAST._IType _5852___mcc_h2208 = _source239.dtor_baseType;
                        DAST._INewtypeRange _5853___mcc_h2209 = _source239.dtor_range;
                        bool _5854___mcc_h2210 = _source239.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _5855___mcc_h2211 = _source239.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _5856_attributes0 = _5855___mcc_h2211;
                        bool _5857_erase0 = _5854___mcc_h2210;
                        DAST._INewtypeRange _5858_range0 = _5853___mcc_h2209;
                        DAST._IType _5859_b0 = _5852___mcc_h2208;
                        {
                          Std.Wrappers._IOption<RAST._IType> _5860_nativeFromType;
                          _5860_nativeFromType = DCOMP.COMP.NewtypeToRustType(_5859_b0, _5858_range0);
                          if ((_5860_nativeFromType).is_Some) {
                            RAST._IExpr _5861_recursiveGen;
                            DCOMP._IOwnership _5862_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5863_recIdents;
                            RAST._IExpr _out2149;
                            DCOMP._IOwnership _out2150;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2151;
                            DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2149, out _out2150, out _out2151);
                            _5861_recursiveGen = _out2149;
                            _5862_recOwned = _out2150;
                            _5863_recIdents = _out2151;
                            RAST._IExpr _out2152;
                            DCOMP._IOwnership _out2153;
                            DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_5861_recursiveGen, (_5839_nativeToType).dtor_value), _5862_recOwned, expectedOwnership, out _out2152, out _out2153);
                            r = _out2152;
                            resultingOwnership = _out2153;
                            readIdents = _5863_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source238.is_Nullable) {
                      DAST._IType _5864___mcc_h2216 = _source238.dtor_Nullable_a0;
                    } else if (_source238.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _5865___mcc_h2218 = _source238.dtor_Tuple_a0;
                    } else if (_source238.is_Array) {
                      DAST._IType _5866___mcc_h2220 = _source238.dtor_element;
                      BigInteger _5867___mcc_h2221 = _source238.dtor_dims;
                    } else if (_source238.is_Seq) {
                      DAST._IType _5868___mcc_h2224 = _source238.dtor_element;
                    } else if (_source238.is_Set) {
                      DAST._IType _5869___mcc_h2226 = _source238.dtor_element;
                    } else if (_source238.is_Multiset) {
                      DAST._IType _5870___mcc_h2228 = _source238.dtor_element;
                    } else if (_source238.is_Map) {
                      DAST._IType _5871___mcc_h2230 = _source238.dtor_key;
                      DAST._IType _5872___mcc_h2231 = _source238.dtor_value;
                    } else if (_source238.is_SetBuilder) {
                      DAST._IType _5873___mcc_h2234 = _source238.dtor_element;
                    } else if (_source238.is_MapBuilder) {
                      DAST._IType _5874___mcc_h2236 = _source238.dtor_key;
                      DAST._IType _5875___mcc_h2237 = _source238.dtor_value;
                    } else if (_source238.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _5876___mcc_h2240 = _source238.dtor_args;
                      DAST._IType _5877___mcc_h2241 = _source238.dtor_result;
                    } else if (_source238.is_Primitive) {
                      DAST._IPrimitive _5878___mcc_h2244 = _source238.dtor_Primitive_a0;
                    } else if (_source238.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _5879___mcc_h2246 = _source238.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _5880___mcc_h2248 = _source238.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_3461_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _5881_recursiveGen;
                      DCOMP._IOwnership _5882_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5883_recIdents;
                      RAST._IExpr _out2154;
                      DCOMP._IOwnership _out2155;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2156;
                      DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2154, out _out2155, out _out2156);
                      _5881_recursiveGen = _out2154;
                      _5882_recOwned = _out2155;
                      _5883_recIdents = _out2156;
                      RAST._IExpr _out2157;
                      DCOMP._IOwnership _out2158;
                      DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_5881_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_5839_nativeToType).dtor_value), _5882_recOwned, expectedOwnership, out _out2157, out _out2158);
                      r = _out2157;
                      resultingOwnership = _out2158;
                      readIdents = _5883_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out2159;
                  DCOMP._IOwnership _out2160;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2161;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3460_expr, _3461_fromTpe, _5838_b), _5838_b, _3462_toTpe), selfIdent, env, expectedOwnership, out _out2159, out _out2160, out _out2161);
                  r = _out2159;
                  resultingOwnership = _out2160;
                  readIdents = _out2161;
                }
              }
            }
          } else if (_source235.is_Nullable) {
            DAST._IType _5884___mcc_h1154 = _source235.dtor_Nullable_a0;
            {
              RAST._IExpr _5885_recursiveGen;
              DCOMP._IOwnership _5886_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5887_recIdents;
              RAST._IExpr _out2162;
              DCOMP._IOwnership _out2163;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2164;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2162, out _out2163, out _out2164);
              _5885_recursiveGen = _out2162;
              _5886_recOwned = _out2163;
              _5887_recIdents = _out2164;
              r = _5885_recursiveGen;
              if (object.Equals(_5886_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out2165;
              DCOMP._IOwnership _out2166;
              DCOMP.COMP.FromOwnership(r, _5886_recOwned, expectedOwnership, out _out2165, out _out2166);
              r = _out2165;
              resultingOwnership = _out2166;
              readIdents = _5887_recIdents;
            }
          } else if (_source235.is_Tuple) {
            Dafny.ISequence<DAST._IType> _5888___mcc_h1156 = _source235.dtor_Tuple_a0;
            {
              RAST._IExpr _5889_recursiveGen;
              DCOMP._IOwnership _5890_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5891_recIdents;
              RAST._IExpr _out2167;
              DCOMP._IOwnership _out2168;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2169;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2167, out _out2168, out _out2169);
              _5889_recursiveGen = _out2167;
              _5890_recOwned = _out2168;
              _5891_recIdents = _out2169;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5889_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2170;
              DCOMP._IOwnership _out2171;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2170, out _out2171);
              r = _out2170;
              resultingOwnership = _out2171;
              readIdents = _5891_recIdents;
            }
          } else if (_source235.is_Array) {
            DAST._IType _5892___mcc_h1158 = _source235.dtor_element;
            BigInteger _5893___mcc_h1159 = _source235.dtor_dims;
            {
              RAST._IExpr _5894_recursiveGen;
              DCOMP._IOwnership _5895_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5896_recIdents;
              RAST._IExpr _out2172;
              DCOMP._IOwnership _out2173;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2174;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2172, out _out2173, out _out2174);
              _5894_recursiveGen = _out2172;
              _5895_recOwned = _out2173;
              _5896_recIdents = _out2174;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5894_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2175;
              DCOMP._IOwnership _out2176;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2175, out _out2176);
              r = _out2175;
              resultingOwnership = _out2176;
              readIdents = _5896_recIdents;
            }
          } else if (_source235.is_Seq) {
            DAST._IType _5897___mcc_h1162 = _source235.dtor_element;
            {
              RAST._IExpr _5898_recursiveGen;
              DCOMP._IOwnership _5899_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5900_recIdents;
              RAST._IExpr _out2177;
              DCOMP._IOwnership _out2178;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2179;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2177, out _out2178, out _out2179);
              _5898_recursiveGen = _out2177;
              _5899_recOwned = _out2178;
              _5900_recIdents = _out2179;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5898_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2180;
              DCOMP._IOwnership _out2181;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2180, out _out2181);
              r = _out2180;
              resultingOwnership = _out2181;
              readIdents = _5900_recIdents;
            }
          } else if (_source235.is_Set) {
            DAST._IType _5901___mcc_h1164 = _source235.dtor_element;
            {
              RAST._IExpr _5902_recursiveGen;
              DCOMP._IOwnership _5903_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5904_recIdents;
              RAST._IExpr _out2182;
              DCOMP._IOwnership _out2183;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2184;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2182, out _out2183, out _out2184);
              _5902_recursiveGen = _out2182;
              _5903_recOwned = _out2183;
              _5904_recIdents = _out2184;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5902_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2185;
              DCOMP._IOwnership _out2186;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2185, out _out2186);
              r = _out2185;
              resultingOwnership = _out2186;
              readIdents = _5904_recIdents;
            }
          } else if (_source235.is_Multiset) {
            DAST._IType _5905___mcc_h1166 = _source235.dtor_element;
            {
              RAST._IExpr _5906_recursiveGen;
              DCOMP._IOwnership _5907_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5908_recIdents;
              RAST._IExpr _out2187;
              DCOMP._IOwnership _out2188;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2189;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2187, out _out2188, out _out2189);
              _5906_recursiveGen = _out2187;
              _5907_recOwned = _out2188;
              _5908_recIdents = _out2189;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5906_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2190;
              DCOMP._IOwnership _out2191;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2190, out _out2191);
              r = _out2190;
              resultingOwnership = _out2191;
              readIdents = _5908_recIdents;
            }
          } else if (_source235.is_Map) {
            DAST._IType _5909___mcc_h1168 = _source235.dtor_key;
            DAST._IType _5910___mcc_h1169 = _source235.dtor_value;
            {
              RAST._IExpr _5911_recursiveGen;
              DCOMP._IOwnership _5912_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5913_recIdents;
              RAST._IExpr _out2192;
              DCOMP._IOwnership _out2193;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2194;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2192, out _out2193, out _out2194);
              _5911_recursiveGen = _out2192;
              _5912_recOwned = _out2193;
              _5913_recIdents = _out2194;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5911_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2195;
              DCOMP._IOwnership _out2196;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2195, out _out2196);
              r = _out2195;
              resultingOwnership = _out2196;
              readIdents = _5913_recIdents;
            }
          } else if (_source235.is_SetBuilder) {
            DAST._IType _5914___mcc_h1172 = _source235.dtor_element;
            {
              RAST._IExpr _5915_recursiveGen;
              DCOMP._IOwnership _5916_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5917_recIdents;
              RAST._IExpr _out2197;
              DCOMP._IOwnership _out2198;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2199;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2197, out _out2198, out _out2199);
              _5915_recursiveGen = _out2197;
              _5916_recOwned = _out2198;
              _5917_recIdents = _out2199;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5915_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2200;
              DCOMP._IOwnership _out2201;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2200, out _out2201);
              r = _out2200;
              resultingOwnership = _out2201;
              readIdents = _5917_recIdents;
            }
          } else if (_source235.is_MapBuilder) {
            DAST._IType _5918___mcc_h1174 = _source235.dtor_key;
            DAST._IType _5919___mcc_h1175 = _source235.dtor_value;
            {
              RAST._IExpr _5920_recursiveGen;
              DCOMP._IOwnership _5921_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5922_recIdents;
              RAST._IExpr _out2202;
              DCOMP._IOwnership _out2203;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2204;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2202, out _out2203, out _out2204);
              _5920_recursiveGen = _out2202;
              _5921_recOwned = _out2203;
              _5922_recIdents = _out2204;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5920_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2205;
              DCOMP._IOwnership _out2206;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2205, out _out2206);
              r = _out2205;
              resultingOwnership = _out2206;
              readIdents = _5922_recIdents;
            }
          } else if (_source235.is_Arrow) {
            Dafny.ISequence<DAST._IType> _5923___mcc_h1178 = _source235.dtor_args;
            DAST._IType _5924___mcc_h1179 = _source235.dtor_result;
            {
              RAST._IExpr _5925_recursiveGen;
              DCOMP._IOwnership _5926_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5927_recIdents;
              RAST._IExpr _out2207;
              DCOMP._IOwnership _out2208;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2209;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2207, out _out2208, out _out2209);
              _5925_recursiveGen = _out2207;
              _5926_recOwned = _out2208;
              _5927_recIdents = _out2209;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5925_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2210;
              DCOMP._IOwnership _out2211;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2210, out _out2211);
              r = _out2210;
              resultingOwnership = _out2211;
              readIdents = _5927_recIdents;
            }
          } else if (_source235.is_Primitive) {
            DAST._IPrimitive _5928___mcc_h1182 = _source235.dtor_Primitive_a0;
            DAST._IPrimitive _source240 = _5928___mcc_h1182;
            if (_source240.is_Int) {
              {
                RAST._IType _5929_rhsType;
                RAST._IType _out2212;
                _out2212 = DCOMP.COMP.GenType(_3461_fromTpe, true, false);
                _5929_rhsType = _out2212;
                RAST._IExpr _5930_recursiveGen;
                DCOMP._IOwnership _5931___v85;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5932_recIdents;
                RAST._IExpr _out2213;
                DCOMP._IOwnership _out2214;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2215;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2213, out _out2214, out _out2215);
                _5930_recursiveGen = _out2213;
                _5931___v85 = _out2214;
                _5932_recIdents = _out2215;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyInt{data: ::dafny_runtime::BigInt::from("), (_5930_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")}")));
                RAST._IExpr _out2216;
                DCOMP._IOwnership _out2217;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2216, out _out2217);
                r = _out2216;
                resultingOwnership = _out2217;
                readIdents = _5932_recIdents;
              }
            } else if (_source240.is_Real) {
              {
                RAST._IExpr _5933_recursiveGen;
                DCOMP._IOwnership _5934_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5935_recIdents;
                RAST._IExpr _out2218;
                DCOMP._IOwnership _out2219;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2220;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2218, out _out2219, out _out2220);
                _5933_recursiveGen = _out2218;
                _5934_recOwned = _out2219;
                _5935_recIdents = _out2220;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5933_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2221;
                DCOMP._IOwnership _out2222;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2221, out _out2222);
                r = _out2221;
                resultingOwnership = _out2222;
                readIdents = _5935_recIdents;
              }
            } else if (_source240.is_String) {
              {
                RAST._IExpr _5936_recursiveGen;
                DCOMP._IOwnership _5937_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5938_recIdents;
                RAST._IExpr _out2223;
                DCOMP._IOwnership _out2224;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2225;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2223, out _out2224, out _out2225);
                _5936_recursiveGen = _out2223;
                _5937_recOwned = _out2224;
                _5938_recIdents = _out2225;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5936_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2226;
                DCOMP._IOwnership _out2227;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2226, out _out2227);
                r = _out2226;
                resultingOwnership = _out2227;
                readIdents = _5938_recIdents;
              }
            } else if (_source240.is_Bool) {
              {
                RAST._IExpr _5939_recursiveGen;
                DCOMP._IOwnership _5940_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5941_recIdents;
                RAST._IExpr _out2228;
                DCOMP._IOwnership _out2229;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2230;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2228, out _out2229, out _out2230);
                _5939_recursiveGen = _out2228;
                _5940_recOwned = _out2229;
                _5941_recIdents = _out2230;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5939_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2231;
                DCOMP._IOwnership _out2232;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2231, out _out2232);
                r = _out2231;
                resultingOwnership = _out2232;
                readIdents = _5941_recIdents;
              }
            } else {
              {
                RAST._IExpr _5942_recursiveGen;
                DCOMP._IOwnership _5943_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5944_recIdents;
                RAST._IExpr _out2233;
                DCOMP._IOwnership _out2234;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2235;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2233, out _out2234, out _out2235);
                _5942_recursiveGen = _out2233;
                _5943_recOwned = _out2234;
                _5944_recIdents = _out2235;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5942_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2236;
                DCOMP._IOwnership _out2237;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2236, out _out2237);
                r = _out2236;
                resultingOwnership = _out2237;
                readIdents = _5944_recIdents;
              }
            }
          } else if (_source235.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _5945___mcc_h1184 = _source235.dtor_Passthrough_a0;
            {
              RAST._IExpr _5946_recursiveGen;
              DCOMP._IOwnership _5947___v90;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5948_recIdents;
              RAST._IExpr _out2238;
              DCOMP._IOwnership _out2239;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2240;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2238, out _out2239, out _out2240);
              _5946_recursiveGen = _out2238;
              _5947___v90 = _out2239;
              _5948_recIdents = _out2240;
              RAST._IType _5949_toTpeGen;
              RAST._IType _out2241;
              _out2241 = DCOMP.COMP.GenType(_3462_toTpe, true, false);
              _5949_toTpeGen = _out2241;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), (_5946_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_5949_toTpeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              RAST._IExpr _out2242;
              DCOMP._IOwnership _out2243;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2242, out _out2243);
              r = _out2242;
              resultingOwnership = _out2243;
              readIdents = _5948_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _5950___mcc_h1186 = _source235.dtor_TypeArg_a0;
            {
              RAST._IExpr _5951_recursiveGen;
              DCOMP._IOwnership _5952_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5953_recIdents;
              RAST._IExpr _out2244;
              DCOMP._IOwnership _out2245;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2246;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2244, out _out2245, out _out2246);
              _5951_recursiveGen = _out2244;
              _5952_recOwned = _out2245;
              _5953_recIdents = _out2246;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5951_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2247;
              DCOMP._IOwnership _out2248;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2247, out _out2248);
              r = _out2247;
              resultingOwnership = _out2248;
              readIdents = _5953_recIdents;
            }
          }
        } else {
          Dafny.ISequence<Dafny.Rune> _5954___mcc_h1188 = _source128.dtor_TypeArg_a0;
          DAST._IType _source241 = _3467___mcc_h1;
          if (_source241.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5955___mcc_h1192 = _source241.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _5956___mcc_h1193 = _source241.dtor_typeArgs;
            DAST._IResolvedType _5957___mcc_h1194 = _source241.dtor_resolved;
            DAST._IResolvedType _source242 = _5957___mcc_h1194;
            if (_source242.is_Datatype) {
              DAST._IDatatypeType _5958___mcc_h1198 = _source242.dtor_datatypeType;
              {
                RAST._IExpr _5959_recursiveGen;
                DCOMP._IOwnership _5960_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5961_recIdents;
                RAST._IExpr _out2249;
                DCOMP._IOwnership _out2250;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2251;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2249, out _out2250, out _out2251);
                _5959_recursiveGen = _out2249;
                _5960_recOwned = _out2250;
                _5961_recIdents = _out2251;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5959_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2252;
                DCOMP._IOwnership _out2253;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2252, out _out2253);
                r = _out2252;
                resultingOwnership = _out2253;
                readIdents = _5961_recIdents;
              }
            } else if (_source242.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5962___mcc_h1200 = _source242.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _5963___mcc_h1201 = _source242.dtor_attributes;
              {
                RAST._IExpr _5964_recursiveGen;
                DCOMP._IOwnership _5965_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5966_recIdents;
                RAST._IExpr _out2254;
                DCOMP._IOwnership _out2255;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2256;
                DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2254, out _out2255, out _out2256);
                _5964_recursiveGen = _out2254;
                _5965_recOwned = _out2255;
                _5966_recIdents = _out2256;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5964_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2257;
                DCOMP._IOwnership _out2258;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2257, out _out2258);
                r = _out2257;
                resultingOwnership = _out2258;
                readIdents = _5966_recIdents;
              }
            } else {
              DAST._IType _5967___mcc_h1204 = _source242.dtor_baseType;
              DAST._INewtypeRange _5968___mcc_h1205 = _source242.dtor_range;
              bool _5969___mcc_h1206 = _source242.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _5970___mcc_h1207 = _source242.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _5971_attributes = _5970___mcc_h1207;
              bool _5972_erase = _5969___mcc_h1206;
              DAST._INewtypeRange _5973_range = _5968___mcc_h1205;
              DAST._IType _5974_b = _5967___mcc_h1204;
              {
                Std.Wrappers._IOption<RAST._IType> _5975_nativeToType;
                _5975_nativeToType = DCOMP.COMP.NewtypeToRustType(_5974_b, _5973_range);
                if (object.Equals(_3461_fromTpe, _5974_b)) {
                  RAST._IExpr _5976_recursiveGen;
                  DCOMP._IOwnership _5977_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5978_recIdents;
                  RAST._IExpr _out2259;
                  DCOMP._IOwnership _out2260;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2261;
                  DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2259, out _out2260, out _out2261);
                  _5976_recursiveGen = _out2259;
                  _5977_recOwned = _out2260;
                  _5978_recIdents = _out2261;
                  Std.Wrappers._IOption<RAST._IType> _source243 = _5975_nativeToType;
                  if (_source243.is_None) {
                    if (_5972_erase) {
                      r = _5976_recursiveGen;
                    } else {
                      RAST._IType _5979_rhsType;
                      RAST._IType _out2262;
                      _out2262 = DCOMP.COMP.GenType(_3462_toTpe, true, false);
                      _5979_rhsType = _out2262;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_5979_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_5976_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out2263;
                    DCOMP._IOwnership _out2264;
                    DCOMP.COMP.FromOwnership(r, _5977_recOwned, expectedOwnership, out _out2263, out _out2264);
                    r = _out2263;
                    resultingOwnership = _out2264;
                  } else {
                    RAST._IType _5980___mcc_h2250 = _source243.dtor_value;
                    RAST._IType _5981_v = _5980___mcc_h2250;
                    r = (((_5976_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_5981_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out2265;
                    DCOMP._IOwnership _out2266;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2265, out _out2266);
                    r = _out2265;
                    resultingOwnership = _out2266;
                  }
                  readIdents = _5978_recIdents;
                } else {
                  if ((_5975_nativeToType).is_Some) {
                    DAST._IType _source244 = _3461_fromTpe;
                    if (_source244.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5982___mcc_h2251 = _source244.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _5983___mcc_h2252 = _source244.dtor_typeArgs;
                      DAST._IResolvedType _5984___mcc_h2253 = _source244.dtor_resolved;
                      DAST._IResolvedType _source245 = _5984___mcc_h2253;
                      if (_source245.is_Datatype) {
                        DAST._IDatatypeType _5985___mcc_h2257 = _source245.dtor_datatypeType;
                      } else if (_source245.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5986___mcc_h2259 = _source245.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _5987___mcc_h2260 = _source245.dtor_attributes;
                      } else {
                        DAST._IType _5988___mcc_h2263 = _source245.dtor_baseType;
                        DAST._INewtypeRange _5989___mcc_h2264 = _source245.dtor_range;
                        bool _5990___mcc_h2265 = _source245.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _5991___mcc_h2266 = _source245.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _5992_attributes0 = _5991___mcc_h2266;
                        bool _5993_erase0 = _5990___mcc_h2265;
                        DAST._INewtypeRange _5994_range0 = _5989___mcc_h2264;
                        DAST._IType _5995_b0 = _5988___mcc_h2263;
                        {
                          Std.Wrappers._IOption<RAST._IType> _5996_nativeFromType;
                          _5996_nativeFromType = DCOMP.COMP.NewtypeToRustType(_5995_b0, _5994_range0);
                          if ((_5996_nativeFromType).is_Some) {
                            RAST._IExpr _5997_recursiveGen;
                            DCOMP._IOwnership _5998_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5999_recIdents;
                            RAST._IExpr _out2267;
                            DCOMP._IOwnership _out2268;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2269;
                            DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2267, out _out2268, out _out2269);
                            _5997_recursiveGen = _out2267;
                            _5998_recOwned = _out2268;
                            _5999_recIdents = _out2269;
                            RAST._IExpr _out2270;
                            DCOMP._IOwnership _out2271;
                            DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_5997_recursiveGen, (_5975_nativeToType).dtor_value), _5998_recOwned, expectedOwnership, out _out2270, out _out2271);
                            r = _out2270;
                            resultingOwnership = _out2271;
                            readIdents = _5999_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source244.is_Nullable) {
                      DAST._IType _6000___mcc_h2271 = _source244.dtor_Nullable_a0;
                    } else if (_source244.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _6001___mcc_h2273 = _source244.dtor_Tuple_a0;
                    } else if (_source244.is_Array) {
                      DAST._IType _6002___mcc_h2275 = _source244.dtor_element;
                      BigInteger _6003___mcc_h2276 = _source244.dtor_dims;
                    } else if (_source244.is_Seq) {
                      DAST._IType _6004___mcc_h2279 = _source244.dtor_element;
                    } else if (_source244.is_Set) {
                      DAST._IType _6005___mcc_h2281 = _source244.dtor_element;
                    } else if (_source244.is_Multiset) {
                      DAST._IType _6006___mcc_h2283 = _source244.dtor_element;
                    } else if (_source244.is_Map) {
                      DAST._IType _6007___mcc_h2285 = _source244.dtor_key;
                      DAST._IType _6008___mcc_h2286 = _source244.dtor_value;
                    } else if (_source244.is_SetBuilder) {
                      DAST._IType _6009___mcc_h2289 = _source244.dtor_element;
                    } else if (_source244.is_MapBuilder) {
                      DAST._IType _6010___mcc_h2291 = _source244.dtor_key;
                      DAST._IType _6011___mcc_h2292 = _source244.dtor_value;
                    } else if (_source244.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _6012___mcc_h2295 = _source244.dtor_args;
                      DAST._IType _6013___mcc_h2296 = _source244.dtor_result;
                    } else if (_source244.is_Primitive) {
                      DAST._IPrimitive _6014___mcc_h2299 = _source244.dtor_Primitive_a0;
                    } else if (_source244.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _6015___mcc_h2301 = _source244.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _6016___mcc_h2303 = _source244.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_3461_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _6017_recursiveGen;
                      DCOMP._IOwnership _6018_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6019_recIdents;
                      RAST._IExpr _out2272;
                      DCOMP._IOwnership _out2273;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2274;
                      DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2272, out _out2273, out _out2274);
                      _6017_recursiveGen = _out2272;
                      _6018_recOwned = _out2273;
                      _6019_recIdents = _out2274;
                      RAST._IExpr _out2275;
                      DCOMP._IOwnership _out2276;
                      DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_6017_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_5975_nativeToType).dtor_value), _6018_recOwned, expectedOwnership, out _out2275, out _out2276);
                      r = _out2275;
                      resultingOwnership = _out2276;
                      readIdents = _6019_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out2277;
                  DCOMP._IOwnership _out2278;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2279;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3460_expr, _3461_fromTpe, _5974_b), _5974_b, _3462_toTpe), selfIdent, env, expectedOwnership, out _out2277, out _out2278, out _out2279);
                  r = _out2277;
                  resultingOwnership = _out2278;
                  readIdents = _out2279;
                }
              }
            }
          } else if (_source241.is_Nullable) {
            DAST._IType _6020___mcc_h1212 = _source241.dtor_Nullable_a0;
            {
              RAST._IExpr _6021_recursiveGen;
              DCOMP._IOwnership _6022_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6023_recIdents;
              RAST._IExpr _out2280;
              DCOMP._IOwnership _out2281;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2282;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2280, out _out2281, out _out2282);
              _6021_recursiveGen = _out2280;
              _6022_recOwned = _out2281;
              _6023_recIdents = _out2282;
              r = _6021_recursiveGen;
              if (object.Equals(_6022_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out2283;
              DCOMP._IOwnership _out2284;
              DCOMP.COMP.FromOwnership(r, _6022_recOwned, expectedOwnership, out _out2283, out _out2284);
              r = _out2283;
              resultingOwnership = _out2284;
              readIdents = _6023_recIdents;
            }
          } else if (_source241.is_Tuple) {
            Dafny.ISequence<DAST._IType> _6024___mcc_h1214 = _source241.dtor_Tuple_a0;
            {
              RAST._IExpr _6025_recursiveGen;
              DCOMP._IOwnership _6026_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6027_recIdents;
              RAST._IExpr _out2285;
              DCOMP._IOwnership _out2286;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2287;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2285, out _out2286, out _out2287);
              _6025_recursiveGen = _out2285;
              _6026_recOwned = _out2286;
              _6027_recIdents = _out2287;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6025_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2288;
              DCOMP._IOwnership _out2289;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2288, out _out2289);
              r = _out2288;
              resultingOwnership = _out2289;
              readIdents = _6027_recIdents;
            }
          } else if (_source241.is_Array) {
            DAST._IType _6028___mcc_h1216 = _source241.dtor_element;
            BigInteger _6029___mcc_h1217 = _source241.dtor_dims;
            {
              RAST._IExpr _6030_recursiveGen;
              DCOMP._IOwnership _6031_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6032_recIdents;
              RAST._IExpr _out2290;
              DCOMP._IOwnership _out2291;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2292;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2290, out _out2291, out _out2292);
              _6030_recursiveGen = _out2290;
              _6031_recOwned = _out2291;
              _6032_recIdents = _out2292;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6030_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2293;
              DCOMP._IOwnership _out2294;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2293, out _out2294);
              r = _out2293;
              resultingOwnership = _out2294;
              readIdents = _6032_recIdents;
            }
          } else if (_source241.is_Seq) {
            DAST._IType _6033___mcc_h1220 = _source241.dtor_element;
            {
              RAST._IExpr _6034_recursiveGen;
              DCOMP._IOwnership _6035_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6036_recIdents;
              RAST._IExpr _out2295;
              DCOMP._IOwnership _out2296;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2297;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2295, out _out2296, out _out2297);
              _6034_recursiveGen = _out2295;
              _6035_recOwned = _out2296;
              _6036_recIdents = _out2297;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6034_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2298;
              DCOMP._IOwnership _out2299;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2298, out _out2299);
              r = _out2298;
              resultingOwnership = _out2299;
              readIdents = _6036_recIdents;
            }
          } else if (_source241.is_Set) {
            DAST._IType _6037___mcc_h1222 = _source241.dtor_element;
            {
              RAST._IExpr _6038_recursiveGen;
              DCOMP._IOwnership _6039_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6040_recIdents;
              RAST._IExpr _out2300;
              DCOMP._IOwnership _out2301;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2302;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2300, out _out2301, out _out2302);
              _6038_recursiveGen = _out2300;
              _6039_recOwned = _out2301;
              _6040_recIdents = _out2302;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6038_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2303;
              DCOMP._IOwnership _out2304;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2303, out _out2304);
              r = _out2303;
              resultingOwnership = _out2304;
              readIdents = _6040_recIdents;
            }
          } else if (_source241.is_Multiset) {
            DAST._IType _6041___mcc_h1224 = _source241.dtor_element;
            {
              RAST._IExpr _6042_recursiveGen;
              DCOMP._IOwnership _6043_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6044_recIdents;
              RAST._IExpr _out2305;
              DCOMP._IOwnership _out2306;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2307;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2305, out _out2306, out _out2307);
              _6042_recursiveGen = _out2305;
              _6043_recOwned = _out2306;
              _6044_recIdents = _out2307;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6042_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2308;
              DCOMP._IOwnership _out2309;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2308, out _out2309);
              r = _out2308;
              resultingOwnership = _out2309;
              readIdents = _6044_recIdents;
            }
          } else if (_source241.is_Map) {
            DAST._IType _6045___mcc_h1226 = _source241.dtor_key;
            DAST._IType _6046___mcc_h1227 = _source241.dtor_value;
            {
              RAST._IExpr _6047_recursiveGen;
              DCOMP._IOwnership _6048_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6049_recIdents;
              RAST._IExpr _out2310;
              DCOMP._IOwnership _out2311;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2312;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2310, out _out2311, out _out2312);
              _6047_recursiveGen = _out2310;
              _6048_recOwned = _out2311;
              _6049_recIdents = _out2312;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6047_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2313;
              DCOMP._IOwnership _out2314;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2313, out _out2314);
              r = _out2313;
              resultingOwnership = _out2314;
              readIdents = _6049_recIdents;
            }
          } else if (_source241.is_SetBuilder) {
            DAST._IType _6050___mcc_h1230 = _source241.dtor_element;
            {
              RAST._IExpr _6051_recursiveGen;
              DCOMP._IOwnership _6052_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6053_recIdents;
              RAST._IExpr _out2315;
              DCOMP._IOwnership _out2316;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2317;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2315, out _out2316, out _out2317);
              _6051_recursiveGen = _out2315;
              _6052_recOwned = _out2316;
              _6053_recIdents = _out2317;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6051_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2318;
              DCOMP._IOwnership _out2319;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2318, out _out2319);
              r = _out2318;
              resultingOwnership = _out2319;
              readIdents = _6053_recIdents;
            }
          } else if (_source241.is_MapBuilder) {
            DAST._IType _6054___mcc_h1232 = _source241.dtor_key;
            DAST._IType _6055___mcc_h1233 = _source241.dtor_value;
            {
              RAST._IExpr _6056_recursiveGen;
              DCOMP._IOwnership _6057_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6058_recIdents;
              RAST._IExpr _out2320;
              DCOMP._IOwnership _out2321;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2322;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2320, out _out2321, out _out2322);
              _6056_recursiveGen = _out2320;
              _6057_recOwned = _out2321;
              _6058_recIdents = _out2322;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6056_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2323;
              DCOMP._IOwnership _out2324;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2323, out _out2324);
              r = _out2323;
              resultingOwnership = _out2324;
              readIdents = _6058_recIdents;
            }
          } else if (_source241.is_Arrow) {
            Dafny.ISequence<DAST._IType> _6059___mcc_h1236 = _source241.dtor_args;
            DAST._IType _6060___mcc_h1237 = _source241.dtor_result;
            {
              RAST._IExpr _6061_recursiveGen;
              DCOMP._IOwnership _6062_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6063_recIdents;
              RAST._IExpr _out2325;
              DCOMP._IOwnership _out2326;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2327;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2325, out _out2326, out _out2327);
              _6061_recursiveGen = _out2325;
              _6062_recOwned = _out2326;
              _6063_recIdents = _out2327;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6061_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2328;
              DCOMP._IOwnership _out2329;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2328, out _out2329);
              r = _out2328;
              resultingOwnership = _out2329;
              readIdents = _6063_recIdents;
            }
          } else if (_source241.is_Primitive) {
            DAST._IPrimitive _6064___mcc_h1240 = _source241.dtor_Primitive_a0;
            {
              RAST._IExpr _6065_recursiveGen;
              DCOMP._IOwnership _6066_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6067_recIdents;
              RAST._IExpr _out2330;
              DCOMP._IOwnership _out2331;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2332;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2330, out _out2331, out _out2332);
              _6065_recursiveGen = _out2330;
              _6066_recOwned = _out2331;
              _6067_recIdents = _out2332;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6065_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2333;
              DCOMP._IOwnership _out2334;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2333, out _out2334);
              r = _out2333;
              resultingOwnership = _out2334;
              readIdents = _6067_recIdents;
            }
          } else if (_source241.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _6068___mcc_h1242 = _source241.dtor_Passthrough_a0;
            {
              RAST._IExpr _6069_recursiveGen;
              DCOMP._IOwnership _6070_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6071_recIdents;
              RAST._IExpr _out2335;
              DCOMP._IOwnership _out2336;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2337;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2335, out _out2336, out _out2337);
              _6069_recursiveGen = _out2335;
              _6070_recOwned = _out2336;
              _6071_recIdents = _out2337;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6069_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2338;
              DCOMP._IOwnership _out2339;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2338, out _out2339);
              r = _out2338;
              resultingOwnership = _out2339;
              readIdents = _6071_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _6072___mcc_h1244 = _source241.dtor_TypeArg_a0;
            {
              RAST._IExpr _6073_recursiveGen;
              DCOMP._IOwnership _6074_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6075_recIdents;
              RAST._IExpr _out2340;
              DCOMP._IOwnership _out2341;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2342;
              DCOMP.COMP.GenExpr(_3460_expr, selfIdent, env, expectedOwnership, out _out2340, out _out2341, out _out2342);
              _6073_recursiveGen = _out2340;
              _6074_recOwned = _out2341;
              _6075_recIdents = _out2342;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6073_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2343;
              DCOMP._IOwnership _out2344;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2343, out _out2344);
              r = _out2343;
              resultingOwnership = _out2344;
              readIdents = _6075_recIdents;
            }
          }
        }
      }
      return ;
    }
    public static void GenExpr(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source246 = e;
      if (_source246.is_Literal) {
        DAST._ILiteral _6076___mcc_h0 = _source246.dtor_Literal_a0;
        RAST._IExpr _out2345;
        DCOMP._IOwnership _out2346;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2347;
        DCOMP.COMP.GenExprLiteral(e, selfIdent, env, expectedOwnership, out _out2345, out _out2346, out _out2347);
        r = _out2345;
        resultingOwnership = _out2346;
        readIdents = _out2347;
      } else if (_source246.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _6077___mcc_h1 = _source246.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _6078_name = _6077___mcc_h1;
        {
          r = RAST.Expr.create_Identifier(DCOMP.__default.escapeIdent(_6078_name));
          bool _6079_currentlyBorrowed;
          _6079_currentlyBorrowed = (env).IsBorrowed(_6078_name);
          if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())) {
            resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          } else if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipBorrowedMut())) {
            r = RAST.__default.BorrowMut(r);
            resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowedMut();
          } else if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
            r = RAST.__default.Clone(r);
            resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          } else if (_6079_currentlyBorrowed) {
            resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
          } else {
            r = RAST.__default.Borrow(r);
            resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_6078_name);
          return ;
        }
      } else if (_source246.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6080___mcc_h2 = _source246.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6081_path = _6080___mcc_h2;
        {
          RAST._IExpr _out2348;
          _out2348 = DCOMP.COMP.GenPathExpr(_6081_path);
          r = _out2348;
          RAST._IExpr _out2349;
          DCOMP._IOwnership _out2350;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2349, out _out2350);
          r = _out2349;
          resultingOwnership = _out2350;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source246.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _6082___mcc_h3 = _source246.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IExpression> _6083_values = _6082___mcc_h3;
        {
          Dafny.ISequence<Dafny.Rune> _6084_s;
          _6084_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _6085_i;
          _6085_i = BigInteger.Zero;
          while ((_6085_i) < (new BigInteger((_6083_values).Count))) {
            if ((_6085_i).Sign == 1) {
              _6084_s = Dafny.Sequence<Dafny.Rune>.Concat(_6084_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            RAST._IExpr _6086_recursiveGen;
            DCOMP._IOwnership _6087___v93;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6088_recIdents;
            RAST._IExpr _out2351;
            DCOMP._IOwnership _out2352;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2353;
            DCOMP.COMP.GenExpr((_6083_values).Select(_6085_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2351, out _out2352, out _out2353);
            _6086_recursiveGen = _out2351;
            _6087___v93 = _out2352;
            _6088_recIdents = _out2353;
            _6084_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6084_s, (_6086_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6088_recIdents);
            _6085_i = (_6085_i) + (BigInteger.One);
          }
          _6084_s = Dafny.Sequence<Dafny.Rune>.Concat(_6084_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          r = RAST.Expr.create_RawExpr(_6084_s);
          RAST._IExpr _out2354;
          DCOMP._IOwnership _out2355;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2354, out _out2355);
          r = _out2354;
          resultingOwnership = _out2355;
          return ;
        }
      } else if (_source246.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6089___mcc_h4 = _source246.dtor_path;
        Dafny.ISequence<DAST._IType> _6090___mcc_h5 = _source246.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _6091___mcc_h6 = _source246.dtor_args;
        Dafny.ISequence<DAST._IExpression> _6092_args = _6091___mcc_h6;
        Dafny.ISequence<DAST._IType> _6093_typeArgs = _6090___mcc_h5;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6094_path = _6089___mcc_h4;
        {
          RAST._IExpr _out2356;
          _out2356 = DCOMP.COMP.GenPathExpr(_6094_path);
          r = _out2356;
          if ((new BigInteger((_6093_typeArgs).Count)).Sign == 1) {
            Dafny.ISequence<RAST._IType> _6095_typeExprs;
            _6095_typeExprs = Dafny.Sequence<RAST._IType>.FromElements();
            BigInteger _hi6 = new BigInteger((_6093_typeArgs).Count);
            for (BigInteger _6096_i = BigInteger.Zero; _6096_i < _hi6; _6096_i++) {
              RAST._IType _6097_typeExpr;
              RAST._IType _out2357;
              _out2357 = DCOMP.COMP.GenType((_6093_typeArgs).Select(_6096_i), false, false);
              _6097_typeExpr = _out2357;
              _6095_typeExprs = Dafny.Sequence<RAST._IType>.Concat(_6095_typeExprs, Dafny.Sequence<RAST._IType>.FromElements(_6097_typeExpr));
            }
            r = (r).ApplyType(_6095_typeExprs);
          }
          r = (r).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<RAST._IExpr> _6098_arguments;
          _6098_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          BigInteger _hi7 = new BigInteger((_6092_args).Count);
          for (BigInteger _6099_i = BigInteger.Zero; _6099_i < _hi7; _6099_i++) {
            RAST._IExpr _6100_recursiveGen;
            DCOMP._IOwnership _6101___v94;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6102_recIdents;
            RAST._IExpr _out2358;
            DCOMP._IOwnership _out2359;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2360;
            DCOMP.COMP.GenExpr((_6092_args).Select(_6099_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2358, out _out2359, out _out2360);
            _6100_recursiveGen = _out2358;
            _6101___v94 = _out2359;
            _6102_recIdents = _out2360;
            _6098_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_6098_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(_6100_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6102_recIdents);
          }
          r = (r).Apply(_6098_arguments);
          r = RAST.__default.RcNew(r);
          RAST._IExpr _out2361;
          DCOMP._IOwnership _out2362;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2361, out _out2362);
          r = _out2361;
          resultingOwnership = _out2362;
          return ;
        }
      } else if (_source246.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _6103___mcc_h7 = _source246.dtor_dims;
        DAST._IType _6104___mcc_h8 = _source246.dtor_typ;
        DAST._IType _6105_typ = _6104___mcc_h8;
        Dafny.ISequence<DAST._IExpression> _6106_dims = _6103___mcc_h7;
        {
          BigInteger _6107_i;
          _6107_i = (new BigInteger((_6106_dims).Count)) - (BigInteger.One);
          RAST._IType _6108_genTyp;
          RAST._IType _out2363;
          _out2363 = DCOMP.COMP.GenType(_6105_typ, false, false);
          _6108_genTyp = _out2363;
          Dafny.ISequence<Dafny.Rune> _6109_s;
          _6109_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_6108_genTyp)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::std::default::Default>::default()"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          while ((_6107_i).Sign != -1) {
            RAST._IExpr _6110_recursiveGen;
            DCOMP._IOwnership _6111___v95;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6112_recIdents;
            RAST._IExpr _out2364;
            DCOMP._IOwnership _out2365;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2366;
            DCOMP.COMP.GenExpr((_6106_dims).Select(_6107_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2364, out _out2365, out _out2366);
            _6110_recursiveGen = _out2364;
            _6111___v95 = _out2365;
            _6112_recIdents = _out2366;
            _6109_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(::std::cell::RefCell::new(vec!["), _6109_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("; <usize as ::dafny_runtime::NumCast>::from(")), (_6110_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]))"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6112_recIdents);
            _6107_i = (_6107_i) - (BigInteger.One);
          }
          r = RAST.Expr.create_RawExpr(_6109_s);
          RAST._IExpr _out2367;
          DCOMP._IOwnership _out2368;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2367, out _out2368);
          r = _out2367;
          resultingOwnership = _out2368;
          return ;
        }
      } else if (_source246.is_DatatypeValue) {
        DAST._IDatatypeType _6113___mcc_h9 = _source246.dtor_datatypeType;
        Dafny.ISequence<DAST._IType> _6114___mcc_h10 = _source246.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _6115___mcc_h11 = _source246.dtor_variant;
        bool _6116___mcc_h12 = _source246.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _6117___mcc_h13 = _source246.dtor_contents;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _6118_values = _6117___mcc_h13;
        bool _6119_isCo = _6116___mcc_h12;
        Dafny.ISequence<Dafny.Rune> _6120_variant = _6115___mcc_h11;
        Dafny.ISequence<DAST._IType> _6121_typeArgs = _6114___mcc_h10;
        DAST._IDatatypeType _6122_datatypeType = _6113___mcc_h9;
        {
          RAST._IExpr _out2369;
          _out2369 = DCOMP.COMP.GenPathExpr((_6122_datatypeType).dtor_path);
          r = _out2369;
          Dafny.ISequence<RAST._IType> _6123_genTypeArgs;
          _6123_genTypeArgs = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _hi8 = new BigInteger((_6121_typeArgs).Count);
          for (BigInteger _6124_i = BigInteger.Zero; _6124_i < _hi8; _6124_i++) {
            RAST._IType _6125_typeExpr;
            RAST._IType _out2370;
            _out2370 = DCOMP.COMP.GenType((_6121_typeArgs).Select(_6124_i), false, false);
            _6125_typeExpr = _out2370;
            _6123_genTypeArgs = Dafny.Sequence<RAST._IType>.Concat(_6123_genTypeArgs, Dafny.Sequence<RAST._IType>.FromElements(_6125_typeExpr));
          }
          if ((new BigInteger((_6121_typeArgs).Count)).Sign == 1) {
            r = (r).ApplyType(_6123_genTypeArgs);
          }
          r = (r).MSel(DCOMP.__default.escapeIdent(_6120_variant));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<RAST._IAssignIdentifier> _6126_assignments;
          _6126_assignments = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
          BigInteger _hi9 = new BigInteger((_6118_values).Count);
          for (BigInteger _6127_i = BigInteger.Zero; _6127_i < _hi9; _6127_i++) {
            _System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression> _let_tmp_rhs52 = (_6118_values).Select(_6127_i);
            Dafny.ISequence<Dafny.Rune> _6128_name = _let_tmp_rhs52.dtor__0;
            DAST._IExpression _6129_value = _let_tmp_rhs52.dtor__1;
            if (_6119_isCo) {
              RAST._IExpr _6130_recursiveGen;
              DCOMP._IOwnership _6131___v96;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6132_recIdents;
              RAST._IExpr _out2371;
              DCOMP._IOwnership _out2372;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2373;
              DCOMP.COMP.GenExpr(_6129_value, selfIdent, DCOMP.Environment.Empty(), DCOMP.Ownership.create_OwnershipOwned(), out _out2371, out _out2372, out _out2373);
              _6130_recursiveGen = _out2371;
              _6131___v96 = _out2372;
              _6132_recIdents = _out2373;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6132_recIdents);
              Dafny.ISequence<Dafny.Rune> _6133_allReadCloned;
              _6133_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              while (!(_6132_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
                Dafny.ISequence<Dafny.Rune> _6134_next;
                foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_2 in (_6132_recIdents).Elements) {
                  _6134_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_2;
                  if ((_6132_recIdents).Contains(_6134_next)) {
                    goto after__ASSIGN_SUCH_THAT_2;
                  }
                }
                throw new System.Exception("assign-such-that search produced no value (line 2854)");
              after__ASSIGN_SUCH_THAT_2: ;
                _6133_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6133_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_6134_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_6134_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
                _6132_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_6132_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_6134_next));
              }
              Dafny.ISequence<Dafny.Rune> _6135_assigned;
              _6135_assigned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::LazyFieldWrapper(::dafny_runtime::Lazy::new(::std::boxed::Box::new({\n"), _6133_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move || (")), (_6130_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")})))"));
              _6126_assignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_6126_assignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent(_6128_name), RAST.Expr.create_RawExpr(_6135_assigned))));
            } else {
              RAST._IExpr _6136_recursiveGen;
              DCOMP._IOwnership _6137___v97;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6138_recIdents;
              RAST._IExpr _out2374;
              DCOMP._IOwnership _out2375;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2376;
              DCOMP.COMP.GenExpr(_6129_value, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2374, out _out2375, out _out2376);
              _6136_recursiveGen = _out2374;
              _6137___v97 = _out2375;
              _6138_recIdents = _out2376;
              _6126_assignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_6126_assignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent(_6128_name), _6136_recursiveGen)));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6138_recIdents);
            }
          }
          r = RAST.Expr.create_StructBuild(r, _6126_assignments);
          if (DCOMP.COMP.IsRcWrapped((_6122_datatypeType).dtor_attributes)) {
            r = RAST.__default.RcNew(r);
          }
          RAST._IExpr _out2377;
          DCOMP._IOwnership _out2378;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2377, out _out2378);
          r = _out2377;
          resultingOwnership = _out2378;
          return ;
        }
      } else if (_source246.is_Convert) {
        DAST._IExpression _6139___mcc_h14 = _source246.dtor_value;
        DAST._IType _6140___mcc_h15 = _source246.dtor_from;
        DAST._IType _6141___mcc_h16 = _source246.dtor_typ;
        {
          RAST._IExpr _out2379;
          DCOMP._IOwnership _out2380;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2381;
          DCOMP.COMP.GenExprConvert(e, selfIdent, env, expectedOwnership, out _out2379, out _out2380, out _out2381);
          r = _out2379;
          resultingOwnership = _out2380;
          readIdents = _out2381;
        }
      } else if (_source246.is_SeqConstruct) {
        DAST._IExpression _6142___mcc_h17 = _source246.dtor_length;
        DAST._IExpression _6143___mcc_h18 = _source246.dtor_elem;
        DAST._IExpression _6144_expr = _6143___mcc_h18;
        DAST._IExpression _6145_length = _6142___mcc_h17;
        {
          RAST._IExpr _6146_recursiveGen;
          DCOMP._IOwnership _6147___v101;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6148_recIdents;
          RAST._IExpr _out2382;
          DCOMP._IOwnership _out2383;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2384;
          DCOMP.COMP.GenExpr(_6144_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2382, out _out2383, out _out2384);
          _6146_recursiveGen = _out2382;
          _6147___v101 = _out2383;
          _6148_recIdents = _out2384;
          RAST._IExpr _6149_lengthGen;
          DCOMP._IOwnership _6150___v102;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6151_lengthIdents;
          RAST._IExpr _out2385;
          DCOMP._IOwnership _out2386;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2387;
          DCOMP.COMP.GenExpr(_6145_length, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2385, out _out2386, out _out2387);
          _6149_lengthGen = _out2385;
          _6150___v102 = _out2386;
          _6151_lengthIdents = _out2387;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet _initializer = "), (_6146_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), ")), (_6149_lengthGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").map(|i| _initializer.0(&i)).collect::<::dafny_runtime::Sequence<_>>()\n}")));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_6148_recIdents, _6151_lengthIdents);
          RAST._IExpr _out2388;
          DCOMP._IOwnership _out2389;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2388, out _out2389);
          r = _out2388;
          resultingOwnership = _out2389;
          return ;
        }
      } else if (_source246.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _6152___mcc_h19 = _source246.dtor_elements;
        DAST._IType _6153___mcc_h20 = _source246.dtor_typ;
        DAST._IType _6154_typ = _6153___mcc_h20;
        Dafny.ISequence<DAST._IExpression> _6155_exprs = _6152___mcc_h19;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          RAST._IType _6156_genTpe;
          RAST._IType _out2390;
          _out2390 = DCOMP.COMP.GenType(_6154_typ, false, false);
          _6156_genTpe = _out2390;
          BigInteger _6157_i;
          _6157_i = BigInteger.Zero;
          Dafny.ISequence<RAST._IExpr> _6158_args;
          _6158_args = Dafny.Sequence<RAST._IExpr>.FromElements();
          while ((_6157_i) < (new BigInteger((_6155_exprs).Count))) {
            RAST._IExpr _6159_recursiveGen;
            DCOMP._IOwnership _6160___v103;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6161_recIdents;
            RAST._IExpr _out2391;
            DCOMP._IOwnership _out2392;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2393;
            DCOMP.COMP.GenExpr((_6155_exprs).Select(_6157_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2391, out _out2392, out _out2393);
            _6159_recursiveGen = _out2391;
            _6160___v103 = _out2392;
            _6161_recIdents = _out2393;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6161_recIdents);
            _6158_args = Dafny.Sequence<RAST._IExpr>.Concat(_6158_args, Dafny.Sequence<RAST._IExpr>.FromElements(_6159_recursiveGen));
            _6157_i = (_6157_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("seq!"))).Apply(_6158_args);
          if ((new BigInteger((_6158_args).Count)).Sign == 0) {
            r = RAST.Expr.create_TypeAscription(r, ((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence"))).Apply1(_6156_genTpe));
          }
          RAST._IExpr _out2394;
          DCOMP._IOwnership _out2395;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2394, out _out2395);
          r = _out2394;
          resultingOwnership = _out2395;
          return ;
        }
      } else if (_source246.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _6162___mcc_h21 = _source246.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _6163_exprs = _6162___mcc_h21;
        {
          Dafny.ISequence<RAST._IExpr> _6164_generatedValues;
          _6164_generatedValues = Dafny.Sequence<RAST._IExpr>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _6165_i;
          _6165_i = BigInteger.Zero;
          while ((_6165_i) < (new BigInteger((_6163_exprs).Count))) {
            RAST._IExpr _6166_recursiveGen;
            DCOMP._IOwnership _6167___v104;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6168_recIdents;
            RAST._IExpr _out2396;
            DCOMP._IOwnership _out2397;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2398;
            DCOMP.COMP.GenExpr((_6163_exprs).Select(_6165_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2396, out _out2397, out _out2398);
            _6166_recursiveGen = _out2396;
            _6167___v104 = _out2397;
            _6168_recIdents = _out2398;
            _6164_generatedValues = Dafny.Sequence<RAST._IExpr>.Concat(_6164_generatedValues, Dafny.Sequence<RAST._IExpr>.FromElements(_6166_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6168_recIdents);
            _6165_i = (_6165_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("set!"))).Apply(_6164_generatedValues);
          RAST._IExpr _out2399;
          DCOMP._IOwnership _out2400;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2399, out _out2400);
          r = _out2399;
          resultingOwnership = _out2400;
          return ;
        }
      } else if (_source246.is_MultisetValue) {
        Dafny.ISequence<DAST._IExpression> _6169___mcc_h22 = _source246.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _6170_exprs = _6169___mcc_h22;
        {
          Dafny.ISequence<RAST._IExpr> _6171_generatedValues;
          _6171_generatedValues = Dafny.Sequence<RAST._IExpr>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _6172_i;
          _6172_i = BigInteger.Zero;
          while ((_6172_i) < (new BigInteger((_6170_exprs).Count))) {
            RAST._IExpr _6173_recursiveGen;
            DCOMP._IOwnership _6174___v105;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6175_recIdents;
            RAST._IExpr _out2401;
            DCOMP._IOwnership _out2402;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2403;
            DCOMP.COMP.GenExpr((_6170_exprs).Select(_6172_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2401, out _out2402, out _out2403);
            _6173_recursiveGen = _out2401;
            _6174___v105 = _out2402;
            _6175_recIdents = _out2403;
            _6171_generatedValues = Dafny.Sequence<RAST._IExpr>.Concat(_6171_generatedValues, Dafny.Sequence<RAST._IExpr>.FromElements(_6173_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6175_recIdents);
            _6172_i = (_6172_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("multiset!"))).Apply(_6171_generatedValues);
          RAST._IExpr _out2404;
          DCOMP._IOwnership _out2405;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2404, out _out2405);
          r = _out2404;
          resultingOwnership = _out2405;
          return ;
        }
      } else if (_source246.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _6176___mcc_h23 = _source246.dtor_mapElems;
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _6177_mapElems = _6176___mcc_h23;
        {
          Dafny.ISequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>> _6178_generatedValues;
          _6178_generatedValues = Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _6179_i;
          _6179_i = BigInteger.Zero;
          while ((_6179_i) < (new BigInteger((_6177_mapElems).Count))) {
            RAST._IExpr _6180_recursiveGenKey;
            DCOMP._IOwnership _6181___v107;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6182_recIdentsKey;
            RAST._IExpr _out2406;
            DCOMP._IOwnership _out2407;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2408;
            DCOMP.COMP.GenExpr(((_6177_mapElems).Select(_6179_i)).dtor__0, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2406, out _out2407, out _out2408);
            _6180_recursiveGenKey = _out2406;
            _6181___v107 = _out2407;
            _6182_recIdentsKey = _out2408;
            RAST._IExpr _6183_recursiveGenValue;
            DCOMP._IOwnership _6184___v108;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6185_recIdentsValue;
            RAST._IExpr _out2409;
            DCOMP._IOwnership _out2410;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2411;
            DCOMP.COMP.GenExpr(((_6177_mapElems).Select(_6179_i)).dtor__1, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2409, out _out2410, out _out2411);
            _6183_recursiveGenValue = _out2409;
            _6184___v108 = _out2410;
            _6185_recIdentsValue = _out2411;
            _6178_generatedValues = Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.Concat(_6178_generatedValues, Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.FromElements(_System.Tuple2<RAST._IExpr, RAST._IExpr>.create(_6180_recursiveGenKey, _6183_recursiveGenValue)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6182_recIdentsKey), _6185_recIdentsValue);
            _6179_i = (_6179_i) + (BigInteger.One);
          }
          _6179_i = BigInteger.Zero;
          Dafny.ISequence<RAST._IExpr> _6186_arguments;
          _6186_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          while ((_6179_i) < (new BigInteger((_6178_generatedValues).Count))) {
            RAST._IExpr _6187_genKey;
            _6187_genKey = ((_6178_generatedValues).Select(_6179_i)).dtor__0;
            RAST._IExpr _6188_genValue;
            _6188_genValue = ((_6178_generatedValues).Select(_6179_i)).dtor__1;
            _6186_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_6186_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=>"), _6187_genKey, _6188_genValue, DAST.Format.BinOpFormat.create_NoFormat())));
            _6179_i = (_6179_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("map!"))).Apply(_6186_arguments);
          RAST._IExpr _out2412;
          DCOMP._IOwnership _out2413;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2412, out _out2413);
          r = _out2412;
          resultingOwnership = _out2413;
          return ;
        }
      } else if (_source246.is_MapBuilder) {
        DAST._IType _6189___mcc_h24 = _source246.dtor_keyType;
        DAST._IType _6190___mcc_h25 = _source246.dtor_valueType;
        DAST._IType _6191_valueType = _6190___mcc_h25;
        DAST._IType _6192_keyType = _6189___mcc_h24;
        {
          RAST._IType _6193_kType;
          RAST._IType _out2414;
          _out2414 = DCOMP.COMP.GenType(_6192_keyType, false, false);
          _6193_kType = _out2414;
          RAST._IType _6194_vType;
          RAST._IType _out2415;
          _out2415 = DCOMP.COMP.GenType(_6191_valueType, false, false);
          _6194_vType = _out2415;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::MapBuilder::<"), (_6193_kType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_6194_vType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::new()")));
          RAST._IExpr _out2416;
          DCOMP._IOwnership _out2417;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2416, out _out2417);
          r = _out2416;
          resultingOwnership = _out2417;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source246.is_SeqUpdate) {
        DAST._IExpression _6195___mcc_h26 = _source246.dtor_expr;
        DAST._IExpression _6196___mcc_h27 = _source246.dtor_indexExpr;
        DAST._IExpression _6197___mcc_h28 = _source246.dtor_value;
        DAST._IExpression _6198_value = _6197___mcc_h28;
        DAST._IExpression _6199_index = _6196___mcc_h27;
        DAST._IExpression _6200_expr = _6195___mcc_h26;
        {
          RAST._IExpr _6201_exprR;
          DCOMP._IOwnership _6202___v109;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6203_exprIdents;
          RAST._IExpr _out2418;
          DCOMP._IOwnership _out2419;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2420;
          DCOMP.COMP.GenExpr(_6200_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2418, out _out2419, out _out2420);
          _6201_exprR = _out2418;
          _6202___v109 = _out2419;
          _6203_exprIdents = _out2420;
          RAST._IExpr _6204_indexR;
          DCOMP._IOwnership _6205_indexOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6206_indexIdents;
          RAST._IExpr _out2421;
          DCOMP._IOwnership _out2422;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2423;
          DCOMP.COMP.GenExpr(_6199_index, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2421, out _out2422, out _out2423);
          _6204_indexR = _out2421;
          _6205_indexOwnership = _out2422;
          _6206_indexIdents = _out2423;
          RAST._IExpr _6207_valueR;
          DCOMP._IOwnership _6208_valueOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6209_valueIdents;
          RAST._IExpr _out2424;
          DCOMP._IOwnership _out2425;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2426;
          DCOMP.COMP.GenExpr(_6198_value, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2424, out _out2425, out _out2426);
          _6207_valueR = _out2424;
          _6208_valueOwnership = _out2425;
          _6209_valueIdents = _out2426;
          r = ((_6201_exprR).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("update_index"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6204_indexR, _6207_valueR));
          RAST._IExpr _out2427;
          DCOMP._IOwnership _out2428;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2427, out _out2428);
          r = _out2427;
          resultingOwnership = _out2428;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_6203_exprIdents, _6206_indexIdents), _6209_valueIdents);
          return ;
        }
      } else if (_source246.is_MapUpdate) {
        DAST._IExpression _6210___mcc_h29 = _source246.dtor_expr;
        DAST._IExpression _6211___mcc_h30 = _source246.dtor_indexExpr;
        DAST._IExpression _6212___mcc_h31 = _source246.dtor_value;
        DAST._IExpression _6213_value = _6212___mcc_h31;
        DAST._IExpression _6214_index = _6211___mcc_h30;
        DAST._IExpression _6215_expr = _6210___mcc_h29;
        {
          RAST._IExpr _6216_exprR;
          DCOMP._IOwnership _6217___v110;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6218_exprIdents;
          RAST._IExpr _out2429;
          DCOMP._IOwnership _out2430;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2431;
          DCOMP.COMP.GenExpr(_6215_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2429, out _out2430, out _out2431);
          _6216_exprR = _out2429;
          _6217___v110 = _out2430;
          _6218_exprIdents = _out2431;
          RAST._IExpr _6219_indexR;
          DCOMP._IOwnership _6220_indexOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6221_indexIdents;
          RAST._IExpr _out2432;
          DCOMP._IOwnership _out2433;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2434;
          DCOMP.COMP.GenExpr(_6214_index, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2432, out _out2433, out _out2434);
          _6219_indexR = _out2432;
          _6220_indexOwnership = _out2433;
          _6221_indexIdents = _out2434;
          RAST._IExpr _6222_valueR;
          DCOMP._IOwnership _6223_valueOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6224_valueIdents;
          RAST._IExpr _out2435;
          DCOMP._IOwnership _out2436;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2437;
          DCOMP.COMP.GenExpr(_6213_value, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2435, out _out2436, out _out2437);
          _6222_valueR = _out2435;
          _6223_valueOwnership = _out2436;
          _6224_valueIdents = _out2437;
          r = ((_6216_exprR).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("update_index"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6219_indexR, _6222_valueR));
          RAST._IExpr _out2438;
          DCOMP._IOwnership _out2439;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2438, out _out2439);
          r = _out2438;
          resultingOwnership = _out2439;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_6218_exprIdents, _6221_indexIdents), _6224_valueIdents);
          return ;
        }
      } else if (_source246.is_SetBuilder) {
        DAST._IType _6225___mcc_h32 = _source246.dtor_elemType;
        DAST._IType _6226_elemType = _6225___mcc_h32;
        {
          RAST._IType _6227_eType;
          RAST._IType _out2440;
          _out2440 = DCOMP.COMP.GenType(_6226_elemType, false, false);
          _6227_eType = _out2440;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::SetBuilder::<"), (_6227_eType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::new()")));
          RAST._IExpr _out2441;
          DCOMP._IOwnership _out2442;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2441, out _out2442);
          r = _out2441;
          resultingOwnership = _out2442;
          return ;
        }
      } else if (_source246.is_ToMultiset) {
        DAST._IExpression _6228___mcc_h33 = _source246.dtor_ToMultiset_a0;
        DAST._IExpression _6229_expr = _6228___mcc_h33;
        {
          RAST._IExpr _6230_recursiveGen;
          DCOMP._IOwnership _6231___v106;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6232_recIdents;
          RAST._IExpr _out2443;
          DCOMP._IOwnership _out2444;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2445;
          DCOMP.COMP.GenExpr(_6229_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2443, out _out2444, out _out2445);
          _6230_recursiveGen = _out2443;
          _6231___v106 = _out2444;
          _6232_recIdents = _out2445;
          r = ((_6230_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_dafny_multiset"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          readIdents = _6232_recIdents;
          RAST._IExpr _out2446;
          DCOMP._IOwnership _out2447;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2446, out _out2447);
          r = _out2446;
          resultingOwnership = _out2447;
          return ;
        }
      } else if (_source246.is_This) {
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source247 = selfIdent;
          if (_source247.is_None) {
            {
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"this outside of a method\")"));
              RAST._IExpr _out2448;
              DCOMP._IOwnership _out2449;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2448, out _out2449);
              r = _out2448;
              resultingOwnership = _out2449;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _6233___mcc_h273 = _source247.dtor_value;
            Dafny.ISequence<Dafny.Rune> _6234_id = _6233___mcc_h273;
            {
              r = RAST.Expr.create_RawExpr(_6234_id);
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else if ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipBorrowed())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed()))) {
                if (!(_6234_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  r = RAST.__default.Borrow(r);
                }
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              } else {
                if (!(_6234_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  r = RAST.__default.BorrowMut(r);
                }
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowedMut();
              }
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_6234_id);
            }
          }
          return ;
        }
      } else if (_source246.is_Ite) {
        DAST._IExpression _6235___mcc_h34 = _source246.dtor_cond;
        DAST._IExpression _6236___mcc_h35 = _source246.dtor_thn;
        DAST._IExpression _6237___mcc_h36 = _source246.dtor_els;
        DAST._IExpression _6238_f = _6237___mcc_h36;
        DAST._IExpression _6239_t = _6236___mcc_h35;
        DAST._IExpression _6240_cond = _6235___mcc_h34;
        {
          RAST._IExpr _6241_cond;
          DCOMP._IOwnership _6242___v111;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6243_recIdentsCond;
          RAST._IExpr _out2450;
          DCOMP._IOwnership _out2451;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2452;
          DCOMP.COMP.GenExpr(_6240_cond, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2450, out _out2451, out _out2452);
          _6241_cond = _out2450;
          _6242___v111 = _out2451;
          _6243_recIdentsCond = _out2452;
          Dafny.ISequence<Dafny.Rune> _6244_condString;
          _6244_condString = (_6241_cond)._ToString(DCOMP.__default.IND);
          RAST._IExpr _6245___v112;
          DCOMP._IOwnership _6246_tHasToBeOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6247___v113;
          RAST._IExpr _out2453;
          DCOMP._IOwnership _out2454;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2455;
          DCOMP.COMP.GenExpr(_6239_t, selfIdent, env, expectedOwnership, out _out2453, out _out2454, out _out2455);
          _6245___v112 = _out2453;
          _6246_tHasToBeOwned = _out2454;
          _6247___v113 = _out2455;
          RAST._IExpr _6248_fExpr;
          DCOMP._IOwnership _6249_fOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6250_recIdentsF;
          RAST._IExpr _out2456;
          DCOMP._IOwnership _out2457;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2458;
          DCOMP.COMP.GenExpr(_6238_f, selfIdent, env, _6246_tHasToBeOwned, out _out2456, out _out2457, out _out2458);
          _6248_fExpr = _out2456;
          _6249_fOwned = _out2457;
          _6250_recIdentsF = _out2458;
          Dafny.ISequence<Dafny.Rune> _6251_fString;
          _6251_fString = (_6248_fExpr)._ToString(DCOMP.__default.IND);
          RAST._IExpr _6252_tExpr;
          DCOMP._IOwnership _6253___v114;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6254_recIdentsT;
          RAST._IExpr _out2459;
          DCOMP._IOwnership _out2460;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2461;
          DCOMP.COMP.GenExpr(_6239_t, selfIdent, env, _6249_fOwned, out _out2459, out _out2460, out _out2461);
          _6252_tExpr = _out2459;
          _6253___v114 = _out2460;
          _6254_recIdentsT = _out2461;
          Dafny.ISequence<Dafny.Rune> _6255_tString;
          _6255_tString = (_6252_tExpr)._ToString(DCOMP.__default.IND);
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(if "), _6244_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _6255_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _6251_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})")));
          RAST._IExpr _out2462;
          DCOMP._IOwnership _out2463;
          DCOMP.COMP.FromOwnership(r, _6249_fOwned, expectedOwnership, out _out2462, out _out2463);
          r = _out2462;
          resultingOwnership = _out2463;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_6243_recIdentsCond, _6254_recIdentsT), _6250_recIdentsF);
          return ;
        }
      } else if (_source246.is_UnOp) {
        DAST._IUnaryOp _6256___mcc_h37 = _source246.dtor_unOp;
        DAST._IExpression _6257___mcc_h38 = _source246.dtor_expr;
        DAST.Format._IUnOpFormat _6258___mcc_h39 = _source246.dtor_format1;
        DAST._IUnaryOp _source248 = _6256___mcc_h37;
        if (_source248.is_Not) {
          DAST.Format._IUnOpFormat _6259_format = _6258___mcc_h39;
          DAST._IExpression _6260_e = _6257___mcc_h38;
          {
            RAST._IExpr _6261_recursiveGen;
            DCOMP._IOwnership _6262___v115;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6263_recIdents;
            RAST._IExpr _out2464;
            DCOMP._IOwnership _out2465;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2466;
            DCOMP.COMP.GenExpr(_6260_e, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2464, out _out2465, out _out2466);
            _6261_recursiveGen = _out2464;
            _6262___v115 = _out2465;
            _6263_recIdents = _out2466;
            r = RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!"), _6261_recursiveGen, _6259_format);
            RAST._IExpr _out2467;
            DCOMP._IOwnership _out2468;
            DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2467, out _out2468);
            r = _out2467;
            resultingOwnership = _out2468;
            readIdents = _6263_recIdents;
            return ;
          }
        } else if (_source248.is_BitwiseNot) {
          DAST.Format._IUnOpFormat _6264_format = _6258___mcc_h39;
          DAST._IExpression _6265_e = _6257___mcc_h38;
          {
            RAST._IExpr _6266_recursiveGen;
            DCOMP._IOwnership _6267___v116;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6268_recIdents;
            RAST._IExpr _out2469;
            DCOMP._IOwnership _out2470;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2471;
            DCOMP.COMP.GenExpr(_6265_e, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2469, out _out2470, out _out2471);
            _6266_recursiveGen = _out2469;
            _6267___v116 = _out2470;
            _6268_recIdents = _out2471;
            r = RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("~"), _6266_recursiveGen, _6264_format);
            RAST._IExpr _out2472;
            DCOMP._IOwnership _out2473;
            DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2472, out _out2473);
            r = _out2472;
            resultingOwnership = _out2473;
            readIdents = _6268_recIdents;
            return ;
          }
        } else {
          DAST.Format._IUnOpFormat _6269_format = _6258___mcc_h39;
          DAST._IExpression _6270_e = _6257___mcc_h38;
          {
            RAST._IExpr _6271_recursiveGen;
            DCOMP._IOwnership _6272_recOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6273_recIdents;
            RAST._IExpr _out2474;
            DCOMP._IOwnership _out2475;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2476;
            DCOMP.COMP.GenExpr(_6270_e, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2474, out _out2475, out _out2476);
            _6271_recursiveGen = _out2474;
            _6272_recOwned = _out2475;
            _6273_recIdents = _out2476;
            r = ((_6271_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cardinality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
            RAST._IExpr _out2477;
            DCOMP._IOwnership _out2478;
            DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2477, out _out2478);
            r = _out2477;
            resultingOwnership = _out2478;
            readIdents = _6273_recIdents;
            return ;
          }
        }
      } else if (_source246.is_BinOp) {
        DAST._IBinOp _6274___mcc_h40 = _source246.dtor_op;
        DAST._IExpression _6275___mcc_h41 = _source246.dtor_left;
        DAST._IExpression _6276___mcc_h42 = _source246.dtor_right;
        DAST.Format._IBinOpFormat _6277___mcc_h43 = _source246.dtor_format2;
        RAST._IExpr _out2479;
        DCOMP._IOwnership _out2480;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2481;
        DCOMP.COMP.GenExprBinary(e, selfIdent, env, expectedOwnership, out _out2479, out _out2480, out _out2481);
        r = _out2479;
        resultingOwnership = _out2480;
        readIdents = _out2481;
      } else if (_source246.is_ArrayLen) {
        DAST._IExpression _6278___mcc_h44 = _source246.dtor_expr;
        BigInteger _6279___mcc_h45 = _source246.dtor_dim;
        BigInteger _6280_dim = _6279___mcc_h45;
        DAST._IExpression _6281_expr = _6278___mcc_h44;
        {
          RAST._IExpr _6282_recursiveGen;
          DCOMP._IOwnership _6283___v121;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6284_recIdents;
          RAST._IExpr _out2482;
          DCOMP._IOwnership _out2483;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2484;
          DCOMP.COMP.GenExpr(_6281_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2482, out _out2483, out _out2484);
          _6282_recursiveGen = _out2482;
          _6283___v121 = _out2483;
          _6284_recIdents = _out2484;
          if ((_6280_dim).Sign == 0) {
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), (_6282_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow().len())")));
          } else {
            Dafny.ISequence<Dafny.Rune> _6285_s;
            _6285_s = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(m.borrow().len())")))._ToString(DCOMP.__default.IND);
            BigInteger _6286_i;
            _6286_i = BigInteger.One;
            while ((_6286_i) < (_6280_dim)) {
              _6285_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("m.borrow().get(0).map(|m| "), _6285_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
              _6286_i = (_6286_i) + (BigInteger.One);
            }
            r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6282_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow().get(0).map(|m| ")), _6285_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"))));
          }
          RAST._IExpr _out2485;
          DCOMP._IOwnership _out2486;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2485, out _out2486);
          r = _out2485;
          resultingOwnership = _out2486;
          readIdents = _6284_recIdents;
          return ;
        }
      } else if (_source246.is_MapKeys) {
        DAST._IExpression _6287___mcc_h46 = _source246.dtor_expr;
        DAST._IExpression _6288_expr = _6287___mcc_h46;
        {
          RAST._IExpr _6289_recursiveGen;
          DCOMP._IOwnership _6290___v122;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6291_recIdents;
          RAST._IExpr _out2487;
          DCOMP._IOwnership _out2488;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2489;
          DCOMP.COMP.GenExpr(_6288_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2487, out _out2488, out _out2489);
          _6289_recursiveGen = _out2487;
          _6290___v122 = _out2488;
          _6291_recIdents = _out2489;
          readIdents = _6291_recIdents;
          r = ((_6289_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("keys"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          RAST._IExpr _out2490;
          DCOMP._IOwnership _out2491;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2490, out _out2491);
          r = _out2490;
          resultingOwnership = _out2491;
          return ;
        }
      } else if (_source246.is_MapValues) {
        DAST._IExpression _6292___mcc_h47 = _source246.dtor_expr;
        DAST._IExpression _6293_expr = _6292___mcc_h47;
        {
          RAST._IExpr _6294_recursiveGen;
          DCOMP._IOwnership _6295___v123;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6296_recIdents;
          RAST._IExpr _out2492;
          DCOMP._IOwnership _out2493;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2494;
          DCOMP.COMP.GenExpr(_6293_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2492, out _out2493, out _out2494);
          _6294_recursiveGen = _out2492;
          _6295___v123 = _out2493;
          _6296_recIdents = _out2494;
          readIdents = _6296_recIdents;
          r = ((_6294_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("values"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          RAST._IExpr _out2495;
          DCOMP._IOwnership _out2496;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2495, out _out2496);
          r = _out2495;
          resultingOwnership = _out2496;
          return ;
        }
      } else if (_source246.is_Select) {
        DAST._IExpression _6297___mcc_h48 = _source246.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _6298___mcc_h49 = _source246.dtor_field;
        bool _6299___mcc_h50 = _source246.dtor_isConstant;
        bool _6300___mcc_h51 = _source246.dtor_onDatatype;
        DAST._IExpression _source249 = _6297___mcc_h48;
        if (_source249.is_Literal) {
          DAST._ILiteral _6301___mcc_h52 = _source249.dtor_Literal_a0;
          bool _6302_isDatatype = _6300___mcc_h51;
          bool _6303_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6304_field = _6298___mcc_h49;
          DAST._IExpression _6305_on = _6297___mcc_h48;
          {
            RAST._IExpr _6306_onExpr;
            DCOMP._IOwnership _6307_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6308_recIdents;
            RAST._IExpr _out2497;
            DCOMP._IOwnership _out2498;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2499;
            DCOMP.COMP.GenExpr(_6305_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2497, out _out2498, out _out2499);
            _6306_onExpr = _out2497;
            _6307_onOwned = _out2498;
            _6308_recIdents = _out2499;
            if ((_6302_isDatatype) || (_6303_isConstant)) {
              r = ((_6306_onExpr).Sel(DCOMP.__default.escapeIdent(_6304_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2500;
              DCOMP._IOwnership _out2501;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2500, out _out2501);
              r = _out2500;
              resultingOwnership = _out2501;
            } else {
              Dafny.ISequence<Dafny.Rune> _6309_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6309_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6306_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6304_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2502;
              DCOMP._IOwnership _out2503;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6309_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2502, out _out2503);
              r = _out2502;
              resultingOwnership = _out2503;
            }
            readIdents = _6308_recIdents;
            return ;
          }
        } else if (_source249.is_Ident) {
          Dafny.ISequence<Dafny.Rune> _6310___mcc_h54 = _source249.dtor_Ident_a0;
          bool _6311_isDatatype = _6300___mcc_h51;
          bool _6312_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6313_field = _6298___mcc_h49;
          DAST._IExpression _6314_on = _6297___mcc_h48;
          {
            RAST._IExpr _6315_onExpr;
            DCOMP._IOwnership _6316_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6317_recIdents;
            RAST._IExpr _out2504;
            DCOMP._IOwnership _out2505;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2506;
            DCOMP.COMP.GenExpr(_6314_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2504, out _out2505, out _out2506);
            _6315_onExpr = _out2504;
            _6316_onOwned = _out2505;
            _6317_recIdents = _out2506;
            if ((_6311_isDatatype) || (_6312_isConstant)) {
              r = ((_6315_onExpr).Sel(DCOMP.__default.escapeIdent(_6313_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2507;
              DCOMP._IOwnership _out2508;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2507, out _out2508);
              r = _out2507;
              resultingOwnership = _out2508;
            } else {
              Dafny.ISequence<Dafny.Rune> _6318_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6318_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6315_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6313_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2509;
              DCOMP._IOwnership _out2510;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6318_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2509, out _out2510);
              r = _out2509;
              resultingOwnership = _out2510;
            }
            readIdents = _6317_recIdents;
            return ;
          }
        } else if (_source249.is_Companion) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6319___mcc_h56 = _source249.dtor_Companion_a0;
          bool _6320_isDatatype = _6300___mcc_h51;
          bool _6321_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6322_field = _6298___mcc_h49;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6323_c = _6319___mcc_h56;
          {
            RAST._IExpr _6324_onExpr;
            DCOMP._IOwnership _6325_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6326_recIdents;
            RAST._IExpr _out2511;
            DCOMP._IOwnership _out2512;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2513;
            DCOMP.COMP.GenExpr(DAST.Expression.create_Companion(_6323_c), selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2511, out _out2512, out _out2513);
            _6324_onExpr = _out2511;
            _6325_onOwned = _out2512;
            _6326_recIdents = _out2513;
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_6324_onExpr)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_6322_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()")));
            RAST._IExpr _out2514;
            DCOMP._IOwnership _out2515;
            DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2514, out _out2515);
            r = _out2514;
            resultingOwnership = _out2515;
            readIdents = _6326_recIdents;
            return ;
          }
        } else if (_source249.is_Tuple) {
          Dafny.ISequence<DAST._IExpression> _6327___mcc_h58 = _source249.dtor_Tuple_a0;
          bool _6328_isDatatype = _6300___mcc_h51;
          bool _6329_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6330_field = _6298___mcc_h49;
          DAST._IExpression _6331_on = _6297___mcc_h48;
          {
            RAST._IExpr _6332_onExpr;
            DCOMP._IOwnership _6333_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6334_recIdents;
            RAST._IExpr _out2516;
            DCOMP._IOwnership _out2517;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2518;
            DCOMP.COMP.GenExpr(_6331_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2516, out _out2517, out _out2518);
            _6332_onExpr = _out2516;
            _6333_onOwned = _out2517;
            _6334_recIdents = _out2518;
            if ((_6328_isDatatype) || (_6329_isConstant)) {
              r = ((_6332_onExpr).Sel(DCOMP.__default.escapeIdent(_6330_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2519;
              DCOMP._IOwnership _out2520;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2519, out _out2520);
              r = _out2519;
              resultingOwnership = _out2520;
            } else {
              Dafny.ISequence<Dafny.Rune> _6335_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6335_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6332_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6330_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2521;
              DCOMP._IOwnership _out2522;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6335_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2521, out _out2522);
              r = _out2521;
              resultingOwnership = _out2522;
            }
            readIdents = _6334_recIdents;
            return ;
          }
        } else if (_source249.is_New) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6336___mcc_h60 = _source249.dtor_path;
          Dafny.ISequence<DAST._IType> _6337___mcc_h61 = _source249.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _6338___mcc_h62 = _source249.dtor_args;
          bool _6339_isDatatype = _6300___mcc_h51;
          bool _6340_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6341_field = _6298___mcc_h49;
          DAST._IExpression _6342_on = _6297___mcc_h48;
          {
            RAST._IExpr _6343_onExpr;
            DCOMP._IOwnership _6344_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6345_recIdents;
            RAST._IExpr _out2523;
            DCOMP._IOwnership _out2524;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2525;
            DCOMP.COMP.GenExpr(_6342_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2523, out _out2524, out _out2525);
            _6343_onExpr = _out2523;
            _6344_onOwned = _out2524;
            _6345_recIdents = _out2525;
            if ((_6339_isDatatype) || (_6340_isConstant)) {
              r = ((_6343_onExpr).Sel(DCOMP.__default.escapeIdent(_6341_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2526;
              DCOMP._IOwnership _out2527;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2526, out _out2527);
              r = _out2526;
              resultingOwnership = _out2527;
            } else {
              Dafny.ISequence<Dafny.Rune> _6346_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6346_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6343_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6341_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2528;
              DCOMP._IOwnership _out2529;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6346_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2528, out _out2529);
              r = _out2528;
              resultingOwnership = _out2529;
            }
            readIdents = _6345_recIdents;
            return ;
          }
        } else if (_source249.is_NewArray) {
          Dafny.ISequence<DAST._IExpression> _6347___mcc_h66 = _source249.dtor_dims;
          DAST._IType _6348___mcc_h67 = _source249.dtor_typ;
          bool _6349_isDatatype = _6300___mcc_h51;
          bool _6350_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6351_field = _6298___mcc_h49;
          DAST._IExpression _6352_on = _6297___mcc_h48;
          {
            RAST._IExpr _6353_onExpr;
            DCOMP._IOwnership _6354_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6355_recIdents;
            RAST._IExpr _out2530;
            DCOMP._IOwnership _out2531;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2532;
            DCOMP.COMP.GenExpr(_6352_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2530, out _out2531, out _out2532);
            _6353_onExpr = _out2530;
            _6354_onOwned = _out2531;
            _6355_recIdents = _out2532;
            if ((_6349_isDatatype) || (_6350_isConstant)) {
              r = ((_6353_onExpr).Sel(DCOMP.__default.escapeIdent(_6351_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2533;
              DCOMP._IOwnership _out2534;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2533, out _out2534);
              r = _out2533;
              resultingOwnership = _out2534;
            } else {
              Dafny.ISequence<Dafny.Rune> _6356_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6356_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6353_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6351_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2535;
              DCOMP._IOwnership _out2536;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6356_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2535, out _out2536);
              r = _out2535;
              resultingOwnership = _out2536;
            }
            readIdents = _6355_recIdents;
            return ;
          }
        } else if (_source249.is_DatatypeValue) {
          DAST._IDatatypeType _6357___mcc_h70 = _source249.dtor_datatypeType;
          Dafny.ISequence<DAST._IType> _6358___mcc_h71 = _source249.dtor_typeArgs;
          Dafny.ISequence<Dafny.Rune> _6359___mcc_h72 = _source249.dtor_variant;
          bool _6360___mcc_h73 = _source249.dtor_isCo;
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _6361___mcc_h74 = _source249.dtor_contents;
          bool _6362_isDatatype = _6300___mcc_h51;
          bool _6363_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6364_field = _6298___mcc_h49;
          DAST._IExpression _6365_on = _6297___mcc_h48;
          {
            RAST._IExpr _6366_onExpr;
            DCOMP._IOwnership _6367_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6368_recIdents;
            RAST._IExpr _out2537;
            DCOMP._IOwnership _out2538;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2539;
            DCOMP.COMP.GenExpr(_6365_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2537, out _out2538, out _out2539);
            _6366_onExpr = _out2537;
            _6367_onOwned = _out2538;
            _6368_recIdents = _out2539;
            if ((_6362_isDatatype) || (_6363_isConstant)) {
              r = ((_6366_onExpr).Sel(DCOMP.__default.escapeIdent(_6364_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2540;
              DCOMP._IOwnership _out2541;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2540, out _out2541);
              r = _out2540;
              resultingOwnership = _out2541;
            } else {
              Dafny.ISequence<Dafny.Rune> _6369_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6369_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6366_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6364_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2542;
              DCOMP._IOwnership _out2543;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6369_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2542, out _out2543);
              r = _out2542;
              resultingOwnership = _out2543;
            }
            readIdents = _6368_recIdents;
            return ;
          }
        } else if (_source249.is_Convert) {
          DAST._IExpression _6370___mcc_h80 = _source249.dtor_value;
          DAST._IType _6371___mcc_h81 = _source249.dtor_from;
          DAST._IType _6372___mcc_h82 = _source249.dtor_typ;
          bool _6373_isDatatype = _6300___mcc_h51;
          bool _6374_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6375_field = _6298___mcc_h49;
          DAST._IExpression _6376_on = _6297___mcc_h48;
          {
            RAST._IExpr _6377_onExpr;
            DCOMP._IOwnership _6378_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6379_recIdents;
            RAST._IExpr _out2544;
            DCOMP._IOwnership _out2545;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2546;
            DCOMP.COMP.GenExpr(_6376_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2544, out _out2545, out _out2546);
            _6377_onExpr = _out2544;
            _6378_onOwned = _out2545;
            _6379_recIdents = _out2546;
            if ((_6373_isDatatype) || (_6374_isConstant)) {
              r = ((_6377_onExpr).Sel(DCOMP.__default.escapeIdent(_6375_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2547;
              DCOMP._IOwnership _out2548;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2547, out _out2548);
              r = _out2547;
              resultingOwnership = _out2548;
            } else {
              Dafny.ISequence<Dafny.Rune> _6380_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6380_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6377_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6375_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2549;
              DCOMP._IOwnership _out2550;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6380_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2549, out _out2550);
              r = _out2549;
              resultingOwnership = _out2550;
            }
            readIdents = _6379_recIdents;
            return ;
          }
        } else if (_source249.is_SeqConstruct) {
          DAST._IExpression _6381___mcc_h86 = _source249.dtor_length;
          DAST._IExpression _6382___mcc_h87 = _source249.dtor_elem;
          bool _6383_isDatatype = _6300___mcc_h51;
          bool _6384_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6385_field = _6298___mcc_h49;
          DAST._IExpression _6386_on = _6297___mcc_h48;
          {
            RAST._IExpr _6387_onExpr;
            DCOMP._IOwnership _6388_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6389_recIdents;
            RAST._IExpr _out2551;
            DCOMP._IOwnership _out2552;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2553;
            DCOMP.COMP.GenExpr(_6386_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2551, out _out2552, out _out2553);
            _6387_onExpr = _out2551;
            _6388_onOwned = _out2552;
            _6389_recIdents = _out2553;
            if ((_6383_isDatatype) || (_6384_isConstant)) {
              r = ((_6387_onExpr).Sel(DCOMP.__default.escapeIdent(_6385_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2554;
              DCOMP._IOwnership _out2555;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2554, out _out2555);
              r = _out2554;
              resultingOwnership = _out2555;
            } else {
              Dafny.ISequence<Dafny.Rune> _6390_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6390_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6387_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6385_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2556;
              DCOMP._IOwnership _out2557;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6390_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2556, out _out2557);
              r = _out2556;
              resultingOwnership = _out2557;
            }
            readIdents = _6389_recIdents;
            return ;
          }
        } else if (_source249.is_SeqValue) {
          Dafny.ISequence<DAST._IExpression> _6391___mcc_h90 = _source249.dtor_elements;
          DAST._IType _6392___mcc_h91 = _source249.dtor_typ;
          bool _6393_isDatatype = _6300___mcc_h51;
          bool _6394_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6395_field = _6298___mcc_h49;
          DAST._IExpression _6396_on = _6297___mcc_h48;
          {
            RAST._IExpr _6397_onExpr;
            DCOMP._IOwnership _6398_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6399_recIdents;
            RAST._IExpr _out2558;
            DCOMP._IOwnership _out2559;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2560;
            DCOMP.COMP.GenExpr(_6396_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2558, out _out2559, out _out2560);
            _6397_onExpr = _out2558;
            _6398_onOwned = _out2559;
            _6399_recIdents = _out2560;
            if ((_6393_isDatatype) || (_6394_isConstant)) {
              r = ((_6397_onExpr).Sel(DCOMP.__default.escapeIdent(_6395_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2561;
              DCOMP._IOwnership _out2562;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2561, out _out2562);
              r = _out2561;
              resultingOwnership = _out2562;
            } else {
              Dafny.ISequence<Dafny.Rune> _6400_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6400_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6397_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6395_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2563;
              DCOMP._IOwnership _out2564;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6400_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2563, out _out2564);
              r = _out2563;
              resultingOwnership = _out2564;
            }
            readIdents = _6399_recIdents;
            return ;
          }
        } else if (_source249.is_SetValue) {
          Dafny.ISequence<DAST._IExpression> _6401___mcc_h94 = _source249.dtor_elements;
          bool _6402_isDatatype = _6300___mcc_h51;
          bool _6403_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6404_field = _6298___mcc_h49;
          DAST._IExpression _6405_on = _6297___mcc_h48;
          {
            RAST._IExpr _6406_onExpr;
            DCOMP._IOwnership _6407_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6408_recIdents;
            RAST._IExpr _out2565;
            DCOMP._IOwnership _out2566;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2567;
            DCOMP.COMP.GenExpr(_6405_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2565, out _out2566, out _out2567);
            _6406_onExpr = _out2565;
            _6407_onOwned = _out2566;
            _6408_recIdents = _out2567;
            if ((_6402_isDatatype) || (_6403_isConstant)) {
              r = ((_6406_onExpr).Sel(DCOMP.__default.escapeIdent(_6404_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2568;
              DCOMP._IOwnership _out2569;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2568, out _out2569);
              r = _out2568;
              resultingOwnership = _out2569;
            } else {
              Dafny.ISequence<Dafny.Rune> _6409_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6409_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6406_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6404_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2570;
              DCOMP._IOwnership _out2571;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6409_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2570, out _out2571);
              r = _out2570;
              resultingOwnership = _out2571;
            }
            readIdents = _6408_recIdents;
            return ;
          }
        } else if (_source249.is_MultisetValue) {
          Dafny.ISequence<DAST._IExpression> _6410___mcc_h96 = _source249.dtor_elements;
          bool _6411_isDatatype = _6300___mcc_h51;
          bool _6412_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6413_field = _6298___mcc_h49;
          DAST._IExpression _6414_on = _6297___mcc_h48;
          {
            RAST._IExpr _6415_onExpr;
            DCOMP._IOwnership _6416_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6417_recIdents;
            RAST._IExpr _out2572;
            DCOMP._IOwnership _out2573;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2574;
            DCOMP.COMP.GenExpr(_6414_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2572, out _out2573, out _out2574);
            _6415_onExpr = _out2572;
            _6416_onOwned = _out2573;
            _6417_recIdents = _out2574;
            if ((_6411_isDatatype) || (_6412_isConstant)) {
              r = ((_6415_onExpr).Sel(DCOMP.__default.escapeIdent(_6413_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2575;
              DCOMP._IOwnership _out2576;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2575, out _out2576);
              r = _out2575;
              resultingOwnership = _out2576;
            } else {
              Dafny.ISequence<Dafny.Rune> _6418_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6418_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6415_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6413_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2577;
              DCOMP._IOwnership _out2578;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6418_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2577, out _out2578);
              r = _out2577;
              resultingOwnership = _out2578;
            }
            readIdents = _6417_recIdents;
            return ;
          }
        } else if (_source249.is_MapValue) {
          Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _6419___mcc_h98 = _source249.dtor_mapElems;
          bool _6420_isDatatype = _6300___mcc_h51;
          bool _6421_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6422_field = _6298___mcc_h49;
          DAST._IExpression _6423_on = _6297___mcc_h48;
          {
            RAST._IExpr _6424_onExpr;
            DCOMP._IOwnership _6425_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6426_recIdents;
            RAST._IExpr _out2579;
            DCOMP._IOwnership _out2580;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2581;
            DCOMP.COMP.GenExpr(_6423_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2579, out _out2580, out _out2581);
            _6424_onExpr = _out2579;
            _6425_onOwned = _out2580;
            _6426_recIdents = _out2581;
            if ((_6420_isDatatype) || (_6421_isConstant)) {
              r = ((_6424_onExpr).Sel(DCOMP.__default.escapeIdent(_6422_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2582;
              DCOMP._IOwnership _out2583;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2582, out _out2583);
              r = _out2582;
              resultingOwnership = _out2583;
            } else {
              Dafny.ISequence<Dafny.Rune> _6427_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6427_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6424_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6422_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2584;
              DCOMP._IOwnership _out2585;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6427_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2584, out _out2585);
              r = _out2584;
              resultingOwnership = _out2585;
            }
            readIdents = _6426_recIdents;
            return ;
          }
        } else if (_source249.is_MapBuilder) {
          DAST._IType _6428___mcc_h100 = _source249.dtor_keyType;
          DAST._IType _6429___mcc_h101 = _source249.dtor_valueType;
          bool _6430_isDatatype = _6300___mcc_h51;
          bool _6431_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6432_field = _6298___mcc_h49;
          DAST._IExpression _6433_on = _6297___mcc_h48;
          {
            RAST._IExpr _6434_onExpr;
            DCOMP._IOwnership _6435_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6436_recIdents;
            RAST._IExpr _out2586;
            DCOMP._IOwnership _out2587;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2588;
            DCOMP.COMP.GenExpr(_6433_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2586, out _out2587, out _out2588);
            _6434_onExpr = _out2586;
            _6435_onOwned = _out2587;
            _6436_recIdents = _out2588;
            if ((_6430_isDatatype) || (_6431_isConstant)) {
              r = ((_6434_onExpr).Sel(DCOMP.__default.escapeIdent(_6432_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2589;
              DCOMP._IOwnership _out2590;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2589, out _out2590);
              r = _out2589;
              resultingOwnership = _out2590;
            } else {
              Dafny.ISequence<Dafny.Rune> _6437_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6437_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6434_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6432_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2591;
              DCOMP._IOwnership _out2592;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6437_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2591, out _out2592);
              r = _out2591;
              resultingOwnership = _out2592;
            }
            readIdents = _6436_recIdents;
            return ;
          }
        } else if (_source249.is_SeqUpdate) {
          DAST._IExpression _6438___mcc_h104 = _source249.dtor_expr;
          DAST._IExpression _6439___mcc_h105 = _source249.dtor_indexExpr;
          DAST._IExpression _6440___mcc_h106 = _source249.dtor_value;
          bool _6441_isDatatype = _6300___mcc_h51;
          bool _6442_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6443_field = _6298___mcc_h49;
          DAST._IExpression _6444_on = _6297___mcc_h48;
          {
            RAST._IExpr _6445_onExpr;
            DCOMP._IOwnership _6446_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6447_recIdents;
            RAST._IExpr _out2593;
            DCOMP._IOwnership _out2594;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2595;
            DCOMP.COMP.GenExpr(_6444_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2593, out _out2594, out _out2595);
            _6445_onExpr = _out2593;
            _6446_onOwned = _out2594;
            _6447_recIdents = _out2595;
            if ((_6441_isDatatype) || (_6442_isConstant)) {
              r = ((_6445_onExpr).Sel(DCOMP.__default.escapeIdent(_6443_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2596;
              DCOMP._IOwnership _out2597;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2596, out _out2597);
              r = _out2596;
              resultingOwnership = _out2597;
            } else {
              Dafny.ISequence<Dafny.Rune> _6448_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6448_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6445_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6443_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2598;
              DCOMP._IOwnership _out2599;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6448_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2598, out _out2599);
              r = _out2598;
              resultingOwnership = _out2599;
            }
            readIdents = _6447_recIdents;
            return ;
          }
        } else if (_source249.is_MapUpdate) {
          DAST._IExpression _6449___mcc_h110 = _source249.dtor_expr;
          DAST._IExpression _6450___mcc_h111 = _source249.dtor_indexExpr;
          DAST._IExpression _6451___mcc_h112 = _source249.dtor_value;
          bool _6452_isDatatype = _6300___mcc_h51;
          bool _6453_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6454_field = _6298___mcc_h49;
          DAST._IExpression _6455_on = _6297___mcc_h48;
          {
            RAST._IExpr _6456_onExpr;
            DCOMP._IOwnership _6457_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6458_recIdents;
            RAST._IExpr _out2600;
            DCOMP._IOwnership _out2601;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2602;
            DCOMP.COMP.GenExpr(_6455_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2600, out _out2601, out _out2602);
            _6456_onExpr = _out2600;
            _6457_onOwned = _out2601;
            _6458_recIdents = _out2602;
            if ((_6452_isDatatype) || (_6453_isConstant)) {
              r = ((_6456_onExpr).Sel(DCOMP.__default.escapeIdent(_6454_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2603;
              DCOMP._IOwnership _out2604;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2603, out _out2604);
              r = _out2603;
              resultingOwnership = _out2604;
            } else {
              Dafny.ISequence<Dafny.Rune> _6459_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6459_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6456_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6454_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2605;
              DCOMP._IOwnership _out2606;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6459_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2605, out _out2606);
              r = _out2605;
              resultingOwnership = _out2606;
            }
            readIdents = _6458_recIdents;
            return ;
          }
        } else if (_source249.is_SetBuilder) {
          DAST._IType _6460___mcc_h116 = _source249.dtor_elemType;
          bool _6461_isDatatype = _6300___mcc_h51;
          bool _6462_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6463_field = _6298___mcc_h49;
          DAST._IExpression _6464_on = _6297___mcc_h48;
          {
            RAST._IExpr _6465_onExpr;
            DCOMP._IOwnership _6466_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6467_recIdents;
            RAST._IExpr _out2607;
            DCOMP._IOwnership _out2608;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2609;
            DCOMP.COMP.GenExpr(_6464_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2607, out _out2608, out _out2609);
            _6465_onExpr = _out2607;
            _6466_onOwned = _out2608;
            _6467_recIdents = _out2609;
            if ((_6461_isDatatype) || (_6462_isConstant)) {
              r = ((_6465_onExpr).Sel(DCOMP.__default.escapeIdent(_6463_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2610;
              DCOMP._IOwnership _out2611;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2610, out _out2611);
              r = _out2610;
              resultingOwnership = _out2611;
            } else {
              Dafny.ISequence<Dafny.Rune> _6468_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6468_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6465_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6463_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2612;
              DCOMP._IOwnership _out2613;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6468_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2612, out _out2613);
              r = _out2612;
              resultingOwnership = _out2613;
            }
            readIdents = _6467_recIdents;
            return ;
          }
        } else if (_source249.is_ToMultiset) {
          DAST._IExpression _6469___mcc_h118 = _source249.dtor_ToMultiset_a0;
          bool _6470_isDatatype = _6300___mcc_h51;
          bool _6471_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6472_field = _6298___mcc_h49;
          DAST._IExpression _6473_on = _6297___mcc_h48;
          {
            RAST._IExpr _6474_onExpr;
            DCOMP._IOwnership _6475_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6476_recIdents;
            RAST._IExpr _out2614;
            DCOMP._IOwnership _out2615;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2616;
            DCOMP.COMP.GenExpr(_6473_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2614, out _out2615, out _out2616);
            _6474_onExpr = _out2614;
            _6475_onOwned = _out2615;
            _6476_recIdents = _out2616;
            if ((_6470_isDatatype) || (_6471_isConstant)) {
              r = ((_6474_onExpr).Sel(DCOMP.__default.escapeIdent(_6472_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2617;
              DCOMP._IOwnership _out2618;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2617, out _out2618);
              r = _out2617;
              resultingOwnership = _out2618;
            } else {
              Dafny.ISequence<Dafny.Rune> _6477_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6477_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6474_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6472_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2619;
              DCOMP._IOwnership _out2620;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6477_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2619, out _out2620);
              r = _out2619;
              resultingOwnership = _out2620;
            }
            readIdents = _6476_recIdents;
            return ;
          }
        } else if (_source249.is_This) {
          bool _6478_isDatatype = _6300___mcc_h51;
          bool _6479_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6480_field = _6298___mcc_h49;
          DAST._IExpression _6481_on = _6297___mcc_h48;
          {
            RAST._IExpr _6482_onExpr;
            DCOMP._IOwnership _6483_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6484_recIdents;
            RAST._IExpr _out2621;
            DCOMP._IOwnership _out2622;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2623;
            DCOMP.COMP.GenExpr(_6481_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2621, out _out2622, out _out2623);
            _6482_onExpr = _out2621;
            _6483_onOwned = _out2622;
            _6484_recIdents = _out2623;
            if ((_6478_isDatatype) || (_6479_isConstant)) {
              r = ((_6482_onExpr).Sel(DCOMP.__default.escapeIdent(_6480_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2624;
              DCOMP._IOwnership _out2625;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2624, out _out2625);
              r = _out2624;
              resultingOwnership = _out2625;
            } else {
              Dafny.ISequence<Dafny.Rune> _6485_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6485_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6482_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6480_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2626;
              DCOMP._IOwnership _out2627;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6485_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2626, out _out2627);
              r = _out2626;
              resultingOwnership = _out2627;
            }
            readIdents = _6484_recIdents;
            return ;
          }
        } else if (_source249.is_Ite) {
          DAST._IExpression _6486___mcc_h120 = _source249.dtor_cond;
          DAST._IExpression _6487___mcc_h121 = _source249.dtor_thn;
          DAST._IExpression _6488___mcc_h122 = _source249.dtor_els;
          bool _6489_isDatatype = _6300___mcc_h51;
          bool _6490_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6491_field = _6298___mcc_h49;
          DAST._IExpression _6492_on = _6297___mcc_h48;
          {
            RAST._IExpr _6493_onExpr;
            DCOMP._IOwnership _6494_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6495_recIdents;
            RAST._IExpr _out2628;
            DCOMP._IOwnership _out2629;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2630;
            DCOMP.COMP.GenExpr(_6492_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2628, out _out2629, out _out2630);
            _6493_onExpr = _out2628;
            _6494_onOwned = _out2629;
            _6495_recIdents = _out2630;
            if ((_6489_isDatatype) || (_6490_isConstant)) {
              r = ((_6493_onExpr).Sel(DCOMP.__default.escapeIdent(_6491_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2631;
              DCOMP._IOwnership _out2632;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2631, out _out2632);
              r = _out2631;
              resultingOwnership = _out2632;
            } else {
              Dafny.ISequence<Dafny.Rune> _6496_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6496_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6493_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6491_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2633;
              DCOMP._IOwnership _out2634;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6496_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2633, out _out2634);
              r = _out2633;
              resultingOwnership = _out2634;
            }
            readIdents = _6495_recIdents;
            return ;
          }
        } else if (_source249.is_UnOp) {
          DAST._IUnaryOp _6497___mcc_h126 = _source249.dtor_unOp;
          DAST._IExpression _6498___mcc_h127 = _source249.dtor_expr;
          DAST.Format._IUnOpFormat _6499___mcc_h128 = _source249.dtor_format1;
          bool _6500_isDatatype = _6300___mcc_h51;
          bool _6501_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6502_field = _6298___mcc_h49;
          DAST._IExpression _6503_on = _6297___mcc_h48;
          {
            RAST._IExpr _6504_onExpr;
            DCOMP._IOwnership _6505_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6506_recIdents;
            RAST._IExpr _out2635;
            DCOMP._IOwnership _out2636;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2637;
            DCOMP.COMP.GenExpr(_6503_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2635, out _out2636, out _out2637);
            _6504_onExpr = _out2635;
            _6505_onOwned = _out2636;
            _6506_recIdents = _out2637;
            if ((_6500_isDatatype) || (_6501_isConstant)) {
              r = ((_6504_onExpr).Sel(DCOMP.__default.escapeIdent(_6502_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2638;
              DCOMP._IOwnership _out2639;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2638, out _out2639);
              r = _out2638;
              resultingOwnership = _out2639;
            } else {
              Dafny.ISequence<Dafny.Rune> _6507_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6507_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6504_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6502_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2640;
              DCOMP._IOwnership _out2641;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6507_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2640, out _out2641);
              r = _out2640;
              resultingOwnership = _out2641;
            }
            readIdents = _6506_recIdents;
            return ;
          }
        } else if (_source249.is_BinOp) {
          DAST._IBinOp _6508___mcc_h132 = _source249.dtor_op;
          DAST._IExpression _6509___mcc_h133 = _source249.dtor_left;
          DAST._IExpression _6510___mcc_h134 = _source249.dtor_right;
          DAST.Format._IBinOpFormat _6511___mcc_h135 = _source249.dtor_format2;
          bool _6512_isDatatype = _6300___mcc_h51;
          bool _6513_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6514_field = _6298___mcc_h49;
          DAST._IExpression _6515_on = _6297___mcc_h48;
          {
            RAST._IExpr _6516_onExpr;
            DCOMP._IOwnership _6517_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6518_recIdents;
            RAST._IExpr _out2642;
            DCOMP._IOwnership _out2643;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2644;
            DCOMP.COMP.GenExpr(_6515_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2642, out _out2643, out _out2644);
            _6516_onExpr = _out2642;
            _6517_onOwned = _out2643;
            _6518_recIdents = _out2644;
            if ((_6512_isDatatype) || (_6513_isConstant)) {
              r = ((_6516_onExpr).Sel(DCOMP.__default.escapeIdent(_6514_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2645;
              DCOMP._IOwnership _out2646;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2645, out _out2646);
              r = _out2645;
              resultingOwnership = _out2646;
            } else {
              Dafny.ISequence<Dafny.Rune> _6519_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6519_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6516_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6514_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2647;
              DCOMP._IOwnership _out2648;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6519_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2647, out _out2648);
              r = _out2647;
              resultingOwnership = _out2648;
            }
            readIdents = _6518_recIdents;
            return ;
          }
        } else if (_source249.is_ArrayLen) {
          DAST._IExpression _6520___mcc_h140 = _source249.dtor_expr;
          BigInteger _6521___mcc_h141 = _source249.dtor_dim;
          bool _6522_isDatatype = _6300___mcc_h51;
          bool _6523_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6524_field = _6298___mcc_h49;
          DAST._IExpression _6525_on = _6297___mcc_h48;
          {
            RAST._IExpr _6526_onExpr;
            DCOMP._IOwnership _6527_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6528_recIdents;
            RAST._IExpr _out2649;
            DCOMP._IOwnership _out2650;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2651;
            DCOMP.COMP.GenExpr(_6525_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2649, out _out2650, out _out2651);
            _6526_onExpr = _out2649;
            _6527_onOwned = _out2650;
            _6528_recIdents = _out2651;
            if ((_6522_isDatatype) || (_6523_isConstant)) {
              r = ((_6526_onExpr).Sel(DCOMP.__default.escapeIdent(_6524_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2652;
              DCOMP._IOwnership _out2653;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2652, out _out2653);
              r = _out2652;
              resultingOwnership = _out2653;
            } else {
              Dafny.ISequence<Dafny.Rune> _6529_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6529_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6526_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6524_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2654;
              DCOMP._IOwnership _out2655;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6529_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2654, out _out2655);
              r = _out2654;
              resultingOwnership = _out2655;
            }
            readIdents = _6528_recIdents;
            return ;
          }
        } else if (_source249.is_MapKeys) {
          DAST._IExpression _6530___mcc_h144 = _source249.dtor_expr;
          bool _6531_isDatatype = _6300___mcc_h51;
          bool _6532_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6533_field = _6298___mcc_h49;
          DAST._IExpression _6534_on = _6297___mcc_h48;
          {
            RAST._IExpr _6535_onExpr;
            DCOMP._IOwnership _6536_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6537_recIdents;
            RAST._IExpr _out2656;
            DCOMP._IOwnership _out2657;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2658;
            DCOMP.COMP.GenExpr(_6534_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2656, out _out2657, out _out2658);
            _6535_onExpr = _out2656;
            _6536_onOwned = _out2657;
            _6537_recIdents = _out2658;
            if ((_6531_isDatatype) || (_6532_isConstant)) {
              r = ((_6535_onExpr).Sel(DCOMP.__default.escapeIdent(_6533_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2659;
              DCOMP._IOwnership _out2660;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2659, out _out2660);
              r = _out2659;
              resultingOwnership = _out2660;
            } else {
              Dafny.ISequence<Dafny.Rune> _6538_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6538_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6535_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6533_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2661;
              DCOMP._IOwnership _out2662;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6538_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2661, out _out2662);
              r = _out2661;
              resultingOwnership = _out2662;
            }
            readIdents = _6537_recIdents;
            return ;
          }
        } else if (_source249.is_MapValues) {
          DAST._IExpression _6539___mcc_h146 = _source249.dtor_expr;
          bool _6540_isDatatype = _6300___mcc_h51;
          bool _6541_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6542_field = _6298___mcc_h49;
          DAST._IExpression _6543_on = _6297___mcc_h48;
          {
            RAST._IExpr _6544_onExpr;
            DCOMP._IOwnership _6545_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6546_recIdents;
            RAST._IExpr _out2663;
            DCOMP._IOwnership _out2664;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2665;
            DCOMP.COMP.GenExpr(_6543_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2663, out _out2664, out _out2665);
            _6544_onExpr = _out2663;
            _6545_onOwned = _out2664;
            _6546_recIdents = _out2665;
            if ((_6540_isDatatype) || (_6541_isConstant)) {
              r = ((_6544_onExpr).Sel(DCOMP.__default.escapeIdent(_6542_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2666;
              DCOMP._IOwnership _out2667;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2666, out _out2667);
              r = _out2666;
              resultingOwnership = _out2667;
            } else {
              Dafny.ISequence<Dafny.Rune> _6547_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6547_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6544_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6542_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2668;
              DCOMP._IOwnership _out2669;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6547_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2668, out _out2669);
              r = _out2668;
              resultingOwnership = _out2669;
            }
            readIdents = _6546_recIdents;
            return ;
          }
        } else if (_source249.is_Select) {
          DAST._IExpression _6548___mcc_h148 = _source249.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _6549___mcc_h149 = _source249.dtor_field;
          bool _6550___mcc_h150 = _source249.dtor_isConstant;
          bool _6551___mcc_h151 = _source249.dtor_onDatatype;
          bool _6552_isDatatype = _6300___mcc_h51;
          bool _6553_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6554_field = _6298___mcc_h49;
          DAST._IExpression _6555_on = _6297___mcc_h48;
          {
            RAST._IExpr _6556_onExpr;
            DCOMP._IOwnership _6557_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6558_recIdents;
            RAST._IExpr _out2670;
            DCOMP._IOwnership _out2671;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2672;
            DCOMP.COMP.GenExpr(_6555_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2670, out _out2671, out _out2672);
            _6556_onExpr = _out2670;
            _6557_onOwned = _out2671;
            _6558_recIdents = _out2672;
            if ((_6552_isDatatype) || (_6553_isConstant)) {
              r = ((_6556_onExpr).Sel(DCOMP.__default.escapeIdent(_6554_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2673;
              DCOMP._IOwnership _out2674;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2673, out _out2674);
              r = _out2673;
              resultingOwnership = _out2674;
            } else {
              Dafny.ISequence<Dafny.Rune> _6559_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6559_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6556_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6554_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2675;
              DCOMP._IOwnership _out2676;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6559_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2675, out _out2676);
              r = _out2675;
              resultingOwnership = _out2676;
            }
            readIdents = _6558_recIdents;
            return ;
          }
        } else if (_source249.is_SelectFn) {
          DAST._IExpression _6560___mcc_h156 = _source249.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _6561___mcc_h157 = _source249.dtor_field;
          bool _6562___mcc_h158 = _source249.dtor_onDatatype;
          bool _6563___mcc_h159 = _source249.dtor_isStatic;
          BigInteger _6564___mcc_h160 = _source249.dtor_arity;
          bool _6565_isDatatype = _6300___mcc_h51;
          bool _6566_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6567_field = _6298___mcc_h49;
          DAST._IExpression _6568_on = _6297___mcc_h48;
          {
            RAST._IExpr _6569_onExpr;
            DCOMP._IOwnership _6570_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6571_recIdents;
            RAST._IExpr _out2677;
            DCOMP._IOwnership _out2678;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2679;
            DCOMP.COMP.GenExpr(_6568_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2677, out _out2678, out _out2679);
            _6569_onExpr = _out2677;
            _6570_onOwned = _out2678;
            _6571_recIdents = _out2679;
            if ((_6565_isDatatype) || (_6566_isConstant)) {
              r = ((_6569_onExpr).Sel(DCOMP.__default.escapeIdent(_6567_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2680;
              DCOMP._IOwnership _out2681;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2680, out _out2681);
              r = _out2680;
              resultingOwnership = _out2681;
            } else {
              Dafny.ISequence<Dafny.Rune> _6572_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6572_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6569_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6567_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2682;
              DCOMP._IOwnership _out2683;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6572_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2682, out _out2683);
              r = _out2682;
              resultingOwnership = _out2683;
            }
            readIdents = _6571_recIdents;
            return ;
          }
        } else if (_source249.is_Index) {
          DAST._IExpression _6573___mcc_h166 = _source249.dtor_expr;
          DAST._ICollKind _6574___mcc_h167 = _source249.dtor_collKind;
          Dafny.ISequence<DAST._IExpression> _6575___mcc_h168 = _source249.dtor_indices;
          bool _6576_isDatatype = _6300___mcc_h51;
          bool _6577_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6578_field = _6298___mcc_h49;
          DAST._IExpression _6579_on = _6297___mcc_h48;
          {
            RAST._IExpr _6580_onExpr;
            DCOMP._IOwnership _6581_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6582_recIdents;
            RAST._IExpr _out2684;
            DCOMP._IOwnership _out2685;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2686;
            DCOMP.COMP.GenExpr(_6579_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2684, out _out2685, out _out2686);
            _6580_onExpr = _out2684;
            _6581_onOwned = _out2685;
            _6582_recIdents = _out2686;
            if ((_6576_isDatatype) || (_6577_isConstant)) {
              r = ((_6580_onExpr).Sel(DCOMP.__default.escapeIdent(_6578_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2687;
              DCOMP._IOwnership _out2688;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2687, out _out2688);
              r = _out2687;
              resultingOwnership = _out2688;
            } else {
              Dafny.ISequence<Dafny.Rune> _6583_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6583_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6580_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6578_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2689;
              DCOMP._IOwnership _out2690;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6583_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2689, out _out2690);
              r = _out2689;
              resultingOwnership = _out2690;
            }
            readIdents = _6582_recIdents;
            return ;
          }
        } else if (_source249.is_IndexRange) {
          DAST._IExpression _6584___mcc_h172 = _source249.dtor_expr;
          bool _6585___mcc_h173 = _source249.dtor_isArray;
          Std.Wrappers._IOption<DAST._IExpression> _6586___mcc_h174 = _source249.dtor_low;
          Std.Wrappers._IOption<DAST._IExpression> _6587___mcc_h175 = _source249.dtor_high;
          bool _6588_isDatatype = _6300___mcc_h51;
          bool _6589_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6590_field = _6298___mcc_h49;
          DAST._IExpression _6591_on = _6297___mcc_h48;
          {
            RAST._IExpr _6592_onExpr;
            DCOMP._IOwnership _6593_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6594_recIdents;
            RAST._IExpr _out2691;
            DCOMP._IOwnership _out2692;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2693;
            DCOMP.COMP.GenExpr(_6591_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2691, out _out2692, out _out2693);
            _6592_onExpr = _out2691;
            _6593_onOwned = _out2692;
            _6594_recIdents = _out2693;
            if ((_6588_isDatatype) || (_6589_isConstant)) {
              r = ((_6592_onExpr).Sel(DCOMP.__default.escapeIdent(_6590_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2694;
              DCOMP._IOwnership _out2695;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2694, out _out2695);
              r = _out2694;
              resultingOwnership = _out2695;
            } else {
              Dafny.ISequence<Dafny.Rune> _6595_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6595_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6592_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6590_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2696;
              DCOMP._IOwnership _out2697;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6595_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2696, out _out2697);
              r = _out2696;
              resultingOwnership = _out2697;
            }
            readIdents = _6594_recIdents;
            return ;
          }
        } else if (_source249.is_TupleSelect) {
          DAST._IExpression _6596___mcc_h180 = _source249.dtor_expr;
          BigInteger _6597___mcc_h181 = _source249.dtor_index;
          bool _6598_isDatatype = _6300___mcc_h51;
          bool _6599_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6600_field = _6298___mcc_h49;
          DAST._IExpression _6601_on = _6297___mcc_h48;
          {
            RAST._IExpr _6602_onExpr;
            DCOMP._IOwnership _6603_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6604_recIdents;
            RAST._IExpr _out2698;
            DCOMP._IOwnership _out2699;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2700;
            DCOMP.COMP.GenExpr(_6601_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2698, out _out2699, out _out2700);
            _6602_onExpr = _out2698;
            _6603_onOwned = _out2699;
            _6604_recIdents = _out2700;
            if ((_6598_isDatatype) || (_6599_isConstant)) {
              r = ((_6602_onExpr).Sel(DCOMP.__default.escapeIdent(_6600_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2701;
              DCOMP._IOwnership _out2702;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2701, out _out2702);
              r = _out2701;
              resultingOwnership = _out2702;
            } else {
              Dafny.ISequence<Dafny.Rune> _6605_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6605_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6602_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6600_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2703;
              DCOMP._IOwnership _out2704;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6605_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2703, out _out2704);
              r = _out2703;
              resultingOwnership = _out2704;
            }
            readIdents = _6604_recIdents;
            return ;
          }
        } else if (_source249.is_Call) {
          DAST._IExpression _6606___mcc_h184 = _source249.dtor_on;
          DAST._ICallName _6607___mcc_h185 = _source249.dtor_callName;
          Dafny.ISequence<DAST._IType> _6608___mcc_h186 = _source249.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _6609___mcc_h187 = _source249.dtor_args;
          bool _6610_isDatatype = _6300___mcc_h51;
          bool _6611_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6612_field = _6298___mcc_h49;
          DAST._IExpression _6613_on = _6297___mcc_h48;
          {
            RAST._IExpr _6614_onExpr;
            DCOMP._IOwnership _6615_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6616_recIdents;
            RAST._IExpr _out2705;
            DCOMP._IOwnership _out2706;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2707;
            DCOMP.COMP.GenExpr(_6613_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2705, out _out2706, out _out2707);
            _6614_onExpr = _out2705;
            _6615_onOwned = _out2706;
            _6616_recIdents = _out2707;
            if ((_6610_isDatatype) || (_6611_isConstant)) {
              r = ((_6614_onExpr).Sel(DCOMP.__default.escapeIdent(_6612_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2708;
              DCOMP._IOwnership _out2709;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2708, out _out2709);
              r = _out2708;
              resultingOwnership = _out2709;
            } else {
              Dafny.ISequence<Dafny.Rune> _6617_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6617_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6614_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6612_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2710;
              DCOMP._IOwnership _out2711;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6617_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2710, out _out2711);
              r = _out2710;
              resultingOwnership = _out2711;
            }
            readIdents = _6616_recIdents;
            return ;
          }
        } else if (_source249.is_Lambda) {
          Dafny.ISequence<DAST._IFormal> _6618___mcc_h192 = _source249.dtor_params;
          DAST._IType _6619___mcc_h193 = _source249.dtor_retType;
          Dafny.ISequence<DAST._IStatement> _6620___mcc_h194 = _source249.dtor_body;
          bool _6621_isDatatype = _6300___mcc_h51;
          bool _6622_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6623_field = _6298___mcc_h49;
          DAST._IExpression _6624_on = _6297___mcc_h48;
          {
            RAST._IExpr _6625_onExpr;
            DCOMP._IOwnership _6626_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6627_recIdents;
            RAST._IExpr _out2712;
            DCOMP._IOwnership _out2713;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2714;
            DCOMP.COMP.GenExpr(_6624_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2712, out _out2713, out _out2714);
            _6625_onExpr = _out2712;
            _6626_onOwned = _out2713;
            _6627_recIdents = _out2714;
            if ((_6621_isDatatype) || (_6622_isConstant)) {
              r = ((_6625_onExpr).Sel(DCOMP.__default.escapeIdent(_6623_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2715;
              DCOMP._IOwnership _out2716;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2715, out _out2716);
              r = _out2715;
              resultingOwnership = _out2716;
            } else {
              Dafny.ISequence<Dafny.Rune> _6628_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6628_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6625_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6623_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2717;
              DCOMP._IOwnership _out2718;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6628_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2717, out _out2718);
              r = _out2717;
              resultingOwnership = _out2718;
            }
            readIdents = _6627_recIdents;
            return ;
          }
        } else if (_source249.is_BetaRedex) {
          Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _6629___mcc_h198 = _source249.dtor_values;
          DAST._IType _6630___mcc_h199 = _source249.dtor_retType;
          DAST._IExpression _6631___mcc_h200 = _source249.dtor_expr;
          bool _6632_isDatatype = _6300___mcc_h51;
          bool _6633_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6634_field = _6298___mcc_h49;
          DAST._IExpression _6635_on = _6297___mcc_h48;
          {
            RAST._IExpr _6636_onExpr;
            DCOMP._IOwnership _6637_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6638_recIdents;
            RAST._IExpr _out2719;
            DCOMP._IOwnership _out2720;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2721;
            DCOMP.COMP.GenExpr(_6635_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2719, out _out2720, out _out2721);
            _6636_onExpr = _out2719;
            _6637_onOwned = _out2720;
            _6638_recIdents = _out2721;
            if ((_6632_isDatatype) || (_6633_isConstant)) {
              r = ((_6636_onExpr).Sel(DCOMP.__default.escapeIdent(_6634_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2722;
              DCOMP._IOwnership _out2723;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2722, out _out2723);
              r = _out2722;
              resultingOwnership = _out2723;
            } else {
              Dafny.ISequence<Dafny.Rune> _6639_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6639_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6636_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6634_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2724;
              DCOMP._IOwnership _out2725;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6639_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2724, out _out2725);
              r = _out2724;
              resultingOwnership = _out2725;
            }
            readIdents = _6638_recIdents;
            return ;
          }
        } else if (_source249.is_IIFE) {
          Dafny.ISequence<Dafny.Rune> _6640___mcc_h204 = _source249.dtor_name;
          DAST._IType _6641___mcc_h205 = _source249.dtor_typ;
          DAST._IExpression _6642___mcc_h206 = _source249.dtor_value;
          DAST._IExpression _6643___mcc_h207 = _source249.dtor_iifeBody;
          bool _6644_isDatatype = _6300___mcc_h51;
          bool _6645_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6646_field = _6298___mcc_h49;
          DAST._IExpression _6647_on = _6297___mcc_h48;
          {
            RAST._IExpr _6648_onExpr;
            DCOMP._IOwnership _6649_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6650_recIdents;
            RAST._IExpr _out2726;
            DCOMP._IOwnership _out2727;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2728;
            DCOMP.COMP.GenExpr(_6647_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2726, out _out2727, out _out2728);
            _6648_onExpr = _out2726;
            _6649_onOwned = _out2727;
            _6650_recIdents = _out2728;
            if ((_6644_isDatatype) || (_6645_isConstant)) {
              r = ((_6648_onExpr).Sel(DCOMP.__default.escapeIdent(_6646_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2729;
              DCOMP._IOwnership _out2730;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2729, out _out2730);
              r = _out2729;
              resultingOwnership = _out2730;
            } else {
              Dafny.ISequence<Dafny.Rune> _6651_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6651_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6648_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6646_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2731;
              DCOMP._IOwnership _out2732;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6651_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2731, out _out2732);
              r = _out2731;
              resultingOwnership = _out2732;
            }
            readIdents = _6650_recIdents;
            return ;
          }
        } else if (_source249.is_Apply) {
          DAST._IExpression _6652___mcc_h212 = _source249.dtor_expr;
          Dafny.ISequence<DAST._IExpression> _6653___mcc_h213 = _source249.dtor_args;
          bool _6654_isDatatype = _6300___mcc_h51;
          bool _6655_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6656_field = _6298___mcc_h49;
          DAST._IExpression _6657_on = _6297___mcc_h48;
          {
            RAST._IExpr _6658_onExpr;
            DCOMP._IOwnership _6659_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6660_recIdents;
            RAST._IExpr _out2733;
            DCOMP._IOwnership _out2734;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2735;
            DCOMP.COMP.GenExpr(_6657_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2733, out _out2734, out _out2735);
            _6658_onExpr = _out2733;
            _6659_onOwned = _out2734;
            _6660_recIdents = _out2735;
            if ((_6654_isDatatype) || (_6655_isConstant)) {
              r = ((_6658_onExpr).Sel(DCOMP.__default.escapeIdent(_6656_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2736;
              DCOMP._IOwnership _out2737;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2736, out _out2737);
              r = _out2736;
              resultingOwnership = _out2737;
            } else {
              Dafny.ISequence<Dafny.Rune> _6661_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6661_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6658_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6656_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2738;
              DCOMP._IOwnership _out2739;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6661_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2738, out _out2739);
              r = _out2738;
              resultingOwnership = _out2739;
            }
            readIdents = _6660_recIdents;
            return ;
          }
        } else if (_source249.is_TypeTest) {
          DAST._IExpression _6662___mcc_h216 = _source249.dtor_on;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6663___mcc_h217 = _source249.dtor_dType;
          Dafny.ISequence<Dafny.Rune> _6664___mcc_h218 = _source249.dtor_variant;
          bool _6665_isDatatype = _6300___mcc_h51;
          bool _6666_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6667_field = _6298___mcc_h49;
          DAST._IExpression _6668_on = _6297___mcc_h48;
          {
            RAST._IExpr _6669_onExpr;
            DCOMP._IOwnership _6670_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6671_recIdents;
            RAST._IExpr _out2740;
            DCOMP._IOwnership _out2741;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2742;
            DCOMP.COMP.GenExpr(_6668_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2740, out _out2741, out _out2742);
            _6669_onExpr = _out2740;
            _6670_onOwned = _out2741;
            _6671_recIdents = _out2742;
            if ((_6665_isDatatype) || (_6666_isConstant)) {
              r = ((_6669_onExpr).Sel(DCOMP.__default.escapeIdent(_6667_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2743;
              DCOMP._IOwnership _out2744;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2743, out _out2744);
              r = _out2743;
              resultingOwnership = _out2744;
            } else {
              Dafny.ISequence<Dafny.Rune> _6672_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6672_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6669_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6667_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2745;
              DCOMP._IOwnership _out2746;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6672_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2745, out _out2746);
              r = _out2745;
              resultingOwnership = _out2746;
            }
            readIdents = _6671_recIdents;
            return ;
          }
        } else if (_source249.is_InitializationValue) {
          DAST._IType _6673___mcc_h222 = _source249.dtor_typ;
          bool _6674_isDatatype = _6300___mcc_h51;
          bool _6675_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6676_field = _6298___mcc_h49;
          DAST._IExpression _6677_on = _6297___mcc_h48;
          {
            RAST._IExpr _6678_onExpr;
            DCOMP._IOwnership _6679_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6680_recIdents;
            RAST._IExpr _out2747;
            DCOMP._IOwnership _out2748;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2749;
            DCOMP.COMP.GenExpr(_6677_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2747, out _out2748, out _out2749);
            _6678_onExpr = _out2747;
            _6679_onOwned = _out2748;
            _6680_recIdents = _out2749;
            if ((_6674_isDatatype) || (_6675_isConstant)) {
              r = ((_6678_onExpr).Sel(DCOMP.__default.escapeIdent(_6676_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2750;
              DCOMP._IOwnership _out2751;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2750, out _out2751);
              r = _out2750;
              resultingOwnership = _out2751;
            } else {
              Dafny.ISequence<Dafny.Rune> _6681_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6681_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6678_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6676_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2752;
              DCOMP._IOwnership _out2753;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6681_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2752, out _out2753);
              r = _out2752;
              resultingOwnership = _out2753;
            }
            readIdents = _6680_recIdents;
            return ;
          }
        } else if (_source249.is_BoolBoundedPool) {
          bool _6682_isDatatype = _6300___mcc_h51;
          bool _6683_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6684_field = _6298___mcc_h49;
          DAST._IExpression _6685_on = _6297___mcc_h48;
          {
            RAST._IExpr _6686_onExpr;
            DCOMP._IOwnership _6687_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6688_recIdents;
            RAST._IExpr _out2754;
            DCOMP._IOwnership _out2755;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2756;
            DCOMP.COMP.GenExpr(_6685_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2754, out _out2755, out _out2756);
            _6686_onExpr = _out2754;
            _6687_onOwned = _out2755;
            _6688_recIdents = _out2756;
            if ((_6682_isDatatype) || (_6683_isConstant)) {
              r = ((_6686_onExpr).Sel(DCOMP.__default.escapeIdent(_6684_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2757;
              DCOMP._IOwnership _out2758;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2757, out _out2758);
              r = _out2757;
              resultingOwnership = _out2758;
            } else {
              Dafny.ISequence<Dafny.Rune> _6689_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6689_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6686_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6684_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2759;
              DCOMP._IOwnership _out2760;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6689_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2759, out _out2760);
              r = _out2759;
              resultingOwnership = _out2760;
            }
            readIdents = _6688_recIdents;
            return ;
          }
        } else if (_source249.is_SetBoundedPool) {
          DAST._IExpression _6690___mcc_h224 = _source249.dtor_of;
          bool _6691_isDatatype = _6300___mcc_h51;
          bool _6692_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6693_field = _6298___mcc_h49;
          DAST._IExpression _6694_on = _6297___mcc_h48;
          {
            RAST._IExpr _6695_onExpr;
            DCOMP._IOwnership _6696_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6697_recIdents;
            RAST._IExpr _out2761;
            DCOMP._IOwnership _out2762;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2763;
            DCOMP.COMP.GenExpr(_6694_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2761, out _out2762, out _out2763);
            _6695_onExpr = _out2761;
            _6696_onOwned = _out2762;
            _6697_recIdents = _out2763;
            if ((_6691_isDatatype) || (_6692_isConstant)) {
              r = ((_6695_onExpr).Sel(DCOMP.__default.escapeIdent(_6693_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2764;
              DCOMP._IOwnership _out2765;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2764, out _out2765);
              r = _out2764;
              resultingOwnership = _out2765;
            } else {
              Dafny.ISequence<Dafny.Rune> _6698_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6698_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6695_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6693_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2766;
              DCOMP._IOwnership _out2767;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6698_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2766, out _out2767);
              r = _out2766;
              resultingOwnership = _out2767;
            }
            readIdents = _6697_recIdents;
            return ;
          }
        } else if (_source249.is_SeqBoundedPool) {
          DAST._IExpression _6699___mcc_h226 = _source249.dtor_of;
          bool _6700___mcc_h227 = _source249.dtor_includeDuplicates;
          bool _6701_isDatatype = _6300___mcc_h51;
          bool _6702_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6703_field = _6298___mcc_h49;
          DAST._IExpression _6704_on = _6297___mcc_h48;
          {
            RAST._IExpr _6705_onExpr;
            DCOMP._IOwnership _6706_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6707_recIdents;
            RAST._IExpr _out2768;
            DCOMP._IOwnership _out2769;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2770;
            DCOMP.COMP.GenExpr(_6704_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2768, out _out2769, out _out2770);
            _6705_onExpr = _out2768;
            _6706_onOwned = _out2769;
            _6707_recIdents = _out2770;
            if ((_6701_isDatatype) || (_6702_isConstant)) {
              r = ((_6705_onExpr).Sel(DCOMP.__default.escapeIdent(_6703_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2771;
              DCOMP._IOwnership _out2772;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2771, out _out2772);
              r = _out2771;
              resultingOwnership = _out2772;
            } else {
              Dafny.ISequence<Dafny.Rune> _6708_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6708_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6705_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6703_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2773;
              DCOMP._IOwnership _out2774;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6708_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2773, out _out2774);
              r = _out2773;
              resultingOwnership = _out2774;
            }
            readIdents = _6707_recIdents;
            return ;
          }
        } else {
          DAST._IExpression _6709___mcc_h230 = _source249.dtor_lo;
          DAST._IExpression _6710___mcc_h231 = _source249.dtor_hi;
          bool _6711_isDatatype = _6300___mcc_h51;
          bool _6712_isConstant = _6299___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6713_field = _6298___mcc_h49;
          DAST._IExpression _6714_on = _6297___mcc_h48;
          {
            RAST._IExpr _6715_onExpr;
            DCOMP._IOwnership _6716_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6717_recIdents;
            RAST._IExpr _out2775;
            DCOMP._IOwnership _out2776;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2777;
            DCOMP.COMP.GenExpr(_6714_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2775, out _out2776, out _out2777);
            _6715_onExpr = _out2775;
            _6716_onOwned = _out2776;
            _6717_recIdents = _out2777;
            if ((_6711_isDatatype) || (_6712_isConstant)) {
              r = ((_6715_onExpr).Sel(DCOMP.__default.escapeIdent(_6713_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2778;
              DCOMP._IOwnership _out2779;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2778, out _out2779);
              r = _out2778;
              resultingOwnership = _out2779;
            } else {
              Dafny.ISequence<Dafny.Rune> _6718_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6718_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6715_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6713_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2780;
              DCOMP._IOwnership _out2781;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6718_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2780, out _out2781);
              r = _out2780;
              resultingOwnership = _out2781;
            }
            readIdents = _6717_recIdents;
            return ;
          }
        }
      } else if (_source246.is_SelectFn) {
        DAST._IExpression _6719___mcc_h234 = _source246.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _6720___mcc_h235 = _source246.dtor_field;
        bool _6721___mcc_h236 = _source246.dtor_onDatatype;
        bool _6722___mcc_h237 = _source246.dtor_isStatic;
        BigInteger _6723___mcc_h238 = _source246.dtor_arity;
        BigInteger _6724_arity = _6723___mcc_h238;
        bool _6725_isStatic = _6722___mcc_h237;
        bool _6726_isDatatype = _6721___mcc_h236;
        Dafny.ISequence<Dafny.Rune> _6727_field = _6720___mcc_h235;
        DAST._IExpression _6728_on = _6719___mcc_h234;
        {
          RAST._IExpr _6729_onExpr;
          DCOMP._IOwnership _6730_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6731_recIdents;
          RAST._IExpr _out2782;
          DCOMP._IOwnership _out2783;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2784;
          DCOMP.COMP.GenExpr(_6728_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2782, out _out2783, out _out2784);
          _6729_onExpr = _out2782;
          _6730_onOwned = _out2783;
          _6731_recIdents = _out2784;
          Dafny.ISequence<Dafny.Rune> _6732_s = Dafny.Sequence<Dafny.Rune>.Empty;
          Dafny.ISequence<Dafny.Rune> _6733_onString;
          _6733_onString = (_6729_onExpr)._ToString(DCOMP.__default.IND);
          if (_6725_isStatic) {
            _6732_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6733_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_6727_field));
          } else {
            _6732_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
            _6732_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6732_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let callTarget = (")), _6733_onString), ((object.Equals(_6730_onOwned, DCOMP.Ownership.create_OwnershipOwned())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            Dafny.ISequence<Dafny.Rune> _6734_args;
            _6734_args = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            BigInteger _6735_i;
            _6735_i = BigInteger.Zero;
            while ((_6735_i) < (_6724_arity)) {
              if ((_6735_i).Sign == 1) {
                _6734_args = Dafny.Sequence<Dafny.Rune>.Concat(_6734_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _6734_args = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6734_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("arg")), Std.Strings.__default.OfNat(_6735_i));
              _6735_i = (_6735_i) + (BigInteger.One);
            }
            _6732_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6732_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move |")), _6734_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| {\n"));
            _6732_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6732_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("callTarget.")), _6727_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _6734_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
            _6732_s = Dafny.Sequence<Dafny.Rune>.Concat(_6732_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            _6732_s = Dafny.Sequence<Dafny.Rune>.Concat(_6732_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
          }
          Dafny.ISequence<Dafny.Rune> _6736_typeShape;
          _6736_typeShape = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::ops::Fn(");
          BigInteger _6737_i;
          _6737_i = BigInteger.Zero;
          while ((_6737_i) < (_6724_arity)) {
            if ((_6737_i).Sign == 1) {
              _6736_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_6736_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            _6736_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_6736_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&_"));
            _6737_i = (_6737_i) + (BigInteger.One);
          }
          _6736_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_6736_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> _"));
          _6732_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper(::std::rc::Rc::new("), _6732_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ::std::rc::Rc<")), _6736_typeShape), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          r = RAST.Expr.create_RawExpr(_6732_s);
          RAST._IExpr _out2785;
          DCOMP._IOwnership _out2786;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2785, out _out2786);
          r = _out2785;
          resultingOwnership = _out2786;
          readIdents = _6731_recIdents;
          return ;
        }
      } else if (_source246.is_Index) {
        DAST._IExpression _6738___mcc_h239 = _source246.dtor_expr;
        DAST._ICollKind _6739___mcc_h240 = _source246.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _6740___mcc_h241 = _source246.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _6741_indices = _6740___mcc_h241;
        DAST._ICollKind _6742_collKind = _6739___mcc_h240;
        DAST._IExpression _6743_on = _6738___mcc_h239;
        {
          RAST._IExpr _6744_onExpr;
          DCOMP._IOwnership _6745_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6746_recIdents;
          RAST._IExpr _out2787;
          DCOMP._IOwnership _out2788;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2789;
          DCOMP.COMP.GenExpr(_6743_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2787, out _out2788, out _out2789);
          _6744_onExpr = _out2787;
          _6745_onOwned = _out2788;
          _6746_recIdents = _out2789;
          readIdents = _6746_recIdents;
          r = _6744_onExpr;
          BigInteger _6747_i;
          _6747_i = BigInteger.Zero;
          while ((_6747_i) < (new BigInteger((_6741_indices).Count))) {
            if (object.Equals(_6742_collKind, DAST.CollKind.create_Array())) {
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("borrow"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
            }
            RAST._IExpr _6748_idx;
            DCOMP._IOwnership _6749_idxOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6750_recIdentsIdx;
            RAST._IExpr _out2790;
            DCOMP._IOwnership _out2791;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2792;
            DCOMP.COMP.GenExpr((_6741_indices).Select(_6747_i), selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2790, out _out2791, out _out2792);
            _6748_idx = _out2790;
            _6749_idxOwned = _out2791;
            _6750_recIdentsIdx = _out2792;
            r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("get"))).Apply1(_6748_idx);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6750_recIdentsIdx);
            _6747_i = (_6747_i) + (BigInteger.One);
          }
          RAST._IExpr _out2793;
          DCOMP._IOwnership _out2794;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2793, out _out2794);
          r = _out2793;
          resultingOwnership = _out2794;
          return ;
        }
      } else if (_source246.is_IndexRange) {
        DAST._IExpression _6751___mcc_h242 = _source246.dtor_expr;
        bool _6752___mcc_h243 = _source246.dtor_isArray;
        Std.Wrappers._IOption<DAST._IExpression> _6753___mcc_h244 = _source246.dtor_low;
        Std.Wrappers._IOption<DAST._IExpression> _6754___mcc_h245 = _source246.dtor_high;
        Std.Wrappers._IOption<DAST._IExpression> _6755_high = _6754___mcc_h245;
        Std.Wrappers._IOption<DAST._IExpression> _6756_low = _6753___mcc_h244;
        bool _6757_isArray = _6752___mcc_h243;
        DAST._IExpression _6758_on = _6751___mcc_h242;
        {
          RAST._IExpr _6759_onExpr;
          DCOMP._IOwnership _6760_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6761_recIdents;
          RAST._IExpr _out2795;
          DCOMP._IOwnership _out2796;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2797;
          DCOMP.COMP.GenExpr(_6758_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2795, out _out2796, out _out2797);
          _6759_onExpr = _out2795;
          _6760_onOwned = _out2796;
          _6761_recIdents = _out2797;
          readIdents = _6761_recIdents;
          Dafny.ISequence<Dafny.Rune> _6762_methodName;
          _6762_methodName = (((_6756_low).is_Some) ? ((((_6755_high).is_Some) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("slice")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("drop")))) : ((((_6755_high).is_Some) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("take")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))));
          Dafny.ISequence<RAST._IExpr> _6763_arguments;
          _6763_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          Std.Wrappers._IOption<DAST._IExpression> _source250 = _6756_low;
          if (_source250.is_None) {
          } else {
            DAST._IExpression _6764___mcc_h274 = _source250.dtor_value;
            DAST._IExpression _6765_l = _6764___mcc_h274;
            {
              RAST._IExpr _6766_lExpr;
              DCOMP._IOwnership _6767___v124;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6768_recIdentsL;
              RAST._IExpr _out2798;
              DCOMP._IOwnership _out2799;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2800;
              DCOMP.COMP.GenExpr(_6765_l, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2798, out _out2799, out _out2800);
              _6766_lExpr = _out2798;
              _6767___v124 = _out2799;
              _6768_recIdentsL = _out2800;
              _6763_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_6763_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(_6766_lExpr));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6768_recIdentsL);
            }
          }
          Std.Wrappers._IOption<DAST._IExpression> _source251 = _6755_high;
          if (_source251.is_None) {
          } else {
            DAST._IExpression _6769___mcc_h275 = _source251.dtor_value;
            DAST._IExpression _6770_h = _6769___mcc_h275;
            {
              RAST._IExpr _6771_hExpr;
              DCOMP._IOwnership _6772___v125;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6773_recIdentsH;
              RAST._IExpr _out2801;
              DCOMP._IOwnership _out2802;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2803;
              DCOMP.COMP.GenExpr(_6770_h, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2801, out _out2802, out _out2803);
              _6771_hExpr = _out2801;
              _6772___v125 = _out2802;
              _6773_recIdentsH = _out2803;
              _6763_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_6763_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(_6771_hExpr));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6773_recIdentsH);
            }
          }
          r = _6759_onExpr;
          if (_6757_isArray) {
            if (!(_6762_methodName).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) {
              _6762_methodName = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"), _6762_methodName);
            }
            r = ((RAST.__default.dafny__runtime__Sequence).MSel(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array"), _6762_methodName))).Apply(_6763_arguments);
          } else {
            if (!(_6762_methodName).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) {
              r = ((r).Sel(_6762_methodName)).Apply(_6763_arguments);
            }
          }
          RAST._IExpr _out2804;
          DCOMP._IOwnership _out2805;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2804, out _out2805);
          r = _out2804;
          resultingOwnership = _out2805;
          return ;
        }
      } else if (_source246.is_TupleSelect) {
        DAST._IExpression _6774___mcc_h246 = _source246.dtor_expr;
        BigInteger _6775___mcc_h247 = _source246.dtor_index;
        BigInteger _6776_idx = _6775___mcc_h247;
        DAST._IExpression _6777_on = _6774___mcc_h246;
        {
          RAST._IExpr _6778_onExpr;
          DCOMP._IOwnership _6779_onOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6780_recIdents;
          RAST._IExpr _out2806;
          DCOMP._IOwnership _out2807;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2808;
          DCOMP.COMP.GenExpr(_6777_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2806, out _out2807, out _out2808);
          _6778_onExpr = _out2806;
          _6779_onOwnership = _out2807;
          _6780_recIdents = _out2808;
          r = (_6778_onExpr).Sel(Std.Strings.__default.OfNat(_6776_idx));
          RAST._IExpr _out2809;
          DCOMP._IOwnership _out2810;
          DCOMP.COMP.FromOwnership(r, _6779_onOwnership, expectedOwnership, out _out2809, out _out2810);
          r = _out2809;
          resultingOwnership = _out2810;
          readIdents = _6780_recIdents;
          return ;
        }
      } else if (_source246.is_Call) {
        DAST._IExpression _6781___mcc_h248 = _source246.dtor_on;
        DAST._ICallName _6782___mcc_h249 = _source246.dtor_callName;
        Dafny.ISequence<DAST._IType> _6783___mcc_h250 = _source246.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _6784___mcc_h251 = _source246.dtor_args;
        Dafny.ISequence<DAST._IExpression> _6785_args = _6784___mcc_h251;
        Dafny.ISequence<DAST._IType> _6786_typeArgs = _6783___mcc_h250;
        DAST._ICallName _6787_name = _6782___mcc_h249;
        DAST._IExpression _6788_on = _6781___mcc_h248;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<RAST._IType> _6789_typeExprs;
          _6789_typeExprs = Dafny.Sequence<RAST._IType>.FromElements();
          if ((new BigInteger((_6786_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _6790_typeI;
            _6790_typeI = BigInteger.Zero;
            while ((_6790_typeI) < (new BigInteger((_6786_typeArgs).Count))) {
              RAST._IType _6791_typeExpr;
              RAST._IType _out2811;
              _out2811 = DCOMP.COMP.GenType((_6786_typeArgs).Select(_6790_typeI), false, false);
              _6791_typeExpr = _out2811;
              _6789_typeExprs = Dafny.Sequence<RAST._IType>.Concat(_6789_typeExprs, Dafny.Sequence<RAST._IType>.FromElements(_6791_typeExpr));
              _6790_typeI = (_6790_typeI) + (BigInteger.One);
            }
          }
          Dafny.ISequence<RAST._IExpr> _6792_argExprs;
          _6792_argExprs = Dafny.Sequence<RAST._IExpr>.FromElements();
          BigInteger _6793_i;
          _6793_i = BigInteger.Zero;
          while ((_6793_i) < (new BigInteger((_6785_args).Count))) {
            RAST._IExpr _6794_argExpr;
            DCOMP._IOwnership _6795_argOwnership;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6796_argIdents;
            RAST._IExpr _out2812;
            DCOMP._IOwnership _out2813;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2814;
            DCOMP.COMP.GenExpr((_6785_args).Select(_6793_i), selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2812, out _out2813, out _out2814);
            _6794_argExpr = _out2812;
            _6795_argOwnership = _out2813;
            _6796_argIdents = _out2814;
            _6792_argExprs = Dafny.Sequence<RAST._IExpr>.Concat(_6792_argExprs, Dafny.Sequence<RAST._IExpr>.FromElements(_6794_argExpr));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6796_argIdents);
            _6793_i = (_6793_i) + (BigInteger.One);
          }
          RAST._IExpr _6797_onExpr;
          DCOMP._IOwnership _6798___v126;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6799_recIdents;
          RAST._IExpr _out2815;
          DCOMP._IOwnership _out2816;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2817;
          DCOMP.COMP.GenExpr(_6788_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2815, out _out2816, out _out2817);
          _6797_onExpr = _out2815;
          _6798___v126 = _out2816;
          _6799_recIdents = _out2817;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6799_recIdents);
          Dafny.ISequence<Dafny.Rune> _6800_renderedName;
          _6800_renderedName = ((System.Func<DAST._ICallName, Dafny.ISequence<Dafny.Rune>>)((_source252) => {
            if (_source252.is_Name) {
              Dafny.ISequence<Dafny.Rune> _6801___mcc_h276 = _source252.dtor_name;
              Dafny.ISequence<Dafny.Rune> _6802_ident = _6801___mcc_h276;
              return DCOMP.__default.escapeIdent(_6802_ident);
            } else if (_source252.is_MapBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else if (_source252.is_MapBuilderBuild) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            } else if (_source252.is_SetBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            }
          }))(_6787_name);
          DAST._IExpression _source253 = _6788_on;
          if (_source253.is_Literal) {
            DAST._ILiteral _6803___mcc_h277 = _source253.dtor_Literal_a0;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _6804___mcc_h279 = _source253.dtor_Ident_a0;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6805___mcc_h281 = _source253.dtor_Companion_a0;
            {
              _6797_onExpr = (_6797_onExpr).MSel(_6800_renderedName);
            }
          } else if (_source253.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _6806___mcc_h283 = _source253.dtor_Tuple_a0;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6807___mcc_h285 = _source253.dtor_path;
            Dafny.ISequence<DAST._IType> _6808___mcc_h286 = _source253.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _6809___mcc_h287 = _source253.dtor_args;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _6810___mcc_h291 = _source253.dtor_dims;
            DAST._IType _6811___mcc_h292 = _source253.dtor_typ;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_DatatypeValue) {
            DAST._IDatatypeType _6812___mcc_h295 = _source253.dtor_datatypeType;
            Dafny.ISequence<DAST._IType> _6813___mcc_h296 = _source253.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _6814___mcc_h297 = _source253.dtor_variant;
            bool _6815___mcc_h298 = _source253.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _6816___mcc_h299 = _source253.dtor_contents;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_Convert) {
            DAST._IExpression _6817___mcc_h305 = _source253.dtor_value;
            DAST._IType _6818___mcc_h306 = _source253.dtor_from;
            DAST._IType _6819___mcc_h307 = _source253.dtor_typ;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_SeqConstruct) {
            DAST._IExpression _6820___mcc_h311 = _source253.dtor_length;
            DAST._IExpression _6821___mcc_h312 = _source253.dtor_elem;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _6822___mcc_h315 = _source253.dtor_elements;
            DAST._IType _6823___mcc_h316 = _source253.dtor_typ;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _6824___mcc_h319 = _source253.dtor_elements;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_MultisetValue) {
            Dafny.ISequence<DAST._IExpression> _6825___mcc_h321 = _source253.dtor_elements;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _6826___mcc_h323 = _source253.dtor_mapElems;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_MapBuilder) {
            DAST._IType _6827___mcc_h325 = _source253.dtor_keyType;
            DAST._IType _6828___mcc_h326 = _source253.dtor_valueType;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_SeqUpdate) {
            DAST._IExpression _6829___mcc_h329 = _source253.dtor_expr;
            DAST._IExpression _6830___mcc_h330 = _source253.dtor_indexExpr;
            DAST._IExpression _6831___mcc_h331 = _source253.dtor_value;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_MapUpdate) {
            DAST._IExpression _6832___mcc_h335 = _source253.dtor_expr;
            DAST._IExpression _6833___mcc_h336 = _source253.dtor_indexExpr;
            DAST._IExpression _6834___mcc_h337 = _source253.dtor_value;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_SetBuilder) {
            DAST._IType _6835___mcc_h341 = _source253.dtor_elemType;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_ToMultiset) {
            DAST._IExpression _6836___mcc_h343 = _source253.dtor_ToMultiset_a0;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_This) {
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_Ite) {
            DAST._IExpression _6837___mcc_h345 = _source253.dtor_cond;
            DAST._IExpression _6838___mcc_h346 = _source253.dtor_thn;
            DAST._IExpression _6839___mcc_h347 = _source253.dtor_els;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_UnOp) {
            DAST._IUnaryOp _6840___mcc_h351 = _source253.dtor_unOp;
            DAST._IExpression _6841___mcc_h352 = _source253.dtor_expr;
            DAST.Format._IUnOpFormat _6842___mcc_h353 = _source253.dtor_format1;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_BinOp) {
            DAST._IBinOp _6843___mcc_h357 = _source253.dtor_op;
            DAST._IExpression _6844___mcc_h358 = _source253.dtor_left;
            DAST._IExpression _6845___mcc_h359 = _source253.dtor_right;
            DAST.Format._IBinOpFormat _6846___mcc_h360 = _source253.dtor_format2;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_ArrayLen) {
            DAST._IExpression _6847___mcc_h365 = _source253.dtor_expr;
            BigInteger _6848___mcc_h366 = _source253.dtor_dim;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_MapKeys) {
            DAST._IExpression _6849___mcc_h369 = _source253.dtor_expr;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_MapValues) {
            DAST._IExpression _6850___mcc_h371 = _source253.dtor_expr;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_Select) {
            DAST._IExpression _6851___mcc_h373 = _source253.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _6852___mcc_h374 = _source253.dtor_field;
            bool _6853___mcc_h375 = _source253.dtor_isConstant;
            bool _6854___mcc_h376 = _source253.dtor_onDatatype;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_SelectFn) {
            DAST._IExpression _6855___mcc_h381 = _source253.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _6856___mcc_h382 = _source253.dtor_field;
            bool _6857___mcc_h383 = _source253.dtor_onDatatype;
            bool _6858___mcc_h384 = _source253.dtor_isStatic;
            BigInteger _6859___mcc_h385 = _source253.dtor_arity;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_Index) {
            DAST._IExpression _6860___mcc_h391 = _source253.dtor_expr;
            DAST._ICollKind _6861___mcc_h392 = _source253.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _6862___mcc_h393 = _source253.dtor_indices;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_IndexRange) {
            DAST._IExpression _6863___mcc_h397 = _source253.dtor_expr;
            bool _6864___mcc_h398 = _source253.dtor_isArray;
            Std.Wrappers._IOption<DAST._IExpression> _6865___mcc_h399 = _source253.dtor_low;
            Std.Wrappers._IOption<DAST._IExpression> _6866___mcc_h400 = _source253.dtor_high;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_TupleSelect) {
            DAST._IExpression _6867___mcc_h405 = _source253.dtor_expr;
            BigInteger _6868___mcc_h406 = _source253.dtor_index;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_Call) {
            DAST._IExpression _6869___mcc_h409 = _source253.dtor_on;
            DAST._ICallName _6870___mcc_h410 = _source253.dtor_callName;
            Dafny.ISequence<DAST._IType> _6871___mcc_h411 = _source253.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _6872___mcc_h412 = _source253.dtor_args;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _6873___mcc_h417 = _source253.dtor_params;
            DAST._IType _6874___mcc_h418 = _source253.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _6875___mcc_h419 = _source253.dtor_body;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _6876___mcc_h423 = _source253.dtor_values;
            DAST._IType _6877___mcc_h424 = _source253.dtor_retType;
            DAST._IExpression _6878___mcc_h425 = _source253.dtor_expr;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _6879___mcc_h429 = _source253.dtor_name;
            DAST._IType _6880___mcc_h430 = _source253.dtor_typ;
            DAST._IExpression _6881___mcc_h431 = _source253.dtor_value;
            DAST._IExpression _6882___mcc_h432 = _source253.dtor_iifeBody;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_Apply) {
            DAST._IExpression _6883___mcc_h437 = _source253.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _6884___mcc_h438 = _source253.dtor_args;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_TypeTest) {
            DAST._IExpression _6885___mcc_h441 = _source253.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6886___mcc_h442 = _source253.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _6887___mcc_h443 = _source253.dtor_variant;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_InitializationValue) {
            DAST._IType _6888___mcc_h447 = _source253.dtor_typ;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_BoolBoundedPool) {
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_SetBoundedPool) {
            DAST._IExpression _6889___mcc_h449 = _source253.dtor_of;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else if (_source253.is_SeqBoundedPool) {
            DAST._IExpression _6890___mcc_h451 = _source253.dtor_of;
            bool _6891___mcc_h452 = _source253.dtor_includeDuplicates;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          } else {
            DAST._IExpression _6892___mcc_h455 = _source253.dtor_lo;
            DAST._IExpression _6893___mcc_h456 = _source253.dtor_hi;
            {
              _6797_onExpr = (_6797_onExpr).Sel(_6800_renderedName);
            }
          }
          r = _6797_onExpr;
          if ((new BigInteger((_6789_typeExprs).Count)).Sign == 1) {
            r = (r).ApplyType(_6789_typeExprs);
          }
          r = (r).Apply(_6792_argExprs);
          RAST._IExpr _out2818;
          DCOMP._IOwnership _out2819;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2818, out _out2819);
          r = _out2818;
          resultingOwnership = _out2819;
          return ;
        }
      } else if (_source246.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _6894___mcc_h252 = _source246.dtor_params;
        DAST._IType _6895___mcc_h253 = _source246.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _6896___mcc_h254 = _source246.dtor_body;
        Dafny.ISequence<DAST._IStatement> _6897_body = _6896___mcc_h254;
        DAST._IType _6898_retType = _6895___mcc_h253;
        Dafny.ISequence<DAST._IFormal> _6899_params = _6894___mcc_h252;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6900_paramNames;
          _6900_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMP._IOwnership> _6901_paramOwnerships;
          _6901_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.FromElements();
          BigInteger _6902_i;
          _6902_i = BigInteger.Zero;
          while ((_6902_i) < (new BigInteger((_6899_params).Count))) {
            Dafny.ISequence<Dafny.Rune> _6903_name;
            _6903_name = ((_6899_params).Select(_6902_i)).dtor_name;
            _6900_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_6900_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_6903_name));
            _6901_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.Update(_6901_paramOwnerships, _6903_name, DCOMP.Ownership.create_OwnershipBorrowed());
            _6902_i = (_6902_i) + (BigInteger.One);
          }
          DCOMP._IEnvironment _6904_env;
          _6904_env = DCOMP.Environment.create(_6900_paramNames, _6901_paramOwnerships);
          RAST._IExpr _6905_recursiveGen;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6906_recIdents;
          RAST._IExpr _out2820;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2821;
          DCOMP.COMP.GenStmts(_6897_body, ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())), _6904_env, true, RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")), out _out2820, out _out2821);
          _6905_recursiveGen = _out2820;
          _6906_recIdents = _out2821;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _6907_allReadCloned;
          _6907_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          while (!(_6906_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
            Dafny.ISequence<Dafny.Rune> _6908_next;
            foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_3 in (_6906_recIdents).Elements) {
              _6908_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_3;
              if ((_6906_recIdents).Contains(_6908_next)) {
                goto after__ASSIGN_SUCH_THAT_3;
              }
            }
            throw new System.Exception("assign-such-that search produced no value (line 3294)");
          after__ASSIGN_SUCH_THAT_3: ;
            if ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) && ((_6908_next).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this")))) {
              if (!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) {
                _6907_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(_6907_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let _this = self.clone();\n"));
              }
            } else if (!((_6900_paramNames).Contains(_6908_next))) {
              _6907_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6907_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_6908_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_6908_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_6908_next));
            }
            _6906_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_6906_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_6908_next));
          }
          Dafny.ISequence<Dafny.Rune> _6909_paramsString;
          _6909_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Dafny.ISequence<Dafny.Rune> _6910_paramTypes;
          _6910_paramTypes = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _6902_i = BigInteger.Zero;
          while ((_6902_i) < (new BigInteger((_6899_params).Count))) {
            if ((_6902_i).Sign == 1) {
              _6909_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_6909_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              _6910_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_6910_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IType _6911_typStr;
            RAST._IType _out2822;
            _out2822 = DCOMP.COMP.GenType(((_6899_params).Select(_6902_i)).dtor_typ, false, true);
            _6911_typStr = _out2822;
            _6909_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6909_paramsString, DCOMP.__default.escapeIdent(((_6899_params).Select(_6902_i)).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (RAST.Type.create_Borrowed(_6911_typStr))._ToString(DCOMP.__default.IND));
            _6910_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_6910_paramTypes, (RAST.Type.create_Borrowed(_6911_typStr))._ToString(DCOMP.__default.IND));
            _6902_i = (_6902_i) + (BigInteger.One);
          }
          RAST._IType _6912_retTypeGen;
          RAST._IType _out2823;
          _out2823 = DCOMP.COMP.GenType(_6898_retType, false, true);
          _6912_retTypeGen = _out2823;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper::<::std::rc::Rc<dyn ::std::ops::Fn("), _6910_paramTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), (_6912_retTypeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>({\n")), _6907_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(move |")), _6909_paramsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| -> ")), (_6912_retTypeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), (_6905_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})})")));
          RAST._IExpr _out2824;
          DCOMP._IOwnership _out2825;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2824, out _out2825);
          r = _out2824;
          resultingOwnership = _out2825;
          return ;
        }
      } else if (_source246.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _6913___mcc_h255 = _source246.dtor_values;
        DAST._IType _6914___mcc_h256 = _source246.dtor_retType;
        DAST._IExpression _6915___mcc_h257 = _source246.dtor_expr;
        DAST._IExpression _6916_expr = _6915___mcc_h257;
        DAST._IType _6917_retType = _6914___mcc_h256;
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _6918_values = _6913___mcc_h255;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6919_paramNames;
          _6919_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMP._IOwnership> _6920_paramOwnerships;
          _6920_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.FromElements();
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6921_paramNamesSet;
          _6921_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _6922_i;
          _6922_i = BigInteger.Zero;
          while ((_6922_i) < (new BigInteger((_6918_values).Count))) {
            Dafny.ISequence<Dafny.Rune> _6923_name;
            _6923_name = (((_6918_values).Select(_6922_i)).dtor__0).dtor_name;
            _6919_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_6919_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_6923_name));
            _6920_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.Update(_6920_paramOwnerships, _6923_name, DCOMP.Ownership.create_OwnershipBorrowed());
            _6921_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_6921_paramNamesSet, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_6923_name));
            _6922_i = (_6922_i) + (BigInteger.One);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _6924_s;
          _6924_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          Dafny.ISequence<Dafny.Rune> _6925_paramsString;
          _6925_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _6922_i = BigInteger.Zero;
          while ((_6922_i) < (new BigInteger((_6918_values).Count))) {
            if ((_6922_i).Sign == 1) {
              _6925_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_6925_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IType _6926_typStr;
            RAST._IType _out2826;
            _out2826 = DCOMP.COMP.GenType((((_6918_values).Select(_6922_i)).dtor__0).dtor_typ, false, true);
            _6926_typStr = _out2826;
            RAST._IExpr _6927_valueGen;
            DCOMP._IOwnership _6928___v129;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6929_recIdents;
            RAST._IExpr _out2827;
            DCOMP._IOwnership _out2828;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2829;
            DCOMP.COMP.GenExpr(((_6918_values).Select(_6922_i)).dtor__1, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2827, out _out2828, out _out2829);
            _6927_valueGen = _out2827;
            _6928___v129 = _out2828;
            _6929_recIdents = _out2829;
            _6924_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6924_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent((((_6918_values).Select(_6922_i)).dtor__0).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (_6926_typStr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6929_recIdents);
            _6924_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6924_s, (_6927_valueGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            _6922_i = (_6922_i) + (BigInteger.One);
          }
          DCOMP._IEnvironment _6930_newEnv;
          _6930_newEnv = DCOMP.Environment.create(_6919_paramNames, _6920_paramOwnerships);
          RAST._IExpr _6931_recGen;
          DCOMP._IOwnership _6932_recOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6933_recIdents;
          RAST._IExpr _out2830;
          DCOMP._IOwnership _out2831;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2832;
          DCOMP.COMP.GenExpr(_6916_expr, selfIdent, _6930_newEnv, expectedOwnership, out _out2830, out _out2831, out _out2832);
          _6931_recGen = _out2830;
          _6932_recOwned = _out2831;
          _6933_recIdents = _out2832;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_6933_recIdents, _6921_paramNamesSet);
          _6924_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6924_s, (_6931_recGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          r = RAST.Expr.create_RawExpr(_6924_s);
          RAST._IExpr _out2833;
          DCOMP._IOwnership _out2834;
          DCOMP.COMP.FromOwnership(r, _6932_recOwned, expectedOwnership, out _out2833, out _out2834);
          r = _out2833;
          resultingOwnership = _out2834;
          return ;
        }
      } else if (_source246.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _6934___mcc_h258 = _source246.dtor_name;
        DAST._IType _6935___mcc_h259 = _source246.dtor_typ;
        DAST._IExpression _6936___mcc_h260 = _source246.dtor_value;
        DAST._IExpression _6937___mcc_h261 = _source246.dtor_iifeBody;
        DAST._IExpression _6938_iifeBody = _6937___mcc_h261;
        DAST._IExpression _6939_value = _6936___mcc_h260;
        DAST._IType _6940_tpe = _6935___mcc_h259;
        Dafny.ISequence<Dafny.Rune> _6941_name = _6934___mcc_h258;
        {
          RAST._IExpr _6942_valueGen;
          DCOMP._IOwnership _6943___v130;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6944_recIdents;
          RAST._IExpr _out2835;
          DCOMP._IOwnership _out2836;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2837;
          DCOMP.COMP.GenExpr(_6939_value, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2835, out _out2836, out _out2837);
          _6942_valueGen = _out2835;
          _6943___v130 = _out2836;
          _6944_recIdents = _out2837;
          readIdents = _6944_recIdents;
          RAST._IType _6945_valueTypeGen;
          RAST._IType _out2838;
          _out2838 = DCOMP.COMP.GenType(_6940_tpe, false, true);
          _6945_valueTypeGen = _out2838;
          RAST._IExpr _6946_bodyGen;
          DCOMP._IOwnership _6947___v131;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6948_bodyIdents;
          RAST._IExpr _out2839;
          DCOMP._IOwnership _out2840;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2841;
          DCOMP.COMP.GenExpr(_6938_iifeBody, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2839, out _out2840, out _out2841);
          _6946_bodyGen = _out2839;
          _6947___v131 = _out2840;
          _6948_bodyIdents = _out2841;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_6948_bodyIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_6941_name))));
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet "), DCOMP.__default.escapeIdent((_6941_name))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (_6945_valueTypeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), (_6942_valueGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), (_6946_bodyGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}")));
          RAST._IExpr _out2842;
          DCOMP._IOwnership _out2843;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2842, out _out2843);
          r = _out2842;
          resultingOwnership = _out2843;
          return ;
        }
      } else if (_source246.is_Apply) {
        DAST._IExpression _6949___mcc_h262 = _source246.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _6950___mcc_h263 = _source246.dtor_args;
        Dafny.ISequence<DAST._IExpression> _6951_args = _6950___mcc_h263;
        DAST._IExpression _6952_func = _6949___mcc_h262;
        {
          RAST._IExpr _6953_funcExpr;
          DCOMP._IOwnership _6954___v132;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6955_recIdents;
          RAST._IExpr _out2844;
          DCOMP._IOwnership _out2845;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2846;
          DCOMP.COMP.GenExpr(_6952_func, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2844, out _out2845, out _out2846);
          _6953_funcExpr = _out2844;
          _6954___v132 = _out2845;
          _6955_recIdents = _out2846;
          readIdents = _6955_recIdents;
          Dafny.ISequence<Dafny.Rune> _6956_argString;
          _6956_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _6957_i;
          _6957_i = BigInteger.Zero;
          while ((_6957_i) < (new BigInteger((_6951_args).Count))) {
            if ((_6957_i).Sign == 1) {
              _6956_argString = Dafny.Sequence<Dafny.Rune>.Concat(_6956_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _6958_argExpr;
            DCOMP._IOwnership _6959_argOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6960_argIdents;
            RAST._IExpr _out2847;
            DCOMP._IOwnership _out2848;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2849;
            DCOMP.COMP.GenExpr((_6951_args).Select(_6957_i), selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2847, out _out2848, out _out2849);
            _6958_argExpr = _out2847;
            _6959_argOwned = _out2848;
            _6960_argIdents = _out2849;
            Dafny.ISequence<Dafny.Rune> _6961_argExprString;
            _6961_argExprString = (_6958_argExpr)._ToString(DCOMP.__default.IND);
            if (object.Equals(_6959_argOwned, DCOMP.Ownership.create_OwnershipOwned())) {
              _6961_argExprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _6961_argExprString);
            }
            _6956_argString = Dafny.Sequence<Dafny.Rune>.Concat(_6956_argString, _6961_argExprString);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6960_argIdents);
            _6957_i = (_6957_i) + (BigInteger.One);
          }
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), (_6953_funcExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _6956_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))")));
          RAST._IExpr _out2850;
          DCOMP._IOwnership _out2851;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2850, out _out2851);
          r = _out2850;
          resultingOwnership = _out2851;
          return ;
        }
      } else if (_source246.is_TypeTest) {
        DAST._IExpression _6962___mcc_h264 = _source246.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6963___mcc_h265 = _source246.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _6964___mcc_h266 = _source246.dtor_variant;
        Dafny.ISequence<Dafny.Rune> _6965_variant = _6964___mcc_h266;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6966_dType = _6963___mcc_h265;
        DAST._IExpression _6967_on = _6962___mcc_h264;
        {
          RAST._IExpr _6968_exprGen;
          DCOMP._IOwnership _6969___v133;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6970_recIdents;
          RAST._IExpr _out2852;
          DCOMP._IOwnership _out2853;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2854;
          DCOMP.COMP.GenExpr(_6967_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2852, out _out2853, out _out2854);
          _6968_exprGen = _out2852;
          _6969___v133 = _out2853;
          _6970_recIdents = _out2854;
          RAST._IType _6971_dTypePath;
          RAST._IType _out2855;
          _out2855 = DCOMP.COMP.GenPath(_6966_dType);
          _6971_dTypePath = _out2855;
          r = (RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("matches!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(((_6968_exprGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(((_6971_dTypePath).MSel(DCOMP.__default.escapeIdent(_6965_variant)))._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{ .. }")))));
          RAST._IExpr _out2856;
          DCOMP._IOwnership _out2857;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2856, out _out2857);
          r = _out2856;
          resultingOwnership = _out2857;
          readIdents = _6970_recIdents;
          return ;
        }
      } else if (_source246.is_InitializationValue) {
        DAST._IType _6972___mcc_h267 = _source246.dtor_typ;
        DAST._IType _6973_typ = _6972___mcc_h267;
        {
          RAST._IType _6974_typExpr;
          RAST._IType _out2858;
          _out2858 = DCOMP.COMP.GenType(_6973_typ, false, false);
          _6974_typExpr = _out2858;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_6974_typExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as std::default::Default>::default()")));
          RAST._IExpr _out2859;
          DCOMP._IOwnership _out2860;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2859, out _out2860);
          r = _out2859;
          resultingOwnership = _out2860;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source246.is_BoolBoundedPool) {
        {
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[false, true]"));
          RAST._IExpr _out2861;
          DCOMP._IOwnership _out2862;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2861, out _out2862);
          r = _out2861;
          resultingOwnership = _out2862;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source246.is_SetBoundedPool) {
        DAST._IExpression _6975___mcc_h268 = _source246.dtor_of;
        DAST._IExpression _6976_of = _6975___mcc_h268;
        {
          RAST._IExpr _6977_exprGen;
          DCOMP._IOwnership _6978___v134;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6979_recIdents;
          RAST._IExpr _out2863;
          DCOMP._IOwnership _out2864;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2865;
          DCOMP.COMP.GenExpr(_6976_of, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2863, out _out2864, out _out2865);
          _6977_exprGen = _out2863;
          _6978___v134 = _out2864;
          _6979_recIdents = _out2865;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6977_exprGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()")));
          RAST._IExpr _out2866;
          DCOMP._IOwnership _out2867;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2866, out _out2867);
          r = _out2866;
          resultingOwnership = _out2867;
          readIdents = _6979_recIdents;
          return ;
        }
      } else if (_source246.is_SeqBoundedPool) {
        DAST._IExpression _6980___mcc_h269 = _source246.dtor_of;
        bool _6981___mcc_h270 = _source246.dtor_includeDuplicates;
        bool _6982_includeDuplicates = _6981___mcc_h270;
        DAST._IExpression _6983_of = _6980___mcc_h269;
        {
          RAST._IExpr _6984_exprGen;
          DCOMP._IOwnership _6985___v135;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6986_recIdents;
          RAST._IExpr _out2868;
          DCOMP._IOwnership _out2869;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2870;
          DCOMP.COMP.GenExpr(_6983_of, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2868, out _out2869, out _out2870);
          _6984_exprGen = _out2868;
          _6985___v135 = _out2869;
          _6986_recIdents = _out2870;
          Dafny.ISequence<Dafny.Rune> _6987_s;
          _6987_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6984_exprGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          if (!(_6982_includeDuplicates)) {
            _6987_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::itertools::Itertools::unique("), _6987_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          r = RAST.Expr.create_RawExpr(_6987_s);
          RAST._IExpr _out2871;
          DCOMP._IOwnership _out2872;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2871, out _out2872);
          r = _out2871;
          resultingOwnership = _out2872;
          readIdents = _6986_recIdents;
          return ;
        }
      } else {
        DAST._IExpression _6988___mcc_h271 = _source246.dtor_lo;
        DAST._IExpression _6989___mcc_h272 = _source246.dtor_hi;
        DAST._IExpression _6990_hi = _6989___mcc_h272;
        DAST._IExpression _6991_lo = _6988___mcc_h271;
        {
          RAST._IExpr _6992_lo;
          DCOMP._IOwnership _6993___v136;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6994_recIdentsLo;
          RAST._IExpr _out2873;
          DCOMP._IOwnership _out2874;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2875;
          DCOMP.COMP.GenExpr(_6991_lo, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2873, out _out2874, out _out2875);
          _6992_lo = _out2873;
          _6993___v136 = _out2874;
          _6994_recIdentsLo = _out2875;
          RAST._IExpr _6995_hi;
          DCOMP._IOwnership _6996___v137;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6997_recIdentsHi;
          RAST._IExpr _out2876;
          DCOMP._IOwnership _out2877;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2878;
          DCOMP.COMP.GenExpr(_6990_hi, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2876, out _out2877, out _out2878);
          _6995_hi = _out2876;
          _6996___v137 = _out2877;
          _6997_recIdentsHi = _out2878;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::integer_range("), (_6992_lo)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_6995_hi)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
          RAST._IExpr _out2879;
          DCOMP._IOwnership _out2880;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2879, out _out2880);
          r = _out2879;
          resultingOwnership = _out2880;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_6994_recIdentsLo, _6997_recIdentsHi);
          return ;
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(warnings, unconditional_panic)]\n");
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(nonstandard_style)]\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern crate dafny_runtime;\n"));
      BigInteger _6998_i;
      _6998_i = BigInteger.Zero;
      while ((_6998_i) < (new BigInteger((p).Count))) {
        Dafny.ISequence<Dafny.Rune> _6999_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        RAST._IMod _7000_m;
        RAST._IMod _out2881;
        _out2881 = DCOMP.COMP.GenModule((p).Select(_6998_i), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
        _7000_m = _out2881;
        _6999_generated = (_7000_m)._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        if ((_6998_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _6999_generated);
        _6998_i = (_6998_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nfn main() {\n");
      BigInteger _7001_i;
      _7001_i = BigInteger.Zero;
      while ((_7001_i) < (new BigInteger((fullName).Count))) {
        if ((_7001_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((fullName).Select(_7001_i)));
        _7001_i = (_7001_i) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("();\n}"));
      return s;
    }
    public static Dafny.IMap<DAST._IBinOp,Dafny.ISequence<Dafny.Rune>> OpTable { get {
      return Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.FromElements(new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Mod(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("%")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_And(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&&")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Or(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("||")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Div(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Lt(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_LtChar(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Plus(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Minus(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Times(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseAnd(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseOr(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("|")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseXor(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("^")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseShiftRight(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseShiftLeft(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<<")));
    } }
  }
} // end of namespace DCOMP
namespace DCOMPUTF16 {

  public partial class __default {
    public static bool is__tuple__numeric(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(2))) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(BigInteger.One)))) && (((new BigInteger((i).Count)) == (new BigInteger(2))) || (((new BigInteger((i).Count)) == (new BigInteger(3))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(2))))));
    }
    public static bool has__special(Dafny.ISequence<Dafny.Rune> i) {
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return false;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('#'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        if ((new BigInteger(2)) <= (new BigInteger((i).Count))) {
          if (((i).Select(BigInteger.One)) != (new Dafny.Rune('_'))) {
            return true;
          } else {
            Dafny.ISequence<Dafny.Rune> _in119 = (i).Drop(new BigInteger(2));
            i = _in119;
            goto TAIL_CALL_START;
          }
        } else {
          return true;
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _in120 = (i).Drop(BigInteger.One);
        i = _in120;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> idiomatic__rust(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _7002___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_7002___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        _7002___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_7002___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
        Dafny.ISequence<Dafny.Rune> _in121 = (i).Drop(new BigInteger(2));
        i = _in121;
        goto TAIL_CALL_START;
      } else {
        _7002___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_7002___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in122 = (i).Drop(BigInteger.One);
        i = _in122;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> replaceDots(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _7003___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_7003___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        _7003___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_7003___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_d"));
        Dafny.ISequence<Dafny.Rune> _in123 = (i).Drop(BigInteger.One);
        i = _in123;
        goto TAIL_CALL_START;
      } else {
        _7003___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_7003___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in124 = (i).Drop(BigInteger.One);
        i = _in124;
        goto TAIL_CALL_START;
      }
    }
    public static bool is__tuple__builder(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(9))) && (((i).Take(new BigInteger(8))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("___hMake")))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(8))))) && (((new BigInteger((i).Count)) == (new BigInteger(9))) || (((new BigInteger((i).Count)) == (new BigInteger(10))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(9))))));
    }
    public static Dafny.ISequence<Dafny.Rune> better__tuple__builder__name(Dafny.ISequence<Dafny.Rune> i) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_T"), (i).Drop(new BigInteger(8)));
    }
    public static bool is__dafny__generated__id(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)).Sign == 1) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && (!(DCOMPUTF16.__default.has__special((i).Drop(BigInteger.One))))) && (!((new BigInteger((i).Count)) >= (new BigInteger(2))) || (((i).Select(BigInteger.One)) != (new Dafny.Rune('T'))));
    }
    public static bool is__idiomatic__rust__id(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)).Sign == 1) && (!(DCOMPUTF16.__default.has__special(i)))) && (!(DCOMPUTF16.__default.reserved__rust).Contains(i))) && (!(DCOMPUTF16.__default.reserved__rust__need__prefix).Contains(i));
    }
    public static Dafny.ISequence<Dafny.Rune> escapeIdent(Dafny.ISequence<Dafny.Rune> i) {
      if (DCOMPUTF16.__default.is__tuple__numeric(i)) {
        return i;
      } else if (DCOMPUTF16.__default.is__tuple__builder(i)) {
        return DCOMPUTF16.__default.better__tuple__builder__name(i);
      } else if ((DCOMPUTF16.__default.reserved__rust).Contains(i)) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#"), i);
      } else if (DCOMPUTF16.__default.is__idiomatic__rust__id(i)) {
        return DCOMPUTF16.__default.idiomatic__rust(i);
      } else if (DCOMPUTF16.__default.is__dafny__generated__id(i)) {
        return i;
      } else {
        Dafny.ISequence<Dafny.Rune> _7004_r = DCOMPUTF16.__default.replaceDots(i);
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#_"), _7004_r);
      }
    }
    public static Dafny.ISet<Dafny.ISequence<Dafny.Rune>> reserved__rust { get {
      return Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("async"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("await"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("const"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("crate"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("else"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("enum"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("loop"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mut"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("ref"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("static"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("struct"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("trait"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("union"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsafe"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("use"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("where"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Keywords"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("The"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("abstract"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("become"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("box"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("do"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("final"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("macro"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("override"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("priv"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("try"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("typeof"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsized"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("virtual"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("yield"));
    } }
    public static Dafny.ISet<Dafny.ISequence<Dafny.Rune>> reserved__rust__need__prefix { get {
      return Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u8"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u16"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u32"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u64"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u128"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i8"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i16"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i32"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i64"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i128"));
    } }
    public static bool UnicodeChars { get {
      return false;
    } }
    public static Dafny.ISequence<Dafny.Rune> DafnyChar { get {
      if (DCOMPUTF16.__default.UnicodeChars) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyChar");
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyCharUTF16");
      }
    } }
    public static RAST._IType DafnyCharUnderlying { get {
      if (DCOMPUTF16.__default.UnicodeChars) {
        return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char"));
      } else {
        return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u16"));
      }
    } }
    public static Dafny.ISequence<Dafny.Rune> IND { get {
      return RAST.__default.IND;
    } }
  }

  public interface _IOwnership {
    bool is_OwnershipOwned { get; }
    bool is_OwnershipBorrowed { get; }
    bool is_OwnershipBorrowedMut { get; }
    bool is_OwnershipAutoBorrowed { get; }
    _IOwnership DowncastClone();
  }
  public abstract class Ownership : _IOwnership {
    public Ownership() {
    }
    private static readonly DCOMPUTF16._IOwnership theDefault = create_OwnershipOwned();
    public static DCOMPUTF16._IOwnership Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DCOMPUTF16._IOwnership> _TYPE = new Dafny.TypeDescriptor<DCOMPUTF16._IOwnership>(DCOMPUTF16.Ownership.Default());
    public static Dafny.TypeDescriptor<DCOMPUTF16._IOwnership> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IOwnership create_OwnershipOwned() {
      return new Ownership_OwnershipOwned();
    }
    public static _IOwnership create_OwnershipBorrowed() {
      return new Ownership_OwnershipBorrowed();
    }
    public static _IOwnership create_OwnershipBorrowedMut() {
      return new Ownership_OwnershipBorrowedMut();
    }
    public static _IOwnership create_OwnershipAutoBorrowed() {
      return new Ownership_OwnershipAutoBorrowed();
    }
    public bool is_OwnershipOwned { get { return this is Ownership_OwnershipOwned; } }
    public bool is_OwnershipBorrowed { get { return this is Ownership_OwnershipBorrowed; } }
    public bool is_OwnershipBorrowedMut { get { return this is Ownership_OwnershipBorrowedMut; } }
    public bool is_OwnershipAutoBorrowed { get { return this is Ownership_OwnershipAutoBorrowed; } }
    public static System.Collections.Generic.IEnumerable<_IOwnership> AllSingletonConstructors {
      get {
        yield return Ownership.create_OwnershipOwned();
        yield return Ownership.create_OwnershipBorrowed();
        yield return Ownership.create_OwnershipBorrowedMut();
        yield return Ownership.create_OwnershipAutoBorrowed();
      }
    }
    public abstract _IOwnership DowncastClone();
  }
  public class Ownership_OwnershipOwned : Ownership {
    public Ownership_OwnershipOwned() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipOwned();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMPUTF16.Ownership_OwnershipOwned;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompilerUTF16.Ownership.OwnershipOwned";
      return s;
    }
  }
  public class Ownership_OwnershipBorrowed : Ownership {
    public Ownership_OwnershipBorrowed() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipBorrowed();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMPUTF16.Ownership_OwnershipBorrowed;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompilerUTF16.Ownership.OwnershipBorrowed";
      return s;
    }
  }
  public class Ownership_OwnershipBorrowedMut : Ownership {
    public Ownership_OwnershipBorrowedMut() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipBorrowedMut();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMPUTF16.Ownership_OwnershipBorrowedMut;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompilerUTF16.Ownership.OwnershipBorrowedMut";
      return s;
    }
  }
  public class Ownership_OwnershipAutoBorrowed : Ownership {
    public Ownership_OwnershipAutoBorrowed() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipAutoBorrowed();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMPUTF16.Ownership_OwnershipAutoBorrowed;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompilerUTF16.Ownership.OwnershipAutoBorrowed";
      return s;
    }
  }

  public interface _IEnvironment {
    bool is_Environment { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_names { get; }
    Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMPUTF16._IOwnership> dtor_ownerships { get; }
    _IEnvironment DowncastClone();
    bool IsBorrowed(Dafny.ISequence<Dafny.Rune> name);
    bool IsBorrowedMut(Dafny.ISequence<Dafny.Rune> name);
    DCOMPUTF16._IEnvironment Add(Dafny.ISequence<Dafny.Rune> name, DCOMPUTF16._IOwnership ownership);
  }
  public class Environment : _IEnvironment {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _names;
    public readonly Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMPUTF16._IOwnership> _ownerships;
    public Environment(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> names, Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMPUTF16._IOwnership> ownerships) {
      this._names = names;
      this._ownerships = ownerships;
    }
    public _IEnvironment DowncastClone() {
      if (this is _IEnvironment dt) { return dt; }
      return new Environment(_names, _ownerships);
    }
    public override bool Equals(object other) {
      var oth = other as DCOMPUTF16.Environment;
      return oth != null && object.Equals(this._names, oth._names) && object.Equals(this._ownerships, oth._ownerships);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._names));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ownerships));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompilerUTF16.Environment.Environment";
      s += "(";
      s += Dafny.Helpers.ToString(this._names);
      s += ", ";
      s += Dafny.Helpers.ToString(this._ownerships);
      s += ")";
      return s;
    }
    private static readonly DCOMPUTF16._IEnvironment theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.Empty);
    public static DCOMPUTF16._IEnvironment Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DCOMPUTF16._IEnvironment> _TYPE = new Dafny.TypeDescriptor<DCOMPUTF16._IEnvironment>(DCOMPUTF16.Environment.Default());
    public static Dafny.TypeDescriptor<DCOMPUTF16._IEnvironment> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEnvironment create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> names, Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMPUTF16._IOwnership> ownerships) {
      return new Environment(names, ownerships);
    }
    public static _IEnvironment create_Environment(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> names, Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMPUTF16._IOwnership> ownerships) {
      return create(names, ownerships);
    }
    public bool is_Environment { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_names {
      get {
        return this._names;
      }
    }
    public Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMPUTF16._IOwnership> dtor_ownerships {
      get {
        return this._ownerships;
      }
    }
    public static DCOMPUTF16._IEnvironment Empty() {
      return DCOMPUTF16.Environment.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.FromElements());
    }
    public bool IsBorrowed(Dafny.ISequence<Dafny.Rune> name) {
      return (((this).dtor_ownerships).Contains(name)) && (object.Equals(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.Select((this).dtor_ownerships,name), DCOMPUTF16.Ownership.create_OwnershipBorrowed()));
    }
    public bool IsBorrowedMut(Dafny.ISequence<Dafny.Rune> name) {
      return (((this).dtor_ownerships).Contains(name)) && (object.Equals(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.Select((this).dtor_ownerships,name), DCOMPUTF16.Ownership.create_OwnershipBorrowedMut()));
    }
    public DCOMPUTF16._IEnvironment Add(Dafny.ISequence<Dafny.Rune> name, DCOMPUTF16._IOwnership ownership)
    {
      return DCOMPUTF16.Environment.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat((this).dtor_names, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(name)), Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.Update((this).dtor_ownerships, name, ownership));
    }
  }

  public partial class COMP {
    public COMP() {
    }
    public static RAST._IMod GenModule(DAST._IModule mod, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      RAST._IMod s = RAST.Mod.Default();
      Dafny.ISequence<RAST._IModDecl> _7005_body;
      Dafny.ISequence<RAST._IModDecl> _out2882;
      _out2882 = DCOMPUTF16.COMP.GenModuleBody((mod).dtor_body, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((mod).dtor_name)));
      _7005_body = _out2882;
      s = (((mod).dtor_isExtern) ? (RAST.Mod.create_ExternMod(DCOMPUTF16.__default.escapeIdent((mod).dtor_name))) : (RAST.Mod.create_Mod(DCOMPUTF16.__default.escapeIdent((mod).dtor_name), _7005_body)));
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenModuleBody(Dafny.ISequence<DAST._IModuleItem> body, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      s = Dafny.Sequence<RAST._IModDecl>.FromElements();
      BigInteger _7006_i;
      _7006_i = BigInteger.Zero;
      while ((_7006_i) < (new BigInteger((body).Count))) {
        Dafny.ISequence<RAST._IModDecl> _7007_generated = Dafny.Sequence<RAST._IModDecl>.Empty;
        DAST._IModuleItem _source254 = (body).Select(_7006_i);
        if (_source254.is_Module) {
          DAST._IModule _7008___mcc_h0 = _source254.dtor_Module_a0;
          DAST._IModule _7009_m = _7008___mcc_h0;
          RAST._IMod _7010_mm;
          RAST._IMod _out2883;
          _out2883 = DCOMPUTF16.COMP.GenModule(_7009_m, containingPath);
          _7010_mm = _out2883;
          _7007_generated = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ModDecl(_7010_mm));
        } else if (_source254.is_Class) {
          DAST._IClass _7011___mcc_h1 = _source254.dtor_Class_a0;
          DAST._IClass _7012_c = _7011___mcc_h1;
          Dafny.ISequence<RAST._IModDecl> _out2884;
          _out2884 = DCOMPUTF16.COMP.GenClass(_7012_c, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((_7012_c).dtor_name)));
          _7007_generated = _out2884;
        } else if (_source254.is_Trait) {
          DAST._ITrait _7013___mcc_h2 = _source254.dtor_Trait_a0;
          DAST._ITrait _7014_t = _7013___mcc_h2;
          Dafny.ISequence<Dafny.Rune> _7015_tt;
          Dafny.ISequence<Dafny.Rune> _out2885;
          _out2885 = DCOMPUTF16.COMP.GenTrait(_7014_t, containingPath);
          _7015_tt = _out2885;
          _7007_generated = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_RawDecl(_7015_tt));
        } else if (_source254.is_Newtype) {
          DAST._INewtype _7016___mcc_h3 = _source254.dtor_Newtype_a0;
          DAST._INewtype _7017_n = _7016___mcc_h3;
          Dafny.ISequence<RAST._IModDecl> _out2886;
          _out2886 = DCOMPUTF16.COMP.GenNewtype(_7017_n);
          _7007_generated = _out2886;
        } else {
          DAST._IDatatype _7018___mcc_h4 = _source254.dtor_Datatype_a0;
          DAST._IDatatype _7019_d = _7018___mcc_h4;
          Dafny.ISequence<RAST._IModDecl> _out2887;
          _out2887 = DCOMPUTF16.COMP.GenDatatype(_7019_d);
          _7007_generated = _out2887;
        }
        s = Dafny.Sequence<RAST._IModDecl>.Concat(s, _7007_generated);
        _7006_i = (_7006_i) + (BigInteger.One);
      }
      return s;
    }
    public static void GenTypeParameters(Dafny.ISequence<DAST._IType> @params, out Dafny.ISet<DAST._IType> typeParamsSet, out Dafny.ISequence<RAST._ITypeParam> typeParams, out Dafny.ISequence<RAST._ITypeParam> constrainedTypeParams, out Dafny.ISequence<Dafny.Rune> whereConstraints)
    {
      typeParamsSet = Dafny.Set<DAST._IType>.Empty;
      typeParams = Dafny.Sequence<RAST._ITypeParam>.Empty;
      constrainedTypeParams = Dafny.Sequence<RAST._ITypeParam>.Empty;
      whereConstraints = Dafny.Sequence<Dafny.Rune>.Empty;
      typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      typeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      constrainedTypeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _7020_tpI;
      _7020_tpI = BigInteger.Zero;
      if ((new BigInteger((@params).Count)).Sign == 1) {
        while ((_7020_tpI) < (new BigInteger((@params).Count))) {
          DAST._IType _7021_tp;
          _7021_tp = (@params).Select(_7020_tpI);
          typeParamsSet = Dafny.Set<DAST._IType>.Union(typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_7021_tp));
          RAST._IType _7022_genTp;
          RAST._IType _out2888;
          _out2888 = DCOMPUTF16.COMP.GenType(_7021_tp, false, false);
          _7022_genTp = _out2888;
          typeParams = Dafny.Sequence<RAST._ITypeParam>.Concat(typeParams, Dafny.Sequence<RAST._ITypeParam>.FromElements(RAST.TypeParam.create((_7022_genTp)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<RAST._IType>.FromElements())));
          _7020_tpI = (_7020_tpI) + (BigInteger.One);
        }
      }
      Dafny.ISequence<RAST._IType> _7023_baseConstraints;
      _7023_baseConstraints = Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.CloneTrait, RAST.__default.DafnyPrintTrait, RAST.__default.StaticTrait);
      constrainedTypeParams = RAST.TypeParam.AddConstraintsMultiple(typeParams, _7023_baseConstraints);
    }
    public static Dafny.ISequence<RAST._IModDecl> GenClass(DAST._IClass c, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _7024_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _7025_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _7026_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _7027_whereConstraints;
      Dafny.ISet<DAST._IType> _out2889;
      Dafny.ISequence<RAST._ITypeParam> _out2890;
      Dafny.ISequence<RAST._ITypeParam> _out2891;
      Dafny.ISequence<Dafny.Rune> _out2892;
      DCOMPUTF16.COMP.GenTypeParameters((c).dtor_typeParams, out _out2889, out _out2890, out _out2891, out _out2892);
      _7024_typeParamsSet = _out2889;
      _7025_sTypeParams = _out2890;
      _7026_sConstrainedTypeParams = _out2891;
      _7027_whereConstraints = _out2892;
      Dafny.ISequence<Dafny.Rune> _7028_constrainedTypeParams;
      _7028_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_7026_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      Dafny.ISequence<RAST._IFormal> _7029_fields;
      _7029_fields = Dafny.Sequence<RAST._IFormal>.FromElements();
      Dafny.ISequence<RAST._IAssignIdentifier> _7030_fieldInits;
      _7030_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
      BigInteger _7031_fieldI;
      _7031_fieldI = BigInteger.Zero;
      while ((_7031_fieldI) < (new BigInteger(((c).dtor_fields).Count))) {
        DAST._IField _7032_field;
        _7032_field = ((c).dtor_fields).Select(_7031_fieldI);
        RAST._IType _7033_fieldType;
        RAST._IType _out2893;
        _out2893 = DCOMPUTF16.COMP.GenType(((_7032_field).dtor_formal).dtor_typ, false, false);
        _7033_fieldType = _out2893;
        _7029_fields = Dafny.Sequence<RAST._IFormal>.Concat(_7029_fields, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub "), DCOMPUTF16.__default.escapeIdent(((_7032_field).dtor_formal).dtor_name)), RAST.Type.create_TypeApp(RAST.__default.refcell__type, Dafny.Sequence<RAST._IType>.FromElements(_7033_fieldType)))));
        Std.Wrappers._IOption<DAST._IExpression> _source255 = (_7032_field).dtor_defaultValue;
        if (_source255.is_None) {
          {
            RAST._IExpr _7034_RefCellNew;
            _7034_RefCellNew = (((RAST.__default.std).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cell"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("RefCell"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"));
            RAST._IExpr _7035_default;
            _7035_default = (((RAST.__default.std).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Default"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"));
            _7030_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_7030_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMPUTF16.__default.escapeIdent(((_7032_field).dtor_formal).dtor_name), (_7034_RefCellNew).Apply1((_7035_default).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())))));
          }
        } else {
          DAST._IExpression _7036___mcc_h0 = _source255.dtor_value;
          DAST._IExpression _7037_e = _7036___mcc_h0;
          {
            RAST._IExpr _7038_expr;
            DCOMPUTF16._IOwnership _7039___v35;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7040___v36;
            RAST._IExpr _out2894;
            DCOMPUTF16._IOwnership _out2895;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2896;
            DCOMPUTF16.COMP.GenExpr(_7037_e, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), DCOMPUTF16.Environment.Empty(), DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2894, out _out2895, out _out2896);
            _7038_expr = _out2894;
            _7039___v35 = _out2895;
            _7040___v36 = _out2896;
            RAST._IExpr _7041_RefCellNew;
            _7041_RefCellNew = (((RAST.__default.std).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cell"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("RefCell"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"));
            _7030_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_7030_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMPUTF16.__default.escapeIdent(((_7032_field).dtor_formal).dtor_name), (_7041_RefCellNew).Apply1(_7038_expr))));
          }
        }
        _7031_fieldI = (_7031_fieldI) + (BigInteger.One);
      }
      BigInteger _7042_typeParamI;
      _7042_typeParamI = BigInteger.Zero;
      while ((_7042_typeParamI) < (new BigInteger(((c).dtor_typeParams).Count))) {
        RAST._IType _7043_tpeGen;
        RAST._IType _out2897;
        _out2897 = DCOMPUTF16.COMP.GenType(((c).dtor_typeParams).Select(_7042_typeParamI), false, false);
        _7043_tpeGen = _out2897;
        _7029_fields = Dafny.Sequence<RAST._IFormal>.Concat(_7029_fields, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_7042_typeParamI)), RAST.Type.create_TypeApp(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("marker"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PhantomData")), Dafny.Sequence<RAST._IType>.FromElements(_7043_tpeGen)))));
        _7030_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_7030_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_7042_typeParamI)), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData")))));
        _7042_typeParamI = (_7042_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _7044_datatypeName;
      _7044_datatypeName = DCOMPUTF16.__default.escapeIdent((c).dtor_name);
      RAST._IStruct _7045_struct;
      _7045_struct = RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), _7044_datatypeName, _7025_sTypeParams, RAST.Formals.create_NamedFormals(_7029_fields));
      Dafny.ISequence<RAST._IType> _7046_typeParamsAsTypes;
      _7046_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_7047_typeParam) => {
        return RAST.__default.RawType((_7047_typeParam).dtor_content);
      })), _7025_sTypeParams);
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(_7045_struct));
      Dafny.ISequence<RAST._IImplMember> _7048_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _7049_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out2898;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out2899;
      DCOMPUTF16.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(DAST.DatatypeType.create(path, (c).dtor_attributes))), _7024_typeParamsSet, out _out2898, out _out2899);
      _7048_implBodyRaw = _out2898;
      _7049_traitBodies = _out2899;
      Dafny.ISequence<RAST._IImplMember> _7050_implBody;
      _7050_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PUB(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_StructBuild(RAST.Expr.create_Identifier(_7044_datatypeName), _7030_fieldInits))))), _7048_implBodyRaw);
      RAST._IImpl _7051_i;
      _7051_i = RAST.Impl.create_Impl(_7026_sConstrainedTypeParams, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_7044_datatypeName), _7046_typeParamsAsTypes), _7027_whereConstraints, _7050_implBody);
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_7051_i)));
      if ((new BigInteger(((c).dtor_superClasses).Count)).Sign == 1) {
        BigInteger _7052_i;
        _7052_i = BigInteger.Zero;
        while ((_7052_i) < (new BigInteger(((c).dtor_superClasses).Count))) {
          DAST._IType _7053_superClass;
          _7053_superClass = ((c).dtor_superClasses).Select(_7052_i);
          DAST._IType _source256 = _7053_superClass;
          if (_source256.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7054___mcc_h1 = _source256.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _7055___mcc_h2 = _source256.dtor_typeArgs;
            DAST._IResolvedType _7056___mcc_h3 = _source256.dtor_resolved;
            DAST._IResolvedType _source257 = _7056___mcc_h3;
            if (_source257.is_Datatype) {
              DAST._IDatatypeType _7057___mcc_h7 = _source257.dtor_datatypeType;
            } else if (_source257.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7058___mcc_h9 = _source257.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _7059___mcc_h10 = _source257.dtor_attributes;
              Dafny.ISequence<DAST._IType> _7060_typeArgs = _7055___mcc_h2;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7061_traitPath = _7054___mcc_h1;
              {
                RAST._IType _7062_pathStr;
                RAST._IType _out2900;
                _out2900 = DCOMPUTF16.COMP.GenPath(_7061_traitPath);
                _7062_pathStr = _out2900;
                Dafny.ISequence<RAST._IType> _7063_typeArgs;
                Dafny.ISequence<RAST._IType> _out2901;
                _out2901 = DCOMPUTF16.COMP.GenTypeArgs(_7060_typeArgs, false, false);
                _7063_typeArgs = _out2901;
                Dafny.ISequence<RAST._IImplMember> _7064_body;
                _7064_body = Dafny.Sequence<RAST._IImplMember>.FromElements();
                if ((_7049_traitBodies).Contains(_7061_traitPath)) {
                  _7064_body = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(_7049_traitBodies,_7061_traitPath);
                }
                RAST._IType _7065_genSelfPath;
                RAST._IType _out2902;
                _out2902 = DCOMPUTF16.COMP.GenPath(path);
                _7065_genSelfPath = _out2902;
                RAST._IModDecl _7066_x;
                _7066_x = RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_7026_sConstrainedTypeParams, RAST.Type.create_TypeApp(_7062_pathStr, _7063_typeArgs), RAST.__default.Rc(RAST.Type.create_TypeApp(_7065_genSelfPath, _7046_typeParamsAsTypes)), _7027_whereConstraints, _7064_body));
                s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(_7066_x));
              }
            } else {
              DAST._IType _7067___mcc_h13 = _source257.dtor_baseType;
              DAST._INewtypeRange _7068___mcc_h14 = _source257.dtor_range;
              bool _7069___mcc_h15 = _source257.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _7070___mcc_h16 = _source257.dtor_attributes;
            }
          } else if (_source256.is_Nullable) {
            DAST._IType _7071___mcc_h21 = _source256.dtor_Nullable_a0;
          } else if (_source256.is_Tuple) {
            Dafny.ISequence<DAST._IType> _7072___mcc_h23 = _source256.dtor_Tuple_a0;
          } else if (_source256.is_Array) {
            DAST._IType _7073___mcc_h25 = _source256.dtor_element;
            BigInteger _7074___mcc_h26 = _source256.dtor_dims;
          } else if (_source256.is_Seq) {
            DAST._IType _7075___mcc_h29 = _source256.dtor_element;
          } else if (_source256.is_Set) {
            DAST._IType _7076___mcc_h31 = _source256.dtor_element;
          } else if (_source256.is_Multiset) {
            DAST._IType _7077___mcc_h33 = _source256.dtor_element;
          } else if (_source256.is_Map) {
            DAST._IType _7078___mcc_h35 = _source256.dtor_key;
            DAST._IType _7079___mcc_h36 = _source256.dtor_value;
          } else if (_source256.is_SetBuilder) {
            DAST._IType _7080___mcc_h39 = _source256.dtor_element;
          } else if (_source256.is_MapBuilder) {
            DAST._IType _7081___mcc_h41 = _source256.dtor_key;
            DAST._IType _7082___mcc_h42 = _source256.dtor_value;
          } else if (_source256.is_Arrow) {
            Dafny.ISequence<DAST._IType> _7083___mcc_h45 = _source256.dtor_args;
            DAST._IType _7084___mcc_h46 = _source256.dtor_result;
          } else if (_source256.is_Primitive) {
            DAST._IPrimitive _7085___mcc_h49 = _source256.dtor_Primitive_a0;
          } else if (_source256.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _7086___mcc_h51 = _source256.dtor_Passthrough_a0;
          } else {
            Dafny.ISequence<Dafny.Rune> _7087___mcc_h53 = _source256.dtor_TypeArg_a0;
          }
          _7052_i = (_7052_i) + (BigInteger.One);
        }
      }
      RAST._IImpl _7088_d;
      _7088_d = RAST.Impl.create_ImplFor(_7026_sConstrainedTypeParams, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_7044_datatypeName), _7046_typeParamsAsTypes), _7027_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(_7044_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new()"))))))));
      Dafny.ISequence<RAST._IModDecl> _7089_defaultImpl;
      _7089_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_7088_d));
      RAST._IImpl _7090_p;
      _7090_p = RAST.Impl.create_ImplFor(_7026_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_7044_datatypeName), _7046_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \""), ((c).dtor_enclosingModule)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")"))))))));
      Dafny.ISequence<RAST._IModDecl> _7091_printImpl;
      _7091_printImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_7090_p));
      RAST._IImpl _7092_pp;
      _7092_pp = RAST.Impl.create_ImplFor(_7025_sTypeParams, RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cmp::PartialEq")), RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_7044_datatypeName), _7046_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("eq"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("other"), RAST.__default.SelfBorrowed)), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ptr::eq(self, other)")))))));
      Dafny.ISequence<RAST._IModDecl> _7093_ptrPartialEqImpl;
      _7093_ptrPartialEqImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_7092_pp));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(s, _7089_defaultImpl), _7091_printImpl), _7093_ptrPartialEqImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTrait(DAST._ITrait t, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _7094_typeParamsSet;
      _7094_typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      Dafny.ISequence<RAST._IType> _7095_typeParams;
      _7095_typeParams = Dafny.Sequence<RAST._IType>.FromElements();
      BigInteger _7096_tpI;
      _7096_tpI = BigInteger.Zero;
      if ((new BigInteger(((t).dtor_typeParams).Count)).Sign == 1) {
        while ((_7096_tpI) < (new BigInteger(((t).dtor_typeParams).Count))) {
          DAST._IType _7097_tp;
          _7097_tp = ((t).dtor_typeParams).Select(_7096_tpI);
          _7094_typeParamsSet = Dafny.Set<DAST._IType>.Union(_7094_typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_7097_tp));
          RAST._IType _7098_genTp;
          RAST._IType _out2903;
          _out2903 = DCOMPUTF16.COMP.GenType(_7097_tp, false, false);
          _7098_genTp = _out2903;
          _7095_typeParams = Dafny.Sequence<RAST._IType>.Concat(_7095_typeParams, Dafny.Sequence<RAST._IType>.FromElements(_7098_genTp));
          _7096_tpI = (_7096_tpI) + (BigInteger.One);
        }
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7099_fullPath;
      _7099_fullPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((t).dtor_name));
      Dafny.ISequence<RAST._IImplMember> _7100_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _7101___v40;
      Dafny.ISequence<RAST._IImplMember> _out2904;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out2905;
      DCOMPUTF16.COMP.GenClassImplBody((t).dtor_body, true, DAST.Type.create_Path(_7099_fullPath, Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Trait(_7099_fullPath, (t).dtor_attributes)), _7094_typeParamsSet, out _out2904, out _out2905);
      _7100_implBody = _out2904;
      _7101___v40 = _out2905;
      s = (RAST.ModDecl.create_TraitDecl(RAST.Trait.create(Dafny.Sequence<RAST._ITypeParam>.FromElements(), RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMPUTF16.__default.escapeIdent((t).dtor_name)), _7095_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), _7100_implBody)))._ToString(DCOMPUTF16.__default.IND);
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenNewtype(DAST._INewtype c)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _7102_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _7103_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _7104_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _7105_whereConstraints;
      Dafny.ISet<DAST._IType> _out2906;
      Dafny.ISequence<RAST._ITypeParam> _out2907;
      Dafny.ISequence<RAST._ITypeParam> _out2908;
      Dafny.ISequence<Dafny.Rune> _out2909;
      DCOMPUTF16.COMP.GenTypeParameters((c).dtor_typeParams, out _out2906, out _out2907, out _out2908, out _out2909);
      _7102_typeParamsSet = _out2906;
      _7103_sTypeParams = _out2907;
      _7104_sConstrainedTypeParams = _out2908;
      _7105_whereConstraints = _out2909;
      Dafny.ISequence<RAST._IType> _7106_typeParamsAsTypes;
      _7106_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_7107_t) => {
        return RAST.__default.RawType((_7107_t).dtor_content);
      })), _7103_sTypeParams);
      Dafny.ISequence<Dafny.Rune> _7108_constrainedTypeParams;
      _7108_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_7104_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      RAST._IType _7109_underlyingType = RAST.Type.Default();
      Std.Wrappers._IOption<RAST._IType> _source258 = DCOMPUTF16.COMP.NewtypeToRustType((c).dtor_base, (c).dtor_range);
      if (_source258.is_None) {
        RAST._IType _out2910;
        _out2910 = DCOMPUTF16.COMP.GenType((c).dtor_base, false, false);
        _7109_underlyingType = _out2910;
      } else {
        RAST._IType _7110___mcc_h0 = _source258.dtor_value;
        RAST._IType _7111_v = _7110___mcc_h0;
        _7109_underlyingType = _7111_v;
      }
      Dafny.ISequence<Dafny.Rune> _7112_datatypeName;
      _7112_datatypeName = DCOMPUTF16.__default.escapeIdent((c).dtor_name);
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(Clone, PartialEq)]"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[repr(transparent)]")), _7112_datatypeName, _7103_sTypeParams, RAST.Formals.create_NamelessFormals(Dafny.Sequence<RAST._INamelessFormal>.FromElements(RAST.NamelessFormal.create(RAST.Visibility.create_PUB(), _7109_underlyingType))))));
      Dafny.ISequence<Dafny.Rune> _7113_fnBody;
      _7113_fnBody = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Std.Wrappers._IOption<DAST._IExpression> _source259 = (c).dtor_witnessExpr;
      if (_source259.is_None) {
        {
          _7113_fnBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_7113_fnBody, _7112_datatypeName), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(::std::default::Default::default())"));
        }
      } else {
        DAST._IExpression _7114___mcc_h1 = _source259.dtor_value;
        DAST._IExpression _7115_e = _7114___mcc_h1;
        {
          RAST._IExpr _7116_eStr;
          DCOMPUTF16._IOwnership _7117___v41;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7118___v42;
          RAST._IExpr _out2911;
          DCOMPUTF16._IOwnership _out2912;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2913;
          DCOMPUTF16.COMP.GenExpr(_7115_e, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), DCOMPUTF16.Environment.Empty(), DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2911, out _out2912, out _out2913);
          _7116_eStr = _out2911;
          _7117___v41 = _out2912;
          _7118___v42 = _out2913;
          _7113_fnBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_7113_fnBody, _7112_datatypeName), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7116_eStr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
        }
      }
      RAST._IImplMember _7119_body;
      _7119_body = RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(_7113_fnBody))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_7104_sConstrainedTypeParams, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_7112_datatypeName), _7106_typeParamsAsTypes), _7105_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(_7119_body)))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_7104_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_7112_datatypeName), _7106_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print(&self.0, _formatter, in_seq)"))))))))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_7104_sConstrainedTypeParams, RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref")), RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_7112_datatypeName), _7106_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Target = "), (_7109_underlyingType)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"))), RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("deref"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed), Std.Wrappers.Option<RAST._IType>.create_Some((RAST.__default.SelfBorrowed).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Target"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self.0"))))))))));
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenDatatype(DAST._IDatatype c)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _7120_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _7121_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _7122_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _7123_whereConstraints;
      Dafny.ISet<DAST._IType> _out2914;
      Dafny.ISequence<RAST._ITypeParam> _out2915;
      Dafny.ISequence<RAST._ITypeParam> _out2916;
      Dafny.ISequence<Dafny.Rune> _out2917;
      DCOMPUTF16.COMP.GenTypeParameters((c).dtor_typeParams, out _out2914, out _out2915, out _out2916, out _out2917);
      _7120_typeParamsSet = _out2914;
      _7121_sTypeParams = _out2915;
      _7122_sConstrainedTypeParams = _out2916;
      _7123_whereConstraints = _out2917;
      Dafny.ISequence<RAST._IType> _7124_typeParamsAsTypes;
      _7124_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_7125_t) => {
        return RAST.__default.RawType((_7125_t).dtor_content);
      })), _7121_sTypeParams);
      Dafny.ISequence<Dafny.Rune> _7126_constrainedTypeParams;
      _7126_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_7122_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(DCOMPUTF16.__default.IND, DCOMPUTF16.__default.IND));
      Dafny.ISequence<Dafny.Rune> _7127_datatypeName;
      _7127_datatypeName = DCOMPUTF16.__default.escapeIdent((c).dtor_name);
      Dafny.ISequence<RAST._IEnumCase> _7128_ctors;
      _7128_ctors = Dafny.Sequence<RAST._IEnumCase>.FromElements();
      BigInteger _7129_i;
      _7129_i = BigInteger.Zero;
      while ((_7129_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _7130_ctor;
        _7130_ctor = ((c).dtor_ctors).Select(_7129_i);
        Dafny.ISequence<RAST._IFormal> _7131_ctorArgs;
        _7131_ctorArgs = Dafny.Sequence<RAST._IFormal>.FromElements();
        BigInteger _7132_j;
        _7132_j = BigInteger.Zero;
        while ((_7132_j) < (new BigInteger(((_7130_ctor).dtor_args).Count))) {
          DAST._IFormal _7133_formal;
          _7133_formal = ((_7130_ctor).dtor_args).Select(_7132_j);
          RAST._IType _7134_formalType;
          RAST._IType _out2918;
          _out2918 = DCOMPUTF16.COMP.GenType((_7133_formal).dtor_typ, false, false);
          _7134_formalType = _out2918;
          if ((c).dtor_isCo) {
            _7131_ctorArgs = Dafny.Sequence<RAST._IFormal>.Concat(_7131_ctorArgs, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMPUTF16.__default.escapeIdent((_7133_formal).dtor_name), RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("LazyFieldWrapper")), Dafny.Sequence<RAST._IType>.FromElements(_7134_formalType)))));
          } else {
            _7131_ctorArgs = Dafny.Sequence<RAST._IFormal>.Concat(_7131_ctorArgs, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMPUTF16.__default.escapeIdent((_7133_formal).dtor_name), _7134_formalType)));
          }
          _7132_j = (_7132_j) + (BigInteger.One);
        }
        _7128_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_7128_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(DCOMPUTF16.__default.escapeIdent((_7130_ctor).dtor_name), RAST.Formals.create_NamedFormals(_7131_ctorArgs))));
        _7129_i = (_7129_i) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7135_selfPath;
      _7135_selfPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((c).dtor_name);
      Dafny.ISequence<RAST._IImplMember> _7136_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _7137_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out2919;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out2920;
      DCOMPUTF16.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(DAST.DatatypeType.create(_7135_selfPath, (c).dtor_attributes))), _7120_typeParamsSet, out _out2919, out _out2920);
      _7136_implBodyRaw = _out2919;
      _7137_traitBodies = _out2920;
      Dafny.ISequence<RAST._IImplMember> _7138_implBody;
      _7138_implBody = _7136_implBodyRaw;
      _7129_i = BigInteger.Zero;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7139_emittedFields;
      _7139_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      while ((_7129_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _7140_ctor;
        _7140_ctor = ((c).dtor_ctors).Select(_7129_i);
        BigInteger _7141_j;
        _7141_j = BigInteger.Zero;
        while ((_7141_j) < (new BigInteger(((_7140_ctor).dtor_args).Count))) {
          DAST._IFormal _7142_formal;
          _7142_formal = ((_7140_ctor).dtor_args).Select(_7141_j);
          if (!((_7139_emittedFields).Contains((_7142_formal).dtor_name))) {
            _7139_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_7139_emittedFields, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_7142_formal).dtor_name));
            RAST._IType _7143_formalType;
            RAST._IType _out2921;
            _out2921 = DCOMPUTF16.COMP.GenType((_7142_formal).dtor_typ, false, false);
            _7143_formalType = _out2921;
            Dafny.ISequence<RAST._IMatchCase> _7144_cases;
            _7144_cases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
            BigInteger _7145_k;
            _7145_k = BigInteger.Zero;
            while ((_7145_k) < (new BigInteger(((c).dtor_ctors).Count))) {
              DAST._IDatatypeCtor _7146_ctor2;
              _7146_ctor2 = ((c).dtor_ctors).Select(_7145_k);
              Dafny.ISequence<Dafny.Rune> _7147_pattern;
              _7147_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_7127_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMPUTF16.__default.escapeIdent((_7146_ctor2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
              Dafny.ISequence<Dafny.Rune> _7148_rhs = Dafny.Sequence<Dafny.Rune>.Empty;
              BigInteger _7149_l;
              _7149_l = BigInteger.Zero;
              bool _7150_hasMatchingField;
              _7150_hasMatchingField = false;
              while ((_7149_l) < (new BigInteger(((_7146_ctor2).dtor_args).Count))) {
                DAST._IFormal _7151_formal2;
                _7151_formal2 = ((_7146_ctor2).dtor_args).Select(_7149_l);
                if (((_7142_formal).dtor_name).Equals((_7151_formal2).dtor_name)) {
                  _7150_hasMatchingField = true;
                }
                _7147_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_7147_pattern, DCOMPUTF16.__default.escapeIdent((_7151_formal2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                _7149_l = (_7149_l) + (BigInteger.One);
              }
              _7147_pattern = Dafny.Sequence<Dafny.Rune>.Concat(_7147_pattern, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
              if (_7150_hasMatchingField) {
                if ((c).dtor_isCo) {
                  _7148_rhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&"), DCOMPUTF16.__default.escapeIdent((_7142_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0)"));
                } else {
                  _7148_rhs = Dafny.Sequence<Dafny.Rune>.Concat(DCOMPUTF16.__default.escapeIdent((_7142_formal).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                }
              } else {
                _7148_rhs = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"field does not exist on this variant\")");
              }
              RAST._IMatchCase _7152_ctorMatch;
              _7152_ctorMatch = RAST.MatchCase.create(_7147_pattern, RAST.Expr.create_RawExpr(_7148_rhs));
              _7144_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_7144_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(_7152_ctorMatch));
              _7145_k = (_7145_k) + (BigInteger.One);
            }
            if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
              _7144_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_7144_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(_7127_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!()")))));
            }
            RAST._IExpr _7153_methodBody;
            _7153_methodBody = RAST.Expr.create_Match(RAST.__default.self, _7144_cases);
            _7138_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(_7138_implBody, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PUB(), RAST.Fn.create(DCOMPUTF16.__default.escapeIdent((_7142_formal).dtor_name), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_Borrowed(_7143_formalType)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_7153_methodBody)))));
          }
          _7141_j = (_7141_j) + (BigInteger.One);
        }
        _7129_i = (_7129_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        BigInteger _7154_typeI;
        _7154_typeI = BigInteger.Zero;
        Dafny.ISequence<RAST._IType> _7155_types;
        _7155_types = Dafny.Sequence<RAST._IType>.FromElements();
        while ((_7154_typeI) < (new BigInteger(((c).dtor_typeParams).Count))) {
          RAST._IType _7156_genTp;
          RAST._IType _out2922;
          _out2922 = DCOMPUTF16.COMP.GenType(((c).dtor_typeParams).Select(_7154_typeI), false, false);
          _7156_genTp = _out2922;
          _7155_types = Dafny.Sequence<RAST._IType>.Concat(_7155_types, Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData::")), Dafny.Sequence<RAST._IType>.FromElements(_7156_genTp))));
          _7154_typeI = (_7154_typeI) + (BigInteger.One);
        }
        _7128_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_7128_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_PhantomVariant"), RAST.Formals.create_NamelessFormals(Std.Collections.Seq.__default.Map<RAST._IType, RAST._INamelessFormal>(((System.Func<RAST._IType, RAST._INamelessFormal>)((_7157_tpe) => {
  return RAST.NamelessFormal.create(RAST.Visibility.create_PRIV(), _7157_tpe);
})), _7155_types)))));
      }
      Dafny.ISequence<RAST._IModDecl> _7158_enumBody;
      _7158_enumBody = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_EnumDecl(RAST.Enum.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(PartialEq, Clone)]")), _7127_datatypeName, _7121_sTypeParams, _7128_ctors)), RAST.ModDecl.create_ImplDecl(RAST.Impl.create_Impl(_7122_sConstrainedTypeParams, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_7127_datatypeName), _7124_typeParamsAsTypes), _7123_whereConstraints, _7138_implBody)));
      _7129_i = BigInteger.Zero;
      Dafny.ISequence<RAST._IMatchCase> _7159_printImplBodyCases;
      _7159_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
      while ((_7129_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _7160_ctor;
        _7160_ctor = ((c).dtor_ctors).Select(_7129_i);
        Dafny.ISequence<Dafny.Rune> _7161_ctorMatch;
        _7161_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(DCOMPUTF16.__default.escapeIdent((_7160_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        Dafny.ISequence<Dafny.Rune> _7162_modulePrefix;
        _7162_modulePrefix = (((((c).dtor_enclosingModule)).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(((c).dtor_enclosingModule), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("."))));
        RAST._IExpr _7163_printRhs;
        _7163_printRhs = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \""), _7162_modulePrefix), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent((_7160_ctor).dtor_name)), (((_7160_ctor).dtor_hasAnyArgs) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(\")?")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")?")))));
        BigInteger _7164_j;
        _7164_j = BigInteger.Zero;
        while ((_7164_j) < (new BigInteger(((_7160_ctor).dtor_args).Count))) {
          DAST._IFormal _7165_formal;
          _7165_formal = ((_7160_ctor).dtor_args).Select(_7164_j);
          _7161_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_7161_ctorMatch, DCOMPUTF16.__default.escapeIdent((_7165_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          if ((_7164_j).Sign == 1) {
            _7163_printRhs = (_7163_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \", \")?")));
          }
          _7163_printRhs = (_7163_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print("), DCOMPUTF16.__default.escapeIdent((_7165_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", _formatter, false)?"))));
          _7164_j = (_7164_j) + (BigInteger.One);
        }
        _7161_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_7161_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        if ((_7160_ctor).dtor_hasAnyArgs) {
          _7163_printRhs = (_7163_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \")\")?")));
        }
        _7163_printRhs = (_7163_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Ok(())")));
        _7159_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_7159_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_7127_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _7161_ctorMatch), RAST.Expr.create_Block(_7163_printRhs))));
        _7129_i = (_7129_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _7159_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_7159_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(_7127_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{panic!()}")))));
      }
      RAST._IExpr _7166_printImplBody;
      _7166_printImplBody = RAST.Expr.create_Match(RAST.__default.self, _7159_printImplBodyCases);
      Dafny.ISequence<RAST._IModDecl> _7167_printImpl;
      _7167_printImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_7122_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_7127_datatypeName), _7124_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_7166_printImplBody)))))));
      Dafny.ISequence<RAST._IModDecl> _7168_defaultImpl;
      _7168_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements();
      Dafny.ISequence<RAST._IModDecl> _7169_asRefImpl;
      _7169_asRefImpl = Dafny.Sequence<RAST._IModDecl>.FromElements();
      if ((new BigInteger(((c).dtor_ctors).Count)).Sign == 1) {
        _7129_i = BigInteger.Zero;
        RAST._IExpr _7170_structName;
        _7170_structName = (RAST.Expr.create_Identifier(_7127_datatypeName)).MSel(DCOMPUTF16.__default.escapeIdent((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_name));
        Dafny.ISequence<RAST._IAssignIdentifier> _7171_structAssignments;
        _7171_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
        while ((_7129_i) < (new BigInteger(((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Count))) {
          DAST._IFormal _7172_formal;
          _7172_formal = ((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Select(_7129_i);
          _7171_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_7171_structAssignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMPUTF16.__default.escapeIdent((_7172_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default::default()")))));
          _7129_i = (_7129_i) + (BigInteger.One);
        }
        Dafny.ISequence<RAST._ITypeParam> _7173_defaultConstrainedTypeParams;
        _7173_defaultConstrainedTypeParams = RAST.TypeParam.AddConstraintsMultiple(_7121_sTypeParams, Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.DefaultTrait));
        RAST._IType _7174_fullType;
        _7174_fullType = RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_7127_datatypeName), _7124_typeParamsAsTypes);
        _7168_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_7173_defaultConstrainedTypeParams, RAST.__default.DefaultTrait, _7174_fullType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(_7174_fullType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_StructBuild(_7170_structName, _7171_structAssignments))))))));
        _7169_asRefImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_7173_defaultConstrainedTypeParams, (((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("convert"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("AsRef"))).Apply1(_7174_fullType), RAST.Type.create_Borrowed(_7174_fullType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.__default.self)))))));
      }
      s = Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(_7158_enumBody, _7167_printImpl), _7168_defaultImpl), _7169_asRefImpl);
      return s;
    }
    public static RAST._IType GenPath(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p)
    {
      RAST._IType r = RAST.Type.Default();
      if ((new BigInteger((p).Count)).Sign == 0) {
        r = RAST.Type.create_SelfOwned();
        return r;
      } else {
        r = (((((p).Select(BigInteger.Zero))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"))) ? (RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) : (RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"))));
        BigInteger _hi10 = new BigInteger((p).Count);
        for (BigInteger _7175_i = BigInteger.Zero; _7175_i < _hi10; _7175_i++) {
          r = (r).MSel(DCOMPUTF16.__default.escapeIdent(((p).Select(_7175_i))));
        }
      }
      return r;
    }
    public static RAST._IExpr GenPathExpr(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p)
    {
      RAST._IExpr r = RAST.Expr.Default();
      if ((new BigInteger((p).Count)).Sign == 0) {
        r = RAST.__default.self;
        return r;
      } else {
        r = (((((p).Select(BigInteger.Zero))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"))) ? (RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) : (RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"))));
        BigInteger _hi11 = new BigInteger((p).Count);
        for (BigInteger _7176_i = BigInteger.Zero; _7176_i < _hi11; _7176_i++) {
          r = (r).MSel(DCOMPUTF16.__default.escapeIdent(((p).Select(_7176_i))));
        }
      }
      return r;
    }
    public static Dafny.ISequence<RAST._IType> GenTypeArgs(Dafny.ISequence<DAST._IType> args, bool inBinding, bool inFn)
    {
      Dafny.ISequence<RAST._IType> s = Dafny.Sequence<RAST._IType>.Empty;
      s = Dafny.Sequence<RAST._IType>.FromElements();
      if ((new BigInteger((args).Count)).Sign == 1) {
        BigInteger _7177_i;
        _7177_i = BigInteger.Zero;
        while ((_7177_i) < (new BigInteger((args).Count))) {
          RAST._IType _7178_genTp;
          RAST._IType _out2923;
          _out2923 = DCOMPUTF16.COMP.GenType((args).Select(_7177_i), inBinding, inFn);
          _7178_genTp = _out2923;
          s = Dafny.Sequence<RAST._IType>.Concat(s, Dafny.Sequence<RAST._IType>.FromElements(_7178_genTp));
          _7177_i = (_7177_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static bool IsRcWrapped(Dafny.ISequence<DAST._IAttribute> attributes) {
      return ((!(attributes).Contains(DAST.Attribute.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("auto-nongrowing-size"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements()))) && (!(attributes).Contains(DAST.Attribute.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rust_rc"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false")))))) || ((attributes).Contains(DAST.Attribute.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rust_rc"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true")))));
    }
    public static RAST._IType GenType(DAST._IType c, bool inBinding, bool inFn)
    {
      RAST._IType s = RAST.Type.Default();
      DAST._IType _source260 = c;
      if (_source260.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7179___mcc_h0 = _source260.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _7180___mcc_h1 = _source260.dtor_typeArgs;
        DAST._IResolvedType _7181___mcc_h2 = _source260.dtor_resolved;
        DAST._IResolvedType _7182_resolved = _7181___mcc_h2;
        Dafny.ISequence<DAST._IType> _7183_args = _7180___mcc_h1;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7184_p = _7179___mcc_h0;
        {
          RAST._IType _7185_t;
          RAST._IType _out2924;
          _out2924 = DCOMPUTF16.COMP.GenPath(_7184_p);
          _7185_t = _out2924;
          Dafny.ISequence<RAST._IType> _7186_typeArgs;
          Dafny.ISequence<RAST._IType> _out2925;
          _out2925 = DCOMPUTF16.COMP.GenTypeArgs(_7183_args, inBinding, inFn);
          _7186_typeArgs = _out2925;
          s = RAST.Type.create_TypeApp(_7185_t, _7186_typeArgs);
          DAST._IResolvedType _source261 = _7182_resolved;
          if (_source261.is_Datatype) {
            DAST._IDatatypeType _7187___mcc_h21 = _source261.dtor_datatypeType;
            DAST._IDatatypeType _source262 = _7187___mcc_h21;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7188___mcc_h22 = _source262.dtor_path;
            Dafny.ISequence<DAST._IAttribute> _7189___mcc_h23 = _source262.dtor_attributes;
            Dafny.ISequence<DAST._IAttribute> _7190_attributes = _7189___mcc_h23;
            {
              if (DCOMPUTF16.COMP.IsRcWrapped(_7190_attributes)) {
                s = RAST.__default.Rc(s);
              }
            }
          } else if (_source261.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7191___mcc_h24 = _source261.dtor_path;
            Dafny.ISequence<DAST._IAttribute> _7192___mcc_h25 = _source261.dtor_attributes;
            {
              if ((_7184_p).Equals(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("object")))) {
                s = RAST.__default.Rc(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::any::Any")));
              } else {
                if (inBinding) {
                  s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
                } else {
                  s = RAST.Type.create_ImplType(s);
                }
              }
            }
          } else {
            DAST._IType _7193___mcc_h26 = _source261.dtor_baseType;
            DAST._INewtypeRange _7194___mcc_h27 = _source261.dtor_range;
            bool _7195___mcc_h28 = _source261.dtor_erase;
            Dafny.ISequence<DAST._IAttribute> _7196___mcc_h29 = _source261.dtor_attributes;
            Dafny.ISequence<DAST._IAttribute> _7197_attributes = _7196___mcc_h29;
            bool _7198_erased = _7195___mcc_h28;
            DAST._INewtypeRange _7199_range = _7194___mcc_h27;
            DAST._IType _7200_t = _7193___mcc_h26;
            {
              if (_7198_erased) {
                Std.Wrappers._IOption<RAST._IType> _source263 = DCOMPUTF16.COMP.NewtypeToRustType(_7200_t, _7199_range);
                if (_source263.is_None) {
                } else {
                  RAST._IType _7201___mcc_h30 = _source263.dtor_value;
                  RAST._IType _7202_v = _7201___mcc_h30;
                  s = _7202_v;
                }
              }
            }
          }
        }
      } else if (_source260.is_Nullable) {
        DAST._IType _7203___mcc_h3 = _source260.dtor_Nullable_a0;
        DAST._IType _7204_inner = _7203___mcc_h3;
        {
          RAST._IType _7205_innerExpr;
          RAST._IType _out2926;
          _out2926 = DCOMPUTF16.COMP.GenType(_7204_inner, inBinding, inFn);
          _7205_innerExpr = _out2926;
          s = RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::option::Option")), Dafny.Sequence<RAST._IType>.FromElements(_7205_innerExpr));
        }
      } else if (_source260.is_Tuple) {
        Dafny.ISequence<DAST._IType> _7206___mcc_h4 = _source260.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IType> _7207_types = _7206___mcc_h4;
        {
          Dafny.ISequence<RAST._IType> _7208_args;
          _7208_args = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _7209_i;
          _7209_i = BigInteger.Zero;
          while ((_7209_i) < (new BigInteger((_7207_types).Count))) {
            RAST._IType _7210_generated;
            RAST._IType _out2927;
            _out2927 = DCOMPUTF16.COMP.GenType((_7207_types).Select(_7209_i), inBinding, inFn);
            _7210_generated = _out2927;
            _7208_args = Dafny.Sequence<RAST._IType>.Concat(_7208_args, Dafny.Sequence<RAST._IType>.FromElements(_7210_generated));
            _7209_i = (_7209_i) + (BigInteger.One);
          }
          s = RAST.Type.create_TupleType(_7208_args);
        }
      } else if (_source260.is_Array) {
        DAST._IType _7211___mcc_h5 = _source260.dtor_element;
        BigInteger _7212___mcc_h6 = _source260.dtor_dims;
        BigInteger _7213_dims = _7212___mcc_h6;
        DAST._IType _7214_element = _7211___mcc_h5;
        {
          RAST._IType _7215_elem;
          RAST._IType _out2928;
          _out2928 = DCOMPUTF16.COMP.GenType(_7214_element, inBinding, inFn);
          _7215_elem = _out2928;
          s = _7215_elem;
          BigInteger _7216_i;
          _7216_i = BigInteger.Zero;
          while ((_7216_i) < (_7213_dims)) {
            s = RAST.__default.Rc(RAST.__default.RefCell(RAST.__default.Vec(s)));
            _7216_i = (_7216_i) + (BigInteger.One);
          }
        }
      } else if (_source260.is_Seq) {
        DAST._IType _7217___mcc_h7 = _source260.dtor_element;
        DAST._IType _7218_element = _7217___mcc_h7;
        {
          RAST._IType _7219_elem;
          RAST._IType _out2929;
          _out2929 = DCOMPUTF16.COMP.GenType(_7218_element, inBinding, inFn);
          _7219_elem = _out2929;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence")), Dafny.Sequence<RAST._IType>.FromElements(_7219_elem));
        }
      } else if (_source260.is_Set) {
        DAST._IType _7220___mcc_h8 = _source260.dtor_element;
        DAST._IType _7221_element = _7220___mcc_h8;
        {
          RAST._IType _7222_elem;
          RAST._IType _out2930;
          _out2930 = DCOMPUTF16.COMP.GenType(_7221_element, inBinding, inFn);
          _7222_elem = _out2930;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Set")), Dafny.Sequence<RAST._IType>.FromElements(_7222_elem));
        }
      } else if (_source260.is_Multiset) {
        DAST._IType _7223___mcc_h9 = _source260.dtor_element;
        DAST._IType _7224_element = _7223___mcc_h9;
        {
          RAST._IType _7225_elem;
          RAST._IType _out2931;
          _out2931 = DCOMPUTF16.COMP.GenType(_7224_element, inBinding, inFn);
          _7225_elem = _out2931;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Multiset")), Dafny.Sequence<RAST._IType>.FromElements(_7225_elem));
        }
      } else if (_source260.is_Map) {
        DAST._IType _7226___mcc_h10 = _source260.dtor_key;
        DAST._IType _7227___mcc_h11 = _source260.dtor_value;
        DAST._IType _7228_value = _7227___mcc_h11;
        DAST._IType _7229_key = _7226___mcc_h10;
        {
          RAST._IType _7230_keyType;
          RAST._IType _out2932;
          _out2932 = DCOMPUTF16.COMP.GenType(_7229_key, inBinding, inFn);
          _7230_keyType = _out2932;
          RAST._IType _7231_valueType;
          RAST._IType _out2933;
          _out2933 = DCOMPUTF16.COMP.GenType(_7228_value, inBinding, inFn);
          _7231_valueType = _out2933;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Map")), Dafny.Sequence<RAST._IType>.FromElements(_7230_keyType, _7231_valueType));
        }
      } else if (_source260.is_SetBuilder) {
        DAST._IType _7232___mcc_h12 = _source260.dtor_element;
        DAST._IType _7233_elem = _7232___mcc_h12;
        {
          RAST._IType _7234_elemType;
          RAST._IType _out2934;
          _out2934 = DCOMPUTF16.COMP.GenType(_7233_elem, inBinding, inFn);
          _7234_elemType = _out2934;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SetBuilder")), Dafny.Sequence<RAST._IType>.FromElements(_7234_elemType));
        }
      } else if (_source260.is_MapBuilder) {
        DAST._IType _7235___mcc_h13 = _source260.dtor_key;
        DAST._IType _7236___mcc_h14 = _source260.dtor_value;
        DAST._IType _7237_value = _7236___mcc_h14;
        DAST._IType _7238_key = _7235___mcc_h13;
        {
          RAST._IType _7239_keyType;
          RAST._IType _out2935;
          _out2935 = DCOMPUTF16.COMP.GenType(_7238_key, inBinding, inFn);
          _7239_keyType = _out2935;
          RAST._IType _7240_valueType;
          RAST._IType _out2936;
          _out2936 = DCOMPUTF16.COMP.GenType(_7237_value, inBinding, inFn);
          _7240_valueType = _out2936;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("MapBuilder")), Dafny.Sequence<RAST._IType>.FromElements(_7239_keyType, _7240_valueType));
        }
      } else if (_source260.is_Arrow) {
        Dafny.ISequence<DAST._IType> _7241___mcc_h15 = _source260.dtor_args;
        DAST._IType _7242___mcc_h16 = _source260.dtor_result;
        DAST._IType _7243_result = _7242___mcc_h16;
        Dafny.ISequence<DAST._IType> _7244_args = _7241___mcc_h15;
        {
          Dafny.ISequence<RAST._IType> _7245_argTypes;
          _7245_argTypes = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _7246_i;
          _7246_i = BigInteger.Zero;
          while ((_7246_i) < (new BigInteger((_7244_args).Count))) {
            RAST._IType _7247_generated;
            RAST._IType _out2937;
            _out2937 = DCOMPUTF16.COMP.GenType((_7244_args).Select(_7246_i), inBinding, true);
            _7247_generated = _out2937;
            _7245_argTypes = Dafny.Sequence<RAST._IType>.Concat(_7245_argTypes, Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_Borrowed(_7247_generated)));
            _7246_i = (_7246_i) + (BigInteger.One);
          }
          RAST._IType _7248_resultType;
          RAST._IType _out2938;
          _out2938 = DCOMPUTF16.COMP.GenType(_7243_result, inBinding, (inFn) || (inBinding));
          _7248_resultType = _out2938;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("FunctionWrapper")), Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_FnType(_7245_argTypes, RAST.Type.create_IntersectionType(_7248_resultType, RAST.__default.StaticTrait))));
        }
      } else if (_source260.is_Primitive) {
        DAST._IPrimitive _7249___mcc_h17 = _source260.dtor_Primitive_a0;
        DAST._IPrimitive _7250_p = _7249___mcc_h17;
        {
          DAST._IPrimitive _source264 = _7250_p;
          if (_source264.is_Int) {
            s = (RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyInt"));
          } else if (_source264.is_Real) {
            s = (RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("BigRational"));
          } else if (_source264.is_String) {
            s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence")), Dafny.Sequence<RAST._IType>.FromElements((RAST.__default.dafny__runtime__type).MSel(DCOMPUTF16.__default.DafnyChar)));
          } else if (_source264.is_Bool) {
            s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool"));
          } else {
            s = (RAST.__default.dafny__runtime__type).MSel(DCOMPUTF16.__default.DafnyChar);
          }
        }
      } else if (_source260.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _7251___mcc_h18 = _source260.dtor_Passthrough_a0;
        Dafny.ISequence<Dafny.Rune> _7252_v = _7251___mcc_h18;
        s = RAST.__default.RawType(_7252_v);
      } else {
        Dafny.ISequence<Dafny.Rune> _7253___mcc_h19 = _source260.dtor_TypeArg_a0;
        Dafny.ISequence<Dafny.Rune> _source265 = _7253___mcc_h19;
        Dafny.ISequence<Dafny.Rune> _7254___mcc_h20 = _source265;
        Dafny.ISequence<Dafny.Rune> _7255_name = _7254___mcc_h20;
        s = RAST.__default.RawType(DCOMPUTF16.__default.escapeIdent(_7255_name));
      }
      return s;
    }
    public static void GenClassImplBody(Dafny.ISequence<DAST._IMethod> body, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams, out Dafny.ISequence<RAST._IImplMember> s, out Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> traitBodies)
    {
      s = Dafny.Sequence<RAST._IImplMember>.Empty;
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Empty;
      s = Dafny.Sequence<RAST._IImplMember>.FromElements();
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements();
      BigInteger _7256_i;
      _7256_i = BigInteger.Zero;
      while ((_7256_i) < (new BigInteger((body).Count))) {
        DAST._IMethod _source266 = (body).Select(_7256_i);
        DAST._IMethod _7257___mcc_h0 = _source266;
        DAST._IMethod _7258_m = _7257___mcc_h0;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source267 = (_7258_m).dtor_overridingPath;
          if (_source267.is_None) {
            {
              RAST._IImplMember _7259_generated;
              RAST._IImplMember _out2939;
              _out2939 = DCOMPUTF16.COMP.GenMethod(_7258_m, forTrait, enclosingType, enclosingTypeParams);
              _7259_generated = _out2939;
              s = Dafny.Sequence<RAST._IImplMember>.Concat(s, Dafny.Sequence<RAST._IImplMember>.FromElements(_7259_generated));
            }
          } else {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7260___mcc_h1 = _source267.dtor_value;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7261_p = _7260___mcc_h1;
            {
              Dafny.ISequence<RAST._IImplMember> _7262_existing;
              _7262_existing = Dafny.Sequence<RAST._IImplMember>.FromElements();
              if ((traitBodies).Contains(_7261_p)) {
                _7262_existing = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(traitBodies,_7261_p);
              }
              RAST._IImplMember _7263_genMethod;
              RAST._IImplMember _out2940;
              _out2940 = DCOMPUTF16.COMP.GenMethod(_7258_m, true, enclosingType, enclosingTypeParams);
              _7263_genMethod = _out2940;
              _7262_existing = Dafny.Sequence<RAST._IImplMember>.Concat(_7262_existing, Dafny.Sequence<RAST._IImplMember>.FromElements(_7263_genMethod));
              traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Merge(traitBodies, Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>(_7261_p, _7262_existing)));
            }
          }
        }
        _7256_i = (_7256_i) + (BigInteger.One);
      }
    }
    public static Dafny.ISequence<RAST._IFormal> GenParams(Dafny.ISequence<DAST._IFormal> @params)
    {
      Dafny.ISequence<RAST._IFormal> s = Dafny.Sequence<RAST._IFormal>.Empty;
      s = Dafny.Sequence<RAST._IFormal>.FromElements();
      BigInteger _7264_i;
      _7264_i = BigInteger.Zero;
      while ((_7264_i) < (new BigInteger((@params).Count))) {
        DAST._IFormal _7265_param;
        _7265_param = (@params).Select(_7264_i);
        RAST._IType _7266_paramType;
        RAST._IType _out2941;
        _out2941 = DCOMPUTF16.COMP.GenType((_7265_param).dtor_typ, false, false);
        _7266_paramType = _out2941;
        s = Dafny.Sequence<RAST._IFormal>.Concat(s, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMPUTF16.__default.escapeIdent((_7265_param).dtor_name), RAST.Type.create_Borrowed(_7266_paramType))));
        _7264_i = (_7264_i) + (BigInteger.One);
      }
      return s;
    }
    public static RAST._IImplMember GenMethod(DAST._IMethod m, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams)
    {
      RAST._IImplMember s = RAST.ImplMember.Default();
      Dafny.ISequence<RAST._IFormal> _7267_params;
      Dafny.ISequence<RAST._IFormal> _out2942;
      _out2942 = DCOMPUTF16.COMP.GenParams((m).dtor_params);
      _7267_params = _out2942;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7268_paramNames;
      _7268_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMPUTF16._IOwnership> _7269_paramOwnerships;
      _7269_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.FromElements();
      BigInteger _7270_paramI;
      _7270_paramI = BigInteger.Zero;
      while ((_7270_paramI) < (new BigInteger(((m).dtor_params).Count))) {
        Dafny.ISequence<Dafny.Rune> _7271_name;
        _7271_name = (((m).dtor_params).Select(_7270_paramI)).dtor_name;
        _7268_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_7268_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_7271_name));
        _7269_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.Update(_7269_paramOwnerships, _7271_name, DCOMPUTF16.Ownership.create_OwnershipBorrowed());
        _7270_paramI = (_7270_paramI) + (BigInteger.One);
      }
      DCOMPUTF16._IEnvironment _7272_env;
      _7272_env = DCOMPUTF16.Environment.create(_7268_paramNames, _7269_paramOwnerships);
      if (!((m).dtor_isStatic)) {
        if (forTrait) {
          _7267_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed), _7267_params);
        } else {
          RAST._IType _7273_tpe;
          RAST._IType _out2943;
          _out2943 = DCOMPUTF16.COMP.GenType(enclosingType, false, false);
          _7273_tpe = _out2943;
          _7267_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), RAST.Type.create_Borrowed(_7273_tpe))), _7267_params);
        }
      }
      Dafny.ISequence<RAST._IType> _7274_retTypeArgs;
      _7274_retTypeArgs = Dafny.Sequence<RAST._IType>.FromElements();
      BigInteger _7275_typeI;
      _7275_typeI = BigInteger.Zero;
      while ((_7275_typeI) < (new BigInteger(((m).dtor_outTypes).Count))) {
        RAST._IType _7276_typeExpr;
        RAST._IType _out2944;
        _out2944 = DCOMPUTF16.COMP.GenType(((m).dtor_outTypes).Select(_7275_typeI), false, false);
        _7276_typeExpr = _out2944;
        _7274_retTypeArgs = Dafny.Sequence<RAST._IType>.Concat(_7274_retTypeArgs, Dafny.Sequence<RAST._IType>.FromElements(_7276_typeExpr));
        _7275_typeI = (_7275_typeI) + (BigInteger.One);
      }
      RAST._IVisibility _7277_visibility;
      _7277_visibility = RAST.Visibility.create_PUB();
      Dafny.ISequence<Dafny.Rune> _7278_fnName;
      _7278_fnName = DCOMPUTF16.__default.escapeIdent((m).dtor_name);
      Dafny.ISequence<DAST._IType> _7279_typeParamsFiltered;
      _7279_typeParamsFiltered = Dafny.Sequence<DAST._IType>.FromElements();
      BigInteger _7280_typeParamI;
      _7280_typeParamI = BigInteger.Zero;
      while ((_7280_typeParamI) < (new BigInteger(((m).dtor_typeParams).Count))) {
        DAST._IType _7281_typeParam;
        _7281_typeParam = ((m).dtor_typeParams).Select(_7280_typeParamI);
        if (!((enclosingTypeParams).Contains(_7281_typeParam))) {
          _7279_typeParamsFiltered = Dafny.Sequence<DAST._IType>.Concat(_7279_typeParamsFiltered, Dafny.Sequence<DAST._IType>.FromElements(_7281_typeParam));
        }
        _7280_typeParamI = (_7280_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _7282_whereClauses;
      _7282_whereClauses = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISequence<RAST._ITypeParam> _7283_typeParams;
      _7283_typeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      if ((new BigInteger((_7279_typeParamsFiltered).Count)).Sign == 1) {
        _7282_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_7282_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where "));
        BigInteger _7284_i;
        _7284_i = BigInteger.Zero;
        while ((_7284_i) < (new BigInteger((_7279_typeParamsFiltered).Count))) {
          RAST._IType _7285_typeExpr;
          RAST._IType _out2945;
          _out2945 = DCOMPUTF16.COMP.GenType((_7279_typeParamsFiltered).Select(_7284_i), false, false);
          _7285_typeExpr = _out2945;
          _7283_typeParams = Dafny.Sequence<RAST._ITypeParam>.Concat(_7283_typeParams, Dafny.Sequence<RAST._ITypeParam>.FromElements(RAST.TypeParam.create((_7285_typeExpr)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.CloneTrait, RAST.__default.DafnyPrintTrait, RAST.__default.DefaultTrait, RAST.__default.StaticTrait))));
          _7284_i = (_7284_i) + (BigInteger.One);
        }
      }
      Std.Wrappers._IOption<RAST._IExpr> _7286_fBody = Std.Wrappers.Option<RAST._IExpr>.Default();
      if ((m).dtor_hasBody) {
        RAST._IExpr _7287_earlyReturn;
        _7287_earlyReturn = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_None());
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source268 = (m).dtor_outVars;
        if (_source268.is_None) {
        } else {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7288___mcc_h0 = _source268.dtor_value;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7289_outVars = _7288___mcc_h0;
          {
            Dafny.ISequence<RAST._IExpr> _7290_tupleArgs;
            _7290_tupleArgs = Dafny.Sequence<RAST._IExpr>.FromElements();
            BigInteger _7291_outI;
            _7291_outI = BigInteger.Zero;
            while ((_7291_outI) < (new BigInteger((_7289_outVars).Count))) {
              Dafny.ISequence<Dafny.Rune> _7292_outVar;
              _7292_outVar = (_7289_outVars).Select(_7291_outI);
              _7290_tupleArgs = Dafny.Sequence<RAST._IExpr>.Concat(_7290_tupleArgs, Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Identifier(DCOMPUTF16.__default.escapeIdent((_7292_outVar)))));
              _7291_outI = (_7291_outI) + (BigInteger.One);
            }
            _7287_earlyReturn = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_Tuple(_7290_tupleArgs)));
          }
        }
        RAST._IExpr _7293_body;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7294___v46;
        RAST._IExpr _out2946;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2947;
        DCOMPUTF16.COMP.GenStmts((m).dtor_body, (((m).dtor_isStatic) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None()) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))), _7272_env, true, _7287_earlyReturn, out _out2946, out _out2947);
        _7293_body = _out2946;
        _7294___v46 = _out2947;
        _7286_fBody = Std.Wrappers.Option<RAST._IExpr>.create_Some(_7293_body);
      } else {
        _7286_fBody = Std.Wrappers.Option<RAST._IExpr>.create_None();
      }
      s = RAST.ImplMember.create_FnDecl(_7277_visibility, RAST.Fn.create(_7278_fnName, _7283_typeParams, _7267_params, Std.Wrappers.Option<RAST._IType>.create_Some((((new BigInteger((_7274_retTypeArgs).Count)) == (BigInteger.One)) ? ((_7274_retTypeArgs).Select(BigInteger.Zero)) : (RAST.Type.create_TupleType(_7274_retTypeArgs)))), _7282_whereClauses, _7286_fBody));
      return s;
    }
    public static void GenStmts(Dafny.ISequence<DAST._IStatement> stmts, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMPUTF16._IEnvironment env, bool isLast, RAST._IExpr earlyReturn, out RAST._IExpr generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      generated = RAST.Expr.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7295_declarations;
      _7295_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _7296_i;
      _7296_i = BigInteger.Zero;
      while ((_7296_i) < (new BigInteger((stmts).Count))) {
        DAST._IStatement _7297_stmt;
        _7297_stmt = (stmts).Select(_7296_i);
        RAST._IExpr _7298_stmtExpr;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7299_recIdents;
        RAST._IExpr _out2948;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2949;
        DCOMPUTF16.COMP.GenStmt(_7297_stmt, selfIdent, env, (isLast) && ((_7296_i) == ((new BigInteger((stmts).Count)) - (BigInteger.One))), earlyReturn, out _out2948, out _out2949);
        _7298_stmtExpr = _out2948;
        _7299_recIdents = _out2949;
        readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_7299_recIdents, _7295_declarations));
        DAST._IStatement _source269 = _7297_stmt;
        if (_source269.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _7300___mcc_h0 = _source269.dtor_name;
          DAST._IType _7301___mcc_h1 = _source269.dtor_typ;
          Std.Wrappers._IOption<DAST._IExpression> _7302___mcc_h2 = _source269.dtor_maybeValue;
          Dafny.ISequence<Dafny.Rune> _7303_name = _7300___mcc_h0;
          {
            _7295_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_7295_declarations, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_7303_name));
          }
        } else if (_source269.is_Assign) {
          DAST._IAssignLhs _7304___mcc_h6 = _source269.dtor_lhs;
          DAST._IExpression _7305___mcc_h7 = _source269.dtor_value;
        } else if (_source269.is_If) {
          DAST._IExpression _7306___mcc_h10 = _source269.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _7307___mcc_h11 = _source269.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _7308___mcc_h12 = _source269.dtor_els;
        } else if (_source269.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _7309___mcc_h16 = _source269.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _7310___mcc_h17 = _source269.dtor_body;
        } else if (_source269.is_While) {
          DAST._IExpression _7311___mcc_h20 = _source269.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _7312___mcc_h21 = _source269.dtor_body;
        } else if (_source269.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _7313___mcc_h24 = _source269.dtor_boundName;
          DAST._IType _7314___mcc_h25 = _source269.dtor_boundType;
          DAST._IExpression _7315___mcc_h26 = _source269.dtor_over;
          Dafny.ISequence<DAST._IStatement> _7316___mcc_h27 = _source269.dtor_body;
        } else if (_source269.is_Call) {
          DAST._IExpression _7317___mcc_h32 = _source269.dtor_on;
          DAST._ICallName _7318___mcc_h33 = _source269.dtor_callName;
          Dafny.ISequence<DAST._IType> _7319___mcc_h34 = _source269.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _7320___mcc_h35 = _source269.dtor_args;
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _7321___mcc_h36 = _source269.dtor_outs;
        } else if (_source269.is_Return) {
          DAST._IExpression _7322___mcc_h42 = _source269.dtor_expr;
        } else if (_source269.is_EarlyReturn) {
        } else if (_source269.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7323___mcc_h44 = _source269.dtor_toLabel;
        } else if (_source269.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _7324___mcc_h46 = _source269.dtor_body;
        } else if (_source269.is_JumpTailCallStart) {
        } else if (_source269.is_Halt) {
        } else {
          DAST._IExpression _7325___mcc_h48 = _source269.dtor_Print_a0;
        }
        generated = (generated).Then(_7298_stmtExpr);
        _7296_i = (_7296_i) + (BigInteger.One);
      }
    }
    public static void GenAssignLhs(DAST._IAssignLhs lhs, Dafny.ISequence<Dafny.Rune> rhs, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMPUTF16._IEnvironment env, out Dafny.ISequence<Dafny.Rune> generated, out bool needsIIFE, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      needsIIFE = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IAssignLhs _source270 = lhs;
      if (_source270.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _7326___mcc_h0 = _source270.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _source271 = _7326___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _7327___mcc_h1 = _source271;
        Dafny.ISequence<Dafny.Rune> _7328_id = _7327___mcc_h1;
        {
          if (((env).IsBorrowed(_7328_id)) || ((env).IsBorrowedMut(_7328_id))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), DCOMPUTF16.__default.escapeIdent(_7328_id));
          } else {
            generated = DCOMPUTF16.__default.escapeIdent(_7328_id);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_7328_id);
          needsIIFE = false;
        }
      } else if (_source270.is_Select) {
        DAST._IExpression _7329___mcc_h2 = _source270.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _7330___mcc_h3 = _source270.dtor_field;
        Dafny.ISequence<Dafny.Rune> _7331_field = _7330___mcc_h3;
        DAST._IExpression _7332_on = _7329___mcc_h2;
        {
          RAST._IExpr _7333_onExpr;
          DCOMPUTF16._IOwnership _7334_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7335_recIdents;
          RAST._IExpr _out2950;
          DCOMPUTF16._IOwnership _out2951;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2952;
          DCOMPUTF16.COMP.GenExpr(_7332_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out2950, out _out2951, out _out2952);
          _7333_onExpr = _out2950;
          _7334_onOwned = _out2951;
          _7335_recIdents = _out2952;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*("), (_7333_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _7331_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()) = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          readIdents = _7335_recIdents;
          needsIIFE = true;
        }
      } else {
        DAST._IExpression _7336___mcc_h4 = _source270.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _7337___mcc_h5 = _source270.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _7338_indices = _7337___mcc_h5;
        DAST._IExpression _7339_on = _7336___mcc_h4;
        {
          RAST._IExpr _7340_onExpr;
          DCOMPUTF16._IOwnership _7341_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7342_recIdents;
          RAST._IExpr _out2953;
          DCOMPUTF16._IOwnership _out2954;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2955;
          DCOMPUTF16.COMP.GenExpr(_7339_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out2953, out _out2954, out _out2955);
          _7340_onExpr = _out2953;
          _7341_onOwned = _out2954;
          _7342_recIdents = _out2955;
          readIdents = _7342_recIdents;
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          BigInteger _7343_i;
          _7343_i = BigInteger.Zero;
          while ((_7343_i) < (new BigInteger((_7338_indices).Count))) {
            RAST._IExpr _7344_idx;
            DCOMPUTF16._IOwnership _7345___v50;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7346_recIdentsIdx;
            RAST._IExpr _out2956;
            DCOMPUTF16._IOwnership _out2957;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2958;
            DCOMPUTF16.COMP.GenExpr((_7338_indices).Select(_7343_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2956, out _out2957, out _out2958);
            _7344_idx = _out2956;
            _7345___v50 = _out2957;
            _7346_recIdentsIdx = _out2958;
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let __idx")), Std.Strings.__default.OfNat(_7343_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = <usize as ::dafny_runtime::NumCast>::from(")), (_7344_idx)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap();\n"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _7346_recIdentsIdx);
            _7343_i = (_7343_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, (_7340_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()"));
          _7343_i = BigInteger.Zero;
          while ((_7343_i) < (new BigInteger((_7338_indices).Count))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[__idx")), Std.Strings.__default.OfNat(_7343_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            _7343_i = (_7343_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}"));
          needsIIFE = true;
        }
      }
    }
    public static void GenStmt(DAST._IStatement stmt, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMPUTF16._IEnvironment env, bool isLast, RAST._IExpr earlyReturn, out RAST._IExpr generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      generated = RAST.Expr.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IStatement _source272 = stmt;
      if (_source272.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _7347___mcc_h0 = _source272.dtor_name;
        DAST._IType _7348___mcc_h1 = _source272.dtor_typ;
        Std.Wrappers._IOption<DAST._IExpression> _7349___mcc_h2 = _source272.dtor_maybeValue;
        Std.Wrappers._IOption<DAST._IExpression> _source273 = _7349___mcc_h2;
        if (_source273.is_None) {
          DAST._IType _7350_typ = _7348___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _7351_name = _7347___mcc_h0;
          {
            RAST._IType _7352_typeString;
            RAST._IType _out2959;
            _out2959 = DCOMPUTF16.COMP.GenType(_7350_typ, true, false);
            _7352_typeString = _out2959;
            generated = RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMPUTF16.__default.escapeIdent(_7351_name), Std.Wrappers.Option<RAST._IType>.create_Some(_7352_typeString), Std.Wrappers.Option<RAST._IExpr>.create_None());
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IExpression _7353___mcc_h3 = _source273.dtor_value;
          DAST._IExpression _7354_expression = _7353___mcc_h3;
          DAST._IType _7355_typ = _7348___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _7356_name = _7347___mcc_h0;
          {
            RAST._IType _7357_typeString;
            RAST._IType _out2960;
            _out2960 = DCOMPUTF16.COMP.GenType(_7355_typ, true, false);
            _7357_typeString = _out2960;
            RAST._IExpr _7358_expr;
            DCOMPUTF16._IOwnership _7359___v51;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7360_recIdents;
            RAST._IExpr _out2961;
            DCOMPUTF16._IOwnership _out2962;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2963;
            DCOMPUTF16.COMP.GenExpr(_7354_expression, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2961, out _out2962, out _out2963);
            _7358_expr = _out2961;
            _7359___v51 = _out2962;
            _7360_recIdents = _out2963;
            generated = RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMPUTF16.__default.escapeIdent(_7356_name), Std.Wrappers.Option<RAST._IType>.create_Some(_7357_typeString), Std.Wrappers.Option<RAST._IExpr>.create_Some(_7358_expr));
            readIdents = _7360_recIdents;
          }
        }
      } else if (_source272.is_Assign) {
        DAST._IAssignLhs _7361___mcc_h4 = _source272.dtor_lhs;
        DAST._IExpression _7362___mcc_h5 = _source272.dtor_value;
        DAST._IExpression _7363_expression = _7362___mcc_h5;
        DAST._IAssignLhs _7364_lhs = _7361___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _7365_lhsGen;
          bool _7366_needsIIFE;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7367_recIdents;
          Dafny.ISequence<Dafny.Rune> _out2964;
          bool _out2965;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2966;
          DCOMPUTF16.COMP.GenAssignLhs(_7364_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), selfIdent, env, out _out2964, out _out2965, out _out2966);
          _7365_lhsGen = _out2964;
          _7366_needsIIFE = _out2965;
          _7367_recIdents = _out2966;
          RAST._IExpr _7368_exprGen;
          DCOMPUTF16._IOwnership _7369___v52;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7370_exprIdents;
          RAST._IExpr _out2967;
          DCOMPUTF16._IOwnership _out2968;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2969;
          DCOMPUTF16.COMP.GenExpr(_7363_expression, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2967, out _out2968, out _out2969);
          _7368_exprGen = _out2967;
          _7369___v52 = _out2968;
          _7370_exprIdents = _out2969;
          if (_7366_needsIIFE) {
            generated = RAST.Expr.create_Block(RAST.Expr.create_StmtExpr(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_CONST(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(_7368_exprGen)), RAST.Expr.create_RawExpr(_7365_lhsGen)));
          } else {
            generated = RAST.Expr.create_AssignVar(_7365_lhsGen, _7368_exprGen);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_7367_recIdents, _7370_exprIdents);
        }
      } else if (_source272.is_If) {
        DAST._IExpression _7371___mcc_h6 = _source272.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _7372___mcc_h7 = _source272.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _7373___mcc_h8 = _source272.dtor_els;
        Dafny.ISequence<DAST._IStatement> _7374_els = _7373___mcc_h8;
        Dafny.ISequence<DAST._IStatement> _7375_thn = _7372___mcc_h7;
        DAST._IExpression _7376_cond = _7371___mcc_h6;
        {
          RAST._IExpr _7377_cond;
          DCOMPUTF16._IOwnership _7378___v53;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7379_recIdents;
          RAST._IExpr _out2970;
          DCOMPUTF16._IOwnership _out2971;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2972;
          DCOMPUTF16.COMP.GenExpr(_7376_cond, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2970, out _out2971, out _out2972);
          _7377_cond = _out2970;
          _7378___v53 = _out2971;
          _7379_recIdents = _out2972;
          Dafny.ISequence<Dafny.Rune> _7380_condString;
          _7380_condString = (_7377_cond)._ToString(DCOMPUTF16.__default.IND);
          readIdents = _7379_recIdents;
          RAST._IExpr _7381_thn;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7382_thnIdents;
          RAST._IExpr _out2973;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2974;
          DCOMPUTF16.COMP.GenStmts(_7375_thn, selfIdent, env, isLast, earlyReturn, out _out2973, out _out2974);
          _7381_thn = _out2973;
          _7382_thnIdents = _out2974;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _7382_thnIdents);
          RAST._IExpr _7383_els;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7384_elsIdents;
          RAST._IExpr _out2975;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2976;
          DCOMPUTF16.COMP.GenStmts(_7374_els, selfIdent, env, isLast, earlyReturn, out _out2975, out _out2976);
          _7383_els = _out2975;
          _7384_elsIdents = _out2976;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _7384_elsIdents);
          generated = RAST.Expr.create_IfExpr(_7377_cond, _7381_thn, _7383_els);
        }
      } else if (_source272.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _7385___mcc_h9 = _source272.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _7386___mcc_h10 = _source272.dtor_body;
        Dafny.ISequence<DAST._IStatement> _7387_body = _7386___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _7388_lbl = _7385___mcc_h9;
        {
          RAST._IExpr _7389_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7390_bodyIdents;
          RAST._IExpr _out2977;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2978;
          DCOMPUTF16.COMP.GenStmts(_7387_body, selfIdent, env, isLast, earlyReturn, out _out2977, out _out2978);
          _7389_body = _out2977;
          _7390_bodyIdents = _out2978;
          readIdents = _7390_bodyIdents;
          generated = RAST.Expr.create_Labelled(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("label_"), _7388_lbl), RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_None(), RAST.Expr.create_StmtExpr(_7389_body, RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None()))));
        }
      } else if (_source272.is_While) {
        DAST._IExpression _7391___mcc_h11 = _source272.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _7392___mcc_h12 = _source272.dtor_body;
        Dafny.ISequence<DAST._IStatement> _7393_body = _7392___mcc_h12;
        DAST._IExpression _7394_cond = _7391___mcc_h11;
        {
          RAST._IExpr _7395_cond;
          DCOMPUTF16._IOwnership _7396___v54;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7397_recIdents;
          RAST._IExpr _out2979;
          DCOMPUTF16._IOwnership _out2980;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2981;
          DCOMPUTF16.COMP.GenExpr(_7394_cond, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2979, out _out2980, out _out2981);
          _7395_cond = _out2979;
          _7396___v54 = _out2980;
          _7397_recIdents = _out2981;
          readIdents = _7397_recIdents;
          RAST._IExpr _7398_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7399_bodyIdents;
          RAST._IExpr _out2982;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2983;
          DCOMPUTF16.COMP.GenStmts(_7393_body, selfIdent, env, false, earlyReturn, out _out2982, out _out2983);
          _7398_body = _out2982;
          _7399_bodyIdents = _out2983;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _7399_bodyIdents);
          generated = RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_Some(_7395_cond), _7398_body);
        }
      } else if (_source272.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _7400___mcc_h13 = _source272.dtor_boundName;
        DAST._IType _7401___mcc_h14 = _source272.dtor_boundType;
        DAST._IExpression _7402___mcc_h15 = _source272.dtor_over;
        Dafny.ISequence<DAST._IStatement> _7403___mcc_h16 = _source272.dtor_body;
        Dafny.ISequence<DAST._IStatement> _7404_body = _7403___mcc_h16;
        DAST._IExpression _7405_over = _7402___mcc_h15;
        DAST._IType _7406_boundType = _7401___mcc_h14;
        Dafny.ISequence<Dafny.Rune> _7407_boundName = _7400___mcc_h13;
        {
          RAST._IExpr _7408_over;
          DCOMPUTF16._IOwnership _7409___v55;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7410_recIdents;
          RAST._IExpr _out2984;
          DCOMPUTF16._IOwnership _out2985;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2986;
          DCOMPUTF16.COMP.GenExpr(_7405_over, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2984, out _out2985, out _out2986);
          _7408_over = _out2984;
          _7409___v55 = _out2985;
          _7410_recIdents = _out2986;
          RAST._IType _7411_boundTypeStr;
          RAST._IType _out2987;
          _out2987 = DCOMPUTF16.COMP.GenType(_7406_boundType, false, false);
          _7411_boundTypeStr = _out2987;
          readIdents = _7410_recIdents;
          RAST._IExpr _7412_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7413_bodyIdents;
          RAST._IExpr _out2988;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2989;
          DCOMPUTF16.COMP.GenStmts(_7404_body, selfIdent, (env).Add(_7407_boundName, DCOMPUTF16.Ownership.create_OwnershipBorrowed()), false, earlyReturn, out _out2988, out _out2989);
          _7412_body = _out2988;
          _7413_bodyIdents = _out2989;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _7413_bodyIdents), Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_7407_boundName));
          generated = RAST.Expr.create_For(DCOMPUTF16.__default.escapeIdent(_7407_boundName), _7408_over, _7412_body);
        }
      } else if (_source272.is_Call) {
        DAST._IExpression _7414___mcc_h17 = _source272.dtor_on;
        DAST._ICallName _7415___mcc_h18 = _source272.dtor_callName;
        Dafny.ISequence<DAST._IType> _7416___mcc_h19 = _source272.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _7417___mcc_h20 = _source272.dtor_args;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _7418___mcc_h21 = _source272.dtor_outs;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _7419_maybeOutVars = _7418___mcc_h21;
        Dafny.ISequence<DAST._IExpression> _7420_args = _7417___mcc_h20;
        Dafny.ISequence<DAST._IType> _7421_typeArgs = _7416___mcc_h19;
        DAST._ICallName _7422_name = _7415___mcc_h18;
        DAST._IExpression _7423_on = _7414___mcc_h17;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _7424_typeArgString;
          _7424_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_7421_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _7425_typeI;
            _7425_typeI = BigInteger.Zero;
            Dafny.ISequence<RAST._IType> _7426_typeArgsR;
            _7426_typeArgsR = Dafny.Sequence<RAST._IType>.FromElements();
            while ((_7425_typeI) < (new BigInteger((_7421_typeArgs).Count))) {
              RAST._IType _7427_tpe;
              RAST._IType _out2990;
              _out2990 = DCOMPUTF16.COMP.GenType((_7421_typeArgs).Select(_7425_typeI), false, false);
              _7427_tpe = _out2990;
              _7426_typeArgsR = Dafny.Sequence<RAST._IType>.Concat(_7426_typeArgsR, Dafny.Sequence<RAST._IType>.FromElements(_7427_tpe));
              _7425_typeI = (_7425_typeI) + (BigInteger.One);
            }
            _7424_typeArgString = (RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _7426_typeArgsR))._ToString(DCOMPUTF16.__default.IND);
          }
          Dafny.ISequence<Dafny.Rune> _7428_argString;
          _7428_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _7429_i;
          _7429_i = BigInteger.Zero;
          while ((_7429_i) < (new BigInteger((_7420_args).Count))) {
            if ((_7429_i).Sign == 1) {
              _7428_argString = Dafny.Sequence<Dafny.Rune>.Concat(_7428_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _7430_argExpr;
            DCOMPUTF16._IOwnership _7431_ownership;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7432_argIdents;
            RAST._IExpr _out2991;
            DCOMPUTF16._IOwnership _out2992;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2993;
            DCOMPUTF16.COMP.GenExpr((_7420_args).Select(_7429_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out2991, out _out2992, out _out2993);
            _7430_argExpr = _out2991;
            _7431_ownership = _out2992;
            _7432_argIdents = _out2993;
            Dafny.ISequence<Dafny.Rune> _7433_argExprString;
            _7433_argExprString = (_7430_argExpr)._ToString(DCOMPUTF16.__default.IND);
            _7428_argString = Dafny.Sequence<Dafny.Rune>.Concat(_7428_argString, _7433_argExprString);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _7432_argIdents);
            _7429_i = (_7429_i) + (BigInteger.One);
          }
          RAST._IExpr _7434_onExpr;
          DCOMPUTF16._IOwnership _7435___v56;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7436_enclosingIdents;
          RAST._IExpr _out2994;
          DCOMPUTF16._IOwnership _out2995;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2996;
          DCOMPUTF16.COMP.GenExpr(_7423_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out2994, out _out2995, out _out2996);
          _7434_onExpr = _out2994;
          _7435___v56 = _out2995;
          _7436_enclosingIdents = _out2996;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _7436_enclosingIdents);
          Dafny.ISequence<Dafny.Rune> _7437_enclosingString;
          _7437_enclosingString = (_7434_onExpr)._ToString(DCOMPUTF16.__default.IND);
          DAST._IExpression _source274 = _7423_on;
          if (_source274.is_Literal) {
            DAST._ILiteral _7438___mcc_h26 = _source274.dtor_Literal_a0;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _7439___mcc_h28 = _source274.dtor_Ident_a0;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7440___mcc_h30 = _source274.dtor_Companion_a0;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(_7437_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
            }
          } else if (_source274.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _7441___mcc_h32 = _source274.dtor_Tuple_a0;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7442___mcc_h34 = _source274.dtor_path;
            Dafny.ISequence<DAST._IType> _7443___mcc_h35 = _source274.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _7444___mcc_h36 = _source274.dtor_args;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _7445___mcc_h40 = _source274.dtor_dims;
            DAST._IType _7446___mcc_h41 = _source274.dtor_typ;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_DatatypeValue) {
            DAST._IDatatypeType _7447___mcc_h44 = _source274.dtor_datatypeType;
            Dafny.ISequence<DAST._IType> _7448___mcc_h45 = _source274.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _7449___mcc_h46 = _source274.dtor_variant;
            bool _7450___mcc_h47 = _source274.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _7451___mcc_h48 = _source274.dtor_contents;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_Convert) {
            DAST._IExpression _7452___mcc_h54 = _source274.dtor_value;
            DAST._IType _7453___mcc_h55 = _source274.dtor_from;
            DAST._IType _7454___mcc_h56 = _source274.dtor_typ;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_SeqConstruct) {
            DAST._IExpression _7455___mcc_h60 = _source274.dtor_length;
            DAST._IExpression _7456___mcc_h61 = _source274.dtor_elem;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _7457___mcc_h64 = _source274.dtor_elements;
            DAST._IType _7458___mcc_h65 = _source274.dtor_typ;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _7459___mcc_h68 = _source274.dtor_elements;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_MultisetValue) {
            Dafny.ISequence<DAST._IExpression> _7460___mcc_h70 = _source274.dtor_elements;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _7461___mcc_h72 = _source274.dtor_mapElems;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_MapBuilder) {
            DAST._IType _7462___mcc_h74 = _source274.dtor_keyType;
            DAST._IType _7463___mcc_h75 = _source274.dtor_valueType;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_SeqUpdate) {
            DAST._IExpression _7464___mcc_h78 = _source274.dtor_expr;
            DAST._IExpression _7465___mcc_h79 = _source274.dtor_indexExpr;
            DAST._IExpression _7466___mcc_h80 = _source274.dtor_value;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_MapUpdate) {
            DAST._IExpression _7467___mcc_h84 = _source274.dtor_expr;
            DAST._IExpression _7468___mcc_h85 = _source274.dtor_indexExpr;
            DAST._IExpression _7469___mcc_h86 = _source274.dtor_value;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_SetBuilder) {
            DAST._IType _7470___mcc_h90 = _source274.dtor_elemType;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_ToMultiset) {
            DAST._IExpression _7471___mcc_h92 = _source274.dtor_ToMultiset_a0;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_This) {
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_Ite) {
            DAST._IExpression _7472___mcc_h94 = _source274.dtor_cond;
            DAST._IExpression _7473___mcc_h95 = _source274.dtor_thn;
            DAST._IExpression _7474___mcc_h96 = _source274.dtor_els;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_UnOp) {
            DAST._IUnaryOp _7475___mcc_h100 = _source274.dtor_unOp;
            DAST._IExpression _7476___mcc_h101 = _source274.dtor_expr;
            DAST.Format._IUnOpFormat _7477___mcc_h102 = _source274.dtor_format1;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_BinOp) {
            DAST._IBinOp _7478___mcc_h106 = _source274.dtor_op;
            DAST._IExpression _7479___mcc_h107 = _source274.dtor_left;
            DAST._IExpression _7480___mcc_h108 = _source274.dtor_right;
            DAST.Format._IBinOpFormat _7481___mcc_h109 = _source274.dtor_format2;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_ArrayLen) {
            DAST._IExpression _7482___mcc_h114 = _source274.dtor_expr;
            BigInteger _7483___mcc_h115 = _source274.dtor_dim;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_MapKeys) {
            DAST._IExpression _7484___mcc_h118 = _source274.dtor_expr;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_MapValues) {
            DAST._IExpression _7485___mcc_h120 = _source274.dtor_expr;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_Select) {
            DAST._IExpression _7486___mcc_h122 = _source274.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _7487___mcc_h123 = _source274.dtor_field;
            bool _7488___mcc_h124 = _source274.dtor_isConstant;
            bool _7489___mcc_h125 = _source274.dtor_onDatatype;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_SelectFn) {
            DAST._IExpression _7490___mcc_h130 = _source274.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _7491___mcc_h131 = _source274.dtor_field;
            bool _7492___mcc_h132 = _source274.dtor_onDatatype;
            bool _7493___mcc_h133 = _source274.dtor_isStatic;
            BigInteger _7494___mcc_h134 = _source274.dtor_arity;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_Index) {
            DAST._IExpression _7495___mcc_h140 = _source274.dtor_expr;
            DAST._ICollKind _7496___mcc_h141 = _source274.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _7497___mcc_h142 = _source274.dtor_indices;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_IndexRange) {
            DAST._IExpression _7498___mcc_h146 = _source274.dtor_expr;
            bool _7499___mcc_h147 = _source274.dtor_isArray;
            Std.Wrappers._IOption<DAST._IExpression> _7500___mcc_h148 = _source274.dtor_low;
            Std.Wrappers._IOption<DAST._IExpression> _7501___mcc_h149 = _source274.dtor_high;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_TupleSelect) {
            DAST._IExpression _7502___mcc_h154 = _source274.dtor_expr;
            BigInteger _7503___mcc_h155 = _source274.dtor_index;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_Call) {
            DAST._IExpression _7504___mcc_h158 = _source274.dtor_on;
            DAST._ICallName _7505___mcc_h159 = _source274.dtor_callName;
            Dafny.ISequence<DAST._IType> _7506___mcc_h160 = _source274.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _7507___mcc_h161 = _source274.dtor_args;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _7508___mcc_h166 = _source274.dtor_params;
            DAST._IType _7509___mcc_h167 = _source274.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _7510___mcc_h168 = _source274.dtor_body;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _7511___mcc_h172 = _source274.dtor_values;
            DAST._IType _7512___mcc_h173 = _source274.dtor_retType;
            DAST._IExpression _7513___mcc_h174 = _source274.dtor_expr;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _7514___mcc_h178 = _source274.dtor_name;
            DAST._IType _7515___mcc_h179 = _source274.dtor_typ;
            DAST._IExpression _7516___mcc_h180 = _source274.dtor_value;
            DAST._IExpression _7517___mcc_h181 = _source274.dtor_iifeBody;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_Apply) {
            DAST._IExpression _7518___mcc_h186 = _source274.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _7519___mcc_h187 = _source274.dtor_args;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_TypeTest) {
            DAST._IExpression _7520___mcc_h190 = _source274.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7521___mcc_h191 = _source274.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _7522___mcc_h192 = _source274.dtor_variant;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_InitializationValue) {
            DAST._IType _7523___mcc_h196 = _source274.dtor_typ;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_BoolBoundedPool) {
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_SetBoundedPool) {
            DAST._IExpression _7524___mcc_h198 = _source274.dtor_of;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source274.is_SeqBoundedPool) {
            DAST._IExpression _7525___mcc_h200 = _source274.dtor_of;
            bool _7526___mcc_h201 = _source274.dtor_includeDuplicates;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else {
            DAST._IExpression _7527___mcc_h204 = _source274.dtor_lo;
            DAST._IExpression _7528___mcc_h205 = _source274.dtor_hi;
            {
              _7437_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7437_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          }
          Dafny.ISequence<Dafny.Rune> _7529_receiver;
          _7529_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source275 = _7419_maybeOutVars;
          if (_source275.is_None) {
          } else {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7530___mcc_h208 = _source275.dtor_value;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7531_outVars = _7530___mcc_h208;
            {
              if ((new BigInteger((_7531_outVars).Count)) > (BigInteger.One)) {
                _7529_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
              }
              BigInteger _7532_outI;
              _7532_outI = BigInteger.Zero;
              while ((_7532_outI) < (new BigInteger((_7531_outVars).Count))) {
                if ((_7532_outI).Sign == 1) {
                  _7529_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_7529_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                }
                Dafny.ISequence<Dafny.Rune> _7533_outVar;
                _7533_outVar = (_7531_outVars).Select(_7532_outI);
                _7529_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_7529_receiver, (_7533_outVar));
                _7532_outI = (_7532_outI) + (BigInteger.One);
              }
              if ((new BigInteger((_7531_outVars).Count)) > (BigInteger.One)) {
                _7529_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_7529_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
          }
          Dafny.ISequence<Dafny.Rune> _7534_renderedName;
          _7534_renderedName = ((System.Func<DAST._ICallName, Dafny.ISequence<Dafny.Rune>>)((_source276) => {
            if (_source276.is_Name) {
              Dafny.ISequence<Dafny.Rune> _7535___mcc_h209 = _source276.dtor_name;
              Dafny.ISequence<Dafny.Rune> _7536_name = _7535___mcc_h209;
              return DCOMPUTF16.__default.escapeIdent(_7536_name);
            } else if (_source276.is_MapBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else if (_source276.is_MapBuilderBuild) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            } else if (_source276.is_SetBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            }
          }))(_7422_name);
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((!(_7529_receiver).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_7529_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), _7437_enclosingString), _7534_renderedName), _7424_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _7428_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");")));
        }
      } else if (_source272.is_Return) {
        DAST._IExpression _7537___mcc_h22 = _source272.dtor_expr;
        DAST._IExpression _7538_expr = _7537___mcc_h22;
        {
          RAST._IExpr _7539_expr;
          DCOMPUTF16._IOwnership _7540___v59;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7541_recIdents;
          RAST._IExpr _out2997;
          DCOMPUTF16._IOwnership _out2998;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2999;
          DCOMPUTF16.COMP.GenExpr(_7538_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2997, out _out2998, out _out2999);
          _7539_expr = _out2997;
          _7540___v59 = _out2998;
          _7541_recIdents = _out2999;
          readIdents = _7541_recIdents;
          if (isLast) {
            generated = _7539_expr;
          } else {
            generated = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_Some(_7539_expr));
          }
        }
      } else if (_source272.is_EarlyReturn) {
        {
          generated = earlyReturn;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source272.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7542___mcc_h23 = _source272.dtor_toLabel;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7543_toLabel = _7542___mcc_h23;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source277 = _7543_toLabel;
          if (_source277.is_None) {
            {
              generated = RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None());
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _7544___mcc_h210 = _source277.dtor_value;
            Dafny.ISequence<Dafny.Rune> _7545_lbl = _7544___mcc_h210;
            {
              generated = RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("label_"), _7545_lbl)));
            }
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source272.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _7546___mcc_h24 = _source272.dtor_body;
        Dafny.ISequence<DAST._IStatement> _7547_body = _7546___mcc_h24;
        {
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
          if (!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) {
            generated = (generated).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self.clone()")))));
          }
          BigInteger _7548_paramI;
          _7548_paramI = BigInteger.Zero;
          while ((_7548_paramI) < (new BigInteger(((env).dtor_names).Count))) {
            Dafny.ISequence<Dafny.Rune> _7549_param;
            _7549_param = ((env).dtor_names).Select(_7548_paramI);
            generated = (generated).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMPUTF16.__default.escapeIdent(_7549_param), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.__default.Clone(RAST.Expr.create_Identifier(DCOMPUTF16.__default.escapeIdent(_7549_param))))));
            _7548_paramI = (_7548_paramI) + (BigInteger.One);
          }
          RAST._IExpr _7550_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7551_bodyIdents;
          RAST._IExpr _out3000;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3001;
          DCOMPUTF16.COMP.GenStmts(_7547_body, ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())), DCOMPUTF16.Environment.Empty(), false, earlyReturn, out _out3000, out _out3001);
          _7550_body = _out3000;
          _7551_bodyIdents = _out3001;
          readIdents = _7551_bodyIdents;
          generated = (generated).Then(RAST.Expr.create_Labelled(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("TAIL_CALL_START"), RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_None(), _7550_body)));
        }
      } else if (_source272.is_JumpTailCallStart) {
        {
          generated = RAST.Expr.create_Continue(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("TAIL_CALL_START")));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source272.is_Halt) {
        {
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else {
        DAST._IExpression _7552___mcc_h25 = _source272.dtor_Print_a0;
        DAST._IExpression _7553_e = _7552___mcc_h25;
        {
          RAST._IExpr _7554_printedExpr;
          DCOMPUTF16._IOwnership _7555_recOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7556_recIdents;
          RAST._IExpr _out3002;
          DCOMPUTF16._IOwnership _out3003;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3004;
          DCOMPUTF16.COMP.GenExpr(_7553_e, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out3002, out _out3003, out _out3004);
          _7554_printedExpr = _out3002;
          _7555_recOwnership = _out3003;
          _7556_recIdents = _out3004;
          Dafny.ISequence<Dafny.Rune> _7557_printedExprString;
          _7557_printedExprString = (_7554_printedExpr)._ToString(DCOMPUTF16.__default.IND);
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print!(\"{}\", ::dafny_runtime::DafnyPrintWrapper("), _7557_printedExprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("));")));
          readIdents = _7556_recIdents;
        }
      }
    }
    public static Std.Wrappers._IOption<RAST._IType> NewtypeToRustType(DAST._IType @base, DAST._INewtypeRange range)
    {
      DAST._INewtypeRange _source278 = range;
      if (_source278.is_U8) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U8());
      } else if (_source278.is_I8) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I8());
      } else if (_source278.is_U16) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U16());
      } else if (_source278.is_I16) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I16());
      } else if (_source278.is_U32) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U32());
      } else if (_source278.is_I32) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I32());
      } else if (_source278.is_U64) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U64());
      } else if (_source278.is_I64) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I64());
      } else if (_source278.is_U128) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U128());
      } else if (_source278.is_I128) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I128());
      } else if (_source278.is_BigInt) {
        return Std.Wrappers.Option<RAST._IType>.create_None();
      } else {
        return Std.Wrappers.Option<RAST._IType>.create_None();
      }
    }
    public static void FromOwned(RAST._IExpr r, DCOMPUTF16._IOwnership expectedOwnership, out RAST._IExpr @out, out DCOMPUTF16._IOwnership resultingOwnership)
    {
      @out = RAST.Expr.Default();
      resultingOwnership = DCOMPUTF16.Ownership.Default();
      if ((object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed()))) {
        @out = r;
        resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipOwned();
      } else if (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipBorrowed())) {
        @out = RAST.__default.Borrow(r);
        resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowed();
      } else {
        @out = RAST.__default.BorrowMut(r);
        resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowedMut();
      }
    }
    public static void FromOwnership(RAST._IExpr r, DCOMPUTF16._IOwnership ownership, DCOMPUTF16._IOwnership expectedOwnership, out RAST._IExpr @out, out DCOMPUTF16._IOwnership resultingOwnership)
    {
      @out = RAST.Expr.Default();
      resultingOwnership = DCOMPUTF16.Ownership.Default();
      if (object.Equals(ownership, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
        RAST._IExpr _out3005;
        DCOMPUTF16._IOwnership _out3006;
        DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3005, out _out3006);
        @out = _out3005;
        resultingOwnership = _out3006;
        return ;
      } else if ((object.Equals(ownership, DCOMPUTF16.Ownership.create_OwnershipBorrowed())) || (object.Equals(ownership, DCOMPUTF16.Ownership.create_OwnershipBorrowedMut()))) {
        if (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
          resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipOwned();
          @out = RAST.__default.Clone(r);
        } else if ((object.Equals(expectedOwnership, ownership)) || (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed()))) {
          resultingOwnership = ownership;
          @out = r;
        } else if ((object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipBorrowed())) && (object.Equals(ownership, DCOMPUTF16.Ownership.create_OwnershipBorrowedMut()))) {
          resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowed();
          @out = r;
        } else {
          resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowedMut();
          @out = RAST.__default.BorrowMut(r);
        }
      } else {
      }
    }
    public static void GenExprLiteral(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMPUTF16._IEnvironment env, DCOMPUTF16._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMPUTF16._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMPUTF16.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source279 = e;
      DAST._ILiteral _7558___mcc_h0 = _source279.dtor_Literal_a0;
      DAST._ILiteral _source280 = _7558___mcc_h0;
      if (_source280.is_BoolLiteral) {
        bool _7559___mcc_h1 = _source280.dtor_BoolLiteral_a0;
        if ((_7559___mcc_h1) == (false)) {
          {
            RAST._IExpr _out3007;
            DCOMPUTF16._IOwnership _out3008;
            DCOMPUTF16.COMP.FromOwned(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false")), expectedOwnership, out _out3007, out _out3008);
            r = _out3007;
            resultingOwnership = _out3008;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            return ;
          }
        } else {
          {
            RAST._IExpr _out3009;
            DCOMPUTF16._IOwnership _out3010;
            DCOMPUTF16.COMP.FromOwned(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true")), expectedOwnership, out _out3009, out _out3010);
            r = _out3009;
            resultingOwnership = _out3010;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            return ;
          }
        }
      } else if (_source280.is_IntLiteral) {
        Dafny.ISequence<Dafny.Rune> _7560___mcc_h2 = _source280.dtor_IntLiteral_a0;
        DAST._IType _7561___mcc_h3 = _source280.dtor_IntLiteral_a1;
        DAST._IType _7562_t = _7561___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _7563_i = _7560___mcc_h2;
        {
          DAST._IType _source281 = _7562_t;
          if (_source281.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7564___mcc_h100 = _source281.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _7565___mcc_h101 = _source281.dtor_typeArgs;
            DAST._IResolvedType _7566___mcc_h102 = _source281.dtor_resolved;
            DAST._IType _7567_o = _7562_t;
            {
              RAST._IType _7568_genType;
              RAST._IType _out3011;
              _out3011 = DCOMPUTF16.COMP.GenType(_7567_o, false, false);
              _7568_genType = _out3011;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_7563_i), _7568_genType);
            }
          } else if (_source281.is_Nullable) {
            DAST._IType _7569___mcc_h106 = _source281.dtor_Nullable_a0;
            DAST._IType _7570_o = _7562_t;
            {
              RAST._IType _7571_genType;
              RAST._IType _out3012;
              _out3012 = DCOMPUTF16.COMP.GenType(_7570_o, false, false);
              _7571_genType = _out3012;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_7563_i), _7571_genType);
            }
          } else if (_source281.is_Tuple) {
            Dafny.ISequence<DAST._IType> _7572___mcc_h108 = _source281.dtor_Tuple_a0;
            DAST._IType _7573_o = _7562_t;
            {
              RAST._IType _7574_genType;
              RAST._IType _out3013;
              _out3013 = DCOMPUTF16.COMP.GenType(_7573_o, false, false);
              _7574_genType = _out3013;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_7563_i), _7574_genType);
            }
          } else if (_source281.is_Array) {
            DAST._IType _7575___mcc_h110 = _source281.dtor_element;
            BigInteger _7576___mcc_h111 = _source281.dtor_dims;
            DAST._IType _7577_o = _7562_t;
            {
              RAST._IType _7578_genType;
              RAST._IType _out3014;
              _out3014 = DCOMPUTF16.COMP.GenType(_7577_o, false, false);
              _7578_genType = _out3014;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_7563_i), _7578_genType);
            }
          } else if (_source281.is_Seq) {
            DAST._IType _7579___mcc_h114 = _source281.dtor_element;
            DAST._IType _7580_o = _7562_t;
            {
              RAST._IType _7581_genType;
              RAST._IType _out3015;
              _out3015 = DCOMPUTF16.COMP.GenType(_7580_o, false, false);
              _7581_genType = _out3015;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_7563_i), _7581_genType);
            }
          } else if (_source281.is_Set) {
            DAST._IType _7582___mcc_h116 = _source281.dtor_element;
            DAST._IType _7583_o = _7562_t;
            {
              RAST._IType _7584_genType;
              RAST._IType _out3016;
              _out3016 = DCOMPUTF16.COMP.GenType(_7583_o, false, false);
              _7584_genType = _out3016;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_7563_i), _7584_genType);
            }
          } else if (_source281.is_Multiset) {
            DAST._IType _7585___mcc_h118 = _source281.dtor_element;
            DAST._IType _7586_o = _7562_t;
            {
              RAST._IType _7587_genType;
              RAST._IType _out3017;
              _out3017 = DCOMPUTF16.COMP.GenType(_7586_o, false, false);
              _7587_genType = _out3017;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_7563_i), _7587_genType);
            }
          } else if (_source281.is_Map) {
            DAST._IType _7588___mcc_h120 = _source281.dtor_key;
            DAST._IType _7589___mcc_h121 = _source281.dtor_value;
            DAST._IType _7590_o = _7562_t;
            {
              RAST._IType _7591_genType;
              RAST._IType _out3018;
              _out3018 = DCOMPUTF16.COMP.GenType(_7590_o, false, false);
              _7591_genType = _out3018;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_7563_i), _7591_genType);
            }
          } else if (_source281.is_SetBuilder) {
            DAST._IType _7592___mcc_h124 = _source281.dtor_element;
            DAST._IType _7593_o = _7562_t;
            {
              RAST._IType _7594_genType;
              RAST._IType _out3019;
              _out3019 = DCOMPUTF16.COMP.GenType(_7593_o, false, false);
              _7594_genType = _out3019;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_7563_i), _7594_genType);
            }
          } else if (_source281.is_MapBuilder) {
            DAST._IType _7595___mcc_h126 = _source281.dtor_key;
            DAST._IType _7596___mcc_h127 = _source281.dtor_value;
            DAST._IType _7597_o = _7562_t;
            {
              RAST._IType _7598_genType;
              RAST._IType _out3020;
              _out3020 = DCOMPUTF16.COMP.GenType(_7597_o, false, false);
              _7598_genType = _out3020;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_7563_i), _7598_genType);
            }
          } else if (_source281.is_Arrow) {
            Dafny.ISequence<DAST._IType> _7599___mcc_h130 = _source281.dtor_args;
            DAST._IType _7600___mcc_h131 = _source281.dtor_result;
            DAST._IType _7601_o = _7562_t;
            {
              RAST._IType _7602_genType;
              RAST._IType _out3021;
              _out3021 = DCOMPUTF16.COMP.GenType(_7601_o, false, false);
              _7602_genType = _out3021;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_7563_i), _7602_genType);
            }
          } else if (_source281.is_Primitive) {
            DAST._IPrimitive _7603___mcc_h134 = _source281.dtor_Primitive_a0;
            DAST._IPrimitive _source282 = _7603___mcc_h134;
            if (_source282.is_Int) {
              {
                if ((new BigInteger((_7563_i).Count)) <= (new BigInteger(4))) {
                  r = (((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyInt"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from"))).Apply1(RAST.Expr.create_LiteralInt(_7563_i));
                } else {
                  r = (((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyInt"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from"))).Apply1(RAST.Expr.create_LiteralString(_7563_i, true));
                }
              }
            } else if (_source282.is_Real) {
              DAST._IType _7604_o = _7562_t;
              {
                RAST._IType _7605_genType;
                RAST._IType _out3022;
                _out3022 = DCOMPUTF16.COMP.GenType(_7604_o, false, false);
                _7605_genType = _out3022;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_7563_i), _7605_genType);
              }
            } else if (_source282.is_String) {
              DAST._IType _7606_o = _7562_t;
              {
                RAST._IType _7607_genType;
                RAST._IType _out3023;
                _out3023 = DCOMPUTF16.COMP.GenType(_7606_o, false, false);
                _7607_genType = _out3023;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_7563_i), _7607_genType);
              }
            } else if (_source282.is_Bool) {
              DAST._IType _7608_o = _7562_t;
              {
                RAST._IType _7609_genType;
                RAST._IType _out3024;
                _out3024 = DCOMPUTF16.COMP.GenType(_7608_o, false, false);
                _7609_genType = _out3024;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_7563_i), _7609_genType);
              }
            } else {
              DAST._IType _7610_o = _7562_t;
              {
                RAST._IType _7611_genType;
                RAST._IType _out3025;
                _out3025 = DCOMPUTF16.COMP.GenType(_7610_o, false, false);
                _7611_genType = _out3025;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_7563_i), _7611_genType);
              }
            }
          } else if (_source281.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _7612___mcc_h136 = _source281.dtor_Passthrough_a0;
            DAST._IType _7613_o = _7562_t;
            {
              RAST._IType _7614_genType;
              RAST._IType _out3026;
              _out3026 = DCOMPUTF16.COMP.GenType(_7613_o, false, false);
              _7614_genType = _out3026;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_7563_i), _7614_genType);
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _7615___mcc_h138 = _source281.dtor_TypeArg_a0;
            DAST._IType _7616_o = _7562_t;
            {
              RAST._IType _7617_genType;
              RAST._IType _out3027;
              _out3027 = DCOMPUTF16.COMP.GenType(_7616_o, false, false);
              _7617_genType = _out3027;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_7563_i), _7617_genType);
            }
          }
          RAST._IExpr _out3028;
          DCOMPUTF16._IOwnership _out3029;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3028, out _out3029);
          r = _out3028;
          resultingOwnership = _out3029;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source280.is_DecLiteral) {
        Dafny.ISequence<Dafny.Rune> _7618___mcc_h4 = _source280.dtor_DecLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _7619___mcc_h5 = _source280.dtor_DecLiteral_a1;
        DAST._IType _7620___mcc_h6 = _source280.dtor_DecLiteral_a2;
        DAST._IType _7621_t = _7620___mcc_h6;
        Dafny.ISequence<Dafny.Rune> _7622_d = _7619___mcc_h5;
        Dafny.ISequence<Dafny.Rune> _7623_n = _7618___mcc_h4;
        {
          DAST._IType _source283 = _7621_t;
          if (_source283.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7624___mcc_h140 = _source283.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _7625___mcc_h141 = _source283.dtor_typeArgs;
            DAST._IResolvedType _7626___mcc_h142 = _source283.dtor_resolved;
            DAST._IType _7627_o = _7621_t;
            {
              RAST._IType _7628_genType;
              RAST._IType _out3030;
              _out3030 = DCOMPUTF16.COMP.GenType(_7627_o, false, false);
              _7628_genType = _out3030;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7623_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _7622_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _7628_genType);
            }
          } else if (_source283.is_Nullable) {
            DAST._IType _7629___mcc_h146 = _source283.dtor_Nullable_a0;
            DAST._IType _7630_o = _7621_t;
            {
              RAST._IType _7631_genType;
              RAST._IType _out3031;
              _out3031 = DCOMPUTF16.COMP.GenType(_7630_o, false, false);
              _7631_genType = _out3031;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7623_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _7622_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _7631_genType);
            }
          } else if (_source283.is_Tuple) {
            Dafny.ISequence<DAST._IType> _7632___mcc_h148 = _source283.dtor_Tuple_a0;
            DAST._IType _7633_o = _7621_t;
            {
              RAST._IType _7634_genType;
              RAST._IType _out3032;
              _out3032 = DCOMPUTF16.COMP.GenType(_7633_o, false, false);
              _7634_genType = _out3032;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7623_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _7622_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _7634_genType);
            }
          } else if (_source283.is_Array) {
            DAST._IType _7635___mcc_h150 = _source283.dtor_element;
            BigInteger _7636___mcc_h151 = _source283.dtor_dims;
            DAST._IType _7637_o = _7621_t;
            {
              RAST._IType _7638_genType;
              RAST._IType _out3033;
              _out3033 = DCOMPUTF16.COMP.GenType(_7637_o, false, false);
              _7638_genType = _out3033;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7623_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _7622_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _7638_genType);
            }
          } else if (_source283.is_Seq) {
            DAST._IType _7639___mcc_h154 = _source283.dtor_element;
            DAST._IType _7640_o = _7621_t;
            {
              RAST._IType _7641_genType;
              RAST._IType _out3034;
              _out3034 = DCOMPUTF16.COMP.GenType(_7640_o, false, false);
              _7641_genType = _out3034;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7623_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _7622_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _7641_genType);
            }
          } else if (_source283.is_Set) {
            DAST._IType _7642___mcc_h156 = _source283.dtor_element;
            DAST._IType _7643_o = _7621_t;
            {
              RAST._IType _7644_genType;
              RAST._IType _out3035;
              _out3035 = DCOMPUTF16.COMP.GenType(_7643_o, false, false);
              _7644_genType = _out3035;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7623_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _7622_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _7644_genType);
            }
          } else if (_source283.is_Multiset) {
            DAST._IType _7645___mcc_h158 = _source283.dtor_element;
            DAST._IType _7646_o = _7621_t;
            {
              RAST._IType _7647_genType;
              RAST._IType _out3036;
              _out3036 = DCOMPUTF16.COMP.GenType(_7646_o, false, false);
              _7647_genType = _out3036;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7623_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _7622_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _7647_genType);
            }
          } else if (_source283.is_Map) {
            DAST._IType _7648___mcc_h160 = _source283.dtor_key;
            DAST._IType _7649___mcc_h161 = _source283.dtor_value;
            DAST._IType _7650_o = _7621_t;
            {
              RAST._IType _7651_genType;
              RAST._IType _out3037;
              _out3037 = DCOMPUTF16.COMP.GenType(_7650_o, false, false);
              _7651_genType = _out3037;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7623_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _7622_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _7651_genType);
            }
          } else if (_source283.is_SetBuilder) {
            DAST._IType _7652___mcc_h164 = _source283.dtor_element;
            DAST._IType _7653_o = _7621_t;
            {
              RAST._IType _7654_genType;
              RAST._IType _out3038;
              _out3038 = DCOMPUTF16.COMP.GenType(_7653_o, false, false);
              _7654_genType = _out3038;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7623_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _7622_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _7654_genType);
            }
          } else if (_source283.is_MapBuilder) {
            DAST._IType _7655___mcc_h166 = _source283.dtor_key;
            DAST._IType _7656___mcc_h167 = _source283.dtor_value;
            DAST._IType _7657_o = _7621_t;
            {
              RAST._IType _7658_genType;
              RAST._IType _out3039;
              _out3039 = DCOMPUTF16.COMP.GenType(_7657_o, false, false);
              _7658_genType = _out3039;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7623_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _7622_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _7658_genType);
            }
          } else if (_source283.is_Arrow) {
            Dafny.ISequence<DAST._IType> _7659___mcc_h170 = _source283.dtor_args;
            DAST._IType _7660___mcc_h171 = _source283.dtor_result;
            DAST._IType _7661_o = _7621_t;
            {
              RAST._IType _7662_genType;
              RAST._IType _out3040;
              _out3040 = DCOMPUTF16.COMP.GenType(_7661_o, false, false);
              _7662_genType = _out3040;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7623_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _7622_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _7662_genType);
            }
          } else if (_source283.is_Primitive) {
            DAST._IPrimitive _7663___mcc_h174 = _source283.dtor_Primitive_a0;
            DAST._IPrimitive _source284 = _7663___mcc_h174;
            if (_source284.is_Int) {
              DAST._IType _7664_o = _7621_t;
              {
                RAST._IType _7665_genType;
                RAST._IType _out3041;
                _out3041 = DCOMPUTF16.COMP.GenType(_7664_o, false, false);
                _7665_genType = _out3041;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7623_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _7622_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _7665_genType);
              }
            } else if (_source284.is_Real) {
              {
                r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::new(::dafny_runtime::BigInt::parse_bytes(b\""), _7623_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap(), ::dafny_runtime::BigInt::parse_bytes(b\"")), _7622_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"))));
              }
            } else if (_source284.is_String) {
              DAST._IType _7666_o = _7621_t;
              {
                RAST._IType _7667_genType;
                RAST._IType _out3042;
                _out3042 = DCOMPUTF16.COMP.GenType(_7666_o, false, false);
                _7667_genType = _out3042;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7623_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _7622_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _7667_genType);
              }
            } else if (_source284.is_Bool) {
              DAST._IType _7668_o = _7621_t;
              {
                RAST._IType _7669_genType;
                RAST._IType _out3043;
                _out3043 = DCOMPUTF16.COMP.GenType(_7668_o, false, false);
                _7669_genType = _out3043;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7623_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _7622_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _7669_genType);
              }
            } else {
              DAST._IType _7670_o = _7621_t;
              {
                RAST._IType _7671_genType;
                RAST._IType _out3044;
                _out3044 = DCOMPUTF16.COMP.GenType(_7670_o, false, false);
                _7671_genType = _out3044;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7623_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _7622_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _7671_genType);
              }
            }
          } else if (_source283.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _7672___mcc_h176 = _source283.dtor_Passthrough_a0;
            DAST._IType _7673_o = _7621_t;
            {
              RAST._IType _7674_genType;
              RAST._IType _out3045;
              _out3045 = DCOMPUTF16.COMP.GenType(_7673_o, false, false);
              _7674_genType = _out3045;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7623_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _7622_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _7674_genType);
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _7675___mcc_h178 = _source283.dtor_TypeArg_a0;
            DAST._IType _7676_o = _7621_t;
            {
              RAST._IType _7677_genType;
              RAST._IType _out3046;
              _out3046 = DCOMPUTF16.COMP.GenType(_7676_o, false, false);
              _7677_genType = _out3046;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7623_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _7622_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _7677_genType);
            }
          }
          RAST._IExpr _out3047;
          DCOMPUTF16._IOwnership _out3048;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3047, out _out3048);
          r = _out3047;
          resultingOwnership = _out3048;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source280.is_StringLiteral) {
        Dafny.ISequence<Dafny.Rune> _7678___mcc_h7 = _source280.dtor_StringLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _7679_l = _7678___mcc_h7;
        {
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("string_of"))).Apply1(RAST.Expr.create_LiteralString(_7679_l, false));
          RAST._IExpr _out3049;
          DCOMPUTF16._IOwnership _out3050;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3049, out _out3050);
          r = _out3049;
          resultingOwnership = _out3050;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source280.is_CharLiteral) {
        Dafny.Rune _7680___mcc_h8 = _source280.dtor_CharLiteral_a0;
        Dafny.Rune _7681_c = _7680___mcc_h8;
        {
          r = RAST.Expr.create_LiteralInt(Std.Strings.__default.OfNat(new BigInteger((_7681_c).Value)));
          r = RAST.Expr.create_TypeAscription(r, DCOMPUTF16.__default.DafnyCharUnderlying);
          r = ((RAST.__default.dafny__runtime).MSel(DCOMPUTF16.__default.DafnyChar)).Apply1(r);
          RAST._IExpr _out3051;
          DCOMPUTF16._IOwnership _out3052;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3051, out _out3052);
          r = _out3051;
          resultingOwnership = _out3052;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else {
        DAST._IType _7682___mcc_h9 = _source280.dtor_Null_a0;
        DAST._IType _7683_tpe = _7682___mcc_h9;
        {
          RAST._IType _7684_tpeGen;
          RAST._IType _out3053;
          _out3053 = DCOMPUTF16.COMP.GenType(_7683_tpe, false, false);
          _7684_tpeGen = _out3053;
          r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("None")), _7684_tpeGen);
          RAST._IExpr _out3054;
          DCOMPUTF16._IOwnership _out3055;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3054, out _out3055);
          r = _out3054;
          resultingOwnership = _out3055;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      }
    }
    public static void GenExprBinary(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMPUTF16._IEnvironment env, DCOMPUTF16._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMPUTF16._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMPUTF16.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs53 = e;
      DAST._IBinOp _7685_op = _let_tmp_rhs53.dtor_op;
      DAST._IExpression _7686_lExpr = _let_tmp_rhs53.dtor_left;
      DAST._IExpression _7687_rExpr = _let_tmp_rhs53.dtor_right;
      DAST.Format._IBinOpFormat _7688_format = _let_tmp_rhs53.dtor_format2;
      bool _7689_becomesLeftCallsRight;
      _7689_becomesLeftCallsRight = ((System.Func<DAST._IBinOp, bool>)((_source285) => {
        if (_source285.is_Eq) {
          bool _7690___mcc_h0 = _source285.dtor_referential;
          bool _7691___mcc_h1 = _source285.dtor_nullable;
          return false;
        } else if (_source285.is_Div) {
          return false;
        } else if (_source285.is_EuclidianDiv) {
          return false;
        } else if (_source285.is_Mod) {
          return false;
        } else if (_source285.is_EuclidianMod) {
          return false;
        } else if (_source285.is_Lt) {
          return false;
        } else if (_source285.is_LtChar) {
          return false;
        } else if (_source285.is_Plus) {
          return false;
        } else if (_source285.is_Minus) {
          return false;
        } else if (_source285.is_Times) {
          return false;
        } else if (_source285.is_BitwiseAnd) {
          return false;
        } else if (_source285.is_BitwiseOr) {
          return false;
        } else if (_source285.is_BitwiseXor) {
          return false;
        } else if (_source285.is_BitwiseShiftRight) {
          return false;
        } else if (_source285.is_BitwiseShiftLeft) {
          return false;
        } else if (_source285.is_And) {
          return false;
        } else if (_source285.is_Or) {
          return false;
        } else if (_source285.is_In) {
          return false;
        } else if (_source285.is_SeqProperPrefix) {
          return false;
        } else if (_source285.is_SeqPrefix) {
          return false;
        } else if (_source285.is_SetMerge) {
          return true;
        } else if (_source285.is_SetSubtraction) {
          return true;
        } else if (_source285.is_SetIntersection) {
          return true;
        } else if (_source285.is_Subset) {
          return false;
        } else if (_source285.is_ProperSubset) {
          return false;
        } else if (_source285.is_SetDisjoint) {
          return true;
        } else if (_source285.is_MapMerge) {
          return true;
        } else if (_source285.is_MapSubtraction) {
          return true;
        } else if (_source285.is_MultisetMerge) {
          return true;
        } else if (_source285.is_MultisetSubtraction) {
          return true;
        } else if (_source285.is_MultisetIntersection) {
          return true;
        } else if (_source285.is_Submultiset) {
          return false;
        } else if (_source285.is_ProperSubmultiset) {
          return false;
        } else if (_source285.is_MultisetDisjoint) {
          return true;
        } else if (_source285.is_Concat) {
          return true;
        } else {
          Dafny.ISequence<Dafny.Rune> _7692___mcc_h4 = _source285.dtor_Passthrough_a0;
          return false;
        }
      }))(_7685_op);
      bool _7693_becomesRightCallsLeft;
      _7693_becomesRightCallsLeft = ((System.Func<DAST._IBinOp, bool>)((_source286) => {
        if (_source286.is_Eq) {
          bool _7694___mcc_h6 = _source286.dtor_referential;
          bool _7695___mcc_h7 = _source286.dtor_nullable;
          return false;
        } else if (_source286.is_Div) {
          return false;
        } else if (_source286.is_EuclidianDiv) {
          return false;
        } else if (_source286.is_Mod) {
          return false;
        } else if (_source286.is_EuclidianMod) {
          return false;
        } else if (_source286.is_Lt) {
          return false;
        } else if (_source286.is_LtChar) {
          return false;
        } else if (_source286.is_Plus) {
          return false;
        } else if (_source286.is_Minus) {
          return false;
        } else if (_source286.is_Times) {
          return false;
        } else if (_source286.is_BitwiseAnd) {
          return false;
        } else if (_source286.is_BitwiseOr) {
          return false;
        } else if (_source286.is_BitwiseXor) {
          return false;
        } else if (_source286.is_BitwiseShiftRight) {
          return false;
        } else if (_source286.is_BitwiseShiftLeft) {
          return false;
        } else if (_source286.is_And) {
          return false;
        } else if (_source286.is_Or) {
          return false;
        } else if (_source286.is_In) {
          return true;
        } else if (_source286.is_SeqProperPrefix) {
          return false;
        } else if (_source286.is_SeqPrefix) {
          return false;
        } else if (_source286.is_SetMerge) {
          return false;
        } else if (_source286.is_SetSubtraction) {
          return false;
        } else if (_source286.is_SetIntersection) {
          return false;
        } else if (_source286.is_Subset) {
          return false;
        } else if (_source286.is_ProperSubset) {
          return false;
        } else if (_source286.is_SetDisjoint) {
          return false;
        } else if (_source286.is_MapMerge) {
          return false;
        } else if (_source286.is_MapSubtraction) {
          return false;
        } else if (_source286.is_MultisetMerge) {
          return false;
        } else if (_source286.is_MultisetSubtraction) {
          return false;
        } else if (_source286.is_MultisetIntersection) {
          return false;
        } else if (_source286.is_Submultiset) {
          return false;
        } else if (_source286.is_ProperSubmultiset) {
          return false;
        } else if (_source286.is_MultisetDisjoint) {
          return false;
        } else if (_source286.is_Concat) {
          return false;
        } else {
          Dafny.ISequence<Dafny.Rune> _7696___mcc_h10 = _source286.dtor_Passthrough_a0;
          return false;
        }
      }))(_7685_op);
      bool _7697_becomesCallLeftRight;
      _7697_becomesCallLeftRight = ((System.Func<DAST._IBinOp, bool>)((_source287) => {
        if (_source287.is_Eq) {
          bool _7698___mcc_h12 = _source287.dtor_referential;
          bool _7699___mcc_h13 = _source287.dtor_nullable;
          if ((_7698___mcc_h12) == (true)) {
            if ((_7699___mcc_h13) == (false)) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else if (_source287.is_Div) {
          return false;
        } else if (_source287.is_EuclidianDiv) {
          return false;
        } else if (_source287.is_Mod) {
          return false;
        } else if (_source287.is_EuclidianMod) {
          return false;
        } else if (_source287.is_Lt) {
          return false;
        } else if (_source287.is_LtChar) {
          return false;
        } else if (_source287.is_Plus) {
          return false;
        } else if (_source287.is_Minus) {
          return false;
        } else if (_source287.is_Times) {
          return false;
        } else if (_source287.is_BitwiseAnd) {
          return false;
        } else if (_source287.is_BitwiseOr) {
          return false;
        } else if (_source287.is_BitwiseXor) {
          return false;
        } else if (_source287.is_BitwiseShiftRight) {
          return false;
        } else if (_source287.is_BitwiseShiftLeft) {
          return false;
        } else if (_source287.is_And) {
          return false;
        } else if (_source287.is_Or) {
          return false;
        } else if (_source287.is_In) {
          return false;
        } else if (_source287.is_SeqProperPrefix) {
          return false;
        } else if (_source287.is_SeqPrefix) {
          return false;
        } else if (_source287.is_SetMerge) {
          return false;
        } else if (_source287.is_SetSubtraction) {
          return false;
        } else if (_source287.is_SetIntersection) {
          return false;
        } else if (_source287.is_Subset) {
          return false;
        } else if (_source287.is_ProperSubset) {
          return false;
        } else if (_source287.is_SetDisjoint) {
          return false;
        } else if (_source287.is_MapMerge) {
          return false;
        } else if (_source287.is_MapSubtraction) {
          return false;
        } else if (_source287.is_MultisetMerge) {
          return false;
        } else if (_source287.is_MultisetSubtraction) {
          return false;
        } else if (_source287.is_MultisetIntersection) {
          return false;
        } else if (_source287.is_Submultiset) {
          return false;
        } else if (_source287.is_ProperSubmultiset) {
          return false;
        } else if (_source287.is_MultisetDisjoint) {
          return false;
        } else if (_source287.is_Concat) {
          return false;
        } else {
          Dafny.ISequence<Dafny.Rune> _7700___mcc_h16 = _source287.dtor_Passthrough_a0;
          return false;
        }
      }))(_7685_op);
      DCOMPUTF16._IOwnership _7701_expectedLeftOwnership;
      _7701_expectedLeftOwnership = ((_7689_becomesLeftCallsRight) ? (DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed()) : ((((_7693_becomesRightCallsLeft) || (_7697_becomesCallLeftRight)) ? (DCOMPUTF16.Ownership.create_OwnershipBorrowed()) : (DCOMPUTF16.Ownership.create_OwnershipOwned()))));
      DCOMPUTF16._IOwnership _7702_expectedRightOwnership;
      _7702_expectedRightOwnership = (((_7689_becomesLeftCallsRight) || (_7697_becomesCallLeftRight)) ? (DCOMPUTF16.Ownership.create_OwnershipBorrowed()) : (((_7693_becomesRightCallsLeft) ? (DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed()) : (DCOMPUTF16.Ownership.create_OwnershipOwned()))));
      RAST._IExpr _7703_left;
      DCOMPUTF16._IOwnership _7704___v64;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7705_recIdentsL;
      RAST._IExpr _out3056;
      DCOMPUTF16._IOwnership _out3057;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3058;
      DCOMPUTF16.COMP.GenExpr(_7686_lExpr, selfIdent, env, _7701_expectedLeftOwnership, out _out3056, out _out3057, out _out3058);
      _7703_left = _out3056;
      _7704___v64 = _out3057;
      _7705_recIdentsL = _out3058;
      RAST._IExpr _7706_right;
      DCOMPUTF16._IOwnership _7707___v65;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7708_recIdentsR;
      RAST._IExpr _out3059;
      DCOMPUTF16._IOwnership _out3060;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3061;
      DCOMPUTF16.COMP.GenExpr(_7687_rExpr, selfIdent, env, _7702_expectedRightOwnership, out _out3059, out _out3060, out _out3061);
      _7706_right = _out3059;
      _7707___v65 = _out3060;
      _7708_recIdentsR = _out3061;
      DAST._IBinOp _source288 = _7685_op;
      if (_source288.is_Eq) {
        bool _7709___mcc_h18 = _source288.dtor_referential;
        bool _7710___mcc_h19 = _source288.dtor_nullable;
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_7685_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_7685_op), _7703_left, _7706_right, _7688_format);
          } else {
            DAST._IBinOp _source289 = _7685_op;
            if (_source289.is_Eq) {
              bool _7711___mcc_h24 = _source289.dtor_referential;
              bool _7712___mcc_h25 = _source289.dtor_nullable;
              bool _7713_nullable = _7712___mcc_h25;
              bool _7714_referential = _7711___mcc_h24;
              {
                if (_7714_referential) {
                  if (_7713_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _7703_left, _7706_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source289.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
              }
            } else if (_source289.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7715___mcc_h26 = _source289.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _7716_op = _7715___mcc_h26;
              {
                r = RAST.Expr.create_BinaryOp(_7716_op, _7703_left, _7706_right, _7688_format);
              }
            }
          }
        }
      } else if (_source288.is_Div) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_7685_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_7685_op), _7703_left, _7706_right, _7688_format);
          } else {
            DAST._IBinOp _source290 = _7685_op;
            if (_source290.is_Eq) {
              bool _7717___mcc_h27 = _source290.dtor_referential;
              bool _7718___mcc_h28 = _source290.dtor_nullable;
              bool _7719_nullable = _7718___mcc_h28;
              bool _7720_referential = _7717___mcc_h27;
              {
                if (_7720_referential) {
                  if (_7719_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _7703_left, _7706_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source290.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
              }
            } else if (_source290.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7721___mcc_h29 = _source290.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _7722_op = _7721___mcc_h29;
              {
                r = RAST.Expr.create_BinaryOp(_7722_op, _7703_left, _7706_right, _7688_format);
              }
            }
          }
        }
      } else if (_source288.is_EuclidianDiv) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_7685_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_7685_op), _7703_left, _7706_right, _7688_format);
          } else {
            DAST._IBinOp _source291 = _7685_op;
            if (_source291.is_Eq) {
              bool _7723___mcc_h30 = _source291.dtor_referential;
              bool _7724___mcc_h31 = _source291.dtor_nullable;
              bool _7725_nullable = _7724___mcc_h31;
              bool _7726_referential = _7723___mcc_h30;
              {
                if (_7726_referential) {
                  if (_7725_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _7703_left, _7706_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source291.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
              }
            } else if (_source291.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7727___mcc_h32 = _source291.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _7728_op = _7727___mcc_h32;
              {
                r = RAST.Expr.create_BinaryOp(_7728_op, _7703_left, _7706_right, _7688_format);
              }
            }
          }
        }
      } else if (_source288.is_Mod) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_7685_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_7685_op), _7703_left, _7706_right, _7688_format);
          } else {
            DAST._IBinOp _source292 = _7685_op;
            if (_source292.is_Eq) {
              bool _7729___mcc_h33 = _source292.dtor_referential;
              bool _7730___mcc_h34 = _source292.dtor_nullable;
              bool _7731_nullable = _7730___mcc_h34;
              bool _7732_referential = _7729___mcc_h33;
              {
                if (_7732_referential) {
                  if (_7731_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _7703_left, _7706_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source292.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
              }
            } else if (_source292.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7733___mcc_h35 = _source292.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _7734_op = _7733___mcc_h35;
              {
                r = RAST.Expr.create_BinaryOp(_7734_op, _7703_left, _7706_right, _7688_format);
              }
            }
          }
        }
      } else if (_source288.is_EuclidianMod) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_7685_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_7685_op), _7703_left, _7706_right, _7688_format);
          } else {
            DAST._IBinOp _source293 = _7685_op;
            if (_source293.is_Eq) {
              bool _7735___mcc_h36 = _source293.dtor_referential;
              bool _7736___mcc_h37 = _source293.dtor_nullable;
              bool _7737_nullable = _7736___mcc_h37;
              bool _7738_referential = _7735___mcc_h36;
              {
                if (_7738_referential) {
                  if (_7737_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _7703_left, _7706_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source293.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
              }
            } else if (_source293.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7739___mcc_h38 = _source293.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _7740_op = _7739___mcc_h38;
              {
                r = RAST.Expr.create_BinaryOp(_7740_op, _7703_left, _7706_right, _7688_format);
              }
            }
          }
        }
      } else if (_source288.is_Lt) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_7685_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_7685_op), _7703_left, _7706_right, _7688_format);
          } else {
            DAST._IBinOp _source294 = _7685_op;
            if (_source294.is_Eq) {
              bool _7741___mcc_h39 = _source294.dtor_referential;
              bool _7742___mcc_h40 = _source294.dtor_nullable;
              bool _7743_nullable = _7742___mcc_h40;
              bool _7744_referential = _7741___mcc_h39;
              {
                if (_7744_referential) {
                  if (_7743_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _7703_left, _7706_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source294.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
              }
            } else if (_source294.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7745___mcc_h41 = _source294.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _7746_op = _7745___mcc_h41;
              {
                r = RAST.Expr.create_BinaryOp(_7746_op, _7703_left, _7706_right, _7688_format);
              }
            }
          }
        }
      } else if (_source288.is_LtChar) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_7685_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_7685_op), _7703_left, _7706_right, _7688_format);
          } else {
            DAST._IBinOp _source295 = _7685_op;
            if (_source295.is_Eq) {
              bool _7747___mcc_h42 = _source295.dtor_referential;
              bool _7748___mcc_h43 = _source295.dtor_nullable;
              bool _7749_nullable = _7748___mcc_h43;
              bool _7750_referential = _7747___mcc_h42;
              {
                if (_7750_referential) {
                  if (_7749_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _7703_left, _7706_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source295.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
              }
            } else if (_source295.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7751___mcc_h44 = _source295.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _7752_op = _7751___mcc_h44;
              {
                r = RAST.Expr.create_BinaryOp(_7752_op, _7703_left, _7706_right, _7688_format);
              }
            }
          }
        }
      } else if (_source288.is_Plus) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_7685_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_7685_op), _7703_left, _7706_right, _7688_format);
          } else {
            DAST._IBinOp _source296 = _7685_op;
            if (_source296.is_Eq) {
              bool _7753___mcc_h45 = _source296.dtor_referential;
              bool _7754___mcc_h46 = _source296.dtor_nullable;
              bool _7755_nullable = _7754___mcc_h46;
              bool _7756_referential = _7753___mcc_h45;
              {
                if (_7756_referential) {
                  if (_7755_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _7703_left, _7706_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source296.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
              }
            } else if (_source296.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7757___mcc_h47 = _source296.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _7758_op = _7757___mcc_h47;
              {
                r = RAST.Expr.create_BinaryOp(_7758_op, _7703_left, _7706_right, _7688_format);
              }
            }
          }
        }
      } else if (_source288.is_Minus) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_7685_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_7685_op), _7703_left, _7706_right, _7688_format);
          } else {
            DAST._IBinOp _source297 = _7685_op;
            if (_source297.is_Eq) {
              bool _7759___mcc_h48 = _source297.dtor_referential;
              bool _7760___mcc_h49 = _source297.dtor_nullable;
              bool _7761_nullable = _7760___mcc_h49;
              bool _7762_referential = _7759___mcc_h48;
              {
                if (_7762_referential) {
                  if (_7761_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _7703_left, _7706_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source297.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
              }
            } else if (_source297.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7763___mcc_h50 = _source297.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _7764_op = _7763___mcc_h50;
              {
                r = RAST.Expr.create_BinaryOp(_7764_op, _7703_left, _7706_right, _7688_format);
              }
            }
          }
        }
      } else if (_source288.is_Times) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_7685_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_7685_op), _7703_left, _7706_right, _7688_format);
          } else {
            DAST._IBinOp _source298 = _7685_op;
            if (_source298.is_Eq) {
              bool _7765___mcc_h51 = _source298.dtor_referential;
              bool _7766___mcc_h52 = _source298.dtor_nullable;
              bool _7767_nullable = _7766___mcc_h52;
              bool _7768_referential = _7765___mcc_h51;
              {
                if (_7768_referential) {
                  if (_7767_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _7703_left, _7706_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source298.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
              }
            } else if (_source298.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7769___mcc_h53 = _source298.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _7770_op = _7769___mcc_h53;
              {
                r = RAST.Expr.create_BinaryOp(_7770_op, _7703_left, _7706_right, _7688_format);
              }
            }
          }
        }
      } else if (_source288.is_BitwiseAnd) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_7685_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_7685_op), _7703_left, _7706_right, _7688_format);
          } else {
            DAST._IBinOp _source299 = _7685_op;
            if (_source299.is_Eq) {
              bool _7771___mcc_h54 = _source299.dtor_referential;
              bool _7772___mcc_h55 = _source299.dtor_nullable;
              bool _7773_nullable = _7772___mcc_h55;
              bool _7774_referential = _7771___mcc_h54;
              {
                if (_7774_referential) {
                  if (_7773_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _7703_left, _7706_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source299.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
              }
            } else if (_source299.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7775___mcc_h56 = _source299.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _7776_op = _7775___mcc_h56;
              {
                r = RAST.Expr.create_BinaryOp(_7776_op, _7703_left, _7706_right, _7688_format);
              }
            }
          }
        }
      } else if (_source288.is_BitwiseOr) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_7685_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_7685_op), _7703_left, _7706_right, _7688_format);
          } else {
            DAST._IBinOp _source300 = _7685_op;
            if (_source300.is_Eq) {
              bool _7777___mcc_h57 = _source300.dtor_referential;
              bool _7778___mcc_h58 = _source300.dtor_nullable;
              bool _7779_nullable = _7778___mcc_h58;
              bool _7780_referential = _7777___mcc_h57;
              {
                if (_7780_referential) {
                  if (_7779_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _7703_left, _7706_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source300.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
              }
            } else if (_source300.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7781___mcc_h59 = _source300.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _7782_op = _7781___mcc_h59;
              {
                r = RAST.Expr.create_BinaryOp(_7782_op, _7703_left, _7706_right, _7688_format);
              }
            }
          }
        }
      } else if (_source288.is_BitwiseXor) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_7685_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_7685_op), _7703_left, _7706_right, _7688_format);
          } else {
            DAST._IBinOp _source301 = _7685_op;
            if (_source301.is_Eq) {
              bool _7783___mcc_h60 = _source301.dtor_referential;
              bool _7784___mcc_h61 = _source301.dtor_nullable;
              bool _7785_nullable = _7784___mcc_h61;
              bool _7786_referential = _7783___mcc_h60;
              {
                if (_7786_referential) {
                  if (_7785_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _7703_left, _7706_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source301.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
              }
            } else if (_source301.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7787___mcc_h62 = _source301.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _7788_op = _7787___mcc_h62;
              {
                r = RAST.Expr.create_BinaryOp(_7788_op, _7703_left, _7706_right, _7688_format);
              }
            }
          }
        }
      } else if (_source288.is_BitwiseShiftRight) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_7685_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_7685_op), _7703_left, _7706_right, _7688_format);
          } else {
            DAST._IBinOp _source302 = _7685_op;
            if (_source302.is_Eq) {
              bool _7789___mcc_h63 = _source302.dtor_referential;
              bool _7790___mcc_h64 = _source302.dtor_nullable;
              bool _7791_nullable = _7790___mcc_h64;
              bool _7792_referential = _7789___mcc_h63;
              {
                if (_7792_referential) {
                  if (_7791_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _7703_left, _7706_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source302.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
              }
            } else if (_source302.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7793___mcc_h65 = _source302.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _7794_op = _7793___mcc_h65;
              {
                r = RAST.Expr.create_BinaryOp(_7794_op, _7703_left, _7706_right, _7688_format);
              }
            }
          }
        }
      } else if (_source288.is_BitwiseShiftLeft) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_7685_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_7685_op), _7703_left, _7706_right, _7688_format);
          } else {
            DAST._IBinOp _source303 = _7685_op;
            if (_source303.is_Eq) {
              bool _7795___mcc_h66 = _source303.dtor_referential;
              bool _7796___mcc_h67 = _source303.dtor_nullable;
              bool _7797_nullable = _7796___mcc_h67;
              bool _7798_referential = _7795___mcc_h66;
              {
                if (_7798_referential) {
                  if (_7797_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _7703_left, _7706_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source303.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
              }
            } else if (_source303.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7799___mcc_h68 = _source303.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _7800_op = _7799___mcc_h68;
              {
                r = RAST.Expr.create_BinaryOp(_7800_op, _7703_left, _7706_right, _7688_format);
              }
            }
          }
        }
      } else if (_source288.is_And) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_7685_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_7685_op), _7703_left, _7706_right, _7688_format);
          } else {
            DAST._IBinOp _source304 = _7685_op;
            if (_source304.is_Eq) {
              bool _7801___mcc_h69 = _source304.dtor_referential;
              bool _7802___mcc_h70 = _source304.dtor_nullable;
              bool _7803_nullable = _7802___mcc_h70;
              bool _7804_referential = _7801___mcc_h69;
              {
                if (_7804_referential) {
                  if (_7803_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _7703_left, _7706_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source304.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
              }
            } else if (_source304.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7805___mcc_h71 = _source304.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _7806_op = _7805___mcc_h71;
              {
                r = RAST.Expr.create_BinaryOp(_7806_op, _7703_left, _7706_right, _7688_format);
              }
            }
          }
        }
      } else if (_source288.is_Or) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_7685_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_7685_op), _7703_left, _7706_right, _7688_format);
          } else {
            DAST._IBinOp _source305 = _7685_op;
            if (_source305.is_Eq) {
              bool _7807___mcc_h72 = _source305.dtor_referential;
              bool _7808___mcc_h73 = _source305.dtor_nullable;
              bool _7809_nullable = _7808___mcc_h73;
              bool _7810_referential = _7807___mcc_h72;
              {
                if (_7810_referential) {
                  if (_7809_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _7703_left, _7706_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source305.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
              }
            } else if (_source305.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7811___mcc_h74 = _source305.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _7812_op = _7811___mcc_h74;
              {
                r = RAST.Expr.create_BinaryOp(_7812_op, _7703_left, _7706_right, _7688_format);
              }
            }
          }
        }
      } else if (_source288.is_In) {
        {
          r = ((_7706_right).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("contains"))).Apply1(_7703_left);
        }
      } else if (_source288.is_SeqProperPrefix) {
        r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _7703_left, _7706_right, _7688_format);
      } else if (_source288.is_SeqPrefix) {
        r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _7703_left, _7706_right, _7688_format);
      } else if (_source288.is_SetMerge) {
        {
          r = ((_7703_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_7706_right);
        }
      } else if (_source288.is_SetSubtraction) {
        {
          r = ((_7703_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_7706_right);
        }
      } else if (_source288.is_SetIntersection) {
        {
          r = ((_7703_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("intersect"))).Apply1(_7706_right);
        }
      } else if (_source288.is_Subset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _7703_left, _7706_right, _7688_format);
        }
      } else if (_source288.is_ProperSubset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _7703_left, _7706_right, _7688_format);
        }
      } else if (_source288.is_SetDisjoint) {
        {
          r = ((_7703_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("disjoint"))).Apply1(_7706_right);
        }
      } else if (_source288.is_MapMerge) {
        {
          r = ((_7703_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_7706_right);
        }
      } else if (_source288.is_MapSubtraction) {
        {
          r = ((_7703_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_7706_right);
        }
      } else if (_source288.is_MultisetMerge) {
        {
          r = ((_7703_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_7706_right);
        }
      } else if (_source288.is_MultisetSubtraction) {
        {
          r = ((_7703_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_7706_right);
        }
      } else if (_source288.is_MultisetIntersection) {
        {
          r = ((_7703_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("intersect"))).Apply1(_7706_right);
        }
      } else if (_source288.is_Submultiset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _7703_left, _7706_right, _7688_format);
        }
      } else if (_source288.is_ProperSubmultiset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _7703_left, _7706_right, _7688_format);
        }
      } else if (_source288.is_MultisetDisjoint) {
        {
          r = ((_7703_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("disjoint"))).Apply1(_7706_right);
        }
      } else if (_source288.is_Concat) {
        {
          r = ((_7703_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("concat"))).Apply1(_7706_right);
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _7813___mcc_h22 = _source288.dtor_Passthrough_a0;
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_7685_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_7685_op), _7703_left, _7706_right, _7688_format);
          } else {
            DAST._IBinOp _source306 = _7685_op;
            if (_source306.is_Eq) {
              bool _7814___mcc_h75 = _source306.dtor_referential;
              bool _7815___mcc_h76 = _source306.dtor_nullable;
              bool _7816_nullable = _7815___mcc_h76;
              bool _7817_referential = _7814___mcc_h75;
              {
                if (_7817_referential) {
                  if (_7816_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _7703_left, _7706_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source306.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
              }
            } else if (_source306.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7703_left, _7706_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7818___mcc_h77 = _source306.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _7819_op = _7818___mcc_h77;
              {
                r = RAST.Expr.create_BinaryOp(_7819_op, _7703_left, _7706_right, _7688_format);
              }
            }
          }
        }
      }
      RAST._IExpr _out3062;
      DCOMPUTF16._IOwnership _out3063;
      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3062, out _out3063);
      r = _out3062;
      resultingOwnership = _out3063;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_7705_recIdentsL, _7708_recIdentsR);
      return ;
    }
    public static void GenExprConvert(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMPUTF16._IEnvironment env, DCOMPUTF16._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMPUTF16._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMPUTF16.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs54 = e;
      DAST._IExpression _7820_expr = _let_tmp_rhs54.dtor_value;
      DAST._IType _7821_fromTpe = _let_tmp_rhs54.dtor_from;
      DAST._IType _7822_toTpe = _let_tmp_rhs54.dtor_typ;
      if (object.Equals(_7821_fromTpe, _7822_toTpe)) {
        RAST._IExpr _7823_recursiveGen;
        DCOMPUTF16._IOwnership _7824_recOwned;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7825_recIdents;
        RAST._IExpr _out3064;
        DCOMPUTF16._IOwnership _out3065;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3066;
        DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3064, out _out3065, out _out3066);
        _7823_recursiveGen = _out3064;
        _7824_recOwned = _out3065;
        _7825_recIdents = _out3066;
        r = _7823_recursiveGen;
        RAST._IExpr _out3067;
        DCOMPUTF16._IOwnership _out3068;
        DCOMPUTF16.COMP.FromOwnership(r, _7824_recOwned, expectedOwnership, out _out3067, out _out3068);
        r = _out3067;
        resultingOwnership = _out3068;
        readIdents = _7825_recIdents;
      } else {
        _System._ITuple2<DAST._IType, DAST._IType> _source307 = _System.Tuple2<DAST._IType, DAST._IType>.create(_7821_fromTpe, _7822_toTpe);
        DAST._IType _7826___mcc_h0 = _source307.dtor__0;
        DAST._IType _7827___mcc_h1 = _source307.dtor__1;
        DAST._IType _source308 = _7826___mcc_h0;
        if (_source308.is_Path) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7828___mcc_h4 = _source308.dtor_Path_a0;
          Dafny.ISequence<DAST._IType> _7829___mcc_h5 = _source308.dtor_typeArgs;
          DAST._IResolvedType _7830___mcc_h6 = _source308.dtor_resolved;
          DAST._IResolvedType _source309 = _7830___mcc_h6;
          if (_source309.is_Datatype) {
            DAST._IDatatypeType _7831___mcc_h16 = _source309.dtor_datatypeType;
            DAST._IType _source310 = _7827___mcc_h1;
            if (_source310.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7832___mcc_h20 = _source310.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _7833___mcc_h21 = _source310.dtor_typeArgs;
              DAST._IResolvedType _7834___mcc_h22 = _source310.dtor_resolved;
              DAST._IResolvedType _source311 = _7834___mcc_h22;
              if (_source311.is_Datatype) {
                DAST._IDatatypeType _7835___mcc_h26 = _source311.dtor_datatypeType;
                {
                  RAST._IExpr _7836_recursiveGen;
                  DCOMPUTF16._IOwnership _7837_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7838_recIdents;
                  RAST._IExpr _out3069;
                  DCOMPUTF16._IOwnership _out3070;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3071;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3069, out _out3070, out _out3071);
                  _7836_recursiveGen = _out3069;
                  _7837_recOwned = _out3070;
                  _7838_recIdents = _out3071;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7836_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out3072;
                  DCOMPUTF16._IOwnership _out3073;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3072, out _out3073);
                  r = _out3072;
                  resultingOwnership = _out3073;
                  readIdents = _7838_recIdents;
                }
              } else if (_source311.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7839___mcc_h28 = _source311.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _7840___mcc_h29 = _source311.dtor_attributes;
                {
                  RAST._IExpr _7841_recursiveGen;
                  DCOMPUTF16._IOwnership _7842_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7843_recIdents;
                  RAST._IExpr _out3074;
                  DCOMPUTF16._IOwnership _out3075;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3076;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3074, out _out3075, out _out3076);
                  _7841_recursiveGen = _out3074;
                  _7842_recOwned = _out3075;
                  _7843_recIdents = _out3076;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7841_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out3077;
                  DCOMPUTF16._IOwnership _out3078;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3077, out _out3078);
                  r = _out3077;
                  resultingOwnership = _out3078;
                  readIdents = _7843_recIdents;
                }
              } else {
                DAST._IType _7844___mcc_h32 = _source311.dtor_baseType;
                DAST._INewtypeRange _7845___mcc_h33 = _source311.dtor_range;
                bool _7846___mcc_h34 = _source311.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _7847___mcc_h35 = _source311.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _7848_attributes = _7847___mcc_h35;
                bool _7849_erase = _7846___mcc_h34;
                DAST._INewtypeRange _7850_range = _7845___mcc_h33;
                DAST._IType _7851_b = _7844___mcc_h32;
                {
                  Std.Wrappers._IOption<RAST._IType> _7852_nativeToType;
                  _7852_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_7851_b, _7850_range);
                  if (object.Equals(_7821_fromTpe, _7851_b)) {
                    RAST._IExpr _7853_recursiveGen;
                    DCOMPUTF16._IOwnership _7854_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7855_recIdents;
                    RAST._IExpr _out3079;
                    DCOMPUTF16._IOwnership _out3080;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3081;
                    DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3079, out _out3080, out _out3081);
                    _7853_recursiveGen = _out3079;
                    _7854_recOwned = _out3080;
                    _7855_recIdents = _out3081;
                    Std.Wrappers._IOption<RAST._IType> _source312 = _7852_nativeToType;
                    if (_source312.is_None) {
                      if (_7849_erase) {
                        r = _7853_recursiveGen;
                      } else {
                        RAST._IType _7856_rhsType;
                        RAST._IType _out3082;
                        _out3082 = DCOMPUTF16.COMP.GenType(_7822_toTpe, true, false);
                        _7856_rhsType = _out3082;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7856_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7853_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out3083;
                      DCOMPUTF16._IOwnership _out3084;
                      DCOMPUTF16.COMP.FromOwnership(r, _7854_recOwned, expectedOwnership, out _out3083, out _out3084);
                      r = _out3083;
                      resultingOwnership = _out3084;
                    } else {
                      RAST._IType _7857___mcc_h1246 = _source312.dtor_value;
                      RAST._IType _7858_v = _7857___mcc_h1246;
                      r = (((_7853_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_7858_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                      RAST._IExpr _out3085;
                      DCOMPUTF16._IOwnership _out3086;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3085, out _out3086);
                      r = _out3085;
                      resultingOwnership = _out3086;
                    }
                    readIdents = _7855_recIdents;
                  } else {
                    if ((_7852_nativeToType).is_Some) {
                      DAST._IType _source313 = _7821_fromTpe;
                      if (_source313.is_Path) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7859___mcc_h1247 = _source313.dtor_Path_a0;
                        Dafny.ISequence<DAST._IType> _7860___mcc_h1248 = _source313.dtor_typeArgs;
                        DAST._IResolvedType _7861___mcc_h1249 = _source313.dtor_resolved;
                        DAST._IResolvedType _source314 = _7861___mcc_h1249;
                        if (_source314.is_Datatype) {
                          DAST._IDatatypeType _7862___mcc_h1253 = _source314.dtor_datatypeType;
                        } else if (_source314.is_Trait) {
                          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7863___mcc_h1255 = _source314.dtor_path;
                          Dafny.ISequence<DAST._IAttribute> _7864___mcc_h1256 = _source314.dtor_attributes;
                        } else {
                          DAST._IType _7865___mcc_h1259 = _source314.dtor_baseType;
                          DAST._INewtypeRange _7866___mcc_h1260 = _source314.dtor_range;
                          bool _7867___mcc_h1261 = _source314.dtor_erase;
                          Dafny.ISequence<DAST._IAttribute> _7868___mcc_h1262 = _source314.dtor_attributes;
                          Dafny.ISequence<DAST._IAttribute> _7869_attributes0 = _7868___mcc_h1262;
                          bool _7870_erase0 = _7867___mcc_h1261;
                          DAST._INewtypeRange _7871_range0 = _7866___mcc_h1260;
                          DAST._IType _7872_b0 = _7865___mcc_h1259;
                          {
                            Std.Wrappers._IOption<RAST._IType> _7873_nativeFromType;
                            _7873_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_7872_b0, _7871_range0);
                            if ((_7873_nativeFromType).is_Some) {
                              RAST._IExpr _7874_recursiveGen;
                              DCOMPUTF16._IOwnership _7875_recOwned;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7876_recIdents;
                              RAST._IExpr _out3087;
                              DCOMPUTF16._IOwnership _out3088;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3089;
                              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3087, out _out3088, out _out3089);
                              _7874_recursiveGen = _out3087;
                              _7875_recOwned = _out3088;
                              _7876_recIdents = _out3089;
                              RAST._IExpr _out3090;
                              DCOMPUTF16._IOwnership _out3091;
                              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_7874_recursiveGen, (_7852_nativeToType).dtor_value), _7875_recOwned, expectedOwnership, out _out3090, out _out3091);
                              r = _out3090;
                              resultingOwnership = _out3091;
                              readIdents = _7876_recIdents;
                              return ;
                            }
                          }
                        }
                      } else if (_source313.is_Nullable) {
                        DAST._IType _7877___mcc_h1267 = _source313.dtor_Nullable_a0;
                      } else if (_source313.is_Tuple) {
                        Dafny.ISequence<DAST._IType> _7878___mcc_h1269 = _source313.dtor_Tuple_a0;
                      } else if (_source313.is_Array) {
                        DAST._IType _7879___mcc_h1271 = _source313.dtor_element;
                        BigInteger _7880___mcc_h1272 = _source313.dtor_dims;
                      } else if (_source313.is_Seq) {
                        DAST._IType _7881___mcc_h1275 = _source313.dtor_element;
                      } else if (_source313.is_Set) {
                        DAST._IType _7882___mcc_h1277 = _source313.dtor_element;
                      } else if (_source313.is_Multiset) {
                        DAST._IType _7883___mcc_h1279 = _source313.dtor_element;
                      } else if (_source313.is_Map) {
                        DAST._IType _7884___mcc_h1281 = _source313.dtor_key;
                        DAST._IType _7885___mcc_h1282 = _source313.dtor_value;
                      } else if (_source313.is_SetBuilder) {
                        DAST._IType _7886___mcc_h1285 = _source313.dtor_element;
                      } else if (_source313.is_MapBuilder) {
                        DAST._IType _7887___mcc_h1287 = _source313.dtor_key;
                        DAST._IType _7888___mcc_h1288 = _source313.dtor_value;
                      } else if (_source313.is_Arrow) {
                        Dafny.ISequence<DAST._IType> _7889___mcc_h1291 = _source313.dtor_args;
                        DAST._IType _7890___mcc_h1292 = _source313.dtor_result;
                      } else if (_source313.is_Primitive) {
                        DAST._IPrimitive _7891___mcc_h1295 = _source313.dtor_Primitive_a0;
                      } else if (_source313.is_Passthrough) {
                        Dafny.ISequence<Dafny.Rune> _7892___mcc_h1297 = _source313.dtor_Passthrough_a0;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _7893___mcc_h1299 = _source313.dtor_TypeArg_a0;
                      }
                      if (object.Equals(_7821_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _7894_recursiveGen;
                        DCOMPUTF16._IOwnership _7895_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7896_recIdents;
                        RAST._IExpr _out3092;
                        DCOMPUTF16._IOwnership _out3093;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3094;
                        DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3092, out _out3093, out _out3094);
                        _7894_recursiveGen = _out3092;
                        _7895_recOwned = _out3093;
                        _7896_recIdents = _out3094;
                        RAST._IExpr _out3095;
                        DCOMPUTF16._IOwnership _out3096;
                        DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_7894_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_7852_nativeToType).dtor_value), _7895_recOwned, expectedOwnership, out _out3095, out _out3096);
                        r = _out3095;
                        resultingOwnership = _out3096;
                        readIdents = _7896_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out3097;
                    DCOMPUTF16._IOwnership _out3098;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3099;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7820_expr, _7821_fromTpe, _7851_b), _7851_b, _7822_toTpe), selfIdent, env, expectedOwnership, out _out3097, out _out3098, out _out3099);
                    r = _out3097;
                    resultingOwnership = _out3098;
                    readIdents = _out3099;
                  }
                }
              }
            } else if (_source310.is_Nullable) {
              DAST._IType _7897___mcc_h40 = _source310.dtor_Nullable_a0;
              {
                RAST._IExpr _7898_recursiveGen;
                DCOMPUTF16._IOwnership _7899_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7900_recIdents;
                RAST._IExpr _out3100;
                DCOMPUTF16._IOwnership _out3101;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3102;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3100, out _out3101, out _out3102);
                _7898_recursiveGen = _out3100;
                _7899_recOwned = _out3101;
                _7900_recIdents = _out3102;
                r = _7898_recursiveGen;
                if (object.Equals(_7899_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out3103;
                DCOMPUTF16._IOwnership _out3104;
                DCOMPUTF16.COMP.FromOwnership(r, _7899_recOwned, expectedOwnership, out _out3103, out _out3104);
                r = _out3103;
                resultingOwnership = _out3104;
                readIdents = _7900_recIdents;
              }
            } else if (_source310.is_Tuple) {
              Dafny.ISequence<DAST._IType> _7901___mcc_h42 = _source310.dtor_Tuple_a0;
              {
                RAST._IExpr _7902_recursiveGen;
                DCOMPUTF16._IOwnership _7903_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7904_recIdents;
                RAST._IExpr _out3105;
                DCOMPUTF16._IOwnership _out3106;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3107;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3105, out _out3106, out _out3107);
                _7902_recursiveGen = _out3105;
                _7903_recOwned = _out3106;
                _7904_recIdents = _out3107;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7902_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3108;
                DCOMPUTF16._IOwnership _out3109;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3108, out _out3109);
                r = _out3108;
                resultingOwnership = _out3109;
                readIdents = _7904_recIdents;
              }
            } else if (_source310.is_Array) {
              DAST._IType _7905___mcc_h44 = _source310.dtor_element;
              BigInteger _7906___mcc_h45 = _source310.dtor_dims;
              {
                RAST._IExpr _7907_recursiveGen;
                DCOMPUTF16._IOwnership _7908_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7909_recIdents;
                RAST._IExpr _out3110;
                DCOMPUTF16._IOwnership _out3111;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3112;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3110, out _out3111, out _out3112);
                _7907_recursiveGen = _out3110;
                _7908_recOwned = _out3111;
                _7909_recIdents = _out3112;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7907_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3113;
                DCOMPUTF16._IOwnership _out3114;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3113, out _out3114);
                r = _out3113;
                resultingOwnership = _out3114;
                readIdents = _7909_recIdents;
              }
            } else if (_source310.is_Seq) {
              DAST._IType _7910___mcc_h48 = _source310.dtor_element;
              {
                RAST._IExpr _7911_recursiveGen;
                DCOMPUTF16._IOwnership _7912_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7913_recIdents;
                RAST._IExpr _out3115;
                DCOMPUTF16._IOwnership _out3116;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3117;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3115, out _out3116, out _out3117);
                _7911_recursiveGen = _out3115;
                _7912_recOwned = _out3116;
                _7913_recIdents = _out3117;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7911_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3118;
                DCOMPUTF16._IOwnership _out3119;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3118, out _out3119);
                r = _out3118;
                resultingOwnership = _out3119;
                readIdents = _7913_recIdents;
              }
            } else if (_source310.is_Set) {
              DAST._IType _7914___mcc_h50 = _source310.dtor_element;
              {
                RAST._IExpr _7915_recursiveGen;
                DCOMPUTF16._IOwnership _7916_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7917_recIdents;
                RAST._IExpr _out3120;
                DCOMPUTF16._IOwnership _out3121;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3122;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3120, out _out3121, out _out3122);
                _7915_recursiveGen = _out3120;
                _7916_recOwned = _out3121;
                _7917_recIdents = _out3122;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7915_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3123;
                DCOMPUTF16._IOwnership _out3124;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3123, out _out3124);
                r = _out3123;
                resultingOwnership = _out3124;
                readIdents = _7917_recIdents;
              }
            } else if (_source310.is_Multiset) {
              DAST._IType _7918___mcc_h52 = _source310.dtor_element;
              {
                RAST._IExpr _7919_recursiveGen;
                DCOMPUTF16._IOwnership _7920_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7921_recIdents;
                RAST._IExpr _out3125;
                DCOMPUTF16._IOwnership _out3126;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3127;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3125, out _out3126, out _out3127);
                _7919_recursiveGen = _out3125;
                _7920_recOwned = _out3126;
                _7921_recIdents = _out3127;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7919_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3128;
                DCOMPUTF16._IOwnership _out3129;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3128, out _out3129);
                r = _out3128;
                resultingOwnership = _out3129;
                readIdents = _7921_recIdents;
              }
            } else if (_source310.is_Map) {
              DAST._IType _7922___mcc_h54 = _source310.dtor_key;
              DAST._IType _7923___mcc_h55 = _source310.dtor_value;
              {
                RAST._IExpr _7924_recursiveGen;
                DCOMPUTF16._IOwnership _7925_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7926_recIdents;
                RAST._IExpr _out3130;
                DCOMPUTF16._IOwnership _out3131;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3132;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3130, out _out3131, out _out3132);
                _7924_recursiveGen = _out3130;
                _7925_recOwned = _out3131;
                _7926_recIdents = _out3132;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7924_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3133;
                DCOMPUTF16._IOwnership _out3134;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3133, out _out3134);
                r = _out3133;
                resultingOwnership = _out3134;
                readIdents = _7926_recIdents;
              }
            } else if (_source310.is_SetBuilder) {
              DAST._IType _7927___mcc_h58 = _source310.dtor_element;
              {
                RAST._IExpr _7928_recursiveGen;
                DCOMPUTF16._IOwnership _7929_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7930_recIdents;
                RAST._IExpr _out3135;
                DCOMPUTF16._IOwnership _out3136;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3137;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3135, out _out3136, out _out3137);
                _7928_recursiveGen = _out3135;
                _7929_recOwned = _out3136;
                _7930_recIdents = _out3137;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7928_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3138;
                DCOMPUTF16._IOwnership _out3139;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3138, out _out3139);
                r = _out3138;
                resultingOwnership = _out3139;
                readIdents = _7930_recIdents;
              }
            } else if (_source310.is_MapBuilder) {
              DAST._IType _7931___mcc_h60 = _source310.dtor_key;
              DAST._IType _7932___mcc_h61 = _source310.dtor_value;
              {
                RAST._IExpr _7933_recursiveGen;
                DCOMPUTF16._IOwnership _7934_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7935_recIdents;
                RAST._IExpr _out3140;
                DCOMPUTF16._IOwnership _out3141;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3142;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3140, out _out3141, out _out3142);
                _7933_recursiveGen = _out3140;
                _7934_recOwned = _out3141;
                _7935_recIdents = _out3142;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7933_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3143;
                DCOMPUTF16._IOwnership _out3144;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3143, out _out3144);
                r = _out3143;
                resultingOwnership = _out3144;
                readIdents = _7935_recIdents;
              }
            } else if (_source310.is_Arrow) {
              Dafny.ISequence<DAST._IType> _7936___mcc_h64 = _source310.dtor_args;
              DAST._IType _7937___mcc_h65 = _source310.dtor_result;
              {
                RAST._IExpr _7938_recursiveGen;
                DCOMPUTF16._IOwnership _7939_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7940_recIdents;
                RAST._IExpr _out3145;
                DCOMPUTF16._IOwnership _out3146;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3147;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3145, out _out3146, out _out3147);
                _7938_recursiveGen = _out3145;
                _7939_recOwned = _out3146;
                _7940_recIdents = _out3147;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7938_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3148;
                DCOMPUTF16._IOwnership _out3149;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3148, out _out3149);
                r = _out3148;
                resultingOwnership = _out3149;
                readIdents = _7940_recIdents;
              }
            } else if (_source310.is_Primitive) {
              DAST._IPrimitive _7941___mcc_h68 = _source310.dtor_Primitive_a0;
              {
                RAST._IExpr _7942_recursiveGen;
                DCOMPUTF16._IOwnership _7943_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7944_recIdents;
                RAST._IExpr _out3150;
                DCOMPUTF16._IOwnership _out3151;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3152;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3150, out _out3151, out _out3152);
                _7942_recursiveGen = _out3150;
                _7943_recOwned = _out3151;
                _7944_recIdents = _out3152;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7942_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3153;
                DCOMPUTF16._IOwnership _out3154;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3153, out _out3154);
                r = _out3153;
                resultingOwnership = _out3154;
                readIdents = _7944_recIdents;
              }
            } else if (_source310.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _7945___mcc_h70 = _source310.dtor_Passthrough_a0;
              {
                RAST._IExpr _7946_recursiveGen;
                DCOMPUTF16._IOwnership _7947_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7948_recIdents;
                RAST._IExpr _out3155;
                DCOMPUTF16._IOwnership _out3156;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3157;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3155, out _out3156, out _out3157);
                _7946_recursiveGen = _out3155;
                _7947_recOwned = _out3156;
                _7948_recIdents = _out3157;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7946_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3158;
                DCOMPUTF16._IOwnership _out3159;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3158, out _out3159);
                r = _out3158;
                resultingOwnership = _out3159;
                readIdents = _7948_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7949___mcc_h72 = _source310.dtor_TypeArg_a0;
              {
                RAST._IExpr _7950_recursiveGen;
                DCOMPUTF16._IOwnership _7951_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7952_recIdents;
                RAST._IExpr _out3160;
                DCOMPUTF16._IOwnership _out3161;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3162;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3160, out _out3161, out _out3162);
                _7950_recursiveGen = _out3160;
                _7951_recOwned = _out3161;
                _7952_recIdents = _out3162;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7950_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3163;
                DCOMPUTF16._IOwnership _out3164;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3163, out _out3164);
                r = _out3163;
                resultingOwnership = _out3164;
                readIdents = _7952_recIdents;
              }
            }
          } else if (_source309.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7953___mcc_h74 = _source309.dtor_path;
            Dafny.ISequence<DAST._IAttribute> _7954___mcc_h75 = _source309.dtor_attributes;
            DAST._IType _source315 = _7827___mcc_h1;
            if (_source315.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7955___mcc_h82 = _source315.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _7956___mcc_h83 = _source315.dtor_typeArgs;
              DAST._IResolvedType _7957___mcc_h84 = _source315.dtor_resolved;
              DAST._IResolvedType _source316 = _7957___mcc_h84;
              if (_source316.is_Datatype) {
                DAST._IDatatypeType _7958___mcc_h88 = _source316.dtor_datatypeType;
                {
                  RAST._IExpr _7959_recursiveGen;
                  DCOMPUTF16._IOwnership _7960_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7961_recIdents;
                  RAST._IExpr _out3165;
                  DCOMPUTF16._IOwnership _out3166;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3167;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3165, out _out3166, out _out3167);
                  _7959_recursiveGen = _out3165;
                  _7960_recOwned = _out3166;
                  _7961_recIdents = _out3167;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7959_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out3168;
                  DCOMPUTF16._IOwnership _out3169;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3168, out _out3169);
                  r = _out3168;
                  resultingOwnership = _out3169;
                  readIdents = _7961_recIdents;
                }
              } else if (_source316.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7962___mcc_h90 = _source316.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _7963___mcc_h91 = _source316.dtor_attributes;
                {
                  RAST._IExpr _7964_recursiveGen;
                  DCOMPUTF16._IOwnership _7965_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7966_recIdents;
                  RAST._IExpr _out3170;
                  DCOMPUTF16._IOwnership _out3171;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3172;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3170, out _out3171, out _out3172);
                  _7964_recursiveGen = _out3170;
                  _7965_recOwned = _out3171;
                  _7966_recIdents = _out3172;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7964_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out3173;
                  DCOMPUTF16._IOwnership _out3174;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3173, out _out3174);
                  r = _out3173;
                  resultingOwnership = _out3174;
                  readIdents = _7966_recIdents;
                }
              } else {
                DAST._IType _7967___mcc_h94 = _source316.dtor_baseType;
                DAST._INewtypeRange _7968___mcc_h95 = _source316.dtor_range;
                bool _7969___mcc_h96 = _source316.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _7970___mcc_h97 = _source316.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _7971_attributes = _7970___mcc_h97;
                bool _7972_erase = _7969___mcc_h96;
                DAST._INewtypeRange _7973_range = _7968___mcc_h95;
                DAST._IType _7974_b = _7967___mcc_h94;
                {
                  Std.Wrappers._IOption<RAST._IType> _7975_nativeToType;
                  _7975_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_7974_b, _7973_range);
                  if (object.Equals(_7821_fromTpe, _7974_b)) {
                    RAST._IExpr _7976_recursiveGen;
                    DCOMPUTF16._IOwnership _7977_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7978_recIdents;
                    RAST._IExpr _out3175;
                    DCOMPUTF16._IOwnership _out3176;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3177;
                    DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3175, out _out3176, out _out3177);
                    _7976_recursiveGen = _out3175;
                    _7977_recOwned = _out3176;
                    _7978_recIdents = _out3177;
                    Std.Wrappers._IOption<RAST._IType> _source317 = _7975_nativeToType;
                    if (_source317.is_None) {
                      if (_7972_erase) {
                        r = _7976_recursiveGen;
                      } else {
                        RAST._IType _7979_rhsType;
                        RAST._IType _out3178;
                        _out3178 = DCOMPUTF16.COMP.GenType(_7822_toTpe, true, false);
                        _7979_rhsType = _out3178;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7979_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7976_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out3179;
                      DCOMPUTF16._IOwnership _out3180;
                      DCOMPUTF16.COMP.FromOwnership(r, _7977_recOwned, expectedOwnership, out _out3179, out _out3180);
                      r = _out3179;
                      resultingOwnership = _out3180;
                    } else {
                      RAST._IType _7980___mcc_h1301 = _source317.dtor_value;
                      RAST._IType _7981_v = _7980___mcc_h1301;
                      r = (((_7976_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_7981_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                      RAST._IExpr _out3181;
                      DCOMPUTF16._IOwnership _out3182;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3181, out _out3182);
                      r = _out3181;
                      resultingOwnership = _out3182;
                    }
                    readIdents = _7978_recIdents;
                  } else {
                    if ((_7975_nativeToType).is_Some) {
                      DAST._IType _source318 = _7821_fromTpe;
                      if (_source318.is_Path) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7982___mcc_h1302 = _source318.dtor_Path_a0;
                        Dafny.ISequence<DAST._IType> _7983___mcc_h1303 = _source318.dtor_typeArgs;
                        DAST._IResolvedType _7984___mcc_h1304 = _source318.dtor_resolved;
                        DAST._IResolvedType _source319 = _7984___mcc_h1304;
                        if (_source319.is_Datatype) {
                          DAST._IDatatypeType _7985___mcc_h1308 = _source319.dtor_datatypeType;
                        } else if (_source319.is_Trait) {
                          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7986___mcc_h1310 = _source319.dtor_path;
                          Dafny.ISequence<DAST._IAttribute> _7987___mcc_h1311 = _source319.dtor_attributes;
                        } else {
                          DAST._IType _7988___mcc_h1314 = _source319.dtor_baseType;
                          DAST._INewtypeRange _7989___mcc_h1315 = _source319.dtor_range;
                          bool _7990___mcc_h1316 = _source319.dtor_erase;
                          Dafny.ISequence<DAST._IAttribute> _7991___mcc_h1317 = _source319.dtor_attributes;
                          Dafny.ISequence<DAST._IAttribute> _7992_attributes0 = _7991___mcc_h1317;
                          bool _7993_erase0 = _7990___mcc_h1316;
                          DAST._INewtypeRange _7994_range0 = _7989___mcc_h1315;
                          DAST._IType _7995_b0 = _7988___mcc_h1314;
                          {
                            Std.Wrappers._IOption<RAST._IType> _7996_nativeFromType;
                            _7996_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_7995_b0, _7994_range0);
                            if ((_7996_nativeFromType).is_Some) {
                              RAST._IExpr _7997_recursiveGen;
                              DCOMPUTF16._IOwnership _7998_recOwned;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7999_recIdents;
                              RAST._IExpr _out3183;
                              DCOMPUTF16._IOwnership _out3184;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3185;
                              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3183, out _out3184, out _out3185);
                              _7997_recursiveGen = _out3183;
                              _7998_recOwned = _out3184;
                              _7999_recIdents = _out3185;
                              RAST._IExpr _out3186;
                              DCOMPUTF16._IOwnership _out3187;
                              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_7997_recursiveGen, (_7975_nativeToType).dtor_value), _7998_recOwned, expectedOwnership, out _out3186, out _out3187);
                              r = _out3186;
                              resultingOwnership = _out3187;
                              readIdents = _7999_recIdents;
                              return ;
                            }
                          }
                        }
                      } else if (_source318.is_Nullable) {
                        DAST._IType _8000___mcc_h1322 = _source318.dtor_Nullable_a0;
                      } else if (_source318.is_Tuple) {
                        Dafny.ISequence<DAST._IType> _8001___mcc_h1324 = _source318.dtor_Tuple_a0;
                      } else if (_source318.is_Array) {
                        DAST._IType _8002___mcc_h1326 = _source318.dtor_element;
                        BigInteger _8003___mcc_h1327 = _source318.dtor_dims;
                      } else if (_source318.is_Seq) {
                        DAST._IType _8004___mcc_h1330 = _source318.dtor_element;
                      } else if (_source318.is_Set) {
                        DAST._IType _8005___mcc_h1332 = _source318.dtor_element;
                      } else if (_source318.is_Multiset) {
                        DAST._IType _8006___mcc_h1334 = _source318.dtor_element;
                      } else if (_source318.is_Map) {
                        DAST._IType _8007___mcc_h1336 = _source318.dtor_key;
                        DAST._IType _8008___mcc_h1337 = _source318.dtor_value;
                      } else if (_source318.is_SetBuilder) {
                        DAST._IType _8009___mcc_h1340 = _source318.dtor_element;
                      } else if (_source318.is_MapBuilder) {
                        DAST._IType _8010___mcc_h1342 = _source318.dtor_key;
                        DAST._IType _8011___mcc_h1343 = _source318.dtor_value;
                      } else if (_source318.is_Arrow) {
                        Dafny.ISequence<DAST._IType> _8012___mcc_h1346 = _source318.dtor_args;
                        DAST._IType _8013___mcc_h1347 = _source318.dtor_result;
                      } else if (_source318.is_Primitive) {
                        DAST._IPrimitive _8014___mcc_h1350 = _source318.dtor_Primitive_a0;
                      } else if (_source318.is_Passthrough) {
                        Dafny.ISequence<Dafny.Rune> _8015___mcc_h1352 = _source318.dtor_Passthrough_a0;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _8016___mcc_h1354 = _source318.dtor_TypeArg_a0;
                      }
                      if (object.Equals(_7821_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _8017_recursiveGen;
                        DCOMPUTF16._IOwnership _8018_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8019_recIdents;
                        RAST._IExpr _out3188;
                        DCOMPUTF16._IOwnership _out3189;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3190;
                        DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3188, out _out3189, out _out3190);
                        _8017_recursiveGen = _out3188;
                        _8018_recOwned = _out3189;
                        _8019_recIdents = _out3190;
                        RAST._IExpr _out3191;
                        DCOMPUTF16._IOwnership _out3192;
                        DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_8017_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_7975_nativeToType).dtor_value), _8018_recOwned, expectedOwnership, out _out3191, out _out3192);
                        r = _out3191;
                        resultingOwnership = _out3192;
                        readIdents = _8019_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out3193;
                    DCOMPUTF16._IOwnership _out3194;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3195;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7820_expr, _7821_fromTpe, _7974_b), _7974_b, _7822_toTpe), selfIdent, env, expectedOwnership, out _out3193, out _out3194, out _out3195);
                    r = _out3193;
                    resultingOwnership = _out3194;
                    readIdents = _out3195;
                  }
                }
              }
            } else if (_source315.is_Nullable) {
              DAST._IType _8020___mcc_h102 = _source315.dtor_Nullable_a0;
              {
                RAST._IExpr _8021_recursiveGen;
                DCOMPUTF16._IOwnership _8022_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8023_recIdents;
                RAST._IExpr _out3196;
                DCOMPUTF16._IOwnership _out3197;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3198;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3196, out _out3197, out _out3198);
                _8021_recursiveGen = _out3196;
                _8022_recOwned = _out3197;
                _8023_recIdents = _out3198;
                r = _8021_recursiveGen;
                if (object.Equals(_8022_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out3199;
                DCOMPUTF16._IOwnership _out3200;
                DCOMPUTF16.COMP.FromOwnership(r, _8022_recOwned, expectedOwnership, out _out3199, out _out3200);
                r = _out3199;
                resultingOwnership = _out3200;
                readIdents = _8023_recIdents;
              }
            } else if (_source315.is_Tuple) {
              Dafny.ISequence<DAST._IType> _8024___mcc_h104 = _source315.dtor_Tuple_a0;
              {
                RAST._IExpr _8025_recursiveGen;
                DCOMPUTF16._IOwnership _8026_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8027_recIdents;
                RAST._IExpr _out3201;
                DCOMPUTF16._IOwnership _out3202;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3203;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3201, out _out3202, out _out3203);
                _8025_recursiveGen = _out3201;
                _8026_recOwned = _out3202;
                _8027_recIdents = _out3203;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8025_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3204;
                DCOMPUTF16._IOwnership _out3205;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3204, out _out3205);
                r = _out3204;
                resultingOwnership = _out3205;
                readIdents = _8027_recIdents;
              }
            } else if (_source315.is_Array) {
              DAST._IType _8028___mcc_h106 = _source315.dtor_element;
              BigInteger _8029___mcc_h107 = _source315.dtor_dims;
              {
                RAST._IExpr _8030_recursiveGen;
                DCOMPUTF16._IOwnership _8031_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8032_recIdents;
                RAST._IExpr _out3206;
                DCOMPUTF16._IOwnership _out3207;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3208;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3206, out _out3207, out _out3208);
                _8030_recursiveGen = _out3206;
                _8031_recOwned = _out3207;
                _8032_recIdents = _out3208;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8030_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3209;
                DCOMPUTF16._IOwnership _out3210;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3209, out _out3210);
                r = _out3209;
                resultingOwnership = _out3210;
                readIdents = _8032_recIdents;
              }
            } else if (_source315.is_Seq) {
              DAST._IType _8033___mcc_h110 = _source315.dtor_element;
              {
                RAST._IExpr _8034_recursiveGen;
                DCOMPUTF16._IOwnership _8035_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8036_recIdents;
                RAST._IExpr _out3211;
                DCOMPUTF16._IOwnership _out3212;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3213;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3211, out _out3212, out _out3213);
                _8034_recursiveGen = _out3211;
                _8035_recOwned = _out3212;
                _8036_recIdents = _out3213;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8034_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3214;
                DCOMPUTF16._IOwnership _out3215;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3214, out _out3215);
                r = _out3214;
                resultingOwnership = _out3215;
                readIdents = _8036_recIdents;
              }
            } else if (_source315.is_Set) {
              DAST._IType _8037___mcc_h112 = _source315.dtor_element;
              {
                RAST._IExpr _8038_recursiveGen;
                DCOMPUTF16._IOwnership _8039_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8040_recIdents;
                RAST._IExpr _out3216;
                DCOMPUTF16._IOwnership _out3217;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3218;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3216, out _out3217, out _out3218);
                _8038_recursiveGen = _out3216;
                _8039_recOwned = _out3217;
                _8040_recIdents = _out3218;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8038_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3219;
                DCOMPUTF16._IOwnership _out3220;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3219, out _out3220);
                r = _out3219;
                resultingOwnership = _out3220;
                readIdents = _8040_recIdents;
              }
            } else if (_source315.is_Multiset) {
              DAST._IType _8041___mcc_h114 = _source315.dtor_element;
              {
                RAST._IExpr _8042_recursiveGen;
                DCOMPUTF16._IOwnership _8043_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8044_recIdents;
                RAST._IExpr _out3221;
                DCOMPUTF16._IOwnership _out3222;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3223;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3221, out _out3222, out _out3223);
                _8042_recursiveGen = _out3221;
                _8043_recOwned = _out3222;
                _8044_recIdents = _out3223;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8042_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3224;
                DCOMPUTF16._IOwnership _out3225;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3224, out _out3225);
                r = _out3224;
                resultingOwnership = _out3225;
                readIdents = _8044_recIdents;
              }
            } else if (_source315.is_Map) {
              DAST._IType _8045___mcc_h116 = _source315.dtor_key;
              DAST._IType _8046___mcc_h117 = _source315.dtor_value;
              {
                RAST._IExpr _8047_recursiveGen;
                DCOMPUTF16._IOwnership _8048_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8049_recIdents;
                RAST._IExpr _out3226;
                DCOMPUTF16._IOwnership _out3227;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3228;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3226, out _out3227, out _out3228);
                _8047_recursiveGen = _out3226;
                _8048_recOwned = _out3227;
                _8049_recIdents = _out3228;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8047_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3229;
                DCOMPUTF16._IOwnership _out3230;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3229, out _out3230);
                r = _out3229;
                resultingOwnership = _out3230;
                readIdents = _8049_recIdents;
              }
            } else if (_source315.is_SetBuilder) {
              DAST._IType _8050___mcc_h120 = _source315.dtor_element;
              {
                RAST._IExpr _8051_recursiveGen;
                DCOMPUTF16._IOwnership _8052_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8053_recIdents;
                RAST._IExpr _out3231;
                DCOMPUTF16._IOwnership _out3232;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3233;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3231, out _out3232, out _out3233);
                _8051_recursiveGen = _out3231;
                _8052_recOwned = _out3232;
                _8053_recIdents = _out3233;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8051_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3234;
                DCOMPUTF16._IOwnership _out3235;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3234, out _out3235);
                r = _out3234;
                resultingOwnership = _out3235;
                readIdents = _8053_recIdents;
              }
            } else if (_source315.is_MapBuilder) {
              DAST._IType _8054___mcc_h122 = _source315.dtor_key;
              DAST._IType _8055___mcc_h123 = _source315.dtor_value;
              {
                RAST._IExpr _8056_recursiveGen;
                DCOMPUTF16._IOwnership _8057_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8058_recIdents;
                RAST._IExpr _out3236;
                DCOMPUTF16._IOwnership _out3237;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3238;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3236, out _out3237, out _out3238);
                _8056_recursiveGen = _out3236;
                _8057_recOwned = _out3237;
                _8058_recIdents = _out3238;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8056_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3239;
                DCOMPUTF16._IOwnership _out3240;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3239, out _out3240);
                r = _out3239;
                resultingOwnership = _out3240;
                readIdents = _8058_recIdents;
              }
            } else if (_source315.is_Arrow) {
              Dafny.ISequence<DAST._IType> _8059___mcc_h126 = _source315.dtor_args;
              DAST._IType _8060___mcc_h127 = _source315.dtor_result;
              {
                RAST._IExpr _8061_recursiveGen;
                DCOMPUTF16._IOwnership _8062_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8063_recIdents;
                RAST._IExpr _out3241;
                DCOMPUTF16._IOwnership _out3242;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3243;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3241, out _out3242, out _out3243);
                _8061_recursiveGen = _out3241;
                _8062_recOwned = _out3242;
                _8063_recIdents = _out3243;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8061_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3244;
                DCOMPUTF16._IOwnership _out3245;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3244, out _out3245);
                r = _out3244;
                resultingOwnership = _out3245;
                readIdents = _8063_recIdents;
              }
            } else if (_source315.is_Primitive) {
              DAST._IPrimitive _8064___mcc_h130 = _source315.dtor_Primitive_a0;
              {
                RAST._IExpr _8065_recursiveGen;
                DCOMPUTF16._IOwnership _8066_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8067_recIdents;
                RAST._IExpr _out3246;
                DCOMPUTF16._IOwnership _out3247;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3248;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3246, out _out3247, out _out3248);
                _8065_recursiveGen = _out3246;
                _8066_recOwned = _out3247;
                _8067_recIdents = _out3248;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8065_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3249;
                DCOMPUTF16._IOwnership _out3250;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3249, out _out3250);
                r = _out3249;
                resultingOwnership = _out3250;
                readIdents = _8067_recIdents;
              }
            } else if (_source315.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _8068___mcc_h132 = _source315.dtor_Passthrough_a0;
              {
                RAST._IExpr _8069_recursiveGen;
                DCOMPUTF16._IOwnership _8070_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8071_recIdents;
                RAST._IExpr _out3251;
                DCOMPUTF16._IOwnership _out3252;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3253;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3251, out _out3252, out _out3253);
                _8069_recursiveGen = _out3251;
                _8070_recOwned = _out3252;
                _8071_recIdents = _out3253;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8069_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3254;
                DCOMPUTF16._IOwnership _out3255;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3254, out _out3255);
                r = _out3254;
                resultingOwnership = _out3255;
                readIdents = _8071_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _8072___mcc_h134 = _source315.dtor_TypeArg_a0;
              {
                RAST._IExpr _8073_recursiveGen;
                DCOMPUTF16._IOwnership _8074_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8075_recIdents;
                RAST._IExpr _out3256;
                DCOMPUTF16._IOwnership _out3257;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3258;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3256, out _out3257, out _out3258);
                _8073_recursiveGen = _out3256;
                _8074_recOwned = _out3257;
                _8075_recIdents = _out3258;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8073_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3259;
                DCOMPUTF16._IOwnership _out3260;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3259, out _out3260);
                r = _out3259;
                resultingOwnership = _out3260;
                readIdents = _8075_recIdents;
              }
            }
          } else {
            DAST._IType _8076___mcc_h136 = _source309.dtor_baseType;
            DAST._INewtypeRange _8077___mcc_h137 = _source309.dtor_range;
            bool _8078___mcc_h138 = _source309.dtor_erase;
            Dafny.ISequence<DAST._IAttribute> _8079___mcc_h139 = _source309.dtor_attributes;
            DAST._IType _source320 = _7827___mcc_h1;
            if (_source320.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8080___mcc_h152 = _source320.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _8081___mcc_h153 = _source320.dtor_typeArgs;
              DAST._IResolvedType _8082___mcc_h154 = _source320.dtor_resolved;
              DAST._IResolvedType _source321 = _8082___mcc_h154;
              if (_source321.is_Datatype) {
                DAST._IDatatypeType _8083___mcc_h161 = _source321.dtor_datatypeType;
                Dafny.ISequence<DAST._IAttribute> _8084_attributes = _8079___mcc_h139;
                bool _8085_erase = _8078___mcc_h138;
                DAST._INewtypeRange _8086_range = _8077___mcc_h137;
                DAST._IType _8087_b = _8076___mcc_h136;
                {
                  Std.Wrappers._IOption<RAST._IType> _8088_nativeFromType;
                  _8088_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8087_b, _8086_range);
                  if (object.Equals(_8087_b, _7822_toTpe)) {
                    RAST._IExpr _8089_recursiveGen;
                    DCOMPUTF16._IOwnership _8090_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8091_recIdents;
                    RAST._IExpr _out3261;
                    DCOMPUTF16._IOwnership _out3262;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3263;
                    DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3261, out _out3262, out _out3263);
                    _8089_recursiveGen = _out3261;
                    _8090_recOwned = _out3262;
                    _8091_recIdents = _out3263;
                    Std.Wrappers._IOption<RAST._IType> _source322 = _8088_nativeFromType;
                    if (_source322.is_None) {
                      if (_8085_erase) {
                        r = _8089_recursiveGen;
                      } else {
                        r = (_8089_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                      }
                      RAST._IExpr _out3264;
                      DCOMPUTF16._IOwnership _out3265;
                      DCOMPUTF16.COMP.FromOwnership(r, _8090_recOwned, expectedOwnership, out _out3264, out _out3265);
                      r = _out3264;
                      resultingOwnership = _out3265;
                      readIdents = _8091_recIdents;
                    } else {
                      RAST._IType _8092___mcc_h1356 = _source322.dtor_value;
                      RAST._IType _8093_v = _8092___mcc_h1356;
                      RAST._IType _8094_toTpeRust;
                      RAST._IType _out3266;
                      _out3266 = DCOMPUTF16.COMP.GenType(_7822_toTpe, false, false);
                      _8094_toTpeRust = _out3266;
                      r = (((_8089_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_8094_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                      RAST._IExpr _out3267;
                      DCOMPUTF16._IOwnership _out3268;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3267, out _out3268);
                      r = _out3267;
                      resultingOwnership = _out3268;
                    }
                  } else {
                    if ((_8088_nativeFromType).is_Some) {
                      if (object.Equals(_7822_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _8095_recursiveGen;
                        DCOMPUTF16._IOwnership _8096_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8097_recIdents;
                        RAST._IExpr _out3269;
                        DCOMPUTF16._IOwnership _out3270;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3271;
                        DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3269, out _out3270, out _out3271);
                        _8095_recursiveGen = _out3269;
                        _8096_recOwned = _out3270;
                        _8097_recIdents = _out3271;
                        RAST._IExpr _out3272;
                        DCOMPUTF16._IOwnership _out3273;
                        DCOMPUTF16.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMPUTF16.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_8095_recursiveGen, DCOMPUTF16.__default.DafnyCharUnderlying)), _8096_recOwned, expectedOwnership, out _out3272, out _out3273);
                        r = _out3272;
                        resultingOwnership = _out3273;
                        readIdents = _8097_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out3274;
                    DCOMPUTF16._IOwnership _out3275;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3276;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7820_expr, _7821_fromTpe, _8087_b), _8087_b, _7822_toTpe), selfIdent, env, expectedOwnership, out _out3274, out _out3275, out _out3276);
                    r = _out3274;
                    resultingOwnership = _out3275;
                    readIdents = _out3276;
                  }
                }
              } else if (_source321.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8098___mcc_h164 = _source321.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _8099___mcc_h165 = _source321.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _8100_attributes = _8079___mcc_h139;
                bool _8101_erase = _8078___mcc_h138;
                DAST._INewtypeRange _8102_range = _8077___mcc_h137;
                DAST._IType _8103_b = _8076___mcc_h136;
                {
                  Std.Wrappers._IOption<RAST._IType> _8104_nativeFromType;
                  _8104_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8103_b, _8102_range);
                  if (object.Equals(_8103_b, _7822_toTpe)) {
                    RAST._IExpr _8105_recursiveGen;
                    DCOMPUTF16._IOwnership _8106_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8107_recIdents;
                    RAST._IExpr _out3277;
                    DCOMPUTF16._IOwnership _out3278;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3279;
                    DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3277, out _out3278, out _out3279);
                    _8105_recursiveGen = _out3277;
                    _8106_recOwned = _out3278;
                    _8107_recIdents = _out3279;
                    Std.Wrappers._IOption<RAST._IType> _source323 = _8104_nativeFromType;
                    if (_source323.is_None) {
                      if (_8101_erase) {
                        r = _8105_recursiveGen;
                      } else {
                        r = (_8105_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                      }
                      RAST._IExpr _out3280;
                      DCOMPUTF16._IOwnership _out3281;
                      DCOMPUTF16.COMP.FromOwnership(r, _8106_recOwned, expectedOwnership, out _out3280, out _out3281);
                      r = _out3280;
                      resultingOwnership = _out3281;
                      readIdents = _8107_recIdents;
                    } else {
                      RAST._IType _8108___mcc_h1357 = _source323.dtor_value;
                      RAST._IType _8109_v = _8108___mcc_h1357;
                      RAST._IType _8110_toTpeRust;
                      RAST._IType _out3282;
                      _out3282 = DCOMPUTF16.COMP.GenType(_7822_toTpe, false, false);
                      _8110_toTpeRust = _out3282;
                      r = (((_8105_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_8110_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                      RAST._IExpr _out3283;
                      DCOMPUTF16._IOwnership _out3284;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3283, out _out3284);
                      r = _out3283;
                      resultingOwnership = _out3284;
                    }
                  } else {
                    if ((_8104_nativeFromType).is_Some) {
                      if (object.Equals(_7822_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _8111_recursiveGen;
                        DCOMPUTF16._IOwnership _8112_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8113_recIdents;
                        RAST._IExpr _out3285;
                        DCOMPUTF16._IOwnership _out3286;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3287;
                        DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3285, out _out3286, out _out3287);
                        _8111_recursiveGen = _out3285;
                        _8112_recOwned = _out3286;
                        _8113_recIdents = _out3287;
                        RAST._IExpr _out3288;
                        DCOMPUTF16._IOwnership _out3289;
                        DCOMPUTF16.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMPUTF16.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_8111_recursiveGen, DCOMPUTF16.__default.DafnyCharUnderlying)), _8112_recOwned, expectedOwnership, out _out3288, out _out3289);
                        r = _out3288;
                        resultingOwnership = _out3289;
                        readIdents = _8113_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out3290;
                    DCOMPUTF16._IOwnership _out3291;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3292;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7820_expr, _7821_fromTpe, _8103_b), _8103_b, _7822_toTpe), selfIdent, env, expectedOwnership, out _out3290, out _out3291, out _out3292);
                    r = _out3290;
                    resultingOwnership = _out3291;
                    readIdents = _out3292;
                  }
                }
              } else {
                DAST._IType _8114___mcc_h170 = _source321.dtor_baseType;
                DAST._INewtypeRange _8115___mcc_h171 = _source321.dtor_range;
                bool _8116___mcc_h172 = _source321.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _8117___mcc_h173 = _source321.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _8118_attributes = _8117___mcc_h173;
                bool _8119_erase = _8116___mcc_h172;
                DAST._INewtypeRange _8120_range = _8115___mcc_h171;
                DAST._IType _8121_b = _8114___mcc_h170;
                {
                  Std.Wrappers._IOption<RAST._IType> _8122_nativeToType;
                  _8122_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_8121_b, _8120_range);
                  if (object.Equals(_7821_fromTpe, _8121_b)) {
                    RAST._IExpr _8123_recursiveGen;
                    DCOMPUTF16._IOwnership _8124_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8125_recIdents;
                    RAST._IExpr _out3293;
                    DCOMPUTF16._IOwnership _out3294;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3295;
                    DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3293, out _out3294, out _out3295);
                    _8123_recursiveGen = _out3293;
                    _8124_recOwned = _out3294;
                    _8125_recIdents = _out3295;
                    Std.Wrappers._IOption<RAST._IType> _source324 = _8122_nativeToType;
                    if (_source324.is_None) {
                      if (_8119_erase) {
                        r = _8123_recursiveGen;
                      } else {
                        RAST._IType _8126_rhsType;
                        RAST._IType _out3296;
                        _out3296 = DCOMPUTF16.COMP.GenType(_7822_toTpe, true, false);
                        _8126_rhsType = _out3296;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_8126_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_8123_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out3297;
                      DCOMPUTF16._IOwnership _out3298;
                      DCOMPUTF16.COMP.FromOwnership(r, _8124_recOwned, expectedOwnership, out _out3297, out _out3298);
                      r = _out3297;
                      resultingOwnership = _out3298;
                    } else {
                      RAST._IType _8127___mcc_h1358 = _source324.dtor_value;
                      RAST._IType _8128_v = _8127___mcc_h1358;
                      r = (((_8123_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_8128_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                      RAST._IExpr _out3299;
                      DCOMPUTF16._IOwnership _out3300;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3299, out _out3300);
                      r = _out3299;
                      resultingOwnership = _out3300;
                    }
                    readIdents = _8125_recIdents;
                  } else {
                    if ((_8122_nativeToType).is_Some) {
                      DAST._IType _source325 = _7821_fromTpe;
                      if (_source325.is_Path) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8129___mcc_h1359 = _source325.dtor_Path_a0;
                        Dafny.ISequence<DAST._IType> _8130___mcc_h1360 = _source325.dtor_typeArgs;
                        DAST._IResolvedType _8131___mcc_h1361 = _source325.dtor_resolved;
                        DAST._IResolvedType _source326 = _8131___mcc_h1361;
                        if (_source326.is_Datatype) {
                          DAST._IDatatypeType _8132___mcc_h1365 = _source326.dtor_datatypeType;
                        } else if (_source326.is_Trait) {
                          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8133___mcc_h1367 = _source326.dtor_path;
                          Dafny.ISequence<DAST._IAttribute> _8134___mcc_h1368 = _source326.dtor_attributes;
                        } else {
                          DAST._IType _8135___mcc_h1371 = _source326.dtor_baseType;
                          DAST._INewtypeRange _8136___mcc_h1372 = _source326.dtor_range;
                          bool _8137___mcc_h1373 = _source326.dtor_erase;
                          Dafny.ISequence<DAST._IAttribute> _8138___mcc_h1374 = _source326.dtor_attributes;
                          Dafny.ISequence<DAST._IAttribute> _8139_attributes0 = _8138___mcc_h1374;
                          bool _8140_erase0 = _8137___mcc_h1373;
                          DAST._INewtypeRange _8141_range0 = _8136___mcc_h1372;
                          DAST._IType _8142_b0 = _8135___mcc_h1371;
                          {
                            Std.Wrappers._IOption<RAST._IType> _8143_nativeFromType;
                            _8143_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8142_b0, _8141_range0);
                            if ((_8143_nativeFromType).is_Some) {
                              RAST._IExpr _8144_recursiveGen;
                              DCOMPUTF16._IOwnership _8145_recOwned;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8146_recIdents;
                              RAST._IExpr _out3301;
                              DCOMPUTF16._IOwnership _out3302;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3303;
                              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3301, out _out3302, out _out3303);
                              _8144_recursiveGen = _out3301;
                              _8145_recOwned = _out3302;
                              _8146_recIdents = _out3303;
                              RAST._IExpr _out3304;
                              DCOMPUTF16._IOwnership _out3305;
                              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_8144_recursiveGen, (_8122_nativeToType).dtor_value), _8145_recOwned, expectedOwnership, out _out3304, out _out3305);
                              r = _out3304;
                              resultingOwnership = _out3305;
                              readIdents = _8146_recIdents;
                              return ;
                            }
                          }
                        }
                      } else if (_source325.is_Nullable) {
                        DAST._IType _8147___mcc_h1379 = _source325.dtor_Nullable_a0;
                      } else if (_source325.is_Tuple) {
                        Dafny.ISequence<DAST._IType> _8148___mcc_h1381 = _source325.dtor_Tuple_a0;
                      } else if (_source325.is_Array) {
                        DAST._IType _8149___mcc_h1383 = _source325.dtor_element;
                        BigInteger _8150___mcc_h1384 = _source325.dtor_dims;
                      } else if (_source325.is_Seq) {
                        DAST._IType _8151___mcc_h1387 = _source325.dtor_element;
                      } else if (_source325.is_Set) {
                        DAST._IType _8152___mcc_h1389 = _source325.dtor_element;
                      } else if (_source325.is_Multiset) {
                        DAST._IType _8153___mcc_h1391 = _source325.dtor_element;
                      } else if (_source325.is_Map) {
                        DAST._IType _8154___mcc_h1393 = _source325.dtor_key;
                        DAST._IType _8155___mcc_h1394 = _source325.dtor_value;
                      } else if (_source325.is_SetBuilder) {
                        DAST._IType _8156___mcc_h1397 = _source325.dtor_element;
                      } else if (_source325.is_MapBuilder) {
                        DAST._IType _8157___mcc_h1399 = _source325.dtor_key;
                        DAST._IType _8158___mcc_h1400 = _source325.dtor_value;
                      } else if (_source325.is_Arrow) {
                        Dafny.ISequence<DAST._IType> _8159___mcc_h1403 = _source325.dtor_args;
                        DAST._IType _8160___mcc_h1404 = _source325.dtor_result;
                      } else if (_source325.is_Primitive) {
                        DAST._IPrimitive _8161___mcc_h1407 = _source325.dtor_Primitive_a0;
                      } else if (_source325.is_Passthrough) {
                        Dafny.ISequence<Dafny.Rune> _8162___mcc_h1409 = _source325.dtor_Passthrough_a0;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _8163___mcc_h1411 = _source325.dtor_TypeArg_a0;
                      }
                      if (object.Equals(_7821_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _8164_recursiveGen;
                        DCOMPUTF16._IOwnership _8165_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8166_recIdents;
                        RAST._IExpr _out3306;
                        DCOMPUTF16._IOwnership _out3307;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3308;
                        DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3306, out _out3307, out _out3308);
                        _8164_recursiveGen = _out3306;
                        _8165_recOwned = _out3307;
                        _8166_recIdents = _out3308;
                        RAST._IExpr _out3309;
                        DCOMPUTF16._IOwnership _out3310;
                        DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_8164_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_8122_nativeToType).dtor_value), _8165_recOwned, expectedOwnership, out _out3309, out _out3310);
                        r = _out3309;
                        resultingOwnership = _out3310;
                        readIdents = _8166_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out3311;
                    DCOMPUTF16._IOwnership _out3312;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3313;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7820_expr, _7821_fromTpe, _8121_b), _8121_b, _7822_toTpe), selfIdent, env, expectedOwnership, out _out3311, out _out3312, out _out3313);
                    r = _out3311;
                    resultingOwnership = _out3312;
                    readIdents = _out3313;
                  }
                }
              }
            } else if (_source320.is_Nullable) {
              DAST._IType _8167___mcc_h182 = _source320.dtor_Nullable_a0;
              {
                RAST._IExpr _8168_recursiveGen;
                DCOMPUTF16._IOwnership _8169_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8170_recIdents;
                RAST._IExpr _out3314;
                DCOMPUTF16._IOwnership _out3315;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3316;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3314, out _out3315, out _out3316);
                _8168_recursiveGen = _out3314;
                _8169_recOwned = _out3315;
                _8170_recIdents = _out3316;
                r = _8168_recursiveGen;
                if (object.Equals(_8169_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out3317;
                DCOMPUTF16._IOwnership _out3318;
                DCOMPUTF16.COMP.FromOwnership(r, _8169_recOwned, expectedOwnership, out _out3317, out _out3318);
                r = _out3317;
                resultingOwnership = _out3318;
                readIdents = _8170_recIdents;
              }
            } else if (_source320.is_Tuple) {
              Dafny.ISequence<DAST._IType> _8171___mcc_h185 = _source320.dtor_Tuple_a0;
              Dafny.ISequence<DAST._IAttribute> _8172_attributes = _8079___mcc_h139;
              bool _8173_erase = _8078___mcc_h138;
              DAST._INewtypeRange _8174_range = _8077___mcc_h137;
              DAST._IType _8175_b = _8076___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _8176_nativeFromType;
                _8176_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8175_b, _8174_range);
                if (object.Equals(_8175_b, _7822_toTpe)) {
                  RAST._IExpr _8177_recursiveGen;
                  DCOMPUTF16._IOwnership _8178_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8179_recIdents;
                  RAST._IExpr _out3319;
                  DCOMPUTF16._IOwnership _out3320;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3321;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3319, out _out3320, out _out3321);
                  _8177_recursiveGen = _out3319;
                  _8178_recOwned = _out3320;
                  _8179_recIdents = _out3321;
                  Std.Wrappers._IOption<RAST._IType> _source327 = _8176_nativeFromType;
                  if (_source327.is_None) {
                    if (_8173_erase) {
                      r = _8177_recursiveGen;
                    } else {
                      r = (_8177_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out3322;
                    DCOMPUTF16._IOwnership _out3323;
                    DCOMPUTF16.COMP.FromOwnership(r, _8178_recOwned, expectedOwnership, out _out3322, out _out3323);
                    r = _out3322;
                    resultingOwnership = _out3323;
                    readIdents = _8179_recIdents;
                  } else {
                    RAST._IType _8180___mcc_h1413 = _source327.dtor_value;
                    RAST._IType _8181_v = _8180___mcc_h1413;
                    RAST._IType _8182_toTpeRust;
                    RAST._IType _out3324;
                    _out3324 = DCOMPUTF16.COMP.GenType(_7822_toTpe, false, false);
                    _8182_toTpeRust = _out3324;
                    r = (((_8177_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_8182_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out3325;
                    DCOMPUTF16._IOwnership _out3326;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3325, out _out3326);
                    r = _out3325;
                    resultingOwnership = _out3326;
                  }
                } else {
                  if ((_8176_nativeFromType).is_Some) {
                    if (object.Equals(_7822_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _8183_recursiveGen;
                      DCOMPUTF16._IOwnership _8184_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8185_recIdents;
                      RAST._IExpr _out3327;
                      DCOMPUTF16._IOwnership _out3328;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3329;
                      DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3327, out _out3328, out _out3329);
                      _8183_recursiveGen = _out3327;
                      _8184_recOwned = _out3328;
                      _8185_recIdents = _out3329;
                      RAST._IExpr _out3330;
                      DCOMPUTF16._IOwnership _out3331;
                      DCOMPUTF16.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMPUTF16.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_8183_recursiveGen, DCOMPUTF16.__default.DafnyCharUnderlying)), _8184_recOwned, expectedOwnership, out _out3330, out _out3331);
                      r = _out3330;
                      resultingOwnership = _out3331;
                      readIdents = _8185_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out3332;
                  DCOMPUTF16._IOwnership _out3333;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3334;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7820_expr, _7821_fromTpe, _8175_b), _8175_b, _7822_toTpe), selfIdent, env, expectedOwnership, out _out3332, out _out3333, out _out3334);
                  r = _out3332;
                  resultingOwnership = _out3333;
                  readIdents = _out3334;
                }
              }
            } else if (_source320.is_Array) {
              DAST._IType _8186___mcc_h188 = _source320.dtor_element;
              BigInteger _8187___mcc_h189 = _source320.dtor_dims;
              Dafny.ISequence<DAST._IAttribute> _8188_attributes = _8079___mcc_h139;
              bool _8189_erase = _8078___mcc_h138;
              DAST._INewtypeRange _8190_range = _8077___mcc_h137;
              DAST._IType _8191_b = _8076___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _8192_nativeFromType;
                _8192_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8191_b, _8190_range);
                if (object.Equals(_8191_b, _7822_toTpe)) {
                  RAST._IExpr _8193_recursiveGen;
                  DCOMPUTF16._IOwnership _8194_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8195_recIdents;
                  RAST._IExpr _out3335;
                  DCOMPUTF16._IOwnership _out3336;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3337;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3335, out _out3336, out _out3337);
                  _8193_recursiveGen = _out3335;
                  _8194_recOwned = _out3336;
                  _8195_recIdents = _out3337;
                  Std.Wrappers._IOption<RAST._IType> _source328 = _8192_nativeFromType;
                  if (_source328.is_None) {
                    if (_8189_erase) {
                      r = _8193_recursiveGen;
                    } else {
                      r = (_8193_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out3338;
                    DCOMPUTF16._IOwnership _out3339;
                    DCOMPUTF16.COMP.FromOwnership(r, _8194_recOwned, expectedOwnership, out _out3338, out _out3339);
                    r = _out3338;
                    resultingOwnership = _out3339;
                    readIdents = _8195_recIdents;
                  } else {
                    RAST._IType _8196___mcc_h1414 = _source328.dtor_value;
                    RAST._IType _8197_v = _8196___mcc_h1414;
                    RAST._IType _8198_toTpeRust;
                    RAST._IType _out3340;
                    _out3340 = DCOMPUTF16.COMP.GenType(_7822_toTpe, false, false);
                    _8198_toTpeRust = _out3340;
                    r = (((_8193_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_8198_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out3341;
                    DCOMPUTF16._IOwnership _out3342;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3341, out _out3342);
                    r = _out3341;
                    resultingOwnership = _out3342;
                  }
                } else {
                  if ((_8192_nativeFromType).is_Some) {
                    if (object.Equals(_7822_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _8199_recursiveGen;
                      DCOMPUTF16._IOwnership _8200_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8201_recIdents;
                      RAST._IExpr _out3343;
                      DCOMPUTF16._IOwnership _out3344;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3345;
                      DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3343, out _out3344, out _out3345);
                      _8199_recursiveGen = _out3343;
                      _8200_recOwned = _out3344;
                      _8201_recIdents = _out3345;
                      RAST._IExpr _out3346;
                      DCOMPUTF16._IOwnership _out3347;
                      DCOMPUTF16.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMPUTF16.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_8199_recursiveGen, DCOMPUTF16.__default.DafnyCharUnderlying)), _8200_recOwned, expectedOwnership, out _out3346, out _out3347);
                      r = _out3346;
                      resultingOwnership = _out3347;
                      readIdents = _8201_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out3348;
                  DCOMPUTF16._IOwnership _out3349;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3350;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7820_expr, _7821_fromTpe, _8191_b), _8191_b, _7822_toTpe), selfIdent, env, expectedOwnership, out _out3348, out _out3349, out _out3350);
                  r = _out3348;
                  resultingOwnership = _out3349;
                  readIdents = _out3350;
                }
              }
            } else if (_source320.is_Seq) {
              DAST._IType _8202___mcc_h194 = _source320.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _8203_attributes = _8079___mcc_h139;
              bool _8204_erase = _8078___mcc_h138;
              DAST._INewtypeRange _8205_range = _8077___mcc_h137;
              DAST._IType _8206_b = _8076___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _8207_nativeFromType;
                _8207_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8206_b, _8205_range);
                if (object.Equals(_8206_b, _7822_toTpe)) {
                  RAST._IExpr _8208_recursiveGen;
                  DCOMPUTF16._IOwnership _8209_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8210_recIdents;
                  RAST._IExpr _out3351;
                  DCOMPUTF16._IOwnership _out3352;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3353;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3351, out _out3352, out _out3353);
                  _8208_recursiveGen = _out3351;
                  _8209_recOwned = _out3352;
                  _8210_recIdents = _out3353;
                  Std.Wrappers._IOption<RAST._IType> _source329 = _8207_nativeFromType;
                  if (_source329.is_None) {
                    if (_8204_erase) {
                      r = _8208_recursiveGen;
                    } else {
                      r = (_8208_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out3354;
                    DCOMPUTF16._IOwnership _out3355;
                    DCOMPUTF16.COMP.FromOwnership(r, _8209_recOwned, expectedOwnership, out _out3354, out _out3355);
                    r = _out3354;
                    resultingOwnership = _out3355;
                    readIdents = _8210_recIdents;
                  } else {
                    RAST._IType _8211___mcc_h1415 = _source329.dtor_value;
                    RAST._IType _8212_v = _8211___mcc_h1415;
                    RAST._IType _8213_toTpeRust;
                    RAST._IType _out3356;
                    _out3356 = DCOMPUTF16.COMP.GenType(_7822_toTpe, false, false);
                    _8213_toTpeRust = _out3356;
                    r = (((_8208_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_8213_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out3357;
                    DCOMPUTF16._IOwnership _out3358;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3357, out _out3358);
                    r = _out3357;
                    resultingOwnership = _out3358;
                  }
                } else {
                  if ((_8207_nativeFromType).is_Some) {
                    if (object.Equals(_7822_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _8214_recursiveGen;
                      DCOMPUTF16._IOwnership _8215_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8216_recIdents;
                      RAST._IExpr _out3359;
                      DCOMPUTF16._IOwnership _out3360;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3361;
                      DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3359, out _out3360, out _out3361);
                      _8214_recursiveGen = _out3359;
                      _8215_recOwned = _out3360;
                      _8216_recIdents = _out3361;
                      RAST._IExpr _out3362;
                      DCOMPUTF16._IOwnership _out3363;
                      DCOMPUTF16.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMPUTF16.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_8214_recursiveGen, DCOMPUTF16.__default.DafnyCharUnderlying)), _8215_recOwned, expectedOwnership, out _out3362, out _out3363);
                      r = _out3362;
                      resultingOwnership = _out3363;
                      readIdents = _8216_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out3364;
                  DCOMPUTF16._IOwnership _out3365;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3366;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7820_expr, _7821_fromTpe, _8206_b), _8206_b, _7822_toTpe), selfIdent, env, expectedOwnership, out _out3364, out _out3365, out _out3366);
                  r = _out3364;
                  resultingOwnership = _out3365;
                  readIdents = _out3366;
                }
              }
            } else if (_source320.is_Set) {
              DAST._IType _8217___mcc_h197 = _source320.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _8218_attributes = _8079___mcc_h139;
              bool _8219_erase = _8078___mcc_h138;
              DAST._INewtypeRange _8220_range = _8077___mcc_h137;
              DAST._IType _8221_b = _8076___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _8222_nativeFromType;
                _8222_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8221_b, _8220_range);
                if (object.Equals(_8221_b, _7822_toTpe)) {
                  RAST._IExpr _8223_recursiveGen;
                  DCOMPUTF16._IOwnership _8224_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8225_recIdents;
                  RAST._IExpr _out3367;
                  DCOMPUTF16._IOwnership _out3368;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3369;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3367, out _out3368, out _out3369);
                  _8223_recursiveGen = _out3367;
                  _8224_recOwned = _out3368;
                  _8225_recIdents = _out3369;
                  Std.Wrappers._IOption<RAST._IType> _source330 = _8222_nativeFromType;
                  if (_source330.is_None) {
                    if (_8219_erase) {
                      r = _8223_recursiveGen;
                    } else {
                      r = (_8223_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out3370;
                    DCOMPUTF16._IOwnership _out3371;
                    DCOMPUTF16.COMP.FromOwnership(r, _8224_recOwned, expectedOwnership, out _out3370, out _out3371);
                    r = _out3370;
                    resultingOwnership = _out3371;
                    readIdents = _8225_recIdents;
                  } else {
                    RAST._IType _8226___mcc_h1416 = _source330.dtor_value;
                    RAST._IType _8227_v = _8226___mcc_h1416;
                    RAST._IType _8228_toTpeRust;
                    RAST._IType _out3372;
                    _out3372 = DCOMPUTF16.COMP.GenType(_7822_toTpe, false, false);
                    _8228_toTpeRust = _out3372;
                    r = (((_8223_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_8228_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out3373;
                    DCOMPUTF16._IOwnership _out3374;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3373, out _out3374);
                    r = _out3373;
                    resultingOwnership = _out3374;
                  }
                } else {
                  if ((_8222_nativeFromType).is_Some) {
                    if (object.Equals(_7822_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _8229_recursiveGen;
                      DCOMPUTF16._IOwnership _8230_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8231_recIdents;
                      RAST._IExpr _out3375;
                      DCOMPUTF16._IOwnership _out3376;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3377;
                      DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3375, out _out3376, out _out3377);
                      _8229_recursiveGen = _out3375;
                      _8230_recOwned = _out3376;
                      _8231_recIdents = _out3377;
                      RAST._IExpr _out3378;
                      DCOMPUTF16._IOwnership _out3379;
                      DCOMPUTF16.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMPUTF16.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_8229_recursiveGen, DCOMPUTF16.__default.DafnyCharUnderlying)), _8230_recOwned, expectedOwnership, out _out3378, out _out3379);
                      r = _out3378;
                      resultingOwnership = _out3379;
                      readIdents = _8231_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out3380;
                  DCOMPUTF16._IOwnership _out3381;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3382;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7820_expr, _7821_fromTpe, _8221_b), _8221_b, _7822_toTpe), selfIdent, env, expectedOwnership, out _out3380, out _out3381, out _out3382);
                  r = _out3380;
                  resultingOwnership = _out3381;
                  readIdents = _out3382;
                }
              }
            } else if (_source320.is_Multiset) {
              DAST._IType _8232___mcc_h200 = _source320.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _8233_attributes = _8079___mcc_h139;
              bool _8234_erase = _8078___mcc_h138;
              DAST._INewtypeRange _8235_range = _8077___mcc_h137;
              DAST._IType _8236_b = _8076___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _8237_nativeFromType;
                _8237_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8236_b, _8235_range);
                if (object.Equals(_8236_b, _7822_toTpe)) {
                  RAST._IExpr _8238_recursiveGen;
                  DCOMPUTF16._IOwnership _8239_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8240_recIdents;
                  RAST._IExpr _out3383;
                  DCOMPUTF16._IOwnership _out3384;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3385;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3383, out _out3384, out _out3385);
                  _8238_recursiveGen = _out3383;
                  _8239_recOwned = _out3384;
                  _8240_recIdents = _out3385;
                  Std.Wrappers._IOption<RAST._IType> _source331 = _8237_nativeFromType;
                  if (_source331.is_None) {
                    if (_8234_erase) {
                      r = _8238_recursiveGen;
                    } else {
                      r = (_8238_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out3386;
                    DCOMPUTF16._IOwnership _out3387;
                    DCOMPUTF16.COMP.FromOwnership(r, _8239_recOwned, expectedOwnership, out _out3386, out _out3387);
                    r = _out3386;
                    resultingOwnership = _out3387;
                    readIdents = _8240_recIdents;
                  } else {
                    RAST._IType _8241___mcc_h1417 = _source331.dtor_value;
                    RAST._IType _8242_v = _8241___mcc_h1417;
                    RAST._IType _8243_toTpeRust;
                    RAST._IType _out3388;
                    _out3388 = DCOMPUTF16.COMP.GenType(_7822_toTpe, false, false);
                    _8243_toTpeRust = _out3388;
                    r = (((_8238_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_8243_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out3389;
                    DCOMPUTF16._IOwnership _out3390;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3389, out _out3390);
                    r = _out3389;
                    resultingOwnership = _out3390;
                  }
                } else {
                  if ((_8237_nativeFromType).is_Some) {
                    if (object.Equals(_7822_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _8244_recursiveGen;
                      DCOMPUTF16._IOwnership _8245_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8246_recIdents;
                      RAST._IExpr _out3391;
                      DCOMPUTF16._IOwnership _out3392;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3393;
                      DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3391, out _out3392, out _out3393);
                      _8244_recursiveGen = _out3391;
                      _8245_recOwned = _out3392;
                      _8246_recIdents = _out3393;
                      RAST._IExpr _out3394;
                      DCOMPUTF16._IOwnership _out3395;
                      DCOMPUTF16.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMPUTF16.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_8244_recursiveGen, DCOMPUTF16.__default.DafnyCharUnderlying)), _8245_recOwned, expectedOwnership, out _out3394, out _out3395);
                      r = _out3394;
                      resultingOwnership = _out3395;
                      readIdents = _8246_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out3396;
                  DCOMPUTF16._IOwnership _out3397;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3398;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7820_expr, _7821_fromTpe, _8236_b), _8236_b, _7822_toTpe), selfIdent, env, expectedOwnership, out _out3396, out _out3397, out _out3398);
                  r = _out3396;
                  resultingOwnership = _out3397;
                  readIdents = _out3398;
                }
              }
            } else if (_source320.is_Map) {
              DAST._IType _8247___mcc_h203 = _source320.dtor_key;
              DAST._IType _8248___mcc_h204 = _source320.dtor_value;
              Dafny.ISequence<DAST._IAttribute> _8249_attributes = _8079___mcc_h139;
              bool _8250_erase = _8078___mcc_h138;
              DAST._INewtypeRange _8251_range = _8077___mcc_h137;
              DAST._IType _8252_b = _8076___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _8253_nativeFromType;
                _8253_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8252_b, _8251_range);
                if (object.Equals(_8252_b, _7822_toTpe)) {
                  RAST._IExpr _8254_recursiveGen;
                  DCOMPUTF16._IOwnership _8255_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8256_recIdents;
                  RAST._IExpr _out3399;
                  DCOMPUTF16._IOwnership _out3400;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3401;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3399, out _out3400, out _out3401);
                  _8254_recursiveGen = _out3399;
                  _8255_recOwned = _out3400;
                  _8256_recIdents = _out3401;
                  Std.Wrappers._IOption<RAST._IType> _source332 = _8253_nativeFromType;
                  if (_source332.is_None) {
                    if (_8250_erase) {
                      r = _8254_recursiveGen;
                    } else {
                      r = (_8254_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out3402;
                    DCOMPUTF16._IOwnership _out3403;
                    DCOMPUTF16.COMP.FromOwnership(r, _8255_recOwned, expectedOwnership, out _out3402, out _out3403);
                    r = _out3402;
                    resultingOwnership = _out3403;
                    readIdents = _8256_recIdents;
                  } else {
                    RAST._IType _8257___mcc_h1418 = _source332.dtor_value;
                    RAST._IType _8258_v = _8257___mcc_h1418;
                    RAST._IType _8259_toTpeRust;
                    RAST._IType _out3404;
                    _out3404 = DCOMPUTF16.COMP.GenType(_7822_toTpe, false, false);
                    _8259_toTpeRust = _out3404;
                    r = (((_8254_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_8259_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out3405;
                    DCOMPUTF16._IOwnership _out3406;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3405, out _out3406);
                    r = _out3405;
                    resultingOwnership = _out3406;
                  }
                } else {
                  if ((_8253_nativeFromType).is_Some) {
                    if (object.Equals(_7822_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _8260_recursiveGen;
                      DCOMPUTF16._IOwnership _8261_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8262_recIdents;
                      RAST._IExpr _out3407;
                      DCOMPUTF16._IOwnership _out3408;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3409;
                      DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3407, out _out3408, out _out3409);
                      _8260_recursiveGen = _out3407;
                      _8261_recOwned = _out3408;
                      _8262_recIdents = _out3409;
                      RAST._IExpr _out3410;
                      DCOMPUTF16._IOwnership _out3411;
                      DCOMPUTF16.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMPUTF16.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_8260_recursiveGen, DCOMPUTF16.__default.DafnyCharUnderlying)), _8261_recOwned, expectedOwnership, out _out3410, out _out3411);
                      r = _out3410;
                      resultingOwnership = _out3411;
                      readIdents = _8262_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out3412;
                  DCOMPUTF16._IOwnership _out3413;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3414;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7820_expr, _7821_fromTpe, _8252_b), _8252_b, _7822_toTpe), selfIdent, env, expectedOwnership, out _out3412, out _out3413, out _out3414);
                  r = _out3412;
                  resultingOwnership = _out3413;
                  readIdents = _out3414;
                }
              }
            } else if (_source320.is_SetBuilder) {
              DAST._IType _8263___mcc_h209 = _source320.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _8264_attributes = _8079___mcc_h139;
              bool _8265_erase = _8078___mcc_h138;
              DAST._INewtypeRange _8266_range = _8077___mcc_h137;
              DAST._IType _8267_b = _8076___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _8268_nativeFromType;
                _8268_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8267_b, _8266_range);
                if (object.Equals(_8267_b, _7822_toTpe)) {
                  RAST._IExpr _8269_recursiveGen;
                  DCOMPUTF16._IOwnership _8270_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8271_recIdents;
                  RAST._IExpr _out3415;
                  DCOMPUTF16._IOwnership _out3416;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3417;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3415, out _out3416, out _out3417);
                  _8269_recursiveGen = _out3415;
                  _8270_recOwned = _out3416;
                  _8271_recIdents = _out3417;
                  Std.Wrappers._IOption<RAST._IType> _source333 = _8268_nativeFromType;
                  if (_source333.is_None) {
                    if (_8265_erase) {
                      r = _8269_recursiveGen;
                    } else {
                      r = (_8269_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out3418;
                    DCOMPUTF16._IOwnership _out3419;
                    DCOMPUTF16.COMP.FromOwnership(r, _8270_recOwned, expectedOwnership, out _out3418, out _out3419);
                    r = _out3418;
                    resultingOwnership = _out3419;
                    readIdents = _8271_recIdents;
                  } else {
                    RAST._IType _8272___mcc_h1419 = _source333.dtor_value;
                    RAST._IType _8273_v = _8272___mcc_h1419;
                    RAST._IType _8274_toTpeRust;
                    RAST._IType _out3420;
                    _out3420 = DCOMPUTF16.COMP.GenType(_7822_toTpe, false, false);
                    _8274_toTpeRust = _out3420;
                    r = (((_8269_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_8274_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out3421;
                    DCOMPUTF16._IOwnership _out3422;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3421, out _out3422);
                    r = _out3421;
                    resultingOwnership = _out3422;
                  }
                } else {
                  if ((_8268_nativeFromType).is_Some) {
                    if (object.Equals(_7822_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _8275_recursiveGen;
                      DCOMPUTF16._IOwnership _8276_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8277_recIdents;
                      RAST._IExpr _out3423;
                      DCOMPUTF16._IOwnership _out3424;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3425;
                      DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3423, out _out3424, out _out3425);
                      _8275_recursiveGen = _out3423;
                      _8276_recOwned = _out3424;
                      _8277_recIdents = _out3425;
                      RAST._IExpr _out3426;
                      DCOMPUTF16._IOwnership _out3427;
                      DCOMPUTF16.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMPUTF16.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_8275_recursiveGen, DCOMPUTF16.__default.DafnyCharUnderlying)), _8276_recOwned, expectedOwnership, out _out3426, out _out3427);
                      r = _out3426;
                      resultingOwnership = _out3427;
                      readIdents = _8277_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out3428;
                  DCOMPUTF16._IOwnership _out3429;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3430;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7820_expr, _7821_fromTpe, _8267_b), _8267_b, _7822_toTpe), selfIdent, env, expectedOwnership, out _out3428, out _out3429, out _out3430);
                  r = _out3428;
                  resultingOwnership = _out3429;
                  readIdents = _out3430;
                }
              }
            } else if (_source320.is_MapBuilder) {
              DAST._IType _8278___mcc_h212 = _source320.dtor_key;
              DAST._IType _8279___mcc_h213 = _source320.dtor_value;
              Dafny.ISequence<DAST._IAttribute> _8280_attributes = _8079___mcc_h139;
              bool _8281_erase = _8078___mcc_h138;
              DAST._INewtypeRange _8282_range = _8077___mcc_h137;
              DAST._IType _8283_b = _8076___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _8284_nativeFromType;
                _8284_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8283_b, _8282_range);
                if (object.Equals(_8283_b, _7822_toTpe)) {
                  RAST._IExpr _8285_recursiveGen;
                  DCOMPUTF16._IOwnership _8286_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8287_recIdents;
                  RAST._IExpr _out3431;
                  DCOMPUTF16._IOwnership _out3432;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3433;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3431, out _out3432, out _out3433);
                  _8285_recursiveGen = _out3431;
                  _8286_recOwned = _out3432;
                  _8287_recIdents = _out3433;
                  Std.Wrappers._IOption<RAST._IType> _source334 = _8284_nativeFromType;
                  if (_source334.is_None) {
                    if (_8281_erase) {
                      r = _8285_recursiveGen;
                    } else {
                      r = (_8285_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out3434;
                    DCOMPUTF16._IOwnership _out3435;
                    DCOMPUTF16.COMP.FromOwnership(r, _8286_recOwned, expectedOwnership, out _out3434, out _out3435);
                    r = _out3434;
                    resultingOwnership = _out3435;
                    readIdents = _8287_recIdents;
                  } else {
                    RAST._IType _8288___mcc_h1420 = _source334.dtor_value;
                    RAST._IType _8289_v = _8288___mcc_h1420;
                    RAST._IType _8290_toTpeRust;
                    RAST._IType _out3436;
                    _out3436 = DCOMPUTF16.COMP.GenType(_7822_toTpe, false, false);
                    _8290_toTpeRust = _out3436;
                    r = (((_8285_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_8290_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out3437;
                    DCOMPUTF16._IOwnership _out3438;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3437, out _out3438);
                    r = _out3437;
                    resultingOwnership = _out3438;
                  }
                } else {
                  if ((_8284_nativeFromType).is_Some) {
                    if (object.Equals(_7822_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _8291_recursiveGen;
                      DCOMPUTF16._IOwnership _8292_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8293_recIdents;
                      RAST._IExpr _out3439;
                      DCOMPUTF16._IOwnership _out3440;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3441;
                      DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3439, out _out3440, out _out3441);
                      _8291_recursiveGen = _out3439;
                      _8292_recOwned = _out3440;
                      _8293_recIdents = _out3441;
                      RAST._IExpr _out3442;
                      DCOMPUTF16._IOwnership _out3443;
                      DCOMPUTF16.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMPUTF16.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_8291_recursiveGen, DCOMPUTF16.__default.DafnyCharUnderlying)), _8292_recOwned, expectedOwnership, out _out3442, out _out3443);
                      r = _out3442;
                      resultingOwnership = _out3443;
                      readIdents = _8293_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out3444;
                  DCOMPUTF16._IOwnership _out3445;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3446;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7820_expr, _7821_fromTpe, _8283_b), _8283_b, _7822_toTpe), selfIdent, env, expectedOwnership, out _out3444, out _out3445, out _out3446);
                  r = _out3444;
                  resultingOwnership = _out3445;
                  readIdents = _out3446;
                }
              }
            } else if (_source320.is_Arrow) {
              Dafny.ISequence<DAST._IType> _8294___mcc_h218 = _source320.dtor_args;
              DAST._IType _8295___mcc_h219 = _source320.dtor_result;
              Dafny.ISequence<DAST._IAttribute> _8296_attributes = _8079___mcc_h139;
              bool _8297_erase = _8078___mcc_h138;
              DAST._INewtypeRange _8298_range = _8077___mcc_h137;
              DAST._IType _8299_b = _8076___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _8300_nativeFromType;
                _8300_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8299_b, _8298_range);
                if (object.Equals(_8299_b, _7822_toTpe)) {
                  RAST._IExpr _8301_recursiveGen;
                  DCOMPUTF16._IOwnership _8302_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8303_recIdents;
                  RAST._IExpr _out3447;
                  DCOMPUTF16._IOwnership _out3448;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3449;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3447, out _out3448, out _out3449);
                  _8301_recursiveGen = _out3447;
                  _8302_recOwned = _out3448;
                  _8303_recIdents = _out3449;
                  Std.Wrappers._IOption<RAST._IType> _source335 = _8300_nativeFromType;
                  if (_source335.is_None) {
                    if (_8297_erase) {
                      r = _8301_recursiveGen;
                    } else {
                      r = (_8301_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out3450;
                    DCOMPUTF16._IOwnership _out3451;
                    DCOMPUTF16.COMP.FromOwnership(r, _8302_recOwned, expectedOwnership, out _out3450, out _out3451);
                    r = _out3450;
                    resultingOwnership = _out3451;
                    readIdents = _8303_recIdents;
                  } else {
                    RAST._IType _8304___mcc_h1421 = _source335.dtor_value;
                    RAST._IType _8305_v = _8304___mcc_h1421;
                    RAST._IType _8306_toTpeRust;
                    RAST._IType _out3452;
                    _out3452 = DCOMPUTF16.COMP.GenType(_7822_toTpe, false, false);
                    _8306_toTpeRust = _out3452;
                    r = (((_8301_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_8306_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out3453;
                    DCOMPUTF16._IOwnership _out3454;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3453, out _out3454);
                    r = _out3453;
                    resultingOwnership = _out3454;
                  }
                } else {
                  if ((_8300_nativeFromType).is_Some) {
                    if (object.Equals(_7822_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _8307_recursiveGen;
                      DCOMPUTF16._IOwnership _8308_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8309_recIdents;
                      RAST._IExpr _out3455;
                      DCOMPUTF16._IOwnership _out3456;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3457;
                      DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3455, out _out3456, out _out3457);
                      _8307_recursiveGen = _out3455;
                      _8308_recOwned = _out3456;
                      _8309_recIdents = _out3457;
                      RAST._IExpr _out3458;
                      DCOMPUTF16._IOwnership _out3459;
                      DCOMPUTF16.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMPUTF16.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_8307_recursiveGen, DCOMPUTF16.__default.DafnyCharUnderlying)), _8308_recOwned, expectedOwnership, out _out3458, out _out3459);
                      r = _out3458;
                      resultingOwnership = _out3459;
                      readIdents = _8309_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out3460;
                  DCOMPUTF16._IOwnership _out3461;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3462;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7820_expr, _7821_fromTpe, _8299_b), _8299_b, _7822_toTpe), selfIdent, env, expectedOwnership, out _out3460, out _out3461, out _out3462);
                  r = _out3460;
                  resultingOwnership = _out3461;
                  readIdents = _out3462;
                }
              }
            } else if (_source320.is_Primitive) {
              DAST._IPrimitive _8310___mcc_h224 = _source320.dtor_Primitive_a0;
              Dafny.ISequence<DAST._IAttribute> _8311_attributes = _8079___mcc_h139;
              bool _8312_erase = _8078___mcc_h138;
              DAST._INewtypeRange _8313_range = _8077___mcc_h137;
              DAST._IType _8314_b = _8076___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _8315_nativeFromType;
                _8315_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8314_b, _8313_range);
                if (object.Equals(_8314_b, _7822_toTpe)) {
                  RAST._IExpr _8316_recursiveGen;
                  DCOMPUTF16._IOwnership _8317_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8318_recIdents;
                  RAST._IExpr _out3463;
                  DCOMPUTF16._IOwnership _out3464;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3465;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3463, out _out3464, out _out3465);
                  _8316_recursiveGen = _out3463;
                  _8317_recOwned = _out3464;
                  _8318_recIdents = _out3465;
                  Std.Wrappers._IOption<RAST._IType> _source336 = _8315_nativeFromType;
                  if (_source336.is_None) {
                    if (_8312_erase) {
                      r = _8316_recursiveGen;
                    } else {
                      r = (_8316_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out3466;
                    DCOMPUTF16._IOwnership _out3467;
                    DCOMPUTF16.COMP.FromOwnership(r, _8317_recOwned, expectedOwnership, out _out3466, out _out3467);
                    r = _out3466;
                    resultingOwnership = _out3467;
                    readIdents = _8318_recIdents;
                  } else {
                    RAST._IType _8319___mcc_h1422 = _source336.dtor_value;
                    RAST._IType _8320_v = _8319___mcc_h1422;
                    RAST._IType _8321_toTpeRust;
                    RAST._IType _out3468;
                    _out3468 = DCOMPUTF16.COMP.GenType(_7822_toTpe, false, false);
                    _8321_toTpeRust = _out3468;
                    r = (((_8316_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_8321_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out3469;
                    DCOMPUTF16._IOwnership _out3470;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3469, out _out3470);
                    r = _out3469;
                    resultingOwnership = _out3470;
                  }
                } else {
                  if ((_8315_nativeFromType).is_Some) {
                    if (object.Equals(_7822_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _8322_recursiveGen;
                      DCOMPUTF16._IOwnership _8323_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8324_recIdents;
                      RAST._IExpr _out3471;
                      DCOMPUTF16._IOwnership _out3472;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3473;
                      DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3471, out _out3472, out _out3473);
                      _8322_recursiveGen = _out3471;
                      _8323_recOwned = _out3472;
                      _8324_recIdents = _out3473;
                      RAST._IExpr _out3474;
                      DCOMPUTF16._IOwnership _out3475;
                      DCOMPUTF16.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMPUTF16.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_8322_recursiveGen, DCOMPUTF16.__default.DafnyCharUnderlying)), _8323_recOwned, expectedOwnership, out _out3474, out _out3475);
                      r = _out3474;
                      resultingOwnership = _out3475;
                      readIdents = _8324_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out3476;
                  DCOMPUTF16._IOwnership _out3477;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3478;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7820_expr, _7821_fromTpe, _8314_b), _8314_b, _7822_toTpe), selfIdent, env, expectedOwnership, out _out3476, out _out3477, out _out3478);
                  r = _out3476;
                  resultingOwnership = _out3477;
                  readIdents = _out3478;
                }
              }
            } else if (_source320.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _8325___mcc_h227 = _source320.dtor_Passthrough_a0;
              Dafny.ISequence<DAST._IAttribute> _8326_attributes = _8079___mcc_h139;
              bool _8327_erase = _8078___mcc_h138;
              DAST._INewtypeRange _8328_range = _8077___mcc_h137;
              DAST._IType _8329_b = _8076___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _8330_nativeFromType;
                _8330_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8329_b, _8328_range);
                if (object.Equals(_8329_b, _7822_toTpe)) {
                  RAST._IExpr _8331_recursiveGen;
                  DCOMPUTF16._IOwnership _8332_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8333_recIdents;
                  RAST._IExpr _out3479;
                  DCOMPUTF16._IOwnership _out3480;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3481;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3479, out _out3480, out _out3481);
                  _8331_recursiveGen = _out3479;
                  _8332_recOwned = _out3480;
                  _8333_recIdents = _out3481;
                  Std.Wrappers._IOption<RAST._IType> _source337 = _8330_nativeFromType;
                  if (_source337.is_None) {
                    if (_8327_erase) {
                      r = _8331_recursiveGen;
                    } else {
                      r = (_8331_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out3482;
                    DCOMPUTF16._IOwnership _out3483;
                    DCOMPUTF16.COMP.FromOwnership(r, _8332_recOwned, expectedOwnership, out _out3482, out _out3483);
                    r = _out3482;
                    resultingOwnership = _out3483;
                    readIdents = _8333_recIdents;
                  } else {
                    RAST._IType _8334___mcc_h1423 = _source337.dtor_value;
                    RAST._IType _8335_v = _8334___mcc_h1423;
                    RAST._IType _8336_toTpeRust;
                    RAST._IType _out3484;
                    _out3484 = DCOMPUTF16.COMP.GenType(_7822_toTpe, false, false);
                    _8336_toTpeRust = _out3484;
                    r = (((_8331_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_8336_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out3485;
                    DCOMPUTF16._IOwnership _out3486;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3485, out _out3486);
                    r = _out3485;
                    resultingOwnership = _out3486;
                  }
                } else {
                  if ((_8330_nativeFromType).is_Some) {
                    if (object.Equals(_7822_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _8337_recursiveGen;
                      DCOMPUTF16._IOwnership _8338_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8339_recIdents;
                      RAST._IExpr _out3487;
                      DCOMPUTF16._IOwnership _out3488;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3489;
                      DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3487, out _out3488, out _out3489);
                      _8337_recursiveGen = _out3487;
                      _8338_recOwned = _out3488;
                      _8339_recIdents = _out3489;
                      RAST._IExpr _out3490;
                      DCOMPUTF16._IOwnership _out3491;
                      DCOMPUTF16.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMPUTF16.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_8337_recursiveGen, DCOMPUTF16.__default.DafnyCharUnderlying)), _8338_recOwned, expectedOwnership, out _out3490, out _out3491);
                      r = _out3490;
                      resultingOwnership = _out3491;
                      readIdents = _8339_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out3492;
                  DCOMPUTF16._IOwnership _out3493;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3494;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7820_expr, _7821_fromTpe, _8329_b), _8329_b, _7822_toTpe), selfIdent, env, expectedOwnership, out _out3492, out _out3493, out _out3494);
                  r = _out3492;
                  resultingOwnership = _out3493;
                  readIdents = _out3494;
                }
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _8340___mcc_h230 = _source320.dtor_TypeArg_a0;
              Dafny.ISequence<DAST._IAttribute> _8341_attributes = _8079___mcc_h139;
              bool _8342_erase = _8078___mcc_h138;
              DAST._INewtypeRange _8343_range = _8077___mcc_h137;
              DAST._IType _8344_b = _8076___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _8345_nativeFromType;
                _8345_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8344_b, _8343_range);
                if (object.Equals(_8344_b, _7822_toTpe)) {
                  RAST._IExpr _8346_recursiveGen;
                  DCOMPUTF16._IOwnership _8347_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8348_recIdents;
                  RAST._IExpr _out3495;
                  DCOMPUTF16._IOwnership _out3496;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3497;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3495, out _out3496, out _out3497);
                  _8346_recursiveGen = _out3495;
                  _8347_recOwned = _out3496;
                  _8348_recIdents = _out3497;
                  Std.Wrappers._IOption<RAST._IType> _source338 = _8345_nativeFromType;
                  if (_source338.is_None) {
                    if (_8342_erase) {
                      r = _8346_recursiveGen;
                    } else {
                      r = (_8346_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out3498;
                    DCOMPUTF16._IOwnership _out3499;
                    DCOMPUTF16.COMP.FromOwnership(r, _8347_recOwned, expectedOwnership, out _out3498, out _out3499);
                    r = _out3498;
                    resultingOwnership = _out3499;
                    readIdents = _8348_recIdents;
                  } else {
                    RAST._IType _8349___mcc_h1424 = _source338.dtor_value;
                    RAST._IType _8350_v = _8349___mcc_h1424;
                    RAST._IType _8351_toTpeRust;
                    RAST._IType _out3500;
                    _out3500 = DCOMPUTF16.COMP.GenType(_7822_toTpe, false, false);
                    _8351_toTpeRust = _out3500;
                    r = (((_8346_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_8351_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out3501;
                    DCOMPUTF16._IOwnership _out3502;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3501, out _out3502);
                    r = _out3501;
                    resultingOwnership = _out3502;
                  }
                } else {
                  if ((_8345_nativeFromType).is_Some) {
                    if (object.Equals(_7822_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _8352_recursiveGen;
                      DCOMPUTF16._IOwnership _8353_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8354_recIdents;
                      RAST._IExpr _out3503;
                      DCOMPUTF16._IOwnership _out3504;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3505;
                      DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3503, out _out3504, out _out3505);
                      _8352_recursiveGen = _out3503;
                      _8353_recOwned = _out3504;
                      _8354_recIdents = _out3505;
                      RAST._IExpr _out3506;
                      DCOMPUTF16._IOwnership _out3507;
                      DCOMPUTF16.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMPUTF16.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_8352_recursiveGen, DCOMPUTF16.__default.DafnyCharUnderlying)), _8353_recOwned, expectedOwnership, out _out3506, out _out3507);
                      r = _out3506;
                      resultingOwnership = _out3507;
                      readIdents = _8354_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out3508;
                  DCOMPUTF16._IOwnership _out3509;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3510;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7820_expr, _7821_fromTpe, _8344_b), _8344_b, _7822_toTpe), selfIdent, env, expectedOwnership, out _out3508, out _out3509, out _out3510);
                  r = _out3508;
                  resultingOwnership = _out3509;
                  readIdents = _out3510;
                }
              }
            }
          }
        } else if (_source308.is_Nullable) {
          DAST._IType _8355___mcc_h233 = _source308.dtor_Nullable_a0;
          DAST._IType _source339 = _7827___mcc_h1;
          if (_source339.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8356___mcc_h237 = _source339.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _8357___mcc_h238 = _source339.dtor_typeArgs;
            DAST._IResolvedType _8358___mcc_h239 = _source339.dtor_resolved;
            DAST._IResolvedType _source340 = _8358___mcc_h239;
            if (_source340.is_Datatype) {
              DAST._IDatatypeType _8359___mcc_h246 = _source340.dtor_datatypeType;
              {
                RAST._IExpr _8360_recursiveGen;
                DCOMPUTF16._IOwnership _8361_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8362_recIdents;
                RAST._IExpr _out3511;
                DCOMPUTF16._IOwnership _out3512;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3513;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3511, out _out3512, out _out3513);
                _8360_recursiveGen = _out3511;
                _8361_recOwned = _out3512;
                _8362_recIdents = _out3513;
                r = _8360_recursiveGen;
                if (object.Equals(_8361_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                RAST._IExpr _out3514;
                DCOMPUTF16._IOwnership _out3515;
                DCOMPUTF16.COMP.FromOwnership(r, _8361_recOwned, expectedOwnership, out _out3514, out _out3515);
                r = _out3514;
                resultingOwnership = _out3515;
                readIdents = _8362_recIdents;
              }
            } else if (_source340.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8363___mcc_h249 = _source340.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _8364___mcc_h250 = _source340.dtor_attributes;
              {
                RAST._IExpr _8365_recursiveGen;
                DCOMPUTF16._IOwnership _8366_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8367_recIdents;
                RAST._IExpr _out3516;
                DCOMPUTF16._IOwnership _out3517;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3518;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3516, out _out3517, out _out3518);
                _8365_recursiveGen = _out3516;
                _8366_recOwned = _out3517;
                _8367_recIdents = _out3518;
                r = _8365_recursiveGen;
                if (object.Equals(_8366_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                RAST._IExpr _out3519;
                DCOMPUTF16._IOwnership _out3520;
                DCOMPUTF16.COMP.FromOwnership(r, _8366_recOwned, expectedOwnership, out _out3519, out _out3520);
                r = _out3519;
                resultingOwnership = _out3520;
                readIdents = _8367_recIdents;
              }
            } else {
              DAST._IType _8368___mcc_h255 = _source340.dtor_baseType;
              DAST._INewtypeRange _8369___mcc_h256 = _source340.dtor_range;
              bool _8370___mcc_h257 = _source340.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _8371___mcc_h258 = _source340.dtor_attributes;
              {
                RAST._IExpr _8372_recursiveGen;
                DCOMPUTF16._IOwnership _8373_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8374_recIdents;
                RAST._IExpr _out3521;
                DCOMPUTF16._IOwnership _out3522;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3523;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3521, out _out3522, out _out3523);
                _8372_recursiveGen = _out3521;
                _8373_recOwned = _out3522;
                _8374_recIdents = _out3523;
                r = _8372_recursiveGen;
                if (object.Equals(_8373_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                RAST._IExpr _out3524;
                DCOMPUTF16._IOwnership _out3525;
                DCOMPUTF16.COMP.FromOwnership(r, _8373_recOwned, expectedOwnership, out _out3524, out _out3525);
                r = _out3524;
                resultingOwnership = _out3525;
                readIdents = _8374_recIdents;
              }
            }
          } else if (_source339.is_Nullable) {
            DAST._IType _8375___mcc_h267 = _source339.dtor_Nullable_a0;
            {
              RAST._IExpr _8376_recursiveGen;
              DCOMPUTF16._IOwnership _8377_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8378_recIdents;
              RAST._IExpr _out3526;
              DCOMPUTF16._IOwnership _out3527;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3528;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3526, out _out3527, out _out3528);
              _8376_recursiveGen = _out3526;
              _8377_recOwned = _out3527;
              _8378_recIdents = _out3528;
              r = _8376_recursiveGen;
              if (object.Equals(_8377_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3529;
              DCOMPUTF16._IOwnership _out3530;
              DCOMPUTF16.COMP.FromOwnership(r, _8377_recOwned, expectedOwnership, out _out3529, out _out3530);
              r = _out3529;
              resultingOwnership = _out3530;
              readIdents = _8378_recIdents;
            }
          } else if (_source339.is_Tuple) {
            Dafny.ISequence<DAST._IType> _8379___mcc_h270 = _source339.dtor_Tuple_a0;
            {
              RAST._IExpr _8380_recursiveGen;
              DCOMPUTF16._IOwnership _8381_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8382_recIdents;
              RAST._IExpr _out3531;
              DCOMPUTF16._IOwnership _out3532;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3533;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3531, out _out3532, out _out3533);
              _8380_recursiveGen = _out3531;
              _8381_recOwned = _out3532;
              _8382_recIdents = _out3533;
              r = _8380_recursiveGen;
              if (object.Equals(_8381_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3534;
              DCOMPUTF16._IOwnership _out3535;
              DCOMPUTF16.COMP.FromOwnership(r, _8381_recOwned, expectedOwnership, out _out3534, out _out3535);
              r = _out3534;
              resultingOwnership = _out3535;
              readIdents = _8382_recIdents;
            }
          } else if (_source339.is_Array) {
            DAST._IType _8383___mcc_h273 = _source339.dtor_element;
            BigInteger _8384___mcc_h274 = _source339.dtor_dims;
            {
              RAST._IExpr _8385_recursiveGen;
              DCOMPUTF16._IOwnership _8386_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8387_recIdents;
              RAST._IExpr _out3536;
              DCOMPUTF16._IOwnership _out3537;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3538;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3536, out _out3537, out _out3538);
              _8385_recursiveGen = _out3536;
              _8386_recOwned = _out3537;
              _8387_recIdents = _out3538;
              r = _8385_recursiveGen;
              if (object.Equals(_8386_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3539;
              DCOMPUTF16._IOwnership _out3540;
              DCOMPUTF16.COMP.FromOwnership(r, _8386_recOwned, expectedOwnership, out _out3539, out _out3540);
              r = _out3539;
              resultingOwnership = _out3540;
              readIdents = _8387_recIdents;
            }
          } else if (_source339.is_Seq) {
            DAST._IType _8388___mcc_h279 = _source339.dtor_element;
            {
              RAST._IExpr _8389_recursiveGen;
              DCOMPUTF16._IOwnership _8390_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8391_recIdents;
              RAST._IExpr _out3541;
              DCOMPUTF16._IOwnership _out3542;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3543;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3541, out _out3542, out _out3543);
              _8389_recursiveGen = _out3541;
              _8390_recOwned = _out3542;
              _8391_recIdents = _out3543;
              r = _8389_recursiveGen;
              if (object.Equals(_8390_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3544;
              DCOMPUTF16._IOwnership _out3545;
              DCOMPUTF16.COMP.FromOwnership(r, _8390_recOwned, expectedOwnership, out _out3544, out _out3545);
              r = _out3544;
              resultingOwnership = _out3545;
              readIdents = _8391_recIdents;
            }
          } else if (_source339.is_Set) {
            DAST._IType _8392___mcc_h282 = _source339.dtor_element;
            {
              RAST._IExpr _8393_recursiveGen;
              DCOMPUTF16._IOwnership _8394_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8395_recIdents;
              RAST._IExpr _out3546;
              DCOMPUTF16._IOwnership _out3547;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3548;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3546, out _out3547, out _out3548);
              _8393_recursiveGen = _out3546;
              _8394_recOwned = _out3547;
              _8395_recIdents = _out3548;
              r = _8393_recursiveGen;
              if (object.Equals(_8394_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3549;
              DCOMPUTF16._IOwnership _out3550;
              DCOMPUTF16.COMP.FromOwnership(r, _8394_recOwned, expectedOwnership, out _out3549, out _out3550);
              r = _out3549;
              resultingOwnership = _out3550;
              readIdents = _8395_recIdents;
            }
          } else if (_source339.is_Multiset) {
            DAST._IType _8396___mcc_h285 = _source339.dtor_element;
            {
              RAST._IExpr _8397_recursiveGen;
              DCOMPUTF16._IOwnership _8398_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8399_recIdents;
              RAST._IExpr _out3551;
              DCOMPUTF16._IOwnership _out3552;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3553;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3551, out _out3552, out _out3553);
              _8397_recursiveGen = _out3551;
              _8398_recOwned = _out3552;
              _8399_recIdents = _out3553;
              r = _8397_recursiveGen;
              if (object.Equals(_8398_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3554;
              DCOMPUTF16._IOwnership _out3555;
              DCOMPUTF16.COMP.FromOwnership(r, _8398_recOwned, expectedOwnership, out _out3554, out _out3555);
              r = _out3554;
              resultingOwnership = _out3555;
              readIdents = _8399_recIdents;
            }
          } else if (_source339.is_Map) {
            DAST._IType _8400___mcc_h288 = _source339.dtor_key;
            DAST._IType _8401___mcc_h289 = _source339.dtor_value;
            {
              RAST._IExpr _8402_recursiveGen;
              DCOMPUTF16._IOwnership _8403_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8404_recIdents;
              RAST._IExpr _out3556;
              DCOMPUTF16._IOwnership _out3557;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3558;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3556, out _out3557, out _out3558);
              _8402_recursiveGen = _out3556;
              _8403_recOwned = _out3557;
              _8404_recIdents = _out3558;
              r = _8402_recursiveGen;
              if (object.Equals(_8403_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3559;
              DCOMPUTF16._IOwnership _out3560;
              DCOMPUTF16.COMP.FromOwnership(r, _8403_recOwned, expectedOwnership, out _out3559, out _out3560);
              r = _out3559;
              resultingOwnership = _out3560;
              readIdents = _8404_recIdents;
            }
          } else if (_source339.is_SetBuilder) {
            DAST._IType _8405___mcc_h294 = _source339.dtor_element;
            {
              RAST._IExpr _8406_recursiveGen;
              DCOMPUTF16._IOwnership _8407_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8408_recIdents;
              RAST._IExpr _out3561;
              DCOMPUTF16._IOwnership _out3562;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3563;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3561, out _out3562, out _out3563);
              _8406_recursiveGen = _out3561;
              _8407_recOwned = _out3562;
              _8408_recIdents = _out3563;
              r = _8406_recursiveGen;
              if (object.Equals(_8407_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3564;
              DCOMPUTF16._IOwnership _out3565;
              DCOMPUTF16.COMP.FromOwnership(r, _8407_recOwned, expectedOwnership, out _out3564, out _out3565);
              r = _out3564;
              resultingOwnership = _out3565;
              readIdents = _8408_recIdents;
            }
          } else if (_source339.is_MapBuilder) {
            DAST._IType _8409___mcc_h297 = _source339.dtor_key;
            DAST._IType _8410___mcc_h298 = _source339.dtor_value;
            {
              RAST._IExpr _8411_recursiveGen;
              DCOMPUTF16._IOwnership _8412_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8413_recIdents;
              RAST._IExpr _out3566;
              DCOMPUTF16._IOwnership _out3567;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3568;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3566, out _out3567, out _out3568);
              _8411_recursiveGen = _out3566;
              _8412_recOwned = _out3567;
              _8413_recIdents = _out3568;
              r = _8411_recursiveGen;
              if (object.Equals(_8412_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3569;
              DCOMPUTF16._IOwnership _out3570;
              DCOMPUTF16.COMP.FromOwnership(r, _8412_recOwned, expectedOwnership, out _out3569, out _out3570);
              r = _out3569;
              resultingOwnership = _out3570;
              readIdents = _8413_recIdents;
            }
          } else if (_source339.is_Arrow) {
            Dafny.ISequence<DAST._IType> _8414___mcc_h303 = _source339.dtor_args;
            DAST._IType _8415___mcc_h304 = _source339.dtor_result;
            {
              RAST._IExpr _8416_recursiveGen;
              DCOMPUTF16._IOwnership _8417_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8418_recIdents;
              RAST._IExpr _out3571;
              DCOMPUTF16._IOwnership _out3572;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3573;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3571, out _out3572, out _out3573);
              _8416_recursiveGen = _out3571;
              _8417_recOwned = _out3572;
              _8418_recIdents = _out3573;
              r = _8416_recursiveGen;
              if (object.Equals(_8417_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3574;
              DCOMPUTF16._IOwnership _out3575;
              DCOMPUTF16.COMP.FromOwnership(r, _8417_recOwned, expectedOwnership, out _out3574, out _out3575);
              r = _out3574;
              resultingOwnership = _out3575;
              readIdents = _8418_recIdents;
            }
          } else if (_source339.is_Primitive) {
            DAST._IPrimitive _8419___mcc_h309 = _source339.dtor_Primitive_a0;
            {
              RAST._IExpr _8420_recursiveGen;
              DCOMPUTF16._IOwnership _8421_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8422_recIdents;
              RAST._IExpr _out3576;
              DCOMPUTF16._IOwnership _out3577;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3578;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3576, out _out3577, out _out3578);
              _8420_recursiveGen = _out3576;
              _8421_recOwned = _out3577;
              _8422_recIdents = _out3578;
              r = _8420_recursiveGen;
              if (object.Equals(_8421_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3579;
              DCOMPUTF16._IOwnership _out3580;
              DCOMPUTF16.COMP.FromOwnership(r, _8421_recOwned, expectedOwnership, out _out3579, out _out3580);
              r = _out3579;
              resultingOwnership = _out3580;
              readIdents = _8422_recIdents;
            }
          } else if (_source339.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _8423___mcc_h312 = _source339.dtor_Passthrough_a0;
            {
              RAST._IExpr _8424_recursiveGen;
              DCOMPUTF16._IOwnership _8425_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8426_recIdents;
              RAST._IExpr _out3581;
              DCOMPUTF16._IOwnership _out3582;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3583;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3581, out _out3582, out _out3583);
              _8424_recursiveGen = _out3581;
              _8425_recOwned = _out3582;
              _8426_recIdents = _out3583;
              r = _8424_recursiveGen;
              if (object.Equals(_8425_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3584;
              DCOMPUTF16._IOwnership _out3585;
              DCOMPUTF16.COMP.FromOwnership(r, _8425_recOwned, expectedOwnership, out _out3584, out _out3585);
              r = _out3584;
              resultingOwnership = _out3585;
              readIdents = _8426_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _8427___mcc_h315 = _source339.dtor_TypeArg_a0;
            {
              RAST._IExpr _8428_recursiveGen;
              DCOMPUTF16._IOwnership _8429_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8430_recIdents;
              RAST._IExpr _out3586;
              DCOMPUTF16._IOwnership _out3587;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3588;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3586, out _out3587, out _out3588);
              _8428_recursiveGen = _out3586;
              _8429_recOwned = _out3587;
              _8430_recIdents = _out3588;
              r = _8428_recursiveGen;
              if (object.Equals(_8429_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3589;
              DCOMPUTF16._IOwnership _out3590;
              DCOMPUTF16.COMP.FromOwnership(r, _8429_recOwned, expectedOwnership, out _out3589, out _out3590);
              r = _out3589;
              resultingOwnership = _out3590;
              readIdents = _8430_recIdents;
            }
          }
        } else if (_source308.is_Tuple) {
          Dafny.ISequence<DAST._IType> _8431___mcc_h318 = _source308.dtor_Tuple_a0;
          DAST._IType _source341 = _7827___mcc_h1;
          if (_source341.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8432___mcc_h322 = _source341.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _8433___mcc_h323 = _source341.dtor_typeArgs;
            DAST._IResolvedType _8434___mcc_h324 = _source341.dtor_resolved;
            DAST._IResolvedType _source342 = _8434___mcc_h324;
            if (_source342.is_Datatype) {
              DAST._IDatatypeType _8435___mcc_h328 = _source342.dtor_datatypeType;
              {
                RAST._IExpr _8436_recursiveGen;
                DCOMPUTF16._IOwnership _8437_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8438_recIdents;
                RAST._IExpr _out3591;
                DCOMPUTF16._IOwnership _out3592;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3593;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3591, out _out3592, out _out3593);
                _8436_recursiveGen = _out3591;
                _8437_recOwned = _out3592;
                _8438_recIdents = _out3593;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8436_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3594;
                DCOMPUTF16._IOwnership _out3595;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3594, out _out3595);
                r = _out3594;
                resultingOwnership = _out3595;
                readIdents = _8438_recIdents;
              }
            } else if (_source342.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8439___mcc_h330 = _source342.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _8440___mcc_h331 = _source342.dtor_attributes;
              {
                RAST._IExpr _8441_recursiveGen;
                DCOMPUTF16._IOwnership _8442_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8443_recIdents;
                RAST._IExpr _out3596;
                DCOMPUTF16._IOwnership _out3597;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3598;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3596, out _out3597, out _out3598);
                _8441_recursiveGen = _out3596;
                _8442_recOwned = _out3597;
                _8443_recIdents = _out3598;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8441_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3599;
                DCOMPUTF16._IOwnership _out3600;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3599, out _out3600);
                r = _out3599;
                resultingOwnership = _out3600;
                readIdents = _8443_recIdents;
              }
            } else {
              DAST._IType _8444___mcc_h334 = _source342.dtor_baseType;
              DAST._INewtypeRange _8445___mcc_h335 = _source342.dtor_range;
              bool _8446___mcc_h336 = _source342.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _8447___mcc_h337 = _source342.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _8448_attributes = _8447___mcc_h337;
              bool _8449_erase = _8446___mcc_h336;
              DAST._INewtypeRange _8450_range = _8445___mcc_h335;
              DAST._IType _8451_b = _8444___mcc_h334;
              {
                Std.Wrappers._IOption<RAST._IType> _8452_nativeToType;
                _8452_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_8451_b, _8450_range);
                if (object.Equals(_7821_fromTpe, _8451_b)) {
                  RAST._IExpr _8453_recursiveGen;
                  DCOMPUTF16._IOwnership _8454_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8455_recIdents;
                  RAST._IExpr _out3601;
                  DCOMPUTF16._IOwnership _out3602;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3603;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3601, out _out3602, out _out3603);
                  _8453_recursiveGen = _out3601;
                  _8454_recOwned = _out3602;
                  _8455_recIdents = _out3603;
                  Std.Wrappers._IOption<RAST._IType> _source343 = _8452_nativeToType;
                  if (_source343.is_None) {
                    if (_8449_erase) {
                      r = _8453_recursiveGen;
                    } else {
                      RAST._IType _8456_rhsType;
                      RAST._IType _out3604;
                      _out3604 = DCOMPUTF16.COMP.GenType(_7822_toTpe, true, false);
                      _8456_rhsType = _out3604;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_8456_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_8453_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out3605;
                    DCOMPUTF16._IOwnership _out3606;
                    DCOMPUTF16.COMP.FromOwnership(r, _8454_recOwned, expectedOwnership, out _out3605, out _out3606);
                    r = _out3605;
                    resultingOwnership = _out3606;
                  } else {
                    RAST._IType _8457___mcc_h1425 = _source343.dtor_value;
                    RAST._IType _8458_v = _8457___mcc_h1425;
                    r = (((_8453_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_8458_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out3607;
                    DCOMPUTF16._IOwnership _out3608;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3607, out _out3608);
                    r = _out3607;
                    resultingOwnership = _out3608;
                  }
                  readIdents = _8455_recIdents;
                } else {
                  if ((_8452_nativeToType).is_Some) {
                    DAST._IType _source344 = _7821_fromTpe;
                    if (_source344.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8459___mcc_h1426 = _source344.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _8460___mcc_h1427 = _source344.dtor_typeArgs;
                      DAST._IResolvedType _8461___mcc_h1428 = _source344.dtor_resolved;
                      DAST._IResolvedType _source345 = _8461___mcc_h1428;
                      if (_source345.is_Datatype) {
                        DAST._IDatatypeType _8462___mcc_h1432 = _source345.dtor_datatypeType;
                      } else if (_source345.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8463___mcc_h1434 = _source345.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _8464___mcc_h1435 = _source345.dtor_attributes;
                      } else {
                        DAST._IType _8465___mcc_h1438 = _source345.dtor_baseType;
                        DAST._INewtypeRange _8466___mcc_h1439 = _source345.dtor_range;
                        bool _8467___mcc_h1440 = _source345.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _8468___mcc_h1441 = _source345.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _8469_attributes0 = _8468___mcc_h1441;
                        bool _8470_erase0 = _8467___mcc_h1440;
                        DAST._INewtypeRange _8471_range0 = _8466___mcc_h1439;
                        DAST._IType _8472_b0 = _8465___mcc_h1438;
                        {
                          Std.Wrappers._IOption<RAST._IType> _8473_nativeFromType;
                          _8473_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8472_b0, _8471_range0);
                          if ((_8473_nativeFromType).is_Some) {
                            RAST._IExpr _8474_recursiveGen;
                            DCOMPUTF16._IOwnership _8475_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8476_recIdents;
                            RAST._IExpr _out3609;
                            DCOMPUTF16._IOwnership _out3610;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3611;
                            DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3609, out _out3610, out _out3611);
                            _8474_recursiveGen = _out3609;
                            _8475_recOwned = _out3610;
                            _8476_recIdents = _out3611;
                            RAST._IExpr _out3612;
                            DCOMPUTF16._IOwnership _out3613;
                            DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_8474_recursiveGen, (_8452_nativeToType).dtor_value), _8475_recOwned, expectedOwnership, out _out3612, out _out3613);
                            r = _out3612;
                            resultingOwnership = _out3613;
                            readIdents = _8476_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source344.is_Nullable) {
                      DAST._IType _8477___mcc_h1446 = _source344.dtor_Nullable_a0;
                    } else if (_source344.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _8478___mcc_h1448 = _source344.dtor_Tuple_a0;
                    } else if (_source344.is_Array) {
                      DAST._IType _8479___mcc_h1450 = _source344.dtor_element;
                      BigInteger _8480___mcc_h1451 = _source344.dtor_dims;
                    } else if (_source344.is_Seq) {
                      DAST._IType _8481___mcc_h1454 = _source344.dtor_element;
                    } else if (_source344.is_Set) {
                      DAST._IType _8482___mcc_h1456 = _source344.dtor_element;
                    } else if (_source344.is_Multiset) {
                      DAST._IType _8483___mcc_h1458 = _source344.dtor_element;
                    } else if (_source344.is_Map) {
                      DAST._IType _8484___mcc_h1460 = _source344.dtor_key;
                      DAST._IType _8485___mcc_h1461 = _source344.dtor_value;
                    } else if (_source344.is_SetBuilder) {
                      DAST._IType _8486___mcc_h1464 = _source344.dtor_element;
                    } else if (_source344.is_MapBuilder) {
                      DAST._IType _8487___mcc_h1466 = _source344.dtor_key;
                      DAST._IType _8488___mcc_h1467 = _source344.dtor_value;
                    } else if (_source344.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _8489___mcc_h1470 = _source344.dtor_args;
                      DAST._IType _8490___mcc_h1471 = _source344.dtor_result;
                    } else if (_source344.is_Primitive) {
                      DAST._IPrimitive _8491___mcc_h1474 = _source344.dtor_Primitive_a0;
                    } else if (_source344.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _8492___mcc_h1476 = _source344.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _8493___mcc_h1478 = _source344.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_7821_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _8494_recursiveGen;
                      DCOMPUTF16._IOwnership _8495_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8496_recIdents;
                      RAST._IExpr _out3614;
                      DCOMPUTF16._IOwnership _out3615;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3616;
                      DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3614, out _out3615, out _out3616);
                      _8494_recursiveGen = _out3614;
                      _8495_recOwned = _out3615;
                      _8496_recIdents = _out3616;
                      RAST._IExpr _out3617;
                      DCOMPUTF16._IOwnership _out3618;
                      DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_8494_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_8452_nativeToType).dtor_value), _8495_recOwned, expectedOwnership, out _out3617, out _out3618);
                      r = _out3617;
                      resultingOwnership = _out3618;
                      readIdents = _8496_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out3619;
                  DCOMPUTF16._IOwnership _out3620;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3621;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7820_expr, _7821_fromTpe, _8451_b), _8451_b, _7822_toTpe), selfIdent, env, expectedOwnership, out _out3619, out _out3620, out _out3621);
                  r = _out3619;
                  resultingOwnership = _out3620;
                  readIdents = _out3621;
                }
              }
            }
          } else if (_source341.is_Nullable) {
            DAST._IType _8497___mcc_h342 = _source341.dtor_Nullable_a0;
            {
              RAST._IExpr _8498_recursiveGen;
              DCOMPUTF16._IOwnership _8499_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8500_recIdents;
              RAST._IExpr _out3622;
              DCOMPUTF16._IOwnership _out3623;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3624;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3622, out _out3623, out _out3624);
              _8498_recursiveGen = _out3622;
              _8499_recOwned = _out3623;
              _8500_recIdents = _out3624;
              r = _8498_recursiveGen;
              if (object.Equals(_8499_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out3625;
              DCOMPUTF16._IOwnership _out3626;
              DCOMPUTF16.COMP.FromOwnership(r, _8499_recOwned, expectedOwnership, out _out3625, out _out3626);
              r = _out3625;
              resultingOwnership = _out3626;
              readIdents = _8500_recIdents;
            }
          } else if (_source341.is_Tuple) {
            Dafny.ISequence<DAST._IType> _8501___mcc_h344 = _source341.dtor_Tuple_a0;
            {
              RAST._IExpr _8502_recursiveGen;
              DCOMPUTF16._IOwnership _8503_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8504_recIdents;
              RAST._IExpr _out3627;
              DCOMPUTF16._IOwnership _out3628;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3629;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3627, out _out3628, out _out3629);
              _8502_recursiveGen = _out3627;
              _8503_recOwned = _out3628;
              _8504_recIdents = _out3629;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8502_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3630;
              DCOMPUTF16._IOwnership _out3631;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3630, out _out3631);
              r = _out3630;
              resultingOwnership = _out3631;
              readIdents = _8504_recIdents;
            }
          } else if (_source341.is_Array) {
            DAST._IType _8505___mcc_h346 = _source341.dtor_element;
            BigInteger _8506___mcc_h347 = _source341.dtor_dims;
            {
              RAST._IExpr _8507_recursiveGen;
              DCOMPUTF16._IOwnership _8508_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8509_recIdents;
              RAST._IExpr _out3632;
              DCOMPUTF16._IOwnership _out3633;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3634;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3632, out _out3633, out _out3634);
              _8507_recursiveGen = _out3632;
              _8508_recOwned = _out3633;
              _8509_recIdents = _out3634;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8507_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3635;
              DCOMPUTF16._IOwnership _out3636;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3635, out _out3636);
              r = _out3635;
              resultingOwnership = _out3636;
              readIdents = _8509_recIdents;
            }
          } else if (_source341.is_Seq) {
            DAST._IType _8510___mcc_h350 = _source341.dtor_element;
            {
              RAST._IExpr _8511_recursiveGen;
              DCOMPUTF16._IOwnership _8512_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8513_recIdents;
              RAST._IExpr _out3637;
              DCOMPUTF16._IOwnership _out3638;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3639;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3637, out _out3638, out _out3639);
              _8511_recursiveGen = _out3637;
              _8512_recOwned = _out3638;
              _8513_recIdents = _out3639;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8511_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3640;
              DCOMPUTF16._IOwnership _out3641;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3640, out _out3641);
              r = _out3640;
              resultingOwnership = _out3641;
              readIdents = _8513_recIdents;
            }
          } else if (_source341.is_Set) {
            DAST._IType _8514___mcc_h352 = _source341.dtor_element;
            {
              RAST._IExpr _8515_recursiveGen;
              DCOMPUTF16._IOwnership _8516_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8517_recIdents;
              RAST._IExpr _out3642;
              DCOMPUTF16._IOwnership _out3643;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3644;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3642, out _out3643, out _out3644);
              _8515_recursiveGen = _out3642;
              _8516_recOwned = _out3643;
              _8517_recIdents = _out3644;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8515_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3645;
              DCOMPUTF16._IOwnership _out3646;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3645, out _out3646);
              r = _out3645;
              resultingOwnership = _out3646;
              readIdents = _8517_recIdents;
            }
          } else if (_source341.is_Multiset) {
            DAST._IType _8518___mcc_h354 = _source341.dtor_element;
            {
              RAST._IExpr _8519_recursiveGen;
              DCOMPUTF16._IOwnership _8520_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8521_recIdents;
              RAST._IExpr _out3647;
              DCOMPUTF16._IOwnership _out3648;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3649;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3647, out _out3648, out _out3649);
              _8519_recursiveGen = _out3647;
              _8520_recOwned = _out3648;
              _8521_recIdents = _out3649;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8519_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3650;
              DCOMPUTF16._IOwnership _out3651;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3650, out _out3651);
              r = _out3650;
              resultingOwnership = _out3651;
              readIdents = _8521_recIdents;
            }
          } else if (_source341.is_Map) {
            DAST._IType _8522___mcc_h356 = _source341.dtor_key;
            DAST._IType _8523___mcc_h357 = _source341.dtor_value;
            {
              RAST._IExpr _8524_recursiveGen;
              DCOMPUTF16._IOwnership _8525_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8526_recIdents;
              RAST._IExpr _out3652;
              DCOMPUTF16._IOwnership _out3653;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3654;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3652, out _out3653, out _out3654);
              _8524_recursiveGen = _out3652;
              _8525_recOwned = _out3653;
              _8526_recIdents = _out3654;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8524_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3655;
              DCOMPUTF16._IOwnership _out3656;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3655, out _out3656);
              r = _out3655;
              resultingOwnership = _out3656;
              readIdents = _8526_recIdents;
            }
          } else if (_source341.is_SetBuilder) {
            DAST._IType _8527___mcc_h360 = _source341.dtor_element;
            {
              RAST._IExpr _8528_recursiveGen;
              DCOMPUTF16._IOwnership _8529_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8530_recIdents;
              RAST._IExpr _out3657;
              DCOMPUTF16._IOwnership _out3658;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3659;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3657, out _out3658, out _out3659);
              _8528_recursiveGen = _out3657;
              _8529_recOwned = _out3658;
              _8530_recIdents = _out3659;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8528_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3660;
              DCOMPUTF16._IOwnership _out3661;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3660, out _out3661);
              r = _out3660;
              resultingOwnership = _out3661;
              readIdents = _8530_recIdents;
            }
          } else if (_source341.is_MapBuilder) {
            DAST._IType _8531___mcc_h362 = _source341.dtor_key;
            DAST._IType _8532___mcc_h363 = _source341.dtor_value;
            {
              RAST._IExpr _8533_recursiveGen;
              DCOMPUTF16._IOwnership _8534_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8535_recIdents;
              RAST._IExpr _out3662;
              DCOMPUTF16._IOwnership _out3663;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3664;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3662, out _out3663, out _out3664);
              _8533_recursiveGen = _out3662;
              _8534_recOwned = _out3663;
              _8535_recIdents = _out3664;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8533_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3665;
              DCOMPUTF16._IOwnership _out3666;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3665, out _out3666);
              r = _out3665;
              resultingOwnership = _out3666;
              readIdents = _8535_recIdents;
            }
          } else if (_source341.is_Arrow) {
            Dafny.ISequence<DAST._IType> _8536___mcc_h366 = _source341.dtor_args;
            DAST._IType _8537___mcc_h367 = _source341.dtor_result;
            {
              RAST._IExpr _8538_recursiveGen;
              DCOMPUTF16._IOwnership _8539_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8540_recIdents;
              RAST._IExpr _out3667;
              DCOMPUTF16._IOwnership _out3668;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3669;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3667, out _out3668, out _out3669);
              _8538_recursiveGen = _out3667;
              _8539_recOwned = _out3668;
              _8540_recIdents = _out3669;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8538_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3670;
              DCOMPUTF16._IOwnership _out3671;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3670, out _out3671);
              r = _out3670;
              resultingOwnership = _out3671;
              readIdents = _8540_recIdents;
            }
          } else if (_source341.is_Primitive) {
            DAST._IPrimitive _8541___mcc_h370 = _source341.dtor_Primitive_a0;
            {
              RAST._IExpr _8542_recursiveGen;
              DCOMPUTF16._IOwnership _8543_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8544_recIdents;
              RAST._IExpr _out3672;
              DCOMPUTF16._IOwnership _out3673;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3674;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3672, out _out3673, out _out3674);
              _8542_recursiveGen = _out3672;
              _8543_recOwned = _out3673;
              _8544_recIdents = _out3674;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8542_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3675;
              DCOMPUTF16._IOwnership _out3676;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3675, out _out3676);
              r = _out3675;
              resultingOwnership = _out3676;
              readIdents = _8544_recIdents;
            }
          } else if (_source341.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _8545___mcc_h372 = _source341.dtor_Passthrough_a0;
            {
              RAST._IExpr _8546_recursiveGen;
              DCOMPUTF16._IOwnership _8547_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8548_recIdents;
              RAST._IExpr _out3677;
              DCOMPUTF16._IOwnership _out3678;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3679;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3677, out _out3678, out _out3679);
              _8546_recursiveGen = _out3677;
              _8547_recOwned = _out3678;
              _8548_recIdents = _out3679;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8546_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3680;
              DCOMPUTF16._IOwnership _out3681;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3680, out _out3681);
              r = _out3680;
              resultingOwnership = _out3681;
              readIdents = _8548_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _8549___mcc_h374 = _source341.dtor_TypeArg_a0;
            {
              RAST._IExpr _8550_recursiveGen;
              DCOMPUTF16._IOwnership _8551_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8552_recIdents;
              RAST._IExpr _out3682;
              DCOMPUTF16._IOwnership _out3683;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3684;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3682, out _out3683, out _out3684);
              _8550_recursiveGen = _out3682;
              _8551_recOwned = _out3683;
              _8552_recIdents = _out3684;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8550_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3685;
              DCOMPUTF16._IOwnership _out3686;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3685, out _out3686);
              r = _out3685;
              resultingOwnership = _out3686;
              readIdents = _8552_recIdents;
            }
          }
        } else if (_source308.is_Array) {
          DAST._IType _8553___mcc_h376 = _source308.dtor_element;
          BigInteger _8554___mcc_h377 = _source308.dtor_dims;
          DAST._IType _source346 = _7827___mcc_h1;
          if (_source346.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8555___mcc_h384 = _source346.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _8556___mcc_h385 = _source346.dtor_typeArgs;
            DAST._IResolvedType _8557___mcc_h386 = _source346.dtor_resolved;
            DAST._IResolvedType _source347 = _8557___mcc_h386;
            if (_source347.is_Datatype) {
              DAST._IDatatypeType _8558___mcc_h390 = _source347.dtor_datatypeType;
              {
                RAST._IExpr _8559_recursiveGen;
                DCOMPUTF16._IOwnership _8560_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8561_recIdents;
                RAST._IExpr _out3687;
                DCOMPUTF16._IOwnership _out3688;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3689;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3687, out _out3688, out _out3689);
                _8559_recursiveGen = _out3687;
                _8560_recOwned = _out3688;
                _8561_recIdents = _out3689;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8559_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3690;
                DCOMPUTF16._IOwnership _out3691;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3690, out _out3691);
                r = _out3690;
                resultingOwnership = _out3691;
                readIdents = _8561_recIdents;
              }
            } else if (_source347.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8562___mcc_h392 = _source347.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _8563___mcc_h393 = _source347.dtor_attributes;
              {
                RAST._IExpr _8564_recursiveGen;
                DCOMPUTF16._IOwnership _8565_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8566_recIdents;
                RAST._IExpr _out3692;
                DCOMPUTF16._IOwnership _out3693;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3694;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3692, out _out3693, out _out3694);
                _8564_recursiveGen = _out3692;
                _8565_recOwned = _out3693;
                _8566_recIdents = _out3694;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8564_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3695;
                DCOMPUTF16._IOwnership _out3696;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3695, out _out3696);
                r = _out3695;
                resultingOwnership = _out3696;
                readIdents = _8566_recIdents;
              }
            } else {
              DAST._IType _8567___mcc_h396 = _source347.dtor_baseType;
              DAST._INewtypeRange _8568___mcc_h397 = _source347.dtor_range;
              bool _8569___mcc_h398 = _source347.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _8570___mcc_h399 = _source347.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _8571_attributes = _8570___mcc_h399;
              bool _8572_erase = _8569___mcc_h398;
              DAST._INewtypeRange _8573_range = _8568___mcc_h397;
              DAST._IType _8574_b = _8567___mcc_h396;
              {
                Std.Wrappers._IOption<RAST._IType> _8575_nativeToType;
                _8575_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_8574_b, _8573_range);
                if (object.Equals(_7821_fromTpe, _8574_b)) {
                  RAST._IExpr _8576_recursiveGen;
                  DCOMPUTF16._IOwnership _8577_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8578_recIdents;
                  RAST._IExpr _out3697;
                  DCOMPUTF16._IOwnership _out3698;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3699;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3697, out _out3698, out _out3699);
                  _8576_recursiveGen = _out3697;
                  _8577_recOwned = _out3698;
                  _8578_recIdents = _out3699;
                  Std.Wrappers._IOption<RAST._IType> _source348 = _8575_nativeToType;
                  if (_source348.is_None) {
                    if (_8572_erase) {
                      r = _8576_recursiveGen;
                    } else {
                      RAST._IType _8579_rhsType;
                      RAST._IType _out3700;
                      _out3700 = DCOMPUTF16.COMP.GenType(_7822_toTpe, true, false);
                      _8579_rhsType = _out3700;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_8579_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_8576_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out3701;
                    DCOMPUTF16._IOwnership _out3702;
                    DCOMPUTF16.COMP.FromOwnership(r, _8577_recOwned, expectedOwnership, out _out3701, out _out3702);
                    r = _out3701;
                    resultingOwnership = _out3702;
                  } else {
                    RAST._IType _8580___mcc_h1480 = _source348.dtor_value;
                    RAST._IType _8581_v = _8580___mcc_h1480;
                    r = (((_8576_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_8581_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out3703;
                    DCOMPUTF16._IOwnership _out3704;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3703, out _out3704);
                    r = _out3703;
                    resultingOwnership = _out3704;
                  }
                  readIdents = _8578_recIdents;
                } else {
                  if ((_8575_nativeToType).is_Some) {
                    DAST._IType _source349 = _7821_fromTpe;
                    if (_source349.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8582___mcc_h1481 = _source349.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _8583___mcc_h1482 = _source349.dtor_typeArgs;
                      DAST._IResolvedType _8584___mcc_h1483 = _source349.dtor_resolved;
                      DAST._IResolvedType _source350 = _8584___mcc_h1483;
                      if (_source350.is_Datatype) {
                        DAST._IDatatypeType _8585___mcc_h1487 = _source350.dtor_datatypeType;
                      } else if (_source350.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8586___mcc_h1489 = _source350.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _8587___mcc_h1490 = _source350.dtor_attributes;
                      } else {
                        DAST._IType _8588___mcc_h1493 = _source350.dtor_baseType;
                        DAST._INewtypeRange _8589___mcc_h1494 = _source350.dtor_range;
                        bool _8590___mcc_h1495 = _source350.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _8591___mcc_h1496 = _source350.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _8592_attributes0 = _8591___mcc_h1496;
                        bool _8593_erase0 = _8590___mcc_h1495;
                        DAST._INewtypeRange _8594_range0 = _8589___mcc_h1494;
                        DAST._IType _8595_b0 = _8588___mcc_h1493;
                        {
                          Std.Wrappers._IOption<RAST._IType> _8596_nativeFromType;
                          _8596_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8595_b0, _8594_range0);
                          if ((_8596_nativeFromType).is_Some) {
                            RAST._IExpr _8597_recursiveGen;
                            DCOMPUTF16._IOwnership _8598_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8599_recIdents;
                            RAST._IExpr _out3705;
                            DCOMPUTF16._IOwnership _out3706;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3707;
                            DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3705, out _out3706, out _out3707);
                            _8597_recursiveGen = _out3705;
                            _8598_recOwned = _out3706;
                            _8599_recIdents = _out3707;
                            RAST._IExpr _out3708;
                            DCOMPUTF16._IOwnership _out3709;
                            DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_8597_recursiveGen, (_8575_nativeToType).dtor_value), _8598_recOwned, expectedOwnership, out _out3708, out _out3709);
                            r = _out3708;
                            resultingOwnership = _out3709;
                            readIdents = _8599_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source349.is_Nullable) {
                      DAST._IType _8600___mcc_h1501 = _source349.dtor_Nullable_a0;
                    } else if (_source349.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _8601___mcc_h1503 = _source349.dtor_Tuple_a0;
                    } else if (_source349.is_Array) {
                      DAST._IType _8602___mcc_h1505 = _source349.dtor_element;
                      BigInteger _8603___mcc_h1506 = _source349.dtor_dims;
                    } else if (_source349.is_Seq) {
                      DAST._IType _8604___mcc_h1509 = _source349.dtor_element;
                    } else if (_source349.is_Set) {
                      DAST._IType _8605___mcc_h1511 = _source349.dtor_element;
                    } else if (_source349.is_Multiset) {
                      DAST._IType _8606___mcc_h1513 = _source349.dtor_element;
                    } else if (_source349.is_Map) {
                      DAST._IType _8607___mcc_h1515 = _source349.dtor_key;
                      DAST._IType _8608___mcc_h1516 = _source349.dtor_value;
                    } else if (_source349.is_SetBuilder) {
                      DAST._IType _8609___mcc_h1519 = _source349.dtor_element;
                    } else if (_source349.is_MapBuilder) {
                      DAST._IType _8610___mcc_h1521 = _source349.dtor_key;
                      DAST._IType _8611___mcc_h1522 = _source349.dtor_value;
                    } else if (_source349.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _8612___mcc_h1525 = _source349.dtor_args;
                      DAST._IType _8613___mcc_h1526 = _source349.dtor_result;
                    } else if (_source349.is_Primitive) {
                      DAST._IPrimitive _8614___mcc_h1529 = _source349.dtor_Primitive_a0;
                    } else if (_source349.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _8615___mcc_h1531 = _source349.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _8616___mcc_h1533 = _source349.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_7821_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _8617_recursiveGen;
                      DCOMPUTF16._IOwnership _8618_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8619_recIdents;
                      RAST._IExpr _out3710;
                      DCOMPUTF16._IOwnership _out3711;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3712;
                      DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3710, out _out3711, out _out3712);
                      _8617_recursiveGen = _out3710;
                      _8618_recOwned = _out3711;
                      _8619_recIdents = _out3712;
                      RAST._IExpr _out3713;
                      DCOMPUTF16._IOwnership _out3714;
                      DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_8617_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_8575_nativeToType).dtor_value), _8618_recOwned, expectedOwnership, out _out3713, out _out3714);
                      r = _out3713;
                      resultingOwnership = _out3714;
                      readIdents = _8619_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out3715;
                  DCOMPUTF16._IOwnership _out3716;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3717;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7820_expr, _7821_fromTpe, _8574_b), _8574_b, _7822_toTpe), selfIdent, env, expectedOwnership, out _out3715, out _out3716, out _out3717);
                  r = _out3715;
                  resultingOwnership = _out3716;
                  readIdents = _out3717;
                }
              }
            }
          } else if (_source346.is_Nullable) {
            DAST._IType _8620___mcc_h404 = _source346.dtor_Nullable_a0;
            {
              RAST._IExpr _8621_recursiveGen;
              DCOMPUTF16._IOwnership _8622_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8623_recIdents;
              RAST._IExpr _out3718;
              DCOMPUTF16._IOwnership _out3719;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3720;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3718, out _out3719, out _out3720);
              _8621_recursiveGen = _out3718;
              _8622_recOwned = _out3719;
              _8623_recIdents = _out3720;
              r = _8621_recursiveGen;
              if (object.Equals(_8622_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out3721;
              DCOMPUTF16._IOwnership _out3722;
              DCOMPUTF16.COMP.FromOwnership(r, _8622_recOwned, expectedOwnership, out _out3721, out _out3722);
              r = _out3721;
              resultingOwnership = _out3722;
              readIdents = _8623_recIdents;
            }
          } else if (_source346.is_Tuple) {
            Dafny.ISequence<DAST._IType> _8624___mcc_h406 = _source346.dtor_Tuple_a0;
            {
              RAST._IExpr _8625_recursiveGen;
              DCOMPUTF16._IOwnership _8626_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8627_recIdents;
              RAST._IExpr _out3723;
              DCOMPUTF16._IOwnership _out3724;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3725;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3723, out _out3724, out _out3725);
              _8625_recursiveGen = _out3723;
              _8626_recOwned = _out3724;
              _8627_recIdents = _out3725;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8625_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3726;
              DCOMPUTF16._IOwnership _out3727;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3726, out _out3727);
              r = _out3726;
              resultingOwnership = _out3727;
              readIdents = _8627_recIdents;
            }
          } else if (_source346.is_Array) {
            DAST._IType _8628___mcc_h408 = _source346.dtor_element;
            BigInteger _8629___mcc_h409 = _source346.dtor_dims;
            {
              RAST._IExpr _8630_recursiveGen;
              DCOMPUTF16._IOwnership _8631_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8632_recIdents;
              RAST._IExpr _out3728;
              DCOMPUTF16._IOwnership _out3729;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3730;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3728, out _out3729, out _out3730);
              _8630_recursiveGen = _out3728;
              _8631_recOwned = _out3729;
              _8632_recIdents = _out3730;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8630_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3731;
              DCOMPUTF16._IOwnership _out3732;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3731, out _out3732);
              r = _out3731;
              resultingOwnership = _out3732;
              readIdents = _8632_recIdents;
            }
          } else if (_source346.is_Seq) {
            DAST._IType _8633___mcc_h412 = _source346.dtor_element;
            {
              RAST._IExpr _8634_recursiveGen;
              DCOMPUTF16._IOwnership _8635_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8636_recIdents;
              RAST._IExpr _out3733;
              DCOMPUTF16._IOwnership _out3734;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3735;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3733, out _out3734, out _out3735);
              _8634_recursiveGen = _out3733;
              _8635_recOwned = _out3734;
              _8636_recIdents = _out3735;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8634_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3736;
              DCOMPUTF16._IOwnership _out3737;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3736, out _out3737);
              r = _out3736;
              resultingOwnership = _out3737;
              readIdents = _8636_recIdents;
            }
          } else if (_source346.is_Set) {
            DAST._IType _8637___mcc_h414 = _source346.dtor_element;
            {
              RAST._IExpr _8638_recursiveGen;
              DCOMPUTF16._IOwnership _8639_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8640_recIdents;
              RAST._IExpr _out3738;
              DCOMPUTF16._IOwnership _out3739;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3740;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3738, out _out3739, out _out3740);
              _8638_recursiveGen = _out3738;
              _8639_recOwned = _out3739;
              _8640_recIdents = _out3740;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8638_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3741;
              DCOMPUTF16._IOwnership _out3742;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3741, out _out3742);
              r = _out3741;
              resultingOwnership = _out3742;
              readIdents = _8640_recIdents;
            }
          } else if (_source346.is_Multiset) {
            DAST._IType _8641___mcc_h416 = _source346.dtor_element;
            {
              RAST._IExpr _8642_recursiveGen;
              DCOMPUTF16._IOwnership _8643_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8644_recIdents;
              RAST._IExpr _out3743;
              DCOMPUTF16._IOwnership _out3744;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3745;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3743, out _out3744, out _out3745);
              _8642_recursiveGen = _out3743;
              _8643_recOwned = _out3744;
              _8644_recIdents = _out3745;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8642_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3746;
              DCOMPUTF16._IOwnership _out3747;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3746, out _out3747);
              r = _out3746;
              resultingOwnership = _out3747;
              readIdents = _8644_recIdents;
            }
          } else if (_source346.is_Map) {
            DAST._IType _8645___mcc_h418 = _source346.dtor_key;
            DAST._IType _8646___mcc_h419 = _source346.dtor_value;
            {
              RAST._IExpr _8647_recursiveGen;
              DCOMPUTF16._IOwnership _8648_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8649_recIdents;
              RAST._IExpr _out3748;
              DCOMPUTF16._IOwnership _out3749;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3750;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3748, out _out3749, out _out3750);
              _8647_recursiveGen = _out3748;
              _8648_recOwned = _out3749;
              _8649_recIdents = _out3750;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8647_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3751;
              DCOMPUTF16._IOwnership _out3752;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3751, out _out3752);
              r = _out3751;
              resultingOwnership = _out3752;
              readIdents = _8649_recIdents;
            }
          } else if (_source346.is_SetBuilder) {
            DAST._IType _8650___mcc_h422 = _source346.dtor_element;
            {
              RAST._IExpr _8651_recursiveGen;
              DCOMPUTF16._IOwnership _8652_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8653_recIdents;
              RAST._IExpr _out3753;
              DCOMPUTF16._IOwnership _out3754;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3755;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3753, out _out3754, out _out3755);
              _8651_recursiveGen = _out3753;
              _8652_recOwned = _out3754;
              _8653_recIdents = _out3755;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8651_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3756;
              DCOMPUTF16._IOwnership _out3757;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3756, out _out3757);
              r = _out3756;
              resultingOwnership = _out3757;
              readIdents = _8653_recIdents;
            }
          } else if (_source346.is_MapBuilder) {
            DAST._IType _8654___mcc_h424 = _source346.dtor_key;
            DAST._IType _8655___mcc_h425 = _source346.dtor_value;
            {
              RAST._IExpr _8656_recursiveGen;
              DCOMPUTF16._IOwnership _8657_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8658_recIdents;
              RAST._IExpr _out3758;
              DCOMPUTF16._IOwnership _out3759;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3760;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3758, out _out3759, out _out3760);
              _8656_recursiveGen = _out3758;
              _8657_recOwned = _out3759;
              _8658_recIdents = _out3760;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8656_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3761;
              DCOMPUTF16._IOwnership _out3762;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3761, out _out3762);
              r = _out3761;
              resultingOwnership = _out3762;
              readIdents = _8658_recIdents;
            }
          } else if (_source346.is_Arrow) {
            Dafny.ISequence<DAST._IType> _8659___mcc_h428 = _source346.dtor_args;
            DAST._IType _8660___mcc_h429 = _source346.dtor_result;
            {
              RAST._IExpr _8661_recursiveGen;
              DCOMPUTF16._IOwnership _8662_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8663_recIdents;
              RAST._IExpr _out3763;
              DCOMPUTF16._IOwnership _out3764;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3765;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3763, out _out3764, out _out3765);
              _8661_recursiveGen = _out3763;
              _8662_recOwned = _out3764;
              _8663_recIdents = _out3765;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8661_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3766;
              DCOMPUTF16._IOwnership _out3767;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3766, out _out3767);
              r = _out3766;
              resultingOwnership = _out3767;
              readIdents = _8663_recIdents;
            }
          } else if (_source346.is_Primitive) {
            DAST._IPrimitive _8664___mcc_h432 = _source346.dtor_Primitive_a0;
            {
              RAST._IExpr _8665_recursiveGen;
              DCOMPUTF16._IOwnership _8666_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8667_recIdents;
              RAST._IExpr _out3768;
              DCOMPUTF16._IOwnership _out3769;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3770;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3768, out _out3769, out _out3770);
              _8665_recursiveGen = _out3768;
              _8666_recOwned = _out3769;
              _8667_recIdents = _out3770;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8665_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3771;
              DCOMPUTF16._IOwnership _out3772;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3771, out _out3772);
              r = _out3771;
              resultingOwnership = _out3772;
              readIdents = _8667_recIdents;
            }
          } else if (_source346.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _8668___mcc_h434 = _source346.dtor_Passthrough_a0;
            {
              RAST._IExpr _8669_recursiveGen;
              DCOMPUTF16._IOwnership _8670_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8671_recIdents;
              RAST._IExpr _out3773;
              DCOMPUTF16._IOwnership _out3774;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3775;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3773, out _out3774, out _out3775);
              _8669_recursiveGen = _out3773;
              _8670_recOwned = _out3774;
              _8671_recIdents = _out3775;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8669_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3776;
              DCOMPUTF16._IOwnership _out3777;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3776, out _out3777);
              r = _out3776;
              resultingOwnership = _out3777;
              readIdents = _8671_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _8672___mcc_h436 = _source346.dtor_TypeArg_a0;
            {
              RAST._IExpr _8673_recursiveGen;
              DCOMPUTF16._IOwnership _8674_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8675_recIdents;
              RAST._IExpr _out3778;
              DCOMPUTF16._IOwnership _out3779;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3780;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3778, out _out3779, out _out3780);
              _8673_recursiveGen = _out3778;
              _8674_recOwned = _out3779;
              _8675_recIdents = _out3780;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8673_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3781;
              DCOMPUTF16._IOwnership _out3782;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3781, out _out3782);
              r = _out3781;
              resultingOwnership = _out3782;
              readIdents = _8675_recIdents;
            }
          }
        } else if (_source308.is_Seq) {
          DAST._IType _8676___mcc_h438 = _source308.dtor_element;
          DAST._IType _source351 = _7827___mcc_h1;
          if (_source351.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8677___mcc_h442 = _source351.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _8678___mcc_h443 = _source351.dtor_typeArgs;
            DAST._IResolvedType _8679___mcc_h444 = _source351.dtor_resolved;
            DAST._IResolvedType _source352 = _8679___mcc_h444;
            if (_source352.is_Datatype) {
              DAST._IDatatypeType _8680___mcc_h448 = _source352.dtor_datatypeType;
              {
                RAST._IExpr _8681_recursiveGen;
                DCOMPUTF16._IOwnership _8682_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8683_recIdents;
                RAST._IExpr _out3783;
                DCOMPUTF16._IOwnership _out3784;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3785;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3783, out _out3784, out _out3785);
                _8681_recursiveGen = _out3783;
                _8682_recOwned = _out3784;
                _8683_recIdents = _out3785;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8681_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3786;
                DCOMPUTF16._IOwnership _out3787;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3786, out _out3787);
                r = _out3786;
                resultingOwnership = _out3787;
                readIdents = _8683_recIdents;
              }
            } else if (_source352.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8684___mcc_h450 = _source352.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _8685___mcc_h451 = _source352.dtor_attributes;
              {
                RAST._IExpr _8686_recursiveGen;
                DCOMPUTF16._IOwnership _8687_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8688_recIdents;
                RAST._IExpr _out3788;
                DCOMPUTF16._IOwnership _out3789;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3790;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3788, out _out3789, out _out3790);
                _8686_recursiveGen = _out3788;
                _8687_recOwned = _out3789;
                _8688_recIdents = _out3790;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8686_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3791;
                DCOMPUTF16._IOwnership _out3792;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3791, out _out3792);
                r = _out3791;
                resultingOwnership = _out3792;
                readIdents = _8688_recIdents;
              }
            } else {
              DAST._IType _8689___mcc_h454 = _source352.dtor_baseType;
              DAST._INewtypeRange _8690___mcc_h455 = _source352.dtor_range;
              bool _8691___mcc_h456 = _source352.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _8692___mcc_h457 = _source352.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _8693_attributes = _8692___mcc_h457;
              bool _8694_erase = _8691___mcc_h456;
              DAST._INewtypeRange _8695_range = _8690___mcc_h455;
              DAST._IType _8696_b = _8689___mcc_h454;
              {
                Std.Wrappers._IOption<RAST._IType> _8697_nativeToType;
                _8697_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_8696_b, _8695_range);
                if (object.Equals(_7821_fromTpe, _8696_b)) {
                  RAST._IExpr _8698_recursiveGen;
                  DCOMPUTF16._IOwnership _8699_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8700_recIdents;
                  RAST._IExpr _out3793;
                  DCOMPUTF16._IOwnership _out3794;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3795;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3793, out _out3794, out _out3795);
                  _8698_recursiveGen = _out3793;
                  _8699_recOwned = _out3794;
                  _8700_recIdents = _out3795;
                  Std.Wrappers._IOption<RAST._IType> _source353 = _8697_nativeToType;
                  if (_source353.is_None) {
                    if (_8694_erase) {
                      r = _8698_recursiveGen;
                    } else {
                      RAST._IType _8701_rhsType;
                      RAST._IType _out3796;
                      _out3796 = DCOMPUTF16.COMP.GenType(_7822_toTpe, true, false);
                      _8701_rhsType = _out3796;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_8701_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_8698_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out3797;
                    DCOMPUTF16._IOwnership _out3798;
                    DCOMPUTF16.COMP.FromOwnership(r, _8699_recOwned, expectedOwnership, out _out3797, out _out3798);
                    r = _out3797;
                    resultingOwnership = _out3798;
                  } else {
                    RAST._IType _8702___mcc_h1535 = _source353.dtor_value;
                    RAST._IType _8703_v = _8702___mcc_h1535;
                    r = (((_8698_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_8703_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out3799;
                    DCOMPUTF16._IOwnership _out3800;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3799, out _out3800);
                    r = _out3799;
                    resultingOwnership = _out3800;
                  }
                  readIdents = _8700_recIdents;
                } else {
                  if ((_8697_nativeToType).is_Some) {
                    DAST._IType _source354 = _7821_fromTpe;
                    if (_source354.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8704___mcc_h1536 = _source354.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _8705___mcc_h1537 = _source354.dtor_typeArgs;
                      DAST._IResolvedType _8706___mcc_h1538 = _source354.dtor_resolved;
                      DAST._IResolvedType _source355 = _8706___mcc_h1538;
                      if (_source355.is_Datatype) {
                        DAST._IDatatypeType _8707___mcc_h1542 = _source355.dtor_datatypeType;
                      } else if (_source355.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8708___mcc_h1544 = _source355.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _8709___mcc_h1545 = _source355.dtor_attributes;
                      } else {
                        DAST._IType _8710___mcc_h1548 = _source355.dtor_baseType;
                        DAST._INewtypeRange _8711___mcc_h1549 = _source355.dtor_range;
                        bool _8712___mcc_h1550 = _source355.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _8713___mcc_h1551 = _source355.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _8714_attributes0 = _8713___mcc_h1551;
                        bool _8715_erase0 = _8712___mcc_h1550;
                        DAST._INewtypeRange _8716_range0 = _8711___mcc_h1549;
                        DAST._IType _8717_b0 = _8710___mcc_h1548;
                        {
                          Std.Wrappers._IOption<RAST._IType> _8718_nativeFromType;
                          _8718_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8717_b0, _8716_range0);
                          if ((_8718_nativeFromType).is_Some) {
                            RAST._IExpr _8719_recursiveGen;
                            DCOMPUTF16._IOwnership _8720_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8721_recIdents;
                            RAST._IExpr _out3801;
                            DCOMPUTF16._IOwnership _out3802;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3803;
                            DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3801, out _out3802, out _out3803);
                            _8719_recursiveGen = _out3801;
                            _8720_recOwned = _out3802;
                            _8721_recIdents = _out3803;
                            RAST._IExpr _out3804;
                            DCOMPUTF16._IOwnership _out3805;
                            DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_8719_recursiveGen, (_8697_nativeToType).dtor_value), _8720_recOwned, expectedOwnership, out _out3804, out _out3805);
                            r = _out3804;
                            resultingOwnership = _out3805;
                            readIdents = _8721_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source354.is_Nullable) {
                      DAST._IType _8722___mcc_h1556 = _source354.dtor_Nullable_a0;
                    } else if (_source354.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _8723___mcc_h1558 = _source354.dtor_Tuple_a0;
                    } else if (_source354.is_Array) {
                      DAST._IType _8724___mcc_h1560 = _source354.dtor_element;
                      BigInteger _8725___mcc_h1561 = _source354.dtor_dims;
                    } else if (_source354.is_Seq) {
                      DAST._IType _8726___mcc_h1564 = _source354.dtor_element;
                    } else if (_source354.is_Set) {
                      DAST._IType _8727___mcc_h1566 = _source354.dtor_element;
                    } else if (_source354.is_Multiset) {
                      DAST._IType _8728___mcc_h1568 = _source354.dtor_element;
                    } else if (_source354.is_Map) {
                      DAST._IType _8729___mcc_h1570 = _source354.dtor_key;
                      DAST._IType _8730___mcc_h1571 = _source354.dtor_value;
                    } else if (_source354.is_SetBuilder) {
                      DAST._IType _8731___mcc_h1574 = _source354.dtor_element;
                    } else if (_source354.is_MapBuilder) {
                      DAST._IType _8732___mcc_h1576 = _source354.dtor_key;
                      DAST._IType _8733___mcc_h1577 = _source354.dtor_value;
                    } else if (_source354.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _8734___mcc_h1580 = _source354.dtor_args;
                      DAST._IType _8735___mcc_h1581 = _source354.dtor_result;
                    } else if (_source354.is_Primitive) {
                      DAST._IPrimitive _8736___mcc_h1584 = _source354.dtor_Primitive_a0;
                    } else if (_source354.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _8737___mcc_h1586 = _source354.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _8738___mcc_h1588 = _source354.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_7821_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _8739_recursiveGen;
                      DCOMPUTF16._IOwnership _8740_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8741_recIdents;
                      RAST._IExpr _out3806;
                      DCOMPUTF16._IOwnership _out3807;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3808;
                      DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3806, out _out3807, out _out3808);
                      _8739_recursiveGen = _out3806;
                      _8740_recOwned = _out3807;
                      _8741_recIdents = _out3808;
                      RAST._IExpr _out3809;
                      DCOMPUTF16._IOwnership _out3810;
                      DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_8739_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_8697_nativeToType).dtor_value), _8740_recOwned, expectedOwnership, out _out3809, out _out3810);
                      r = _out3809;
                      resultingOwnership = _out3810;
                      readIdents = _8741_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out3811;
                  DCOMPUTF16._IOwnership _out3812;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3813;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7820_expr, _7821_fromTpe, _8696_b), _8696_b, _7822_toTpe), selfIdent, env, expectedOwnership, out _out3811, out _out3812, out _out3813);
                  r = _out3811;
                  resultingOwnership = _out3812;
                  readIdents = _out3813;
                }
              }
            }
          } else if (_source351.is_Nullable) {
            DAST._IType _8742___mcc_h462 = _source351.dtor_Nullable_a0;
            {
              RAST._IExpr _8743_recursiveGen;
              DCOMPUTF16._IOwnership _8744_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8745_recIdents;
              RAST._IExpr _out3814;
              DCOMPUTF16._IOwnership _out3815;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3816;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3814, out _out3815, out _out3816);
              _8743_recursiveGen = _out3814;
              _8744_recOwned = _out3815;
              _8745_recIdents = _out3816;
              r = _8743_recursiveGen;
              if (object.Equals(_8744_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out3817;
              DCOMPUTF16._IOwnership _out3818;
              DCOMPUTF16.COMP.FromOwnership(r, _8744_recOwned, expectedOwnership, out _out3817, out _out3818);
              r = _out3817;
              resultingOwnership = _out3818;
              readIdents = _8745_recIdents;
            }
          } else if (_source351.is_Tuple) {
            Dafny.ISequence<DAST._IType> _8746___mcc_h464 = _source351.dtor_Tuple_a0;
            {
              RAST._IExpr _8747_recursiveGen;
              DCOMPUTF16._IOwnership _8748_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8749_recIdents;
              RAST._IExpr _out3819;
              DCOMPUTF16._IOwnership _out3820;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3821;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3819, out _out3820, out _out3821);
              _8747_recursiveGen = _out3819;
              _8748_recOwned = _out3820;
              _8749_recIdents = _out3821;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8747_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3822;
              DCOMPUTF16._IOwnership _out3823;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3822, out _out3823);
              r = _out3822;
              resultingOwnership = _out3823;
              readIdents = _8749_recIdents;
            }
          } else if (_source351.is_Array) {
            DAST._IType _8750___mcc_h466 = _source351.dtor_element;
            BigInteger _8751___mcc_h467 = _source351.dtor_dims;
            {
              RAST._IExpr _8752_recursiveGen;
              DCOMPUTF16._IOwnership _8753_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8754_recIdents;
              RAST._IExpr _out3824;
              DCOMPUTF16._IOwnership _out3825;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3826;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3824, out _out3825, out _out3826);
              _8752_recursiveGen = _out3824;
              _8753_recOwned = _out3825;
              _8754_recIdents = _out3826;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8752_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3827;
              DCOMPUTF16._IOwnership _out3828;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3827, out _out3828);
              r = _out3827;
              resultingOwnership = _out3828;
              readIdents = _8754_recIdents;
            }
          } else if (_source351.is_Seq) {
            DAST._IType _8755___mcc_h470 = _source351.dtor_element;
            {
              RAST._IExpr _8756_recursiveGen;
              DCOMPUTF16._IOwnership _8757_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8758_recIdents;
              RAST._IExpr _out3829;
              DCOMPUTF16._IOwnership _out3830;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3831;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3829, out _out3830, out _out3831);
              _8756_recursiveGen = _out3829;
              _8757_recOwned = _out3830;
              _8758_recIdents = _out3831;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8756_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3832;
              DCOMPUTF16._IOwnership _out3833;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3832, out _out3833);
              r = _out3832;
              resultingOwnership = _out3833;
              readIdents = _8758_recIdents;
            }
          } else if (_source351.is_Set) {
            DAST._IType _8759___mcc_h472 = _source351.dtor_element;
            {
              RAST._IExpr _8760_recursiveGen;
              DCOMPUTF16._IOwnership _8761_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8762_recIdents;
              RAST._IExpr _out3834;
              DCOMPUTF16._IOwnership _out3835;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3836;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3834, out _out3835, out _out3836);
              _8760_recursiveGen = _out3834;
              _8761_recOwned = _out3835;
              _8762_recIdents = _out3836;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8760_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3837;
              DCOMPUTF16._IOwnership _out3838;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3837, out _out3838);
              r = _out3837;
              resultingOwnership = _out3838;
              readIdents = _8762_recIdents;
            }
          } else if (_source351.is_Multiset) {
            DAST._IType _8763___mcc_h474 = _source351.dtor_element;
            {
              RAST._IExpr _8764_recursiveGen;
              DCOMPUTF16._IOwnership _8765_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8766_recIdents;
              RAST._IExpr _out3839;
              DCOMPUTF16._IOwnership _out3840;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3841;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3839, out _out3840, out _out3841);
              _8764_recursiveGen = _out3839;
              _8765_recOwned = _out3840;
              _8766_recIdents = _out3841;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8764_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3842;
              DCOMPUTF16._IOwnership _out3843;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3842, out _out3843);
              r = _out3842;
              resultingOwnership = _out3843;
              readIdents = _8766_recIdents;
            }
          } else if (_source351.is_Map) {
            DAST._IType _8767___mcc_h476 = _source351.dtor_key;
            DAST._IType _8768___mcc_h477 = _source351.dtor_value;
            {
              RAST._IExpr _8769_recursiveGen;
              DCOMPUTF16._IOwnership _8770_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8771_recIdents;
              RAST._IExpr _out3844;
              DCOMPUTF16._IOwnership _out3845;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3846;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3844, out _out3845, out _out3846);
              _8769_recursiveGen = _out3844;
              _8770_recOwned = _out3845;
              _8771_recIdents = _out3846;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8769_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3847;
              DCOMPUTF16._IOwnership _out3848;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3847, out _out3848);
              r = _out3847;
              resultingOwnership = _out3848;
              readIdents = _8771_recIdents;
            }
          } else if (_source351.is_SetBuilder) {
            DAST._IType _8772___mcc_h480 = _source351.dtor_element;
            {
              RAST._IExpr _8773_recursiveGen;
              DCOMPUTF16._IOwnership _8774_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8775_recIdents;
              RAST._IExpr _out3849;
              DCOMPUTF16._IOwnership _out3850;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3851;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3849, out _out3850, out _out3851);
              _8773_recursiveGen = _out3849;
              _8774_recOwned = _out3850;
              _8775_recIdents = _out3851;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8773_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3852;
              DCOMPUTF16._IOwnership _out3853;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3852, out _out3853);
              r = _out3852;
              resultingOwnership = _out3853;
              readIdents = _8775_recIdents;
            }
          } else if (_source351.is_MapBuilder) {
            DAST._IType _8776___mcc_h482 = _source351.dtor_key;
            DAST._IType _8777___mcc_h483 = _source351.dtor_value;
            {
              RAST._IExpr _8778_recursiveGen;
              DCOMPUTF16._IOwnership _8779_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8780_recIdents;
              RAST._IExpr _out3854;
              DCOMPUTF16._IOwnership _out3855;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3856;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3854, out _out3855, out _out3856);
              _8778_recursiveGen = _out3854;
              _8779_recOwned = _out3855;
              _8780_recIdents = _out3856;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8778_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3857;
              DCOMPUTF16._IOwnership _out3858;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3857, out _out3858);
              r = _out3857;
              resultingOwnership = _out3858;
              readIdents = _8780_recIdents;
            }
          } else if (_source351.is_Arrow) {
            Dafny.ISequence<DAST._IType> _8781___mcc_h486 = _source351.dtor_args;
            DAST._IType _8782___mcc_h487 = _source351.dtor_result;
            {
              RAST._IExpr _8783_recursiveGen;
              DCOMPUTF16._IOwnership _8784_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8785_recIdents;
              RAST._IExpr _out3859;
              DCOMPUTF16._IOwnership _out3860;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3861;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3859, out _out3860, out _out3861);
              _8783_recursiveGen = _out3859;
              _8784_recOwned = _out3860;
              _8785_recIdents = _out3861;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8783_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3862;
              DCOMPUTF16._IOwnership _out3863;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3862, out _out3863);
              r = _out3862;
              resultingOwnership = _out3863;
              readIdents = _8785_recIdents;
            }
          } else if (_source351.is_Primitive) {
            DAST._IPrimitive _8786___mcc_h490 = _source351.dtor_Primitive_a0;
            {
              RAST._IExpr _8787_recursiveGen;
              DCOMPUTF16._IOwnership _8788_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8789_recIdents;
              RAST._IExpr _out3864;
              DCOMPUTF16._IOwnership _out3865;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3866;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3864, out _out3865, out _out3866);
              _8787_recursiveGen = _out3864;
              _8788_recOwned = _out3865;
              _8789_recIdents = _out3866;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8787_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3867;
              DCOMPUTF16._IOwnership _out3868;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3867, out _out3868);
              r = _out3867;
              resultingOwnership = _out3868;
              readIdents = _8789_recIdents;
            }
          } else if (_source351.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _8790___mcc_h492 = _source351.dtor_Passthrough_a0;
            {
              RAST._IExpr _8791_recursiveGen;
              DCOMPUTF16._IOwnership _8792_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8793_recIdents;
              RAST._IExpr _out3869;
              DCOMPUTF16._IOwnership _out3870;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3871;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3869, out _out3870, out _out3871);
              _8791_recursiveGen = _out3869;
              _8792_recOwned = _out3870;
              _8793_recIdents = _out3871;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8791_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3872;
              DCOMPUTF16._IOwnership _out3873;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3872, out _out3873);
              r = _out3872;
              resultingOwnership = _out3873;
              readIdents = _8793_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _8794___mcc_h494 = _source351.dtor_TypeArg_a0;
            {
              RAST._IExpr _8795_recursiveGen;
              DCOMPUTF16._IOwnership _8796_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8797_recIdents;
              RAST._IExpr _out3874;
              DCOMPUTF16._IOwnership _out3875;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3876;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3874, out _out3875, out _out3876);
              _8795_recursiveGen = _out3874;
              _8796_recOwned = _out3875;
              _8797_recIdents = _out3876;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8795_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3877;
              DCOMPUTF16._IOwnership _out3878;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3877, out _out3878);
              r = _out3877;
              resultingOwnership = _out3878;
              readIdents = _8797_recIdents;
            }
          }
        } else if (_source308.is_Set) {
          DAST._IType _8798___mcc_h496 = _source308.dtor_element;
          DAST._IType _source356 = _7827___mcc_h1;
          if (_source356.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8799___mcc_h500 = _source356.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _8800___mcc_h501 = _source356.dtor_typeArgs;
            DAST._IResolvedType _8801___mcc_h502 = _source356.dtor_resolved;
            DAST._IResolvedType _source357 = _8801___mcc_h502;
            if (_source357.is_Datatype) {
              DAST._IDatatypeType _8802___mcc_h506 = _source357.dtor_datatypeType;
              {
                RAST._IExpr _8803_recursiveGen;
                DCOMPUTF16._IOwnership _8804_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8805_recIdents;
                RAST._IExpr _out3879;
                DCOMPUTF16._IOwnership _out3880;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3881;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3879, out _out3880, out _out3881);
                _8803_recursiveGen = _out3879;
                _8804_recOwned = _out3880;
                _8805_recIdents = _out3881;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8803_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3882;
                DCOMPUTF16._IOwnership _out3883;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3882, out _out3883);
                r = _out3882;
                resultingOwnership = _out3883;
                readIdents = _8805_recIdents;
              }
            } else if (_source357.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8806___mcc_h508 = _source357.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _8807___mcc_h509 = _source357.dtor_attributes;
              {
                RAST._IExpr _8808_recursiveGen;
                DCOMPUTF16._IOwnership _8809_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8810_recIdents;
                RAST._IExpr _out3884;
                DCOMPUTF16._IOwnership _out3885;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3886;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3884, out _out3885, out _out3886);
                _8808_recursiveGen = _out3884;
                _8809_recOwned = _out3885;
                _8810_recIdents = _out3886;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8808_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3887;
                DCOMPUTF16._IOwnership _out3888;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3887, out _out3888);
                r = _out3887;
                resultingOwnership = _out3888;
                readIdents = _8810_recIdents;
              }
            } else {
              DAST._IType _8811___mcc_h512 = _source357.dtor_baseType;
              DAST._INewtypeRange _8812___mcc_h513 = _source357.dtor_range;
              bool _8813___mcc_h514 = _source357.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _8814___mcc_h515 = _source357.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _8815_attributes = _8814___mcc_h515;
              bool _8816_erase = _8813___mcc_h514;
              DAST._INewtypeRange _8817_range = _8812___mcc_h513;
              DAST._IType _8818_b = _8811___mcc_h512;
              {
                Std.Wrappers._IOption<RAST._IType> _8819_nativeToType;
                _8819_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_8818_b, _8817_range);
                if (object.Equals(_7821_fromTpe, _8818_b)) {
                  RAST._IExpr _8820_recursiveGen;
                  DCOMPUTF16._IOwnership _8821_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8822_recIdents;
                  RAST._IExpr _out3889;
                  DCOMPUTF16._IOwnership _out3890;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3891;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3889, out _out3890, out _out3891);
                  _8820_recursiveGen = _out3889;
                  _8821_recOwned = _out3890;
                  _8822_recIdents = _out3891;
                  Std.Wrappers._IOption<RAST._IType> _source358 = _8819_nativeToType;
                  if (_source358.is_None) {
                    if (_8816_erase) {
                      r = _8820_recursiveGen;
                    } else {
                      RAST._IType _8823_rhsType;
                      RAST._IType _out3892;
                      _out3892 = DCOMPUTF16.COMP.GenType(_7822_toTpe, true, false);
                      _8823_rhsType = _out3892;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_8823_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_8820_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out3893;
                    DCOMPUTF16._IOwnership _out3894;
                    DCOMPUTF16.COMP.FromOwnership(r, _8821_recOwned, expectedOwnership, out _out3893, out _out3894);
                    r = _out3893;
                    resultingOwnership = _out3894;
                  } else {
                    RAST._IType _8824___mcc_h1590 = _source358.dtor_value;
                    RAST._IType _8825_v = _8824___mcc_h1590;
                    r = (((_8820_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_8825_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out3895;
                    DCOMPUTF16._IOwnership _out3896;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3895, out _out3896);
                    r = _out3895;
                    resultingOwnership = _out3896;
                  }
                  readIdents = _8822_recIdents;
                } else {
                  if ((_8819_nativeToType).is_Some) {
                    DAST._IType _source359 = _7821_fromTpe;
                    if (_source359.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8826___mcc_h1591 = _source359.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _8827___mcc_h1592 = _source359.dtor_typeArgs;
                      DAST._IResolvedType _8828___mcc_h1593 = _source359.dtor_resolved;
                      DAST._IResolvedType _source360 = _8828___mcc_h1593;
                      if (_source360.is_Datatype) {
                        DAST._IDatatypeType _8829___mcc_h1597 = _source360.dtor_datatypeType;
                      } else if (_source360.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8830___mcc_h1599 = _source360.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _8831___mcc_h1600 = _source360.dtor_attributes;
                      } else {
                        DAST._IType _8832___mcc_h1603 = _source360.dtor_baseType;
                        DAST._INewtypeRange _8833___mcc_h1604 = _source360.dtor_range;
                        bool _8834___mcc_h1605 = _source360.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _8835___mcc_h1606 = _source360.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _8836_attributes0 = _8835___mcc_h1606;
                        bool _8837_erase0 = _8834___mcc_h1605;
                        DAST._INewtypeRange _8838_range0 = _8833___mcc_h1604;
                        DAST._IType _8839_b0 = _8832___mcc_h1603;
                        {
                          Std.Wrappers._IOption<RAST._IType> _8840_nativeFromType;
                          _8840_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8839_b0, _8838_range0);
                          if ((_8840_nativeFromType).is_Some) {
                            RAST._IExpr _8841_recursiveGen;
                            DCOMPUTF16._IOwnership _8842_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8843_recIdents;
                            RAST._IExpr _out3897;
                            DCOMPUTF16._IOwnership _out3898;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3899;
                            DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3897, out _out3898, out _out3899);
                            _8841_recursiveGen = _out3897;
                            _8842_recOwned = _out3898;
                            _8843_recIdents = _out3899;
                            RAST._IExpr _out3900;
                            DCOMPUTF16._IOwnership _out3901;
                            DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_8841_recursiveGen, (_8819_nativeToType).dtor_value), _8842_recOwned, expectedOwnership, out _out3900, out _out3901);
                            r = _out3900;
                            resultingOwnership = _out3901;
                            readIdents = _8843_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source359.is_Nullable) {
                      DAST._IType _8844___mcc_h1611 = _source359.dtor_Nullable_a0;
                    } else if (_source359.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _8845___mcc_h1613 = _source359.dtor_Tuple_a0;
                    } else if (_source359.is_Array) {
                      DAST._IType _8846___mcc_h1615 = _source359.dtor_element;
                      BigInteger _8847___mcc_h1616 = _source359.dtor_dims;
                    } else if (_source359.is_Seq) {
                      DAST._IType _8848___mcc_h1619 = _source359.dtor_element;
                    } else if (_source359.is_Set) {
                      DAST._IType _8849___mcc_h1621 = _source359.dtor_element;
                    } else if (_source359.is_Multiset) {
                      DAST._IType _8850___mcc_h1623 = _source359.dtor_element;
                    } else if (_source359.is_Map) {
                      DAST._IType _8851___mcc_h1625 = _source359.dtor_key;
                      DAST._IType _8852___mcc_h1626 = _source359.dtor_value;
                    } else if (_source359.is_SetBuilder) {
                      DAST._IType _8853___mcc_h1629 = _source359.dtor_element;
                    } else if (_source359.is_MapBuilder) {
                      DAST._IType _8854___mcc_h1631 = _source359.dtor_key;
                      DAST._IType _8855___mcc_h1632 = _source359.dtor_value;
                    } else if (_source359.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _8856___mcc_h1635 = _source359.dtor_args;
                      DAST._IType _8857___mcc_h1636 = _source359.dtor_result;
                    } else if (_source359.is_Primitive) {
                      DAST._IPrimitive _8858___mcc_h1639 = _source359.dtor_Primitive_a0;
                    } else if (_source359.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _8859___mcc_h1641 = _source359.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _8860___mcc_h1643 = _source359.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_7821_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _8861_recursiveGen;
                      DCOMPUTF16._IOwnership _8862_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8863_recIdents;
                      RAST._IExpr _out3902;
                      DCOMPUTF16._IOwnership _out3903;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3904;
                      DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3902, out _out3903, out _out3904);
                      _8861_recursiveGen = _out3902;
                      _8862_recOwned = _out3903;
                      _8863_recIdents = _out3904;
                      RAST._IExpr _out3905;
                      DCOMPUTF16._IOwnership _out3906;
                      DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_8861_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_8819_nativeToType).dtor_value), _8862_recOwned, expectedOwnership, out _out3905, out _out3906);
                      r = _out3905;
                      resultingOwnership = _out3906;
                      readIdents = _8863_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out3907;
                  DCOMPUTF16._IOwnership _out3908;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3909;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7820_expr, _7821_fromTpe, _8818_b), _8818_b, _7822_toTpe), selfIdent, env, expectedOwnership, out _out3907, out _out3908, out _out3909);
                  r = _out3907;
                  resultingOwnership = _out3908;
                  readIdents = _out3909;
                }
              }
            }
          } else if (_source356.is_Nullable) {
            DAST._IType _8864___mcc_h520 = _source356.dtor_Nullable_a0;
            {
              RAST._IExpr _8865_recursiveGen;
              DCOMPUTF16._IOwnership _8866_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8867_recIdents;
              RAST._IExpr _out3910;
              DCOMPUTF16._IOwnership _out3911;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3912;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3910, out _out3911, out _out3912);
              _8865_recursiveGen = _out3910;
              _8866_recOwned = _out3911;
              _8867_recIdents = _out3912;
              r = _8865_recursiveGen;
              if (object.Equals(_8866_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out3913;
              DCOMPUTF16._IOwnership _out3914;
              DCOMPUTF16.COMP.FromOwnership(r, _8866_recOwned, expectedOwnership, out _out3913, out _out3914);
              r = _out3913;
              resultingOwnership = _out3914;
              readIdents = _8867_recIdents;
            }
          } else if (_source356.is_Tuple) {
            Dafny.ISequence<DAST._IType> _8868___mcc_h522 = _source356.dtor_Tuple_a0;
            {
              RAST._IExpr _8869_recursiveGen;
              DCOMPUTF16._IOwnership _8870_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8871_recIdents;
              RAST._IExpr _out3915;
              DCOMPUTF16._IOwnership _out3916;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3917;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3915, out _out3916, out _out3917);
              _8869_recursiveGen = _out3915;
              _8870_recOwned = _out3916;
              _8871_recIdents = _out3917;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8869_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3918;
              DCOMPUTF16._IOwnership _out3919;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3918, out _out3919);
              r = _out3918;
              resultingOwnership = _out3919;
              readIdents = _8871_recIdents;
            }
          } else if (_source356.is_Array) {
            DAST._IType _8872___mcc_h524 = _source356.dtor_element;
            BigInteger _8873___mcc_h525 = _source356.dtor_dims;
            {
              RAST._IExpr _8874_recursiveGen;
              DCOMPUTF16._IOwnership _8875_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8876_recIdents;
              RAST._IExpr _out3920;
              DCOMPUTF16._IOwnership _out3921;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3922;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3920, out _out3921, out _out3922);
              _8874_recursiveGen = _out3920;
              _8875_recOwned = _out3921;
              _8876_recIdents = _out3922;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8874_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3923;
              DCOMPUTF16._IOwnership _out3924;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3923, out _out3924);
              r = _out3923;
              resultingOwnership = _out3924;
              readIdents = _8876_recIdents;
            }
          } else if (_source356.is_Seq) {
            DAST._IType _8877___mcc_h528 = _source356.dtor_element;
            {
              RAST._IExpr _8878_recursiveGen;
              DCOMPUTF16._IOwnership _8879_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8880_recIdents;
              RAST._IExpr _out3925;
              DCOMPUTF16._IOwnership _out3926;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3927;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3925, out _out3926, out _out3927);
              _8878_recursiveGen = _out3925;
              _8879_recOwned = _out3926;
              _8880_recIdents = _out3927;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8878_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3928;
              DCOMPUTF16._IOwnership _out3929;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3928, out _out3929);
              r = _out3928;
              resultingOwnership = _out3929;
              readIdents = _8880_recIdents;
            }
          } else if (_source356.is_Set) {
            DAST._IType _8881___mcc_h530 = _source356.dtor_element;
            {
              RAST._IExpr _8882_recursiveGen;
              DCOMPUTF16._IOwnership _8883_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8884_recIdents;
              RAST._IExpr _out3930;
              DCOMPUTF16._IOwnership _out3931;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3932;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3930, out _out3931, out _out3932);
              _8882_recursiveGen = _out3930;
              _8883_recOwned = _out3931;
              _8884_recIdents = _out3932;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8882_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3933;
              DCOMPUTF16._IOwnership _out3934;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3933, out _out3934);
              r = _out3933;
              resultingOwnership = _out3934;
              readIdents = _8884_recIdents;
            }
          } else if (_source356.is_Multiset) {
            DAST._IType _8885___mcc_h532 = _source356.dtor_element;
            {
              RAST._IExpr _8886_recursiveGen;
              DCOMPUTF16._IOwnership _8887_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8888_recIdents;
              RAST._IExpr _out3935;
              DCOMPUTF16._IOwnership _out3936;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3937;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3935, out _out3936, out _out3937);
              _8886_recursiveGen = _out3935;
              _8887_recOwned = _out3936;
              _8888_recIdents = _out3937;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8886_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3938;
              DCOMPUTF16._IOwnership _out3939;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3938, out _out3939);
              r = _out3938;
              resultingOwnership = _out3939;
              readIdents = _8888_recIdents;
            }
          } else if (_source356.is_Map) {
            DAST._IType _8889___mcc_h534 = _source356.dtor_key;
            DAST._IType _8890___mcc_h535 = _source356.dtor_value;
            {
              RAST._IExpr _8891_recursiveGen;
              DCOMPUTF16._IOwnership _8892_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8893_recIdents;
              RAST._IExpr _out3940;
              DCOMPUTF16._IOwnership _out3941;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3942;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3940, out _out3941, out _out3942);
              _8891_recursiveGen = _out3940;
              _8892_recOwned = _out3941;
              _8893_recIdents = _out3942;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8891_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3943;
              DCOMPUTF16._IOwnership _out3944;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3943, out _out3944);
              r = _out3943;
              resultingOwnership = _out3944;
              readIdents = _8893_recIdents;
            }
          } else if (_source356.is_SetBuilder) {
            DAST._IType _8894___mcc_h538 = _source356.dtor_element;
            {
              RAST._IExpr _8895_recursiveGen;
              DCOMPUTF16._IOwnership _8896_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8897_recIdents;
              RAST._IExpr _out3945;
              DCOMPUTF16._IOwnership _out3946;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3947;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3945, out _out3946, out _out3947);
              _8895_recursiveGen = _out3945;
              _8896_recOwned = _out3946;
              _8897_recIdents = _out3947;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8895_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3948;
              DCOMPUTF16._IOwnership _out3949;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3948, out _out3949);
              r = _out3948;
              resultingOwnership = _out3949;
              readIdents = _8897_recIdents;
            }
          } else if (_source356.is_MapBuilder) {
            DAST._IType _8898___mcc_h540 = _source356.dtor_key;
            DAST._IType _8899___mcc_h541 = _source356.dtor_value;
            {
              RAST._IExpr _8900_recursiveGen;
              DCOMPUTF16._IOwnership _8901_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8902_recIdents;
              RAST._IExpr _out3950;
              DCOMPUTF16._IOwnership _out3951;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3952;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3950, out _out3951, out _out3952);
              _8900_recursiveGen = _out3950;
              _8901_recOwned = _out3951;
              _8902_recIdents = _out3952;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8900_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3953;
              DCOMPUTF16._IOwnership _out3954;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3953, out _out3954);
              r = _out3953;
              resultingOwnership = _out3954;
              readIdents = _8902_recIdents;
            }
          } else if (_source356.is_Arrow) {
            Dafny.ISequence<DAST._IType> _8903___mcc_h544 = _source356.dtor_args;
            DAST._IType _8904___mcc_h545 = _source356.dtor_result;
            {
              RAST._IExpr _8905_recursiveGen;
              DCOMPUTF16._IOwnership _8906_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8907_recIdents;
              RAST._IExpr _out3955;
              DCOMPUTF16._IOwnership _out3956;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3957;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3955, out _out3956, out _out3957);
              _8905_recursiveGen = _out3955;
              _8906_recOwned = _out3956;
              _8907_recIdents = _out3957;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8905_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3958;
              DCOMPUTF16._IOwnership _out3959;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3958, out _out3959);
              r = _out3958;
              resultingOwnership = _out3959;
              readIdents = _8907_recIdents;
            }
          } else if (_source356.is_Primitive) {
            DAST._IPrimitive _8908___mcc_h548 = _source356.dtor_Primitive_a0;
            {
              RAST._IExpr _8909_recursiveGen;
              DCOMPUTF16._IOwnership _8910_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8911_recIdents;
              RAST._IExpr _out3960;
              DCOMPUTF16._IOwnership _out3961;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3962;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3960, out _out3961, out _out3962);
              _8909_recursiveGen = _out3960;
              _8910_recOwned = _out3961;
              _8911_recIdents = _out3962;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8909_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3963;
              DCOMPUTF16._IOwnership _out3964;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3963, out _out3964);
              r = _out3963;
              resultingOwnership = _out3964;
              readIdents = _8911_recIdents;
            }
          } else if (_source356.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _8912___mcc_h550 = _source356.dtor_Passthrough_a0;
            {
              RAST._IExpr _8913_recursiveGen;
              DCOMPUTF16._IOwnership _8914_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8915_recIdents;
              RAST._IExpr _out3965;
              DCOMPUTF16._IOwnership _out3966;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3967;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3965, out _out3966, out _out3967);
              _8913_recursiveGen = _out3965;
              _8914_recOwned = _out3966;
              _8915_recIdents = _out3967;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8913_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3968;
              DCOMPUTF16._IOwnership _out3969;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3968, out _out3969);
              r = _out3968;
              resultingOwnership = _out3969;
              readIdents = _8915_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _8916___mcc_h552 = _source356.dtor_TypeArg_a0;
            {
              RAST._IExpr _8917_recursiveGen;
              DCOMPUTF16._IOwnership _8918_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8919_recIdents;
              RAST._IExpr _out3970;
              DCOMPUTF16._IOwnership _out3971;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3972;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3970, out _out3971, out _out3972);
              _8917_recursiveGen = _out3970;
              _8918_recOwned = _out3971;
              _8919_recIdents = _out3972;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8917_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3973;
              DCOMPUTF16._IOwnership _out3974;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3973, out _out3974);
              r = _out3973;
              resultingOwnership = _out3974;
              readIdents = _8919_recIdents;
            }
          }
        } else if (_source308.is_Multiset) {
          DAST._IType _8920___mcc_h554 = _source308.dtor_element;
          DAST._IType _source361 = _7827___mcc_h1;
          if (_source361.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8921___mcc_h558 = _source361.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _8922___mcc_h559 = _source361.dtor_typeArgs;
            DAST._IResolvedType _8923___mcc_h560 = _source361.dtor_resolved;
            DAST._IResolvedType _source362 = _8923___mcc_h560;
            if (_source362.is_Datatype) {
              DAST._IDatatypeType _8924___mcc_h564 = _source362.dtor_datatypeType;
              {
                RAST._IExpr _8925_recursiveGen;
                DCOMPUTF16._IOwnership _8926_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8927_recIdents;
                RAST._IExpr _out3975;
                DCOMPUTF16._IOwnership _out3976;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3977;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3975, out _out3976, out _out3977);
                _8925_recursiveGen = _out3975;
                _8926_recOwned = _out3976;
                _8927_recIdents = _out3977;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8925_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3978;
                DCOMPUTF16._IOwnership _out3979;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3978, out _out3979);
                r = _out3978;
                resultingOwnership = _out3979;
                readIdents = _8927_recIdents;
              }
            } else if (_source362.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8928___mcc_h566 = _source362.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _8929___mcc_h567 = _source362.dtor_attributes;
              {
                RAST._IExpr _8930_recursiveGen;
                DCOMPUTF16._IOwnership _8931_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8932_recIdents;
                RAST._IExpr _out3980;
                DCOMPUTF16._IOwnership _out3981;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3982;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3980, out _out3981, out _out3982);
                _8930_recursiveGen = _out3980;
                _8931_recOwned = _out3981;
                _8932_recIdents = _out3982;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8930_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3983;
                DCOMPUTF16._IOwnership _out3984;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3983, out _out3984);
                r = _out3983;
                resultingOwnership = _out3984;
                readIdents = _8932_recIdents;
              }
            } else {
              DAST._IType _8933___mcc_h570 = _source362.dtor_baseType;
              DAST._INewtypeRange _8934___mcc_h571 = _source362.dtor_range;
              bool _8935___mcc_h572 = _source362.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _8936___mcc_h573 = _source362.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _8937_attributes = _8936___mcc_h573;
              bool _8938_erase = _8935___mcc_h572;
              DAST._INewtypeRange _8939_range = _8934___mcc_h571;
              DAST._IType _8940_b = _8933___mcc_h570;
              {
                Std.Wrappers._IOption<RAST._IType> _8941_nativeToType;
                _8941_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_8940_b, _8939_range);
                if (object.Equals(_7821_fromTpe, _8940_b)) {
                  RAST._IExpr _8942_recursiveGen;
                  DCOMPUTF16._IOwnership _8943_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8944_recIdents;
                  RAST._IExpr _out3985;
                  DCOMPUTF16._IOwnership _out3986;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3987;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3985, out _out3986, out _out3987);
                  _8942_recursiveGen = _out3985;
                  _8943_recOwned = _out3986;
                  _8944_recIdents = _out3987;
                  Std.Wrappers._IOption<RAST._IType> _source363 = _8941_nativeToType;
                  if (_source363.is_None) {
                    if (_8938_erase) {
                      r = _8942_recursiveGen;
                    } else {
                      RAST._IType _8945_rhsType;
                      RAST._IType _out3988;
                      _out3988 = DCOMPUTF16.COMP.GenType(_7822_toTpe, true, false);
                      _8945_rhsType = _out3988;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_8945_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_8942_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out3989;
                    DCOMPUTF16._IOwnership _out3990;
                    DCOMPUTF16.COMP.FromOwnership(r, _8943_recOwned, expectedOwnership, out _out3989, out _out3990);
                    r = _out3989;
                    resultingOwnership = _out3990;
                  } else {
                    RAST._IType _8946___mcc_h1645 = _source363.dtor_value;
                    RAST._IType _8947_v = _8946___mcc_h1645;
                    r = (((_8942_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_8947_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out3991;
                    DCOMPUTF16._IOwnership _out3992;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3991, out _out3992);
                    r = _out3991;
                    resultingOwnership = _out3992;
                  }
                  readIdents = _8944_recIdents;
                } else {
                  if ((_8941_nativeToType).is_Some) {
                    DAST._IType _source364 = _7821_fromTpe;
                    if (_source364.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8948___mcc_h1646 = _source364.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _8949___mcc_h1647 = _source364.dtor_typeArgs;
                      DAST._IResolvedType _8950___mcc_h1648 = _source364.dtor_resolved;
                      DAST._IResolvedType _source365 = _8950___mcc_h1648;
                      if (_source365.is_Datatype) {
                        DAST._IDatatypeType _8951___mcc_h1652 = _source365.dtor_datatypeType;
                      } else if (_source365.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8952___mcc_h1654 = _source365.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _8953___mcc_h1655 = _source365.dtor_attributes;
                      } else {
                        DAST._IType _8954___mcc_h1658 = _source365.dtor_baseType;
                        DAST._INewtypeRange _8955___mcc_h1659 = _source365.dtor_range;
                        bool _8956___mcc_h1660 = _source365.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _8957___mcc_h1661 = _source365.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _8958_attributes0 = _8957___mcc_h1661;
                        bool _8959_erase0 = _8956___mcc_h1660;
                        DAST._INewtypeRange _8960_range0 = _8955___mcc_h1659;
                        DAST._IType _8961_b0 = _8954___mcc_h1658;
                        {
                          Std.Wrappers._IOption<RAST._IType> _8962_nativeFromType;
                          _8962_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8961_b0, _8960_range0);
                          if ((_8962_nativeFromType).is_Some) {
                            RAST._IExpr _8963_recursiveGen;
                            DCOMPUTF16._IOwnership _8964_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8965_recIdents;
                            RAST._IExpr _out3993;
                            DCOMPUTF16._IOwnership _out3994;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3995;
                            DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3993, out _out3994, out _out3995);
                            _8963_recursiveGen = _out3993;
                            _8964_recOwned = _out3994;
                            _8965_recIdents = _out3995;
                            RAST._IExpr _out3996;
                            DCOMPUTF16._IOwnership _out3997;
                            DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_8963_recursiveGen, (_8941_nativeToType).dtor_value), _8964_recOwned, expectedOwnership, out _out3996, out _out3997);
                            r = _out3996;
                            resultingOwnership = _out3997;
                            readIdents = _8965_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source364.is_Nullable) {
                      DAST._IType _8966___mcc_h1666 = _source364.dtor_Nullable_a0;
                    } else if (_source364.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _8967___mcc_h1668 = _source364.dtor_Tuple_a0;
                    } else if (_source364.is_Array) {
                      DAST._IType _8968___mcc_h1670 = _source364.dtor_element;
                      BigInteger _8969___mcc_h1671 = _source364.dtor_dims;
                    } else if (_source364.is_Seq) {
                      DAST._IType _8970___mcc_h1674 = _source364.dtor_element;
                    } else if (_source364.is_Set) {
                      DAST._IType _8971___mcc_h1676 = _source364.dtor_element;
                    } else if (_source364.is_Multiset) {
                      DAST._IType _8972___mcc_h1678 = _source364.dtor_element;
                    } else if (_source364.is_Map) {
                      DAST._IType _8973___mcc_h1680 = _source364.dtor_key;
                      DAST._IType _8974___mcc_h1681 = _source364.dtor_value;
                    } else if (_source364.is_SetBuilder) {
                      DAST._IType _8975___mcc_h1684 = _source364.dtor_element;
                    } else if (_source364.is_MapBuilder) {
                      DAST._IType _8976___mcc_h1686 = _source364.dtor_key;
                      DAST._IType _8977___mcc_h1687 = _source364.dtor_value;
                    } else if (_source364.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _8978___mcc_h1690 = _source364.dtor_args;
                      DAST._IType _8979___mcc_h1691 = _source364.dtor_result;
                    } else if (_source364.is_Primitive) {
                      DAST._IPrimitive _8980___mcc_h1694 = _source364.dtor_Primitive_a0;
                    } else if (_source364.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _8981___mcc_h1696 = _source364.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _8982___mcc_h1698 = _source364.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_7821_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _8983_recursiveGen;
                      DCOMPUTF16._IOwnership _8984_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8985_recIdents;
                      RAST._IExpr _out3998;
                      DCOMPUTF16._IOwnership _out3999;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4000;
                      DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out3998, out _out3999, out _out4000);
                      _8983_recursiveGen = _out3998;
                      _8984_recOwned = _out3999;
                      _8985_recIdents = _out4000;
                      RAST._IExpr _out4001;
                      DCOMPUTF16._IOwnership _out4002;
                      DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_8983_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_8941_nativeToType).dtor_value), _8984_recOwned, expectedOwnership, out _out4001, out _out4002);
                      r = _out4001;
                      resultingOwnership = _out4002;
                      readIdents = _8985_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out4003;
                  DCOMPUTF16._IOwnership _out4004;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4005;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7820_expr, _7821_fromTpe, _8940_b), _8940_b, _7822_toTpe), selfIdent, env, expectedOwnership, out _out4003, out _out4004, out _out4005);
                  r = _out4003;
                  resultingOwnership = _out4004;
                  readIdents = _out4005;
                }
              }
            }
          } else if (_source361.is_Nullable) {
            DAST._IType _8986___mcc_h578 = _source361.dtor_Nullable_a0;
            {
              RAST._IExpr _8987_recursiveGen;
              DCOMPUTF16._IOwnership _8988_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8989_recIdents;
              RAST._IExpr _out4006;
              DCOMPUTF16._IOwnership _out4007;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4008;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4006, out _out4007, out _out4008);
              _8987_recursiveGen = _out4006;
              _8988_recOwned = _out4007;
              _8989_recIdents = _out4008;
              r = _8987_recursiveGen;
              if (object.Equals(_8988_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out4009;
              DCOMPUTF16._IOwnership _out4010;
              DCOMPUTF16.COMP.FromOwnership(r, _8988_recOwned, expectedOwnership, out _out4009, out _out4010);
              r = _out4009;
              resultingOwnership = _out4010;
              readIdents = _8989_recIdents;
            }
          } else if (_source361.is_Tuple) {
            Dafny.ISequence<DAST._IType> _8990___mcc_h580 = _source361.dtor_Tuple_a0;
            {
              RAST._IExpr _8991_recursiveGen;
              DCOMPUTF16._IOwnership _8992_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8993_recIdents;
              RAST._IExpr _out4011;
              DCOMPUTF16._IOwnership _out4012;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4013;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4011, out _out4012, out _out4013);
              _8991_recursiveGen = _out4011;
              _8992_recOwned = _out4012;
              _8993_recIdents = _out4013;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8991_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4014;
              DCOMPUTF16._IOwnership _out4015;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4014, out _out4015);
              r = _out4014;
              resultingOwnership = _out4015;
              readIdents = _8993_recIdents;
            }
          } else if (_source361.is_Array) {
            DAST._IType _8994___mcc_h582 = _source361.dtor_element;
            BigInteger _8995___mcc_h583 = _source361.dtor_dims;
            {
              RAST._IExpr _8996_recursiveGen;
              DCOMPUTF16._IOwnership _8997_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8998_recIdents;
              RAST._IExpr _out4016;
              DCOMPUTF16._IOwnership _out4017;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4018;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4016, out _out4017, out _out4018);
              _8996_recursiveGen = _out4016;
              _8997_recOwned = _out4017;
              _8998_recIdents = _out4018;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8996_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4019;
              DCOMPUTF16._IOwnership _out4020;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4019, out _out4020);
              r = _out4019;
              resultingOwnership = _out4020;
              readIdents = _8998_recIdents;
            }
          } else if (_source361.is_Seq) {
            DAST._IType _8999___mcc_h586 = _source361.dtor_element;
            {
              RAST._IExpr _9000_recursiveGen;
              DCOMPUTF16._IOwnership _9001_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9002_recIdents;
              RAST._IExpr _out4021;
              DCOMPUTF16._IOwnership _out4022;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4023;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4021, out _out4022, out _out4023);
              _9000_recursiveGen = _out4021;
              _9001_recOwned = _out4022;
              _9002_recIdents = _out4023;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9000_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4024;
              DCOMPUTF16._IOwnership _out4025;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4024, out _out4025);
              r = _out4024;
              resultingOwnership = _out4025;
              readIdents = _9002_recIdents;
            }
          } else if (_source361.is_Set) {
            DAST._IType _9003___mcc_h588 = _source361.dtor_element;
            {
              RAST._IExpr _9004_recursiveGen;
              DCOMPUTF16._IOwnership _9005_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9006_recIdents;
              RAST._IExpr _out4026;
              DCOMPUTF16._IOwnership _out4027;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4028;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4026, out _out4027, out _out4028);
              _9004_recursiveGen = _out4026;
              _9005_recOwned = _out4027;
              _9006_recIdents = _out4028;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9004_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4029;
              DCOMPUTF16._IOwnership _out4030;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4029, out _out4030);
              r = _out4029;
              resultingOwnership = _out4030;
              readIdents = _9006_recIdents;
            }
          } else if (_source361.is_Multiset) {
            DAST._IType _9007___mcc_h590 = _source361.dtor_element;
            {
              RAST._IExpr _9008_recursiveGen;
              DCOMPUTF16._IOwnership _9009_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9010_recIdents;
              RAST._IExpr _out4031;
              DCOMPUTF16._IOwnership _out4032;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4033;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4031, out _out4032, out _out4033);
              _9008_recursiveGen = _out4031;
              _9009_recOwned = _out4032;
              _9010_recIdents = _out4033;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9008_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4034;
              DCOMPUTF16._IOwnership _out4035;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4034, out _out4035);
              r = _out4034;
              resultingOwnership = _out4035;
              readIdents = _9010_recIdents;
            }
          } else if (_source361.is_Map) {
            DAST._IType _9011___mcc_h592 = _source361.dtor_key;
            DAST._IType _9012___mcc_h593 = _source361.dtor_value;
            {
              RAST._IExpr _9013_recursiveGen;
              DCOMPUTF16._IOwnership _9014_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9015_recIdents;
              RAST._IExpr _out4036;
              DCOMPUTF16._IOwnership _out4037;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4038;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4036, out _out4037, out _out4038);
              _9013_recursiveGen = _out4036;
              _9014_recOwned = _out4037;
              _9015_recIdents = _out4038;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9013_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4039;
              DCOMPUTF16._IOwnership _out4040;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4039, out _out4040);
              r = _out4039;
              resultingOwnership = _out4040;
              readIdents = _9015_recIdents;
            }
          } else if (_source361.is_SetBuilder) {
            DAST._IType _9016___mcc_h596 = _source361.dtor_element;
            {
              RAST._IExpr _9017_recursiveGen;
              DCOMPUTF16._IOwnership _9018_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9019_recIdents;
              RAST._IExpr _out4041;
              DCOMPUTF16._IOwnership _out4042;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4043;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4041, out _out4042, out _out4043);
              _9017_recursiveGen = _out4041;
              _9018_recOwned = _out4042;
              _9019_recIdents = _out4043;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9017_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4044;
              DCOMPUTF16._IOwnership _out4045;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4044, out _out4045);
              r = _out4044;
              resultingOwnership = _out4045;
              readIdents = _9019_recIdents;
            }
          } else if (_source361.is_MapBuilder) {
            DAST._IType _9020___mcc_h598 = _source361.dtor_key;
            DAST._IType _9021___mcc_h599 = _source361.dtor_value;
            {
              RAST._IExpr _9022_recursiveGen;
              DCOMPUTF16._IOwnership _9023_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9024_recIdents;
              RAST._IExpr _out4046;
              DCOMPUTF16._IOwnership _out4047;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4048;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4046, out _out4047, out _out4048);
              _9022_recursiveGen = _out4046;
              _9023_recOwned = _out4047;
              _9024_recIdents = _out4048;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9022_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4049;
              DCOMPUTF16._IOwnership _out4050;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4049, out _out4050);
              r = _out4049;
              resultingOwnership = _out4050;
              readIdents = _9024_recIdents;
            }
          } else if (_source361.is_Arrow) {
            Dafny.ISequence<DAST._IType> _9025___mcc_h602 = _source361.dtor_args;
            DAST._IType _9026___mcc_h603 = _source361.dtor_result;
            {
              RAST._IExpr _9027_recursiveGen;
              DCOMPUTF16._IOwnership _9028_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9029_recIdents;
              RAST._IExpr _out4051;
              DCOMPUTF16._IOwnership _out4052;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4053;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4051, out _out4052, out _out4053);
              _9027_recursiveGen = _out4051;
              _9028_recOwned = _out4052;
              _9029_recIdents = _out4053;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9027_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4054;
              DCOMPUTF16._IOwnership _out4055;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4054, out _out4055);
              r = _out4054;
              resultingOwnership = _out4055;
              readIdents = _9029_recIdents;
            }
          } else if (_source361.is_Primitive) {
            DAST._IPrimitive _9030___mcc_h606 = _source361.dtor_Primitive_a0;
            {
              RAST._IExpr _9031_recursiveGen;
              DCOMPUTF16._IOwnership _9032_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9033_recIdents;
              RAST._IExpr _out4056;
              DCOMPUTF16._IOwnership _out4057;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4058;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4056, out _out4057, out _out4058);
              _9031_recursiveGen = _out4056;
              _9032_recOwned = _out4057;
              _9033_recIdents = _out4058;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9031_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4059;
              DCOMPUTF16._IOwnership _out4060;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4059, out _out4060);
              r = _out4059;
              resultingOwnership = _out4060;
              readIdents = _9033_recIdents;
            }
          } else if (_source361.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _9034___mcc_h608 = _source361.dtor_Passthrough_a0;
            {
              RAST._IExpr _9035_recursiveGen;
              DCOMPUTF16._IOwnership _9036_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9037_recIdents;
              RAST._IExpr _out4061;
              DCOMPUTF16._IOwnership _out4062;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4063;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4061, out _out4062, out _out4063);
              _9035_recursiveGen = _out4061;
              _9036_recOwned = _out4062;
              _9037_recIdents = _out4063;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9035_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4064;
              DCOMPUTF16._IOwnership _out4065;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4064, out _out4065);
              r = _out4064;
              resultingOwnership = _out4065;
              readIdents = _9037_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _9038___mcc_h610 = _source361.dtor_TypeArg_a0;
            {
              RAST._IExpr _9039_recursiveGen;
              DCOMPUTF16._IOwnership _9040_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9041_recIdents;
              RAST._IExpr _out4066;
              DCOMPUTF16._IOwnership _out4067;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4068;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4066, out _out4067, out _out4068);
              _9039_recursiveGen = _out4066;
              _9040_recOwned = _out4067;
              _9041_recIdents = _out4068;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9039_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4069;
              DCOMPUTF16._IOwnership _out4070;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4069, out _out4070);
              r = _out4069;
              resultingOwnership = _out4070;
              readIdents = _9041_recIdents;
            }
          }
        } else if (_source308.is_Map) {
          DAST._IType _9042___mcc_h612 = _source308.dtor_key;
          DAST._IType _9043___mcc_h613 = _source308.dtor_value;
          DAST._IType _source366 = _7827___mcc_h1;
          if (_source366.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9044___mcc_h620 = _source366.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _9045___mcc_h621 = _source366.dtor_typeArgs;
            DAST._IResolvedType _9046___mcc_h622 = _source366.dtor_resolved;
            DAST._IResolvedType _source367 = _9046___mcc_h622;
            if (_source367.is_Datatype) {
              DAST._IDatatypeType _9047___mcc_h626 = _source367.dtor_datatypeType;
              {
                RAST._IExpr _9048_recursiveGen;
                DCOMPUTF16._IOwnership _9049_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9050_recIdents;
                RAST._IExpr _out4071;
                DCOMPUTF16._IOwnership _out4072;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4073;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4071, out _out4072, out _out4073);
                _9048_recursiveGen = _out4071;
                _9049_recOwned = _out4072;
                _9050_recIdents = _out4073;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9048_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4074;
                DCOMPUTF16._IOwnership _out4075;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4074, out _out4075);
                r = _out4074;
                resultingOwnership = _out4075;
                readIdents = _9050_recIdents;
              }
            } else if (_source367.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9051___mcc_h628 = _source367.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _9052___mcc_h629 = _source367.dtor_attributes;
              {
                RAST._IExpr _9053_recursiveGen;
                DCOMPUTF16._IOwnership _9054_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9055_recIdents;
                RAST._IExpr _out4076;
                DCOMPUTF16._IOwnership _out4077;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4078;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4076, out _out4077, out _out4078);
                _9053_recursiveGen = _out4076;
                _9054_recOwned = _out4077;
                _9055_recIdents = _out4078;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9053_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4079;
                DCOMPUTF16._IOwnership _out4080;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4079, out _out4080);
                r = _out4079;
                resultingOwnership = _out4080;
                readIdents = _9055_recIdents;
              }
            } else {
              DAST._IType _9056___mcc_h632 = _source367.dtor_baseType;
              DAST._INewtypeRange _9057___mcc_h633 = _source367.dtor_range;
              bool _9058___mcc_h634 = _source367.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _9059___mcc_h635 = _source367.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _9060_attributes = _9059___mcc_h635;
              bool _9061_erase = _9058___mcc_h634;
              DAST._INewtypeRange _9062_range = _9057___mcc_h633;
              DAST._IType _9063_b = _9056___mcc_h632;
              {
                Std.Wrappers._IOption<RAST._IType> _9064_nativeToType;
                _9064_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_9063_b, _9062_range);
                if (object.Equals(_7821_fromTpe, _9063_b)) {
                  RAST._IExpr _9065_recursiveGen;
                  DCOMPUTF16._IOwnership _9066_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9067_recIdents;
                  RAST._IExpr _out4081;
                  DCOMPUTF16._IOwnership _out4082;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4083;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4081, out _out4082, out _out4083);
                  _9065_recursiveGen = _out4081;
                  _9066_recOwned = _out4082;
                  _9067_recIdents = _out4083;
                  Std.Wrappers._IOption<RAST._IType> _source368 = _9064_nativeToType;
                  if (_source368.is_None) {
                    if (_9061_erase) {
                      r = _9065_recursiveGen;
                    } else {
                      RAST._IType _9068_rhsType;
                      RAST._IType _out4084;
                      _out4084 = DCOMPUTF16.COMP.GenType(_7822_toTpe, true, false);
                      _9068_rhsType = _out4084;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_9068_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_9065_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out4085;
                    DCOMPUTF16._IOwnership _out4086;
                    DCOMPUTF16.COMP.FromOwnership(r, _9066_recOwned, expectedOwnership, out _out4085, out _out4086);
                    r = _out4085;
                    resultingOwnership = _out4086;
                  } else {
                    RAST._IType _9069___mcc_h1700 = _source368.dtor_value;
                    RAST._IType _9070_v = _9069___mcc_h1700;
                    r = (((_9065_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_9070_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out4087;
                    DCOMPUTF16._IOwnership _out4088;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4087, out _out4088);
                    r = _out4087;
                    resultingOwnership = _out4088;
                  }
                  readIdents = _9067_recIdents;
                } else {
                  if ((_9064_nativeToType).is_Some) {
                    DAST._IType _source369 = _7821_fromTpe;
                    if (_source369.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9071___mcc_h1701 = _source369.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _9072___mcc_h1702 = _source369.dtor_typeArgs;
                      DAST._IResolvedType _9073___mcc_h1703 = _source369.dtor_resolved;
                      DAST._IResolvedType _source370 = _9073___mcc_h1703;
                      if (_source370.is_Datatype) {
                        DAST._IDatatypeType _9074___mcc_h1707 = _source370.dtor_datatypeType;
                      } else if (_source370.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9075___mcc_h1709 = _source370.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _9076___mcc_h1710 = _source370.dtor_attributes;
                      } else {
                        DAST._IType _9077___mcc_h1713 = _source370.dtor_baseType;
                        DAST._INewtypeRange _9078___mcc_h1714 = _source370.dtor_range;
                        bool _9079___mcc_h1715 = _source370.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _9080___mcc_h1716 = _source370.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _9081_attributes0 = _9080___mcc_h1716;
                        bool _9082_erase0 = _9079___mcc_h1715;
                        DAST._INewtypeRange _9083_range0 = _9078___mcc_h1714;
                        DAST._IType _9084_b0 = _9077___mcc_h1713;
                        {
                          Std.Wrappers._IOption<RAST._IType> _9085_nativeFromType;
                          _9085_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_9084_b0, _9083_range0);
                          if ((_9085_nativeFromType).is_Some) {
                            RAST._IExpr _9086_recursiveGen;
                            DCOMPUTF16._IOwnership _9087_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9088_recIdents;
                            RAST._IExpr _out4089;
                            DCOMPUTF16._IOwnership _out4090;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4091;
                            DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4089, out _out4090, out _out4091);
                            _9086_recursiveGen = _out4089;
                            _9087_recOwned = _out4090;
                            _9088_recIdents = _out4091;
                            RAST._IExpr _out4092;
                            DCOMPUTF16._IOwnership _out4093;
                            DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_9086_recursiveGen, (_9064_nativeToType).dtor_value), _9087_recOwned, expectedOwnership, out _out4092, out _out4093);
                            r = _out4092;
                            resultingOwnership = _out4093;
                            readIdents = _9088_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source369.is_Nullable) {
                      DAST._IType _9089___mcc_h1721 = _source369.dtor_Nullable_a0;
                    } else if (_source369.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _9090___mcc_h1723 = _source369.dtor_Tuple_a0;
                    } else if (_source369.is_Array) {
                      DAST._IType _9091___mcc_h1725 = _source369.dtor_element;
                      BigInteger _9092___mcc_h1726 = _source369.dtor_dims;
                    } else if (_source369.is_Seq) {
                      DAST._IType _9093___mcc_h1729 = _source369.dtor_element;
                    } else if (_source369.is_Set) {
                      DAST._IType _9094___mcc_h1731 = _source369.dtor_element;
                    } else if (_source369.is_Multiset) {
                      DAST._IType _9095___mcc_h1733 = _source369.dtor_element;
                    } else if (_source369.is_Map) {
                      DAST._IType _9096___mcc_h1735 = _source369.dtor_key;
                      DAST._IType _9097___mcc_h1736 = _source369.dtor_value;
                    } else if (_source369.is_SetBuilder) {
                      DAST._IType _9098___mcc_h1739 = _source369.dtor_element;
                    } else if (_source369.is_MapBuilder) {
                      DAST._IType _9099___mcc_h1741 = _source369.dtor_key;
                      DAST._IType _9100___mcc_h1742 = _source369.dtor_value;
                    } else if (_source369.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _9101___mcc_h1745 = _source369.dtor_args;
                      DAST._IType _9102___mcc_h1746 = _source369.dtor_result;
                    } else if (_source369.is_Primitive) {
                      DAST._IPrimitive _9103___mcc_h1749 = _source369.dtor_Primitive_a0;
                    } else if (_source369.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _9104___mcc_h1751 = _source369.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _9105___mcc_h1753 = _source369.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_7821_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _9106_recursiveGen;
                      DCOMPUTF16._IOwnership _9107_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9108_recIdents;
                      RAST._IExpr _out4094;
                      DCOMPUTF16._IOwnership _out4095;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4096;
                      DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4094, out _out4095, out _out4096);
                      _9106_recursiveGen = _out4094;
                      _9107_recOwned = _out4095;
                      _9108_recIdents = _out4096;
                      RAST._IExpr _out4097;
                      DCOMPUTF16._IOwnership _out4098;
                      DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_9106_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_9064_nativeToType).dtor_value), _9107_recOwned, expectedOwnership, out _out4097, out _out4098);
                      r = _out4097;
                      resultingOwnership = _out4098;
                      readIdents = _9108_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out4099;
                  DCOMPUTF16._IOwnership _out4100;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4101;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7820_expr, _7821_fromTpe, _9063_b), _9063_b, _7822_toTpe), selfIdent, env, expectedOwnership, out _out4099, out _out4100, out _out4101);
                  r = _out4099;
                  resultingOwnership = _out4100;
                  readIdents = _out4101;
                }
              }
            }
          } else if (_source366.is_Nullable) {
            DAST._IType _9109___mcc_h640 = _source366.dtor_Nullable_a0;
            {
              RAST._IExpr _9110_recursiveGen;
              DCOMPUTF16._IOwnership _9111_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9112_recIdents;
              RAST._IExpr _out4102;
              DCOMPUTF16._IOwnership _out4103;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4104;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4102, out _out4103, out _out4104);
              _9110_recursiveGen = _out4102;
              _9111_recOwned = _out4103;
              _9112_recIdents = _out4104;
              r = _9110_recursiveGen;
              if (object.Equals(_9111_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out4105;
              DCOMPUTF16._IOwnership _out4106;
              DCOMPUTF16.COMP.FromOwnership(r, _9111_recOwned, expectedOwnership, out _out4105, out _out4106);
              r = _out4105;
              resultingOwnership = _out4106;
              readIdents = _9112_recIdents;
            }
          } else if (_source366.is_Tuple) {
            Dafny.ISequence<DAST._IType> _9113___mcc_h642 = _source366.dtor_Tuple_a0;
            {
              RAST._IExpr _9114_recursiveGen;
              DCOMPUTF16._IOwnership _9115_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9116_recIdents;
              RAST._IExpr _out4107;
              DCOMPUTF16._IOwnership _out4108;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4109;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4107, out _out4108, out _out4109);
              _9114_recursiveGen = _out4107;
              _9115_recOwned = _out4108;
              _9116_recIdents = _out4109;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9114_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4110;
              DCOMPUTF16._IOwnership _out4111;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4110, out _out4111);
              r = _out4110;
              resultingOwnership = _out4111;
              readIdents = _9116_recIdents;
            }
          } else if (_source366.is_Array) {
            DAST._IType _9117___mcc_h644 = _source366.dtor_element;
            BigInteger _9118___mcc_h645 = _source366.dtor_dims;
            {
              RAST._IExpr _9119_recursiveGen;
              DCOMPUTF16._IOwnership _9120_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9121_recIdents;
              RAST._IExpr _out4112;
              DCOMPUTF16._IOwnership _out4113;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4114;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4112, out _out4113, out _out4114);
              _9119_recursiveGen = _out4112;
              _9120_recOwned = _out4113;
              _9121_recIdents = _out4114;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9119_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4115;
              DCOMPUTF16._IOwnership _out4116;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4115, out _out4116);
              r = _out4115;
              resultingOwnership = _out4116;
              readIdents = _9121_recIdents;
            }
          } else if (_source366.is_Seq) {
            DAST._IType _9122___mcc_h648 = _source366.dtor_element;
            {
              RAST._IExpr _9123_recursiveGen;
              DCOMPUTF16._IOwnership _9124_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9125_recIdents;
              RAST._IExpr _out4117;
              DCOMPUTF16._IOwnership _out4118;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4119;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4117, out _out4118, out _out4119);
              _9123_recursiveGen = _out4117;
              _9124_recOwned = _out4118;
              _9125_recIdents = _out4119;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9123_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4120;
              DCOMPUTF16._IOwnership _out4121;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4120, out _out4121);
              r = _out4120;
              resultingOwnership = _out4121;
              readIdents = _9125_recIdents;
            }
          } else if (_source366.is_Set) {
            DAST._IType _9126___mcc_h650 = _source366.dtor_element;
            {
              RAST._IExpr _9127_recursiveGen;
              DCOMPUTF16._IOwnership _9128_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9129_recIdents;
              RAST._IExpr _out4122;
              DCOMPUTF16._IOwnership _out4123;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4124;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4122, out _out4123, out _out4124);
              _9127_recursiveGen = _out4122;
              _9128_recOwned = _out4123;
              _9129_recIdents = _out4124;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9127_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4125;
              DCOMPUTF16._IOwnership _out4126;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4125, out _out4126);
              r = _out4125;
              resultingOwnership = _out4126;
              readIdents = _9129_recIdents;
            }
          } else if (_source366.is_Multiset) {
            DAST._IType _9130___mcc_h652 = _source366.dtor_element;
            {
              RAST._IExpr _9131_recursiveGen;
              DCOMPUTF16._IOwnership _9132_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9133_recIdents;
              RAST._IExpr _out4127;
              DCOMPUTF16._IOwnership _out4128;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4129;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4127, out _out4128, out _out4129);
              _9131_recursiveGen = _out4127;
              _9132_recOwned = _out4128;
              _9133_recIdents = _out4129;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9131_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4130;
              DCOMPUTF16._IOwnership _out4131;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4130, out _out4131);
              r = _out4130;
              resultingOwnership = _out4131;
              readIdents = _9133_recIdents;
            }
          } else if (_source366.is_Map) {
            DAST._IType _9134___mcc_h654 = _source366.dtor_key;
            DAST._IType _9135___mcc_h655 = _source366.dtor_value;
            {
              RAST._IExpr _9136_recursiveGen;
              DCOMPUTF16._IOwnership _9137_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9138_recIdents;
              RAST._IExpr _out4132;
              DCOMPUTF16._IOwnership _out4133;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4134;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4132, out _out4133, out _out4134);
              _9136_recursiveGen = _out4132;
              _9137_recOwned = _out4133;
              _9138_recIdents = _out4134;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9136_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4135;
              DCOMPUTF16._IOwnership _out4136;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4135, out _out4136);
              r = _out4135;
              resultingOwnership = _out4136;
              readIdents = _9138_recIdents;
            }
          } else if (_source366.is_SetBuilder) {
            DAST._IType _9139___mcc_h658 = _source366.dtor_element;
            {
              RAST._IExpr _9140_recursiveGen;
              DCOMPUTF16._IOwnership _9141_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9142_recIdents;
              RAST._IExpr _out4137;
              DCOMPUTF16._IOwnership _out4138;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4139;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4137, out _out4138, out _out4139);
              _9140_recursiveGen = _out4137;
              _9141_recOwned = _out4138;
              _9142_recIdents = _out4139;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9140_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4140;
              DCOMPUTF16._IOwnership _out4141;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4140, out _out4141);
              r = _out4140;
              resultingOwnership = _out4141;
              readIdents = _9142_recIdents;
            }
          } else if (_source366.is_MapBuilder) {
            DAST._IType _9143___mcc_h660 = _source366.dtor_key;
            DAST._IType _9144___mcc_h661 = _source366.dtor_value;
            {
              RAST._IExpr _9145_recursiveGen;
              DCOMPUTF16._IOwnership _9146_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9147_recIdents;
              RAST._IExpr _out4142;
              DCOMPUTF16._IOwnership _out4143;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4144;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4142, out _out4143, out _out4144);
              _9145_recursiveGen = _out4142;
              _9146_recOwned = _out4143;
              _9147_recIdents = _out4144;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9145_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4145;
              DCOMPUTF16._IOwnership _out4146;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4145, out _out4146);
              r = _out4145;
              resultingOwnership = _out4146;
              readIdents = _9147_recIdents;
            }
          } else if (_source366.is_Arrow) {
            Dafny.ISequence<DAST._IType> _9148___mcc_h664 = _source366.dtor_args;
            DAST._IType _9149___mcc_h665 = _source366.dtor_result;
            {
              RAST._IExpr _9150_recursiveGen;
              DCOMPUTF16._IOwnership _9151_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9152_recIdents;
              RAST._IExpr _out4147;
              DCOMPUTF16._IOwnership _out4148;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4149;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4147, out _out4148, out _out4149);
              _9150_recursiveGen = _out4147;
              _9151_recOwned = _out4148;
              _9152_recIdents = _out4149;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9150_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4150;
              DCOMPUTF16._IOwnership _out4151;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4150, out _out4151);
              r = _out4150;
              resultingOwnership = _out4151;
              readIdents = _9152_recIdents;
            }
          } else if (_source366.is_Primitive) {
            DAST._IPrimitive _9153___mcc_h668 = _source366.dtor_Primitive_a0;
            {
              RAST._IExpr _9154_recursiveGen;
              DCOMPUTF16._IOwnership _9155_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9156_recIdents;
              RAST._IExpr _out4152;
              DCOMPUTF16._IOwnership _out4153;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4154;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4152, out _out4153, out _out4154);
              _9154_recursiveGen = _out4152;
              _9155_recOwned = _out4153;
              _9156_recIdents = _out4154;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9154_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4155;
              DCOMPUTF16._IOwnership _out4156;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4155, out _out4156);
              r = _out4155;
              resultingOwnership = _out4156;
              readIdents = _9156_recIdents;
            }
          } else if (_source366.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _9157___mcc_h670 = _source366.dtor_Passthrough_a0;
            {
              RAST._IExpr _9158_recursiveGen;
              DCOMPUTF16._IOwnership _9159_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9160_recIdents;
              RAST._IExpr _out4157;
              DCOMPUTF16._IOwnership _out4158;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4159;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4157, out _out4158, out _out4159);
              _9158_recursiveGen = _out4157;
              _9159_recOwned = _out4158;
              _9160_recIdents = _out4159;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9158_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4160;
              DCOMPUTF16._IOwnership _out4161;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4160, out _out4161);
              r = _out4160;
              resultingOwnership = _out4161;
              readIdents = _9160_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _9161___mcc_h672 = _source366.dtor_TypeArg_a0;
            {
              RAST._IExpr _9162_recursiveGen;
              DCOMPUTF16._IOwnership _9163_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9164_recIdents;
              RAST._IExpr _out4162;
              DCOMPUTF16._IOwnership _out4163;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4164;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4162, out _out4163, out _out4164);
              _9162_recursiveGen = _out4162;
              _9163_recOwned = _out4163;
              _9164_recIdents = _out4164;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9162_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4165;
              DCOMPUTF16._IOwnership _out4166;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4165, out _out4166);
              r = _out4165;
              resultingOwnership = _out4166;
              readIdents = _9164_recIdents;
            }
          }
        } else if (_source308.is_SetBuilder) {
          DAST._IType _9165___mcc_h674 = _source308.dtor_element;
          DAST._IType _source371 = _7827___mcc_h1;
          if (_source371.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9166___mcc_h678 = _source371.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _9167___mcc_h679 = _source371.dtor_typeArgs;
            DAST._IResolvedType _9168___mcc_h680 = _source371.dtor_resolved;
            DAST._IResolvedType _source372 = _9168___mcc_h680;
            if (_source372.is_Datatype) {
              DAST._IDatatypeType _9169___mcc_h684 = _source372.dtor_datatypeType;
              {
                RAST._IExpr _9170_recursiveGen;
                DCOMPUTF16._IOwnership _9171_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9172_recIdents;
                RAST._IExpr _out4167;
                DCOMPUTF16._IOwnership _out4168;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4169;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4167, out _out4168, out _out4169);
                _9170_recursiveGen = _out4167;
                _9171_recOwned = _out4168;
                _9172_recIdents = _out4169;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9170_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4170;
                DCOMPUTF16._IOwnership _out4171;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4170, out _out4171);
                r = _out4170;
                resultingOwnership = _out4171;
                readIdents = _9172_recIdents;
              }
            } else if (_source372.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9173___mcc_h686 = _source372.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _9174___mcc_h687 = _source372.dtor_attributes;
              {
                RAST._IExpr _9175_recursiveGen;
                DCOMPUTF16._IOwnership _9176_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9177_recIdents;
                RAST._IExpr _out4172;
                DCOMPUTF16._IOwnership _out4173;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4174;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4172, out _out4173, out _out4174);
                _9175_recursiveGen = _out4172;
                _9176_recOwned = _out4173;
                _9177_recIdents = _out4174;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9175_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4175;
                DCOMPUTF16._IOwnership _out4176;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4175, out _out4176);
                r = _out4175;
                resultingOwnership = _out4176;
                readIdents = _9177_recIdents;
              }
            } else {
              DAST._IType _9178___mcc_h690 = _source372.dtor_baseType;
              DAST._INewtypeRange _9179___mcc_h691 = _source372.dtor_range;
              bool _9180___mcc_h692 = _source372.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _9181___mcc_h693 = _source372.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _9182_attributes = _9181___mcc_h693;
              bool _9183_erase = _9180___mcc_h692;
              DAST._INewtypeRange _9184_range = _9179___mcc_h691;
              DAST._IType _9185_b = _9178___mcc_h690;
              {
                Std.Wrappers._IOption<RAST._IType> _9186_nativeToType;
                _9186_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_9185_b, _9184_range);
                if (object.Equals(_7821_fromTpe, _9185_b)) {
                  RAST._IExpr _9187_recursiveGen;
                  DCOMPUTF16._IOwnership _9188_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9189_recIdents;
                  RAST._IExpr _out4177;
                  DCOMPUTF16._IOwnership _out4178;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4179;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4177, out _out4178, out _out4179);
                  _9187_recursiveGen = _out4177;
                  _9188_recOwned = _out4178;
                  _9189_recIdents = _out4179;
                  Std.Wrappers._IOption<RAST._IType> _source373 = _9186_nativeToType;
                  if (_source373.is_None) {
                    if (_9183_erase) {
                      r = _9187_recursiveGen;
                    } else {
                      RAST._IType _9190_rhsType;
                      RAST._IType _out4180;
                      _out4180 = DCOMPUTF16.COMP.GenType(_7822_toTpe, true, false);
                      _9190_rhsType = _out4180;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_9190_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_9187_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out4181;
                    DCOMPUTF16._IOwnership _out4182;
                    DCOMPUTF16.COMP.FromOwnership(r, _9188_recOwned, expectedOwnership, out _out4181, out _out4182);
                    r = _out4181;
                    resultingOwnership = _out4182;
                  } else {
                    RAST._IType _9191___mcc_h1755 = _source373.dtor_value;
                    RAST._IType _9192_v = _9191___mcc_h1755;
                    r = (((_9187_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_9192_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out4183;
                    DCOMPUTF16._IOwnership _out4184;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4183, out _out4184);
                    r = _out4183;
                    resultingOwnership = _out4184;
                  }
                  readIdents = _9189_recIdents;
                } else {
                  if ((_9186_nativeToType).is_Some) {
                    DAST._IType _source374 = _7821_fromTpe;
                    if (_source374.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9193___mcc_h1756 = _source374.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _9194___mcc_h1757 = _source374.dtor_typeArgs;
                      DAST._IResolvedType _9195___mcc_h1758 = _source374.dtor_resolved;
                      DAST._IResolvedType _source375 = _9195___mcc_h1758;
                      if (_source375.is_Datatype) {
                        DAST._IDatatypeType _9196___mcc_h1762 = _source375.dtor_datatypeType;
                      } else if (_source375.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9197___mcc_h1764 = _source375.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _9198___mcc_h1765 = _source375.dtor_attributes;
                      } else {
                        DAST._IType _9199___mcc_h1768 = _source375.dtor_baseType;
                        DAST._INewtypeRange _9200___mcc_h1769 = _source375.dtor_range;
                        bool _9201___mcc_h1770 = _source375.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _9202___mcc_h1771 = _source375.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _9203_attributes0 = _9202___mcc_h1771;
                        bool _9204_erase0 = _9201___mcc_h1770;
                        DAST._INewtypeRange _9205_range0 = _9200___mcc_h1769;
                        DAST._IType _9206_b0 = _9199___mcc_h1768;
                        {
                          Std.Wrappers._IOption<RAST._IType> _9207_nativeFromType;
                          _9207_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_9206_b0, _9205_range0);
                          if ((_9207_nativeFromType).is_Some) {
                            RAST._IExpr _9208_recursiveGen;
                            DCOMPUTF16._IOwnership _9209_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9210_recIdents;
                            RAST._IExpr _out4185;
                            DCOMPUTF16._IOwnership _out4186;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4187;
                            DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4185, out _out4186, out _out4187);
                            _9208_recursiveGen = _out4185;
                            _9209_recOwned = _out4186;
                            _9210_recIdents = _out4187;
                            RAST._IExpr _out4188;
                            DCOMPUTF16._IOwnership _out4189;
                            DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_9208_recursiveGen, (_9186_nativeToType).dtor_value), _9209_recOwned, expectedOwnership, out _out4188, out _out4189);
                            r = _out4188;
                            resultingOwnership = _out4189;
                            readIdents = _9210_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source374.is_Nullable) {
                      DAST._IType _9211___mcc_h1776 = _source374.dtor_Nullable_a0;
                    } else if (_source374.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _9212___mcc_h1778 = _source374.dtor_Tuple_a0;
                    } else if (_source374.is_Array) {
                      DAST._IType _9213___mcc_h1780 = _source374.dtor_element;
                      BigInteger _9214___mcc_h1781 = _source374.dtor_dims;
                    } else if (_source374.is_Seq) {
                      DAST._IType _9215___mcc_h1784 = _source374.dtor_element;
                    } else if (_source374.is_Set) {
                      DAST._IType _9216___mcc_h1786 = _source374.dtor_element;
                    } else if (_source374.is_Multiset) {
                      DAST._IType _9217___mcc_h1788 = _source374.dtor_element;
                    } else if (_source374.is_Map) {
                      DAST._IType _9218___mcc_h1790 = _source374.dtor_key;
                      DAST._IType _9219___mcc_h1791 = _source374.dtor_value;
                    } else if (_source374.is_SetBuilder) {
                      DAST._IType _9220___mcc_h1794 = _source374.dtor_element;
                    } else if (_source374.is_MapBuilder) {
                      DAST._IType _9221___mcc_h1796 = _source374.dtor_key;
                      DAST._IType _9222___mcc_h1797 = _source374.dtor_value;
                    } else if (_source374.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _9223___mcc_h1800 = _source374.dtor_args;
                      DAST._IType _9224___mcc_h1801 = _source374.dtor_result;
                    } else if (_source374.is_Primitive) {
                      DAST._IPrimitive _9225___mcc_h1804 = _source374.dtor_Primitive_a0;
                    } else if (_source374.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _9226___mcc_h1806 = _source374.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _9227___mcc_h1808 = _source374.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_7821_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _9228_recursiveGen;
                      DCOMPUTF16._IOwnership _9229_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9230_recIdents;
                      RAST._IExpr _out4190;
                      DCOMPUTF16._IOwnership _out4191;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4192;
                      DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4190, out _out4191, out _out4192);
                      _9228_recursiveGen = _out4190;
                      _9229_recOwned = _out4191;
                      _9230_recIdents = _out4192;
                      RAST._IExpr _out4193;
                      DCOMPUTF16._IOwnership _out4194;
                      DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_9228_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_9186_nativeToType).dtor_value), _9229_recOwned, expectedOwnership, out _out4193, out _out4194);
                      r = _out4193;
                      resultingOwnership = _out4194;
                      readIdents = _9230_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out4195;
                  DCOMPUTF16._IOwnership _out4196;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4197;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7820_expr, _7821_fromTpe, _9185_b), _9185_b, _7822_toTpe), selfIdent, env, expectedOwnership, out _out4195, out _out4196, out _out4197);
                  r = _out4195;
                  resultingOwnership = _out4196;
                  readIdents = _out4197;
                }
              }
            }
          } else if (_source371.is_Nullable) {
            DAST._IType _9231___mcc_h698 = _source371.dtor_Nullable_a0;
            {
              RAST._IExpr _9232_recursiveGen;
              DCOMPUTF16._IOwnership _9233_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9234_recIdents;
              RAST._IExpr _out4198;
              DCOMPUTF16._IOwnership _out4199;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4200;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4198, out _out4199, out _out4200);
              _9232_recursiveGen = _out4198;
              _9233_recOwned = _out4199;
              _9234_recIdents = _out4200;
              r = _9232_recursiveGen;
              if (object.Equals(_9233_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out4201;
              DCOMPUTF16._IOwnership _out4202;
              DCOMPUTF16.COMP.FromOwnership(r, _9233_recOwned, expectedOwnership, out _out4201, out _out4202);
              r = _out4201;
              resultingOwnership = _out4202;
              readIdents = _9234_recIdents;
            }
          } else if (_source371.is_Tuple) {
            Dafny.ISequence<DAST._IType> _9235___mcc_h700 = _source371.dtor_Tuple_a0;
            {
              RAST._IExpr _9236_recursiveGen;
              DCOMPUTF16._IOwnership _9237_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9238_recIdents;
              RAST._IExpr _out4203;
              DCOMPUTF16._IOwnership _out4204;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4205;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4203, out _out4204, out _out4205);
              _9236_recursiveGen = _out4203;
              _9237_recOwned = _out4204;
              _9238_recIdents = _out4205;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9236_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4206;
              DCOMPUTF16._IOwnership _out4207;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4206, out _out4207);
              r = _out4206;
              resultingOwnership = _out4207;
              readIdents = _9238_recIdents;
            }
          } else if (_source371.is_Array) {
            DAST._IType _9239___mcc_h702 = _source371.dtor_element;
            BigInteger _9240___mcc_h703 = _source371.dtor_dims;
            {
              RAST._IExpr _9241_recursiveGen;
              DCOMPUTF16._IOwnership _9242_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9243_recIdents;
              RAST._IExpr _out4208;
              DCOMPUTF16._IOwnership _out4209;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4210;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4208, out _out4209, out _out4210);
              _9241_recursiveGen = _out4208;
              _9242_recOwned = _out4209;
              _9243_recIdents = _out4210;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9241_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4211;
              DCOMPUTF16._IOwnership _out4212;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4211, out _out4212);
              r = _out4211;
              resultingOwnership = _out4212;
              readIdents = _9243_recIdents;
            }
          } else if (_source371.is_Seq) {
            DAST._IType _9244___mcc_h706 = _source371.dtor_element;
            {
              RAST._IExpr _9245_recursiveGen;
              DCOMPUTF16._IOwnership _9246_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9247_recIdents;
              RAST._IExpr _out4213;
              DCOMPUTF16._IOwnership _out4214;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4215;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4213, out _out4214, out _out4215);
              _9245_recursiveGen = _out4213;
              _9246_recOwned = _out4214;
              _9247_recIdents = _out4215;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9245_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4216;
              DCOMPUTF16._IOwnership _out4217;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4216, out _out4217);
              r = _out4216;
              resultingOwnership = _out4217;
              readIdents = _9247_recIdents;
            }
          } else if (_source371.is_Set) {
            DAST._IType _9248___mcc_h708 = _source371.dtor_element;
            {
              RAST._IExpr _9249_recursiveGen;
              DCOMPUTF16._IOwnership _9250_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9251_recIdents;
              RAST._IExpr _out4218;
              DCOMPUTF16._IOwnership _out4219;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4220;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4218, out _out4219, out _out4220);
              _9249_recursiveGen = _out4218;
              _9250_recOwned = _out4219;
              _9251_recIdents = _out4220;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9249_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4221;
              DCOMPUTF16._IOwnership _out4222;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4221, out _out4222);
              r = _out4221;
              resultingOwnership = _out4222;
              readIdents = _9251_recIdents;
            }
          } else if (_source371.is_Multiset) {
            DAST._IType _9252___mcc_h710 = _source371.dtor_element;
            {
              RAST._IExpr _9253_recursiveGen;
              DCOMPUTF16._IOwnership _9254_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9255_recIdents;
              RAST._IExpr _out4223;
              DCOMPUTF16._IOwnership _out4224;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4225;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4223, out _out4224, out _out4225);
              _9253_recursiveGen = _out4223;
              _9254_recOwned = _out4224;
              _9255_recIdents = _out4225;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9253_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4226;
              DCOMPUTF16._IOwnership _out4227;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4226, out _out4227);
              r = _out4226;
              resultingOwnership = _out4227;
              readIdents = _9255_recIdents;
            }
          } else if (_source371.is_Map) {
            DAST._IType _9256___mcc_h712 = _source371.dtor_key;
            DAST._IType _9257___mcc_h713 = _source371.dtor_value;
            {
              RAST._IExpr _9258_recursiveGen;
              DCOMPUTF16._IOwnership _9259_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9260_recIdents;
              RAST._IExpr _out4228;
              DCOMPUTF16._IOwnership _out4229;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4230;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4228, out _out4229, out _out4230);
              _9258_recursiveGen = _out4228;
              _9259_recOwned = _out4229;
              _9260_recIdents = _out4230;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9258_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4231;
              DCOMPUTF16._IOwnership _out4232;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4231, out _out4232);
              r = _out4231;
              resultingOwnership = _out4232;
              readIdents = _9260_recIdents;
            }
          } else if (_source371.is_SetBuilder) {
            DAST._IType _9261___mcc_h716 = _source371.dtor_element;
            {
              RAST._IExpr _9262_recursiveGen;
              DCOMPUTF16._IOwnership _9263_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9264_recIdents;
              RAST._IExpr _out4233;
              DCOMPUTF16._IOwnership _out4234;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4235;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4233, out _out4234, out _out4235);
              _9262_recursiveGen = _out4233;
              _9263_recOwned = _out4234;
              _9264_recIdents = _out4235;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9262_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4236;
              DCOMPUTF16._IOwnership _out4237;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4236, out _out4237);
              r = _out4236;
              resultingOwnership = _out4237;
              readIdents = _9264_recIdents;
            }
          } else if (_source371.is_MapBuilder) {
            DAST._IType _9265___mcc_h718 = _source371.dtor_key;
            DAST._IType _9266___mcc_h719 = _source371.dtor_value;
            {
              RAST._IExpr _9267_recursiveGen;
              DCOMPUTF16._IOwnership _9268_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9269_recIdents;
              RAST._IExpr _out4238;
              DCOMPUTF16._IOwnership _out4239;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4240;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4238, out _out4239, out _out4240);
              _9267_recursiveGen = _out4238;
              _9268_recOwned = _out4239;
              _9269_recIdents = _out4240;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9267_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4241;
              DCOMPUTF16._IOwnership _out4242;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4241, out _out4242);
              r = _out4241;
              resultingOwnership = _out4242;
              readIdents = _9269_recIdents;
            }
          } else if (_source371.is_Arrow) {
            Dafny.ISequence<DAST._IType> _9270___mcc_h722 = _source371.dtor_args;
            DAST._IType _9271___mcc_h723 = _source371.dtor_result;
            {
              RAST._IExpr _9272_recursiveGen;
              DCOMPUTF16._IOwnership _9273_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9274_recIdents;
              RAST._IExpr _out4243;
              DCOMPUTF16._IOwnership _out4244;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4245;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4243, out _out4244, out _out4245);
              _9272_recursiveGen = _out4243;
              _9273_recOwned = _out4244;
              _9274_recIdents = _out4245;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9272_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4246;
              DCOMPUTF16._IOwnership _out4247;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4246, out _out4247);
              r = _out4246;
              resultingOwnership = _out4247;
              readIdents = _9274_recIdents;
            }
          } else if (_source371.is_Primitive) {
            DAST._IPrimitive _9275___mcc_h726 = _source371.dtor_Primitive_a0;
            {
              RAST._IExpr _9276_recursiveGen;
              DCOMPUTF16._IOwnership _9277_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9278_recIdents;
              RAST._IExpr _out4248;
              DCOMPUTF16._IOwnership _out4249;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4250;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4248, out _out4249, out _out4250);
              _9276_recursiveGen = _out4248;
              _9277_recOwned = _out4249;
              _9278_recIdents = _out4250;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9276_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4251;
              DCOMPUTF16._IOwnership _out4252;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4251, out _out4252);
              r = _out4251;
              resultingOwnership = _out4252;
              readIdents = _9278_recIdents;
            }
          } else if (_source371.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _9279___mcc_h728 = _source371.dtor_Passthrough_a0;
            {
              RAST._IExpr _9280_recursiveGen;
              DCOMPUTF16._IOwnership _9281_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9282_recIdents;
              RAST._IExpr _out4253;
              DCOMPUTF16._IOwnership _out4254;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4255;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4253, out _out4254, out _out4255);
              _9280_recursiveGen = _out4253;
              _9281_recOwned = _out4254;
              _9282_recIdents = _out4255;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9280_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4256;
              DCOMPUTF16._IOwnership _out4257;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4256, out _out4257);
              r = _out4256;
              resultingOwnership = _out4257;
              readIdents = _9282_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _9283___mcc_h730 = _source371.dtor_TypeArg_a0;
            {
              RAST._IExpr _9284_recursiveGen;
              DCOMPUTF16._IOwnership _9285_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9286_recIdents;
              RAST._IExpr _out4258;
              DCOMPUTF16._IOwnership _out4259;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4260;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4258, out _out4259, out _out4260);
              _9284_recursiveGen = _out4258;
              _9285_recOwned = _out4259;
              _9286_recIdents = _out4260;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9284_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4261;
              DCOMPUTF16._IOwnership _out4262;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4261, out _out4262);
              r = _out4261;
              resultingOwnership = _out4262;
              readIdents = _9286_recIdents;
            }
          }
        } else if (_source308.is_MapBuilder) {
          DAST._IType _9287___mcc_h732 = _source308.dtor_key;
          DAST._IType _9288___mcc_h733 = _source308.dtor_value;
          DAST._IType _source376 = _7827___mcc_h1;
          if (_source376.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9289___mcc_h740 = _source376.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _9290___mcc_h741 = _source376.dtor_typeArgs;
            DAST._IResolvedType _9291___mcc_h742 = _source376.dtor_resolved;
            DAST._IResolvedType _source377 = _9291___mcc_h742;
            if (_source377.is_Datatype) {
              DAST._IDatatypeType _9292___mcc_h746 = _source377.dtor_datatypeType;
              {
                RAST._IExpr _9293_recursiveGen;
                DCOMPUTF16._IOwnership _9294_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9295_recIdents;
                RAST._IExpr _out4263;
                DCOMPUTF16._IOwnership _out4264;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4265;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4263, out _out4264, out _out4265);
                _9293_recursiveGen = _out4263;
                _9294_recOwned = _out4264;
                _9295_recIdents = _out4265;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9293_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4266;
                DCOMPUTF16._IOwnership _out4267;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4266, out _out4267);
                r = _out4266;
                resultingOwnership = _out4267;
                readIdents = _9295_recIdents;
              }
            } else if (_source377.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9296___mcc_h748 = _source377.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _9297___mcc_h749 = _source377.dtor_attributes;
              {
                RAST._IExpr _9298_recursiveGen;
                DCOMPUTF16._IOwnership _9299_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9300_recIdents;
                RAST._IExpr _out4268;
                DCOMPUTF16._IOwnership _out4269;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4270;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4268, out _out4269, out _out4270);
                _9298_recursiveGen = _out4268;
                _9299_recOwned = _out4269;
                _9300_recIdents = _out4270;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9298_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4271;
                DCOMPUTF16._IOwnership _out4272;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4271, out _out4272);
                r = _out4271;
                resultingOwnership = _out4272;
                readIdents = _9300_recIdents;
              }
            } else {
              DAST._IType _9301___mcc_h752 = _source377.dtor_baseType;
              DAST._INewtypeRange _9302___mcc_h753 = _source377.dtor_range;
              bool _9303___mcc_h754 = _source377.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _9304___mcc_h755 = _source377.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _9305_attributes = _9304___mcc_h755;
              bool _9306_erase = _9303___mcc_h754;
              DAST._INewtypeRange _9307_range = _9302___mcc_h753;
              DAST._IType _9308_b = _9301___mcc_h752;
              {
                Std.Wrappers._IOption<RAST._IType> _9309_nativeToType;
                _9309_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_9308_b, _9307_range);
                if (object.Equals(_7821_fromTpe, _9308_b)) {
                  RAST._IExpr _9310_recursiveGen;
                  DCOMPUTF16._IOwnership _9311_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9312_recIdents;
                  RAST._IExpr _out4273;
                  DCOMPUTF16._IOwnership _out4274;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4275;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4273, out _out4274, out _out4275);
                  _9310_recursiveGen = _out4273;
                  _9311_recOwned = _out4274;
                  _9312_recIdents = _out4275;
                  Std.Wrappers._IOption<RAST._IType> _source378 = _9309_nativeToType;
                  if (_source378.is_None) {
                    if (_9306_erase) {
                      r = _9310_recursiveGen;
                    } else {
                      RAST._IType _9313_rhsType;
                      RAST._IType _out4276;
                      _out4276 = DCOMPUTF16.COMP.GenType(_7822_toTpe, true, false);
                      _9313_rhsType = _out4276;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_9313_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_9310_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out4277;
                    DCOMPUTF16._IOwnership _out4278;
                    DCOMPUTF16.COMP.FromOwnership(r, _9311_recOwned, expectedOwnership, out _out4277, out _out4278);
                    r = _out4277;
                    resultingOwnership = _out4278;
                  } else {
                    RAST._IType _9314___mcc_h1810 = _source378.dtor_value;
                    RAST._IType _9315_v = _9314___mcc_h1810;
                    r = (((_9310_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_9315_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out4279;
                    DCOMPUTF16._IOwnership _out4280;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4279, out _out4280);
                    r = _out4279;
                    resultingOwnership = _out4280;
                  }
                  readIdents = _9312_recIdents;
                } else {
                  if ((_9309_nativeToType).is_Some) {
                    DAST._IType _source379 = _7821_fromTpe;
                    if (_source379.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9316___mcc_h1811 = _source379.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _9317___mcc_h1812 = _source379.dtor_typeArgs;
                      DAST._IResolvedType _9318___mcc_h1813 = _source379.dtor_resolved;
                      DAST._IResolvedType _source380 = _9318___mcc_h1813;
                      if (_source380.is_Datatype) {
                        DAST._IDatatypeType _9319___mcc_h1817 = _source380.dtor_datatypeType;
                      } else if (_source380.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9320___mcc_h1819 = _source380.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _9321___mcc_h1820 = _source380.dtor_attributes;
                      } else {
                        DAST._IType _9322___mcc_h1823 = _source380.dtor_baseType;
                        DAST._INewtypeRange _9323___mcc_h1824 = _source380.dtor_range;
                        bool _9324___mcc_h1825 = _source380.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _9325___mcc_h1826 = _source380.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _9326_attributes0 = _9325___mcc_h1826;
                        bool _9327_erase0 = _9324___mcc_h1825;
                        DAST._INewtypeRange _9328_range0 = _9323___mcc_h1824;
                        DAST._IType _9329_b0 = _9322___mcc_h1823;
                        {
                          Std.Wrappers._IOption<RAST._IType> _9330_nativeFromType;
                          _9330_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_9329_b0, _9328_range0);
                          if ((_9330_nativeFromType).is_Some) {
                            RAST._IExpr _9331_recursiveGen;
                            DCOMPUTF16._IOwnership _9332_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9333_recIdents;
                            RAST._IExpr _out4281;
                            DCOMPUTF16._IOwnership _out4282;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4283;
                            DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4281, out _out4282, out _out4283);
                            _9331_recursiveGen = _out4281;
                            _9332_recOwned = _out4282;
                            _9333_recIdents = _out4283;
                            RAST._IExpr _out4284;
                            DCOMPUTF16._IOwnership _out4285;
                            DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_9331_recursiveGen, (_9309_nativeToType).dtor_value), _9332_recOwned, expectedOwnership, out _out4284, out _out4285);
                            r = _out4284;
                            resultingOwnership = _out4285;
                            readIdents = _9333_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source379.is_Nullable) {
                      DAST._IType _9334___mcc_h1831 = _source379.dtor_Nullable_a0;
                    } else if (_source379.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _9335___mcc_h1833 = _source379.dtor_Tuple_a0;
                    } else if (_source379.is_Array) {
                      DAST._IType _9336___mcc_h1835 = _source379.dtor_element;
                      BigInteger _9337___mcc_h1836 = _source379.dtor_dims;
                    } else if (_source379.is_Seq) {
                      DAST._IType _9338___mcc_h1839 = _source379.dtor_element;
                    } else if (_source379.is_Set) {
                      DAST._IType _9339___mcc_h1841 = _source379.dtor_element;
                    } else if (_source379.is_Multiset) {
                      DAST._IType _9340___mcc_h1843 = _source379.dtor_element;
                    } else if (_source379.is_Map) {
                      DAST._IType _9341___mcc_h1845 = _source379.dtor_key;
                      DAST._IType _9342___mcc_h1846 = _source379.dtor_value;
                    } else if (_source379.is_SetBuilder) {
                      DAST._IType _9343___mcc_h1849 = _source379.dtor_element;
                    } else if (_source379.is_MapBuilder) {
                      DAST._IType _9344___mcc_h1851 = _source379.dtor_key;
                      DAST._IType _9345___mcc_h1852 = _source379.dtor_value;
                    } else if (_source379.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _9346___mcc_h1855 = _source379.dtor_args;
                      DAST._IType _9347___mcc_h1856 = _source379.dtor_result;
                    } else if (_source379.is_Primitive) {
                      DAST._IPrimitive _9348___mcc_h1859 = _source379.dtor_Primitive_a0;
                    } else if (_source379.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _9349___mcc_h1861 = _source379.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _9350___mcc_h1863 = _source379.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_7821_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _9351_recursiveGen;
                      DCOMPUTF16._IOwnership _9352_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9353_recIdents;
                      RAST._IExpr _out4286;
                      DCOMPUTF16._IOwnership _out4287;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4288;
                      DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4286, out _out4287, out _out4288);
                      _9351_recursiveGen = _out4286;
                      _9352_recOwned = _out4287;
                      _9353_recIdents = _out4288;
                      RAST._IExpr _out4289;
                      DCOMPUTF16._IOwnership _out4290;
                      DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_9351_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_9309_nativeToType).dtor_value), _9352_recOwned, expectedOwnership, out _out4289, out _out4290);
                      r = _out4289;
                      resultingOwnership = _out4290;
                      readIdents = _9353_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out4291;
                  DCOMPUTF16._IOwnership _out4292;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4293;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7820_expr, _7821_fromTpe, _9308_b), _9308_b, _7822_toTpe), selfIdent, env, expectedOwnership, out _out4291, out _out4292, out _out4293);
                  r = _out4291;
                  resultingOwnership = _out4292;
                  readIdents = _out4293;
                }
              }
            }
          } else if (_source376.is_Nullable) {
            DAST._IType _9354___mcc_h760 = _source376.dtor_Nullable_a0;
            {
              RAST._IExpr _9355_recursiveGen;
              DCOMPUTF16._IOwnership _9356_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9357_recIdents;
              RAST._IExpr _out4294;
              DCOMPUTF16._IOwnership _out4295;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4296;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4294, out _out4295, out _out4296);
              _9355_recursiveGen = _out4294;
              _9356_recOwned = _out4295;
              _9357_recIdents = _out4296;
              r = _9355_recursiveGen;
              if (object.Equals(_9356_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out4297;
              DCOMPUTF16._IOwnership _out4298;
              DCOMPUTF16.COMP.FromOwnership(r, _9356_recOwned, expectedOwnership, out _out4297, out _out4298);
              r = _out4297;
              resultingOwnership = _out4298;
              readIdents = _9357_recIdents;
            }
          } else if (_source376.is_Tuple) {
            Dafny.ISequence<DAST._IType> _9358___mcc_h762 = _source376.dtor_Tuple_a0;
            {
              RAST._IExpr _9359_recursiveGen;
              DCOMPUTF16._IOwnership _9360_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9361_recIdents;
              RAST._IExpr _out4299;
              DCOMPUTF16._IOwnership _out4300;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4301;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4299, out _out4300, out _out4301);
              _9359_recursiveGen = _out4299;
              _9360_recOwned = _out4300;
              _9361_recIdents = _out4301;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9359_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4302;
              DCOMPUTF16._IOwnership _out4303;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4302, out _out4303);
              r = _out4302;
              resultingOwnership = _out4303;
              readIdents = _9361_recIdents;
            }
          } else if (_source376.is_Array) {
            DAST._IType _9362___mcc_h764 = _source376.dtor_element;
            BigInteger _9363___mcc_h765 = _source376.dtor_dims;
            {
              RAST._IExpr _9364_recursiveGen;
              DCOMPUTF16._IOwnership _9365_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9366_recIdents;
              RAST._IExpr _out4304;
              DCOMPUTF16._IOwnership _out4305;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4306;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4304, out _out4305, out _out4306);
              _9364_recursiveGen = _out4304;
              _9365_recOwned = _out4305;
              _9366_recIdents = _out4306;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9364_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4307;
              DCOMPUTF16._IOwnership _out4308;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4307, out _out4308);
              r = _out4307;
              resultingOwnership = _out4308;
              readIdents = _9366_recIdents;
            }
          } else if (_source376.is_Seq) {
            DAST._IType _9367___mcc_h768 = _source376.dtor_element;
            {
              RAST._IExpr _9368_recursiveGen;
              DCOMPUTF16._IOwnership _9369_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9370_recIdents;
              RAST._IExpr _out4309;
              DCOMPUTF16._IOwnership _out4310;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4311;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4309, out _out4310, out _out4311);
              _9368_recursiveGen = _out4309;
              _9369_recOwned = _out4310;
              _9370_recIdents = _out4311;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9368_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4312;
              DCOMPUTF16._IOwnership _out4313;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4312, out _out4313);
              r = _out4312;
              resultingOwnership = _out4313;
              readIdents = _9370_recIdents;
            }
          } else if (_source376.is_Set) {
            DAST._IType _9371___mcc_h770 = _source376.dtor_element;
            {
              RAST._IExpr _9372_recursiveGen;
              DCOMPUTF16._IOwnership _9373_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9374_recIdents;
              RAST._IExpr _out4314;
              DCOMPUTF16._IOwnership _out4315;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4316;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4314, out _out4315, out _out4316);
              _9372_recursiveGen = _out4314;
              _9373_recOwned = _out4315;
              _9374_recIdents = _out4316;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9372_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4317;
              DCOMPUTF16._IOwnership _out4318;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4317, out _out4318);
              r = _out4317;
              resultingOwnership = _out4318;
              readIdents = _9374_recIdents;
            }
          } else if (_source376.is_Multiset) {
            DAST._IType _9375___mcc_h772 = _source376.dtor_element;
            {
              RAST._IExpr _9376_recursiveGen;
              DCOMPUTF16._IOwnership _9377_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9378_recIdents;
              RAST._IExpr _out4319;
              DCOMPUTF16._IOwnership _out4320;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4321;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4319, out _out4320, out _out4321);
              _9376_recursiveGen = _out4319;
              _9377_recOwned = _out4320;
              _9378_recIdents = _out4321;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9376_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4322;
              DCOMPUTF16._IOwnership _out4323;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4322, out _out4323);
              r = _out4322;
              resultingOwnership = _out4323;
              readIdents = _9378_recIdents;
            }
          } else if (_source376.is_Map) {
            DAST._IType _9379___mcc_h774 = _source376.dtor_key;
            DAST._IType _9380___mcc_h775 = _source376.dtor_value;
            {
              RAST._IExpr _9381_recursiveGen;
              DCOMPUTF16._IOwnership _9382_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9383_recIdents;
              RAST._IExpr _out4324;
              DCOMPUTF16._IOwnership _out4325;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4326;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4324, out _out4325, out _out4326);
              _9381_recursiveGen = _out4324;
              _9382_recOwned = _out4325;
              _9383_recIdents = _out4326;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9381_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4327;
              DCOMPUTF16._IOwnership _out4328;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4327, out _out4328);
              r = _out4327;
              resultingOwnership = _out4328;
              readIdents = _9383_recIdents;
            }
          } else if (_source376.is_SetBuilder) {
            DAST._IType _9384___mcc_h778 = _source376.dtor_element;
            {
              RAST._IExpr _9385_recursiveGen;
              DCOMPUTF16._IOwnership _9386_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9387_recIdents;
              RAST._IExpr _out4329;
              DCOMPUTF16._IOwnership _out4330;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4331;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4329, out _out4330, out _out4331);
              _9385_recursiveGen = _out4329;
              _9386_recOwned = _out4330;
              _9387_recIdents = _out4331;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9385_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4332;
              DCOMPUTF16._IOwnership _out4333;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4332, out _out4333);
              r = _out4332;
              resultingOwnership = _out4333;
              readIdents = _9387_recIdents;
            }
          } else if (_source376.is_MapBuilder) {
            DAST._IType _9388___mcc_h780 = _source376.dtor_key;
            DAST._IType _9389___mcc_h781 = _source376.dtor_value;
            {
              RAST._IExpr _9390_recursiveGen;
              DCOMPUTF16._IOwnership _9391_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9392_recIdents;
              RAST._IExpr _out4334;
              DCOMPUTF16._IOwnership _out4335;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4336;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4334, out _out4335, out _out4336);
              _9390_recursiveGen = _out4334;
              _9391_recOwned = _out4335;
              _9392_recIdents = _out4336;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9390_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4337;
              DCOMPUTF16._IOwnership _out4338;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4337, out _out4338);
              r = _out4337;
              resultingOwnership = _out4338;
              readIdents = _9392_recIdents;
            }
          } else if (_source376.is_Arrow) {
            Dafny.ISequence<DAST._IType> _9393___mcc_h784 = _source376.dtor_args;
            DAST._IType _9394___mcc_h785 = _source376.dtor_result;
            {
              RAST._IExpr _9395_recursiveGen;
              DCOMPUTF16._IOwnership _9396_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9397_recIdents;
              RAST._IExpr _out4339;
              DCOMPUTF16._IOwnership _out4340;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4341;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4339, out _out4340, out _out4341);
              _9395_recursiveGen = _out4339;
              _9396_recOwned = _out4340;
              _9397_recIdents = _out4341;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9395_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4342;
              DCOMPUTF16._IOwnership _out4343;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4342, out _out4343);
              r = _out4342;
              resultingOwnership = _out4343;
              readIdents = _9397_recIdents;
            }
          } else if (_source376.is_Primitive) {
            DAST._IPrimitive _9398___mcc_h788 = _source376.dtor_Primitive_a0;
            {
              RAST._IExpr _9399_recursiveGen;
              DCOMPUTF16._IOwnership _9400_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9401_recIdents;
              RAST._IExpr _out4344;
              DCOMPUTF16._IOwnership _out4345;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4346;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4344, out _out4345, out _out4346);
              _9399_recursiveGen = _out4344;
              _9400_recOwned = _out4345;
              _9401_recIdents = _out4346;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9399_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4347;
              DCOMPUTF16._IOwnership _out4348;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4347, out _out4348);
              r = _out4347;
              resultingOwnership = _out4348;
              readIdents = _9401_recIdents;
            }
          } else if (_source376.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _9402___mcc_h790 = _source376.dtor_Passthrough_a0;
            {
              RAST._IExpr _9403_recursiveGen;
              DCOMPUTF16._IOwnership _9404_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9405_recIdents;
              RAST._IExpr _out4349;
              DCOMPUTF16._IOwnership _out4350;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4351;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4349, out _out4350, out _out4351);
              _9403_recursiveGen = _out4349;
              _9404_recOwned = _out4350;
              _9405_recIdents = _out4351;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9403_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4352;
              DCOMPUTF16._IOwnership _out4353;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4352, out _out4353);
              r = _out4352;
              resultingOwnership = _out4353;
              readIdents = _9405_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _9406___mcc_h792 = _source376.dtor_TypeArg_a0;
            {
              RAST._IExpr _9407_recursiveGen;
              DCOMPUTF16._IOwnership _9408_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9409_recIdents;
              RAST._IExpr _out4354;
              DCOMPUTF16._IOwnership _out4355;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4356;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4354, out _out4355, out _out4356);
              _9407_recursiveGen = _out4354;
              _9408_recOwned = _out4355;
              _9409_recIdents = _out4356;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9407_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4357;
              DCOMPUTF16._IOwnership _out4358;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4357, out _out4358);
              r = _out4357;
              resultingOwnership = _out4358;
              readIdents = _9409_recIdents;
            }
          }
        } else if (_source308.is_Arrow) {
          Dafny.ISequence<DAST._IType> _9410___mcc_h794 = _source308.dtor_args;
          DAST._IType _9411___mcc_h795 = _source308.dtor_result;
          DAST._IType _source381 = _7827___mcc_h1;
          if (_source381.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9412___mcc_h802 = _source381.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _9413___mcc_h803 = _source381.dtor_typeArgs;
            DAST._IResolvedType _9414___mcc_h804 = _source381.dtor_resolved;
            DAST._IResolvedType _source382 = _9414___mcc_h804;
            if (_source382.is_Datatype) {
              DAST._IDatatypeType _9415___mcc_h808 = _source382.dtor_datatypeType;
              {
                RAST._IExpr _9416_recursiveGen;
                DCOMPUTF16._IOwnership _9417_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9418_recIdents;
                RAST._IExpr _out4359;
                DCOMPUTF16._IOwnership _out4360;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4361;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4359, out _out4360, out _out4361);
                _9416_recursiveGen = _out4359;
                _9417_recOwned = _out4360;
                _9418_recIdents = _out4361;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9416_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4362;
                DCOMPUTF16._IOwnership _out4363;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4362, out _out4363);
                r = _out4362;
                resultingOwnership = _out4363;
                readIdents = _9418_recIdents;
              }
            } else if (_source382.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9419___mcc_h810 = _source382.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _9420___mcc_h811 = _source382.dtor_attributes;
              {
                RAST._IExpr _9421_recursiveGen;
                DCOMPUTF16._IOwnership _9422_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9423_recIdents;
                RAST._IExpr _out4364;
                DCOMPUTF16._IOwnership _out4365;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4366;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4364, out _out4365, out _out4366);
                _9421_recursiveGen = _out4364;
                _9422_recOwned = _out4365;
                _9423_recIdents = _out4366;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9421_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4367;
                DCOMPUTF16._IOwnership _out4368;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4367, out _out4368);
                r = _out4367;
                resultingOwnership = _out4368;
                readIdents = _9423_recIdents;
              }
            } else {
              DAST._IType _9424___mcc_h814 = _source382.dtor_baseType;
              DAST._INewtypeRange _9425___mcc_h815 = _source382.dtor_range;
              bool _9426___mcc_h816 = _source382.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _9427___mcc_h817 = _source382.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _9428_attributes = _9427___mcc_h817;
              bool _9429_erase = _9426___mcc_h816;
              DAST._INewtypeRange _9430_range = _9425___mcc_h815;
              DAST._IType _9431_b = _9424___mcc_h814;
              {
                Std.Wrappers._IOption<RAST._IType> _9432_nativeToType;
                _9432_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_9431_b, _9430_range);
                if (object.Equals(_7821_fromTpe, _9431_b)) {
                  RAST._IExpr _9433_recursiveGen;
                  DCOMPUTF16._IOwnership _9434_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9435_recIdents;
                  RAST._IExpr _out4369;
                  DCOMPUTF16._IOwnership _out4370;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4371;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4369, out _out4370, out _out4371);
                  _9433_recursiveGen = _out4369;
                  _9434_recOwned = _out4370;
                  _9435_recIdents = _out4371;
                  Std.Wrappers._IOption<RAST._IType> _source383 = _9432_nativeToType;
                  if (_source383.is_None) {
                    if (_9429_erase) {
                      r = _9433_recursiveGen;
                    } else {
                      RAST._IType _9436_rhsType;
                      RAST._IType _out4372;
                      _out4372 = DCOMPUTF16.COMP.GenType(_7822_toTpe, true, false);
                      _9436_rhsType = _out4372;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_9436_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_9433_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out4373;
                    DCOMPUTF16._IOwnership _out4374;
                    DCOMPUTF16.COMP.FromOwnership(r, _9434_recOwned, expectedOwnership, out _out4373, out _out4374);
                    r = _out4373;
                    resultingOwnership = _out4374;
                  } else {
                    RAST._IType _9437___mcc_h1865 = _source383.dtor_value;
                    RAST._IType _9438_v = _9437___mcc_h1865;
                    r = (((_9433_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_9438_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out4375;
                    DCOMPUTF16._IOwnership _out4376;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4375, out _out4376);
                    r = _out4375;
                    resultingOwnership = _out4376;
                  }
                  readIdents = _9435_recIdents;
                } else {
                  if ((_9432_nativeToType).is_Some) {
                    DAST._IType _source384 = _7821_fromTpe;
                    if (_source384.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9439___mcc_h1866 = _source384.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _9440___mcc_h1867 = _source384.dtor_typeArgs;
                      DAST._IResolvedType _9441___mcc_h1868 = _source384.dtor_resolved;
                      DAST._IResolvedType _source385 = _9441___mcc_h1868;
                      if (_source385.is_Datatype) {
                        DAST._IDatatypeType _9442___mcc_h1872 = _source385.dtor_datatypeType;
                      } else if (_source385.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9443___mcc_h1874 = _source385.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _9444___mcc_h1875 = _source385.dtor_attributes;
                      } else {
                        DAST._IType _9445___mcc_h1878 = _source385.dtor_baseType;
                        DAST._INewtypeRange _9446___mcc_h1879 = _source385.dtor_range;
                        bool _9447___mcc_h1880 = _source385.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _9448___mcc_h1881 = _source385.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _9449_attributes0 = _9448___mcc_h1881;
                        bool _9450_erase0 = _9447___mcc_h1880;
                        DAST._INewtypeRange _9451_range0 = _9446___mcc_h1879;
                        DAST._IType _9452_b0 = _9445___mcc_h1878;
                        {
                          Std.Wrappers._IOption<RAST._IType> _9453_nativeFromType;
                          _9453_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_9452_b0, _9451_range0);
                          if ((_9453_nativeFromType).is_Some) {
                            RAST._IExpr _9454_recursiveGen;
                            DCOMPUTF16._IOwnership _9455_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9456_recIdents;
                            RAST._IExpr _out4377;
                            DCOMPUTF16._IOwnership _out4378;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4379;
                            DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4377, out _out4378, out _out4379);
                            _9454_recursiveGen = _out4377;
                            _9455_recOwned = _out4378;
                            _9456_recIdents = _out4379;
                            RAST._IExpr _out4380;
                            DCOMPUTF16._IOwnership _out4381;
                            DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_9454_recursiveGen, (_9432_nativeToType).dtor_value), _9455_recOwned, expectedOwnership, out _out4380, out _out4381);
                            r = _out4380;
                            resultingOwnership = _out4381;
                            readIdents = _9456_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source384.is_Nullable) {
                      DAST._IType _9457___mcc_h1886 = _source384.dtor_Nullable_a0;
                    } else if (_source384.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _9458___mcc_h1888 = _source384.dtor_Tuple_a0;
                    } else if (_source384.is_Array) {
                      DAST._IType _9459___mcc_h1890 = _source384.dtor_element;
                      BigInteger _9460___mcc_h1891 = _source384.dtor_dims;
                    } else if (_source384.is_Seq) {
                      DAST._IType _9461___mcc_h1894 = _source384.dtor_element;
                    } else if (_source384.is_Set) {
                      DAST._IType _9462___mcc_h1896 = _source384.dtor_element;
                    } else if (_source384.is_Multiset) {
                      DAST._IType _9463___mcc_h1898 = _source384.dtor_element;
                    } else if (_source384.is_Map) {
                      DAST._IType _9464___mcc_h1900 = _source384.dtor_key;
                      DAST._IType _9465___mcc_h1901 = _source384.dtor_value;
                    } else if (_source384.is_SetBuilder) {
                      DAST._IType _9466___mcc_h1904 = _source384.dtor_element;
                    } else if (_source384.is_MapBuilder) {
                      DAST._IType _9467___mcc_h1906 = _source384.dtor_key;
                      DAST._IType _9468___mcc_h1907 = _source384.dtor_value;
                    } else if (_source384.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _9469___mcc_h1910 = _source384.dtor_args;
                      DAST._IType _9470___mcc_h1911 = _source384.dtor_result;
                    } else if (_source384.is_Primitive) {
                      DAST._IPrimitive _9471___mcc_h1914 = _source384.dtor_Primitive_a0;
                    } else if (_source384.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _9472___mcc_h1916 = _source384.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _9473___mcc_h1918 = _source384.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_7821_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _9474_recursiveGen;
                      DCOMPUTF16._IOwnership _9475_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9476_recIdents;
                      RAST._IExpr _out4382;
                      DCOMPUTF16._IOwnership _out4383;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4384;
                      DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4382, out _out4383, out _out4384);
                      _9474_recursiveGen = _out4382;
                      _9475_recOwned = _out4383;
                      _9476_recIdents = _out4384;
                      RAST._IExpr _out4385;
                      DCOMPUTF16._IOwnership _out4386;
                      DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_9474_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_9432_nativeToType).dtor_value), _9475_recOwned, expectedOwnership, out _out4385, out _out4386);
                      r = _out4385;
                      resultingOwnership = _out4386;
                      readIdents = _9476_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out4387;
                  DCOMPUTF16._IOwnership _out4388;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4389;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7820_expr, _7821_fromTpe, _9431_b), _9431_b, _7822_toTpe), selfIdent, env, expectedOwnership, out _out4387, out _out4388, out _out4389);
                  r = _out4387;
                  resultingOwnership = _out4388;
                  readIdents = _out4389;
                }
              }
            }
          } else if (_source381.is_Nullable) {
            DAST._IType _9477___mcc_h822 = _source381.dtor_Nullable_a0;
            {
              RAST._IExpr _9478_recursiveGen;
              DCOMPUTF16._IOwnership _9479_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9480_recIdents;
              RAST._IExpr _out4390;
              DCOMPUTF16._IOwnership _out4391;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4392;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4390, out _out4391, out _out4392);
              _9478_recursiveGen = _out4390;
              _9479_recOwned = _out4391;
              _9480_recIdents = _out4392;
              r = _9478_recursiveGen;
              if (object.Equals(_9479_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out4393;
              DCOMPUTF16._IOwnership _out4394;
              DCOMPUTF16.COMP.FromOwnership(r, _9479_recOwned, expectedOwnership, out _out4393, out _out4394);
              r = _out4393;
              resultingOwnership = _out4394;
              readIdents = _9480_recIdents;
            }
          } else if (_source381.is_Tuple) {
            Dafny.ISequence<DAST._IType> _9481___mcc_h824 = _source381.dtor_Tuple_a0;
            {
              RAST._IExpr _9482_recursiveGen;
              DCOMPUTF16._IOwnership _9483_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9484_recIdents;
              RAST._IExpr _out4395;
              DCOMPUTF16._IOwnership _out4396;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4397;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4395, out _out4396, out _out4397);
              _9482_recursiveGen = _out4395;
              _9483_recOwned = _out4396;
              _9484_recIdents = _out4397;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9482_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4398;
              DCOMPUTF16._IOwnership _out4399;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4398, out _out4399);
              r = _out4398;
              resultingOwnership = _out4399;
              readIdents = _9484_recIdents;
            }
          } else if (_source381.is_Array) {
            DAST._IType _9485___mcc_h826 = _source381.dtor_element;
            BigInteger _9486___mcc_h827 = _source381.dtor_dims;
            {
              RAST._IExpr _9487_recursiveGen;
              DCOMPUTF16._IOwnership _9488_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9489_recIdents;
              RAST._IExpr _out4400;
              DCOMPUTF16._IOwnership _out4401;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4402;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4400, out _out4401, out _out4402);
              _9487_recursiveGen = _out4400;
              _9488_recOwned = _out4401;
              _9489_recIdents = _out4402;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9487_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4403;
              DCOMPUTF16._IOwnership _out4404;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4403, out _out4404);
              r = _out4403;
              resultingOwnership = _out4404;
              readIdents = _9489_recIdents;
            }
          } else if (_source381.is_Seq) {
            DAST._IType _9490___mcc_h830 = _source381.dtor_element;
            {
              RAST._IExpr _9491_recursiveGen;
              DCOMPUTF16._IOwnership _9492_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9493_recIdents;
              RAST._IExpr _out4405;
              DCOMPUTF16._IOwnership _out4406;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4407;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4405, out _out4406, out _out4407);
              _9491_recursiveGen = _out4405;
              _9492_recOwned = _out4406;
              _9493_recIdents = _out4407;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9491_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4408;
              DCOMPUTF16._IOwnership _out4409;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4408, out _out4409);
              r = _out4408;
              resultingOwnership = _out4409;
              readIdents = _9493_recIdents;
            }
          } else if (_source381.is_Set) {
            DAST._IType _9494___mcc_h832 = _source381.dtor_element;
            {
              RAST._IExpr _9495_recursiveGen;
              DCOMPUTF16._IOwnership _9496_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9497_recIdents;
              RAST._IExpr _out4410;
              DCOMPUTF16._IOwnership _out4411;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4412;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4410, out _out4411, out _out4412);
              _9495_recursiveGen = _out4410;
              _9496_recOwned = _out4411;
              _9497_recIdents = _out4412;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9495_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4413;
              DCOMPUTF16._IOwnership _out4414;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4413, out _out4414);
              r = _out4413;
              resultingOwnership = _out4414;
              readIdents = _9497_recIdents;
            }
          } else if (_source381.is_Multiset) {
            DAST._IType _9498___mcc_h834 = _source381.dtor_element;
            {
              RAST._IExpr _9499_recursiveGen;
              DCOMPUTF16._IOwnership _9500_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9501_recIdents;
              RAST._IExpr _out4415;
              DCOMPUTF16._IOwnership _out4416;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4417;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4415, out _out4416, out _out4417);
              _9499_recursiveGen = _out4415;
              _9500_recOwned = _out4416;
              _9501_recIdents = _out4417;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9499_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4418;
              DCOMPUTF16._IOwnership _out4419;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4418, out _out4419);
              r = _out4418;
              resultingOwnership = _out4419;
              readIdents = _9501_recIdents;
            }
          } else if (_source381.is_Map) {
            DAST._IType _9502___mcc_h836 = _source381.dtor_key;
            DAST._IType _9503___mcc_h837 = _source381.dtor_value;
            {
              RAST._IExpr _9504_recursiveGen;
              DCOMPUTF16._IOwnership _9505_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9506_recIdents;
              RAST._IExpr _out4420;
              DCOMPUTF16._IOwnership _out4421;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4422;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4420, out _out4421, out _out4422);
              _9504_recursiveGen = _out4420;
              _9505_recOwned = _out4421;
              _9506_recIdents = _out4422;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9504_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4423;
              DCOMPUTF16._IOwnership _out4424;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4423, out _out4424);
              r = _out4423;
              resultingOwnership = _out4424;
              readIdents = _9506_recIdents;
            }
          } else if (_source381.is_SetBuilder) {
            DAST._IType _9507___mcc_h840 = _source381.dtor_element;
            {
              RAST._IExpr _9508_recursiveGen;
              DCOMPUTF16._IOwnership _9509_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9510_recIdents;
              RAST._IExpr _out4425;
              DCOMPUTF16._IOwnership _out4426;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4427;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4425, out _out4426, out _out4427);
              _9508_recursiveGen = _out4425;
              _9509_recOwned = _out4426;
              _9510_recIdents = _out4427;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9508_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4428;
              DCOMPUTF16._IOwnership _out4429;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4428, out _out4429);
              r = _out4428;
              resultingOwnership = _out4429;
              readIdents = _9510_recIdents;
            }
          } else if (_source381.is_MapBuilder) {
            DAST._IType _9511___mcc_h842 = _source381.dtor_key;
            DAST._IType _9512___mcc_h843 = _source381.dtor_value;
            {
              RAST._IExpr _9513_recursiveGen;
              DCOMPUTF16._IOwnership _9514_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9515_recIdents;
              RAST._IExpr _out4430;
              DCOMPUTF16._IOwnership _out4431;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4432;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4430, out _out4431, out _out4432);
              _9513_recursiveGen = _out4430;
              _9514_recOwned = _out4431;
              _9515_recIdents = _out4432;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9513_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4433;
              DCOMPUTF16._IOwnership _out4434;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4433, out _out4434);
              r = _out4433;
              resultingOwnership = _out4434;
              readIdents = _9515_recIdents;
            }
          } else if (_source381.is_Arrow) {
            Dafny.ISequence<DAST._IType> _9516___mcc_h846 = _source381.dtor_args;
            DAST._IType _9517___mcc_h847 = _source381.dtor_result;
            {
              RAST._IExpr _9518_recursiveGen;
              DCOMPUTF16._IOwnership _9519_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9520_recIdents;
              RAST._IExpr _out4435;
              DCOMPUTF16._IOwnership _out4436;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4437;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4435, out _out4436, out _out4437);
              _9518_recursiveGen = _out4435;
              _9519_recOwned = _out4436;
              _9520_recIdents = _out4437;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9518_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4438;
              DCOMPUTF16._IOwnership _out4439;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4438, out _out4439);
              r = _out4438;
              resultingOwnership = _out4439;
              readIdents = _9520_recIdents;
            }
          } else if (_source381.is_Primitive) {
            DAST._IPrimitive _9521___mcc_h850 = _source381.dtor_Primitive_a0;
            {
              RAST._IExpr _9522_recursiveGen;
              DCOMPUTF16._IOwnership _9523_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9524_recIdents;
              RAST._IExpr _out4440;
              DCOMPUTF16._IOwnership _out4441;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4442;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4440, out _out4441, out _out4442);
              _9522_recursiveGen = _out4440;
              _9523_recOwned = _out4441;
              _9524_recIdents = _out4442;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9522_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4443;
              DCOMPUTF16._IOwnership _out4444;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4443, out _out4444);
              r = _out4443;
              resultingOwnership = _out4444;
              readIdents = _9524_recIdents;
            }
          } else if (_source381.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _9525___mcc_h852 = _source381.dtor_Passthrough_a0;
            {
              RAST._IExpr _9526_recursiveGen;
              DCOMPUTF16._IOwnership _9527_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9528_recIdents;
              RAST._IExpr _out4445;
              DCOMPUTF16._IOwnership _out4446;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4447;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4445, out _out4446, out _out4447);
              _9526_recursiveGen = _out4445;
              _9527_recOwned = _out4446;
              _9528_recIdents = _out4447;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9526_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4448;
              DCOMPUTF16._IOwnership _out4449;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4448, out _out4449);
              r = _out4448;
              resultingOwnership = _out4449;
              readIdents = _9528_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _9529___mcc_h854 = _source381.dtor_TypeArg_a0;
            {
              RAST._IExpr _9530_recursiveGen;
              DCOMPUTF16._IOwnership _9531_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9532_recIdents;
              RAST._IExpr _out4450;
              DCOMPUTF16._IOwnership _out4451;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4452;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4450, out _out4451, out _out4452);
              _9530_recursiveGen = _out4450;
              _9531_recOwned = _out4451;
              _9532_recIdents = _out4452;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9530_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4453;
              DCOMPUTF16._IOwnership _out4454;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4453, out _out4454);
              r = _out4453;
              resultingOwnership = _out4454;
              readIdents = _9532_recIdents;
            }
          }
        } else if (_source308.is_Primitive) {
          DAST._IPrimitive _9533___mcc_h856 = _source308.dtor_Primitive_a0;
          DAST._IPrimitive _source386 = _9533___mcc_h856;
          if (_source386.is_Int) {
            DAST._IType _source387 = _7827___mcc_h1;
            if (_source387.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9534___mcc_h860 = _source387.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _9535___mcc_h861 = _source387.dtor_typeArgs;
              DAST._IResolvedType _9536___mcc_h862 = _source387.dtor_resolved;
              DAST._IResolvedType _source388 = _9536___mcc_h862;
              if (_source388.is_Datatype) {
                DAST._IDatatypeType _9537___mcc_h866 = _source388.dtor_datatypeType;
                {
                  RAST._IExpr _9538_recursiveGen;
                  DCOMPUTF16._IOwnership _9539_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9540_recIdents;
                  RAST._IExpr _out4455;
                  DCOMPUTF16._IOwnership _out4456;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4457;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4455, out _out4456, out _out4457);
                  _9538_recursiveGen = _out4455;
                  _9539_recOwned = _out4456;
                  _9540_recIdents = _out4457;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9538_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4458;
                  DCOMPUTF16._IOwnership _out4459;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4458, out _out4459);
                  r = _out4458;
                  resultingOwnership = _out4459;
                  readIdents = _9540_recIdents;
                }
              } else if (_source388.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9541___mcc_h868 = _source388.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _9542___mcc_h869 = _source388.dtor_attributes;
                {
                  RAST._IExpr _9543_recursiveGen;
                  DCOMPUTF16._IOwnership _9544_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9545_recIdents;
                  RAST._IExpr _out4460;
                  DCOMPUTF16._IOwnership _out4461;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4462;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4460, out _out4461, out _out4462);
                  _9543_recursiveGen = _out4460;
                  _9544_recOwned = _out4461;
                  _9545_recIdents = _out4462;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9543_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4463;
                  DCOMPUTF16._IOwnership _out4464;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4463, out _out4464);
                  r = _out4463;
                  resultingOwnership = _out4464;
                  readIdents = _9545_recIdents;
                }
              } else {
                DAST._IType _9546___mcc_h872 = _source388.dtor_baseType;
                DAST._INewtypeRange _9547___mcc_h873 = _source388.dtor_range;
                bool _9548___mcc_h874 = _source388.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _9549___mcc_h875 = _source388.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _9550_attributes = _9549___mcc_h875;
                bool _9551_erase = _9548___mcc_h874;
                DAST._INewtypeRange _9552_range = _9547___mcc_h873;
                DAST._IType _9553_b = _9546___mcc_h872;
                {
                  Std.Wrappers._IOption<RAST._IType> _9554_nativeToType;
                  _9554_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_9553_b, _9552_range);
                  if (object.Equals(_7821_fromTpe, _9553_b)) {
                    RAST._IExpr _9555_recursiveGen;
                    DCOMPUTF16._IOwnership _9556_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9557_recIdents;
                    RAST._IExpr _out4465;
                    DCOMPUTF16._IOwnership _out4466;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4467;
                    DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4465, out _out4466, out _out4467);
                    _9555_recursiveGen = _out4465;
                    _9556_recOwned = _out4466;
                    _9557_recIdents = _out4467;
                    Std.Wrappers._IOption<RAST._IType> _source389 = _9554_nativeToType;
                    if (_source389.is_None) {
                      if (_9551_erase) {
                        r = _9555_recursiveGen;
                      } else {
                        RAST._IType _9558_rhsType;
                        RAST._IType _out4468;
                        _out4468 = DCOMPUTF16.COMP.GenType(_7822_toTpe, true, false);
                        _9558_rhsType = _out4468;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_9558_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_9555_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out4469;
                      DCOMPUTF16._IOwnership _out4470;
                      DCOMPUTF16.COMP.FromOwnership(r, _9556_recOwned, expectedOwnership, out _out4469, out _out4470);
                      r = _out4469;
                      resultingOwnership = _out4470;
                    } else {
                      RAST._IType _9559___mcc_h1920 = _source389.dtor_value;
                      RAST._IType _9560_v = _9559___mcc_h1920;
                      r = (((_9555_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_9560_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                      RAST._IExpr _out4471;
                      DCOMPUTF16._IOwnership _out4472;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4471, out _out4472);
                      r = _out4471;
                      resultingOwnership = _out4472;
                    }
                    readIdents = _9557_recIdents;
                  } else {
                    if ((_9554_nativeToType).is_Some) {
                      DAST._IType _source390 = _7821_fromTpe;
                      if (_source390.is_Path) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9561___mcc_h1921 = _source390.dtor_Path_a0;
                        Dafny.ISequence<DAST._IType> _9562___mcc_h1922 = _source390.dtor_typeArgs;
                        DAST._IResolvedType _9563___mcc_h1923 = _source390.dtor_resolved;
                        DAST._IResolvedType _source391 = _9563___mcc_h1923;
                        if (_source391.is_Datatype) {
                          DAST._IDatatypeType _9564___mcc_h1927 = _source391.dtor_datatypeType;
                        } else if (_source391.is_Trait) {
                          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9565___mcc_h1929 = _source391.dtor_path;
                          Dafny.ISequence<DAST._IAttribute> _9566___mcc_h1930 = _source391.dtor_attributes;
                        } else {
                          DAST._IType _9567___mcc_h1933 = _source391.dtor_baseType;
                          DAST._INewtypeRange _9568___mcc_h1934 = _source391.dtor_range;
                          bool _9569___mcc_h1935 = _source391.dtor_erase;
                          Dafny.ISequence<DAST._IAttribute> _9570___mcc_h1936 = _source391.dtor_attributes;
                          Dafny.ISequence<DAST._IAttribute> _9571_attributes0 = _9570___mcc_h1936;
                          bool _9572_erase0 = _9569___mcc_h1935;
                          DAST._INewtypeRange _9573_range0 = _9568___mcc_h1934;
                          DAST._IType _9574_b0 = _9567___mcc_h1933;
                          {
                            Std.Wrappers._IOption<RAST._IType> _9575_nativeFromType;
                            _9575_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_9574_b0, _9573_range0);
                            if ((_9575_nativeFromType).is_Some) {
                              RAST._IExpr _9576_recursiveGen;
                              DCOMPUTF16._IOwnership _9577_recOwned;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9578_recIdents;
                              RAST._IExpr _out4473;
                              DCOMPUTF16._IOwnership _out4474;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4475;
                              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4473, out _out4474, out _out4475);
                              _9576_recursiveGen = _out4473;
                              _9577_recOwned = _out4474;
                              _9578_recIdents = _out4475;
                              RAST._IExpr _out4476;
                              DCOMPUTF16._IOwnership _out4477;
                              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_9576_recursiveGen, (_9554_nativeToType).dtor_value), _9577_recOwned, expectedOwnership, out _out4476, out _out4477);
                              r = _out4476;
                              resultingOwnership = _out4477;
                              readIdents = _9578_recIdents;
                              return ;
                            }
                          }
                        }
                      } else if (_source390.is_Nullable) {
                        DAST._IType _9579___mcc_h1941 = _source390.dtor_Nullable_a0;
                      } else if (_source390.is_Tuple) {
                        Dafny.ISequence<DAST._IType> _9580___mcc_h1943 = _source390.dtor_Tuple_a0;
                      } else if (_source390.is_Array) {
                        DAST._IType _9581___mcc_h1945 = _source390.dtor_element;
                        BigInteger _9582___mcc_h1946 = _source390.dtor_dims;
                      } else if (_source390.is_Seq) {
                        DAST._IType _9583___mcc_h1949 = _source390.dtor_element;
                      } else if (_source390.is_Set) {
                        DAST._IType _9584___mcc_h1951 = _source390.dtor_element;
                      } else if (_source390.is_Multiset) {
                        DAST._IType _9585___mcc_h1953 = _source390.dtor_element;
                      } else if (_source390.is_Map) {
                        DAST._IType _9586___mcc_h1955 = _source390.dtor_key;
                        DAST._IType _9587___mcc_h1956 = _source390.dtor_value;
                      } else if (_source390.is_SetBuilder) {
                        DAST._IType _9588___mcc_h1959 = _source390.dtor_element;
                      } else if (_source390.is_MapBuilder) {
                        DAST._IType _9589___mcc_h1961 = _source390.dtor_key;
                        DAST._IType _9590___mcc_h1962 = _source390.dtor_value;
                      } else if (_source390.is_Arrow) {
                        Dafny.ISequence<DAST._IType> _9591___mcc_h1965 = _source390.dtor_args;
                        DAST._IType _9592___mcc_h1966 = _source390.dtor_result;
                      } else if (_source390.is_Primitive) {
                        DAST._IPrimitive _9593___mcc_h1969 = _source390.dtor_Primitive_a0;
                      } else if (_source390.is_Passthrough) {
                        Dafny.ISequence<Dafny.Rune> _9594___mcc_h1971 = _source390.dtor_Passthrough_a0;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _9595___mcc_h1973 = _source390.dtor_TypeArg_a0;
                      }
                      if (object.Equals(_7821_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _9596_recursiveGen;
                        DCOMPUTF16._IOwnership _9597_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9598_recIdents;
                        RAST._IExpr _out4478;
                        DCOMPUTF16._IOwnership _out4479;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4480;
                        DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4478, out _out4479, out _out4480);
                        _9596_recursiveGen = _out4478;
                        _9597_recOwned = _out4479;
                        _9598_recIdents = _out4480;
                        RAST._IExpr _out4481;
                        DCOMPUTF16._IOwnership _out4482;
                        DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_9596_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_9554_nativeToType).dtor_value), _9597_recOwned, expectedOwnership, out _out4481, out _out4482);
                        r = _out4481;
                        resultingOwnership = _out4482;
                        readIdents = _9598_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out4483;
                    DCOMPUTF16._IOwnership _out4484;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4485;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7820_expr, _7821_fromTpe, _9553_b), _9553_b, _7822_toTpe), selfIdent, env, expectedOwnership, out _out4483, out _out4484, out _out4485);
                    r = _out4483;
                    resultingOwnership = _out4484;
                    readIdents = _out4485;
                  }
                }
              }
            } else if (_source387.is_Nullable) {
              DAST._IType _9599___mcc_h880 = _source387.dtor_Nullable_a0;
              {
                RAST._IExpr _9600_recursiveGen;
                DCOMPUTF16._IOwnership _9601_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9602_recIdents;
                RAST._IExpr _out4486;
                DCOMPUTF16._IOwnership _out4487;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4488;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4486, out _out4487, out _out4488);
                _9600_recursiveGen = _out4486;
                _9601_recOwned = _out4487;
                _9602_recIdents = _out4488;
                r = _9600_recursiveGen;
                if (object.Equals(_9601_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out4489;
                DCOMPUTF16._IOwnership _out4490;
                DCOMPUTF16.COMP.FromOwnership(r, _9601_recOwned, expectedOwnership, out _out4489, out _out4490);
                r = _out4489;
                resultingOwnership = _out4490;
                readIdents = _9602_recIdents;
              }
            } else if (_source387.is_Tuple) {
              Dafny.ISequence<DAST._IType> _9603___mcc_h882 = _source387.dtor_Tuple_a0;
              {
                RAST._IExpr _9604_recursiveGen;
                DCOMPUTF16._IOwnership _9605_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9606_recIdents;
                RAST._IExpr _out4491;
                DCOMPUTF16._IOwnership _out4492;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4493;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4491, out _out4492, out _out4493);
                _9604_recursiveGen = _out4491;
                _9605_recOwned = _out4492;
                _9606_recIdents = _out4493;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9604_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4494;
                DCOMPUTF16._IOwnership _out4495;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4494, out _out4495);
                r = _out4494;
                resultingOwnership = _out4495;
                readIdents = _9606_recIdents;
              }
            } else if (_source387.is_Array) {
              DAST._IType _9607___mcc_h884 = _source387.dtor_element;
              BigInteger _9608___mcc_h885 = _source387.dtor_dims;
              {
                RAST._IExpr _9609_recursiveGen;
                DCOMPUTF16._IOwnership _9610_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9611_recIdents;
                RAST._IExpr _out4496;
                DCOMPUTF16._IOwnership _out4497;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4498;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4496, out _out4497, out _out4498);
                _9609_recursiveGen = _out4496;
                _9610_recOwned = _out4497;
                _9611_recIdents = _out4498;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9609_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4499;
                DCOMPUTF16._IOwnership _out4500;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4499, out _out4500);
                r = _out4499;
                resultingOwnership = _out4500;
                readIdents = _9611_recIdents;
              }
            } else if (_source387.is_Seq) {
              DAST._IType _9612___mcc_h888 = _source387.dtor_element;
              {
                RAST._IExpr _9613_recursiveGen;
                DCOMPUTF16._IOwnership _9614_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9615_recIdents;
                RAST._IExpr _out4501;
                DCOMPUTF16._IOwnership _out4502;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4503;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4501, out _out4502, out _out4503);
                _9613_recursiveGen = _out4501;
                _9614_recOwned = _out4502;
                _9615_recIdents = _out4503;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9613_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4504;
                DCOMPUTF16._IOwnership _out4505;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4504, out _out4505);
                r = _out4504;
                resultingOwnership = _out4505;
                readIdents = _9615_recIdents;
              }
            } else if (_source387.is_Set) {
              DAST._IType _9616___mcc_h890 = _source387.dtor_element;
              {
                RAST._IExpr _9617_recursiveGen;
                DCOMPUTF16._IOwnership _9618_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9619_recIdents;
                RAST._IExpr _out4506;
                DCOMPUTF16._IOwnership _out4507;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4508;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4506, out _out4507, out _out4508);
                _9617_recursiveGen = _out4506;
                _9618_recOwned = _out4507;
                _9619_recIdents = _out4508;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9617_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4509;
                DCOMPUTF16._IOwnership _out4510;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4509, out _out4510);
                r = _out4509;
                resultingOwnership = _out4510;
                readIdents = _9619_recIdents;
              }
            } else if (_source387.is_Multiset) {
              DAST._IType _9620___mcc_h892 = _source387.dtor_element;
              {
                RAST._IExpr _9621_recursiveGen;
                DCOMPUTF16._IOwnership _9622_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9623_recIdents;
                RAST._IExpr _out4511;
                DCOMPUTF16._IOwnership _out4512;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4513;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4511, out _out4512, out _out4513);
                _9621_recursiveGen = _out4511;
                _9622_recOwned = _out4512;
                _9623_recIdents = _out4513;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9621_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4514;
                DCOMPUTF16._IOwnership _out4515;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4514, out _out4515);
                r = _out4514;
                resultingOwnership = _out4515;
                readIdents = _9623_recIdents;
              }
            } else if (_source387.is_Map) {
              DAST._IType _9624___mcc_h894 = _source387.dtor_key;
              DAST._IType _9625___mcc_h895 = _source387.dtor_value;
              {
                RAST._IExpr _9626_recursiveGen;
                DCOMPUTF16._IOwnership _9627_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9628_recIdents;
                RAST._IExpr _out4516;
                DCOMPUTF16._IOwnership _out4517;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4518;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4516, out _out4517, out _out4518);
                _9626_recursiveGen = _out4516;
                _9627_recOwned = _out4517;
                _9628_recIdents = _out4518;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9626_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4519;
                DCOMPUTF16._IOwnership _out4520;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4519, out _out4520);
                r = _out4519;
                resultingOwnership = _out4520;
                readIdents = _9628_recIdents;
              }
            } else if (_source387.is_SetBuilder) {
              DAST._IType _9629___mcc_h898 = _source387.dtor_element;
              {
                RAST._IExpr _9630_recursiveGen;
                DCOMPUTF16._IOwnership _9631_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9632_recIdents;
                RAST._IExpr _out4521;
                DCOMPUTF16._IOwnership _out4522;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4523;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4521, out _out4522, out _out4523);
                _9630_recursiveGen = _out4521;
                _9631_recOwned = _out4522;
                _9632_recIdents = _out4523;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9630_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4524;
                DCOMPUTF16._IOwnership _out4525;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4524, out _out4525);
                r = _out4524;
                resultingOwnership = _out4525;
                readIdents = _9632_recIdents;
              }
            } else if (_source387.is_MapBuilder) {
              DAST._IType _9633___mcc_h900 = _source387.dtor_key;
              DAST._IType _9634___mcc_h901 = _source387.dtor_value;
              {
                RAST._IExpr _9635_recursiveGen;
                DCOMPUTF16._IOwnership _9636_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9637_recIdents;
                RAST._IExpr _out4526;
                DCOMPUTF16._IOwnership _out4527;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4528;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4526, out _out4527, out _out4528);
                _9635_recursiveGen = _out4526;
                _9636_recOwned = _out4527;
                _9637_recIdents = _out4528;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9635_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4529;
                DCOMPUTF16._IOwnership _out4530;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4529, out _out4530);
                r = _out4529;
                resultingOwnership = _out4530;
                readIdents = _9637_recIdents;
              }
            } else if (_source387.is_Arrow) {
              Dafny.ISequence<DAST._IType> _9638___mcc_h904 = _source387.dtor_args;
              DAST._IType _9639___mcc_h905 = _source387.dtor_result;
              {
                RAST._IExpr _9640_recursiveGen;
                DCOMPUTF16._IOwnership _9641_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9642_recIdents;
                RAST._IExpr _out4531;
                DCOMPUTF16._IOwnership _out4532;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4533;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4531, out _out4532, out _out4533);
                _9640_recursiveGen = _out4531;
                _9641_recOwned = _out4532;
                _9642_recIdents = _out4533;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9640_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4534;
                DCOMPUTF16._IOwnership _out4535;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4534, out _out4535);
                r = _out4534;
                resultingOwnership = _out4535;
                readIdents = _9642_recIdents;
              }
            } else if (_source387.is_Primitive) {
              DAST._IPrimitive _9643___mcc_h908 = _source387.dtor_Primitive_a0;
              DAST._IPrimitive _source392 = _9643___mcc_h908;
              if (_source392.is_Int) {
                {
                  RAST._IExpr _9644_recursiveGen;
                  DCOMPUTF16._IOwnership _9645_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9646_recIdents;
                  RAST._IExpr _out4536;
                  DCOMPUTF16._IOwnership _out4537;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4538;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4536, out _out4537, out _out4538);
                  _9644_recursiveGen = _out4536;
                  _9645_recOwned = _out4537;
                  _9646_recIdents = _out4538;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9644_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4539;
                  DCOMPUTF16._IOwnership _out4540;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4539, out _out4540);
                  r = _out4539;
                  resultingOwnership = _out4540;
                  readIdents = _9646_recIdents;
                }
              } else if (_source392.is_Real) {
                {
                  RAST._IExpr _9647_recursiveGen;
                  DCOMPUTF16._IOwnership _9648___v80;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9649_recIdents;
                  RAST._IExpr _out4541;
                  DCOMPUTF16._IOwnership _out4542;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4543;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4541, out _out4542, out _out4543);
                  _9647_recursiveGen = _out4541;
                  _9648___v80 = _out4542;
                  _9649_recIdents = _out4543;
                  r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::from_integer("), (_9647_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))));
                  RAST._IExpr _out4544;
                  DCOMPUTF16._IOwnership _out4545;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4544, out _out4545);
                  r = _out4544;
                  resultingOwnership = _out4545;
                  readIdents = _9649_recIdents;
                }
              } else if (_source392.is_String) {
                {
                  RAST._IExpr _9650_recursiveGen;
                  DCOMPUTF16._IOwnership _9651_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9652_recIdents;
                  RAST._IExpr _out4546;
                  DCOMPUTF16._IOwnership _out4547;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4548;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4546, out _out4547, out _out4548);
                  _9650_recursiveGen = _out4546;
                  _9651_recOwned = _out4547;
                  _9652_recIdents = _out4548;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9650_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4549;
                  DCOMPUTF16._IOwnership _out4550;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4549, out _out4550);
                  r = _out4549;
                  resultingOwnership = _out4550;
                  readIdents = _9652_recIdents;
                }
              } else if (_source392.is_Bool) {
                {
                  RAST._IExpr _9653_recursiveGen;
                  DCOMPUTF16._IOwnership _9654_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9655_recIdents;
                  RAST._IExpr _out4551;
                  DCOMPUTF16._IOwnership _out4552;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4553;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4551, out _out4552, out _out4553);
                  _9653_recursiveGen = _out4551;
                  _9654_recOwned = _out4552;
                  _9655_recIdents = _out4553;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9653_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4554;
                  DCOMPUTF16._IOwnership _out4555;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4554, out _out4555);
                  r = _out4554;
                  resultingOwnership = _out4555;
                  readIdents = _9655_recIdents;
                }
              } else {
                {
                  RAST._IType _9656_rhsType;
                  RAST._IType _out4556;
                  _out4556 = DCOMPUTF16.COMP.GenType(_7822_toTpe, true, false);
                  _9656_rhsType = _out4556;
                  RAST._IExpr _9657_recursiveGen;
                  DCOMPUTF16._IOwnership _9658___v86;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9659_recIdents;
                  RAST._IExpr _out4557;
                  DCOMPUTF16._IOwnership _out4558;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4559;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4557, out _out4558, out _out4559);
                  _9657_recursiveGen = _out4557;
                  _9658___v86 = _out4558;
                  _9659_recIdents = _out4559;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char::from_u32(<u32 as ::dafny_runtime::NumCast>::from("), (_9657_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()).unwrap()")));
                  RAST._IExpr _out4560;
                  DCOMPUTF16._IOwnership _out4561;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4560, out _out4561);
                  r = _out4560;
                  resultingOwnership = _out4561;
                  readIdents = _9659_recIdents;
                }
              }
            } else if (_source387.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _9660___mcc_h910 = _source387.dtor_Passthrough_a0;
              {
                RAST._IType _9661_rhsType;
                RAST._IType _out4562;
                _out4562 = DCOMPUTF16.COMP.GenType(_7822_toTpe, true, false);
                _9661_rhsType = _out4562;
                RAST._IExpr _9662_recursiveGen;
                DCOMPUTF16._IOwnership _9663___v83;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9664_recIdents;
                RAST._IExpr _out4563;
                DCOMPUTF16._IOwnership _out4564;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4565;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4563, out _out4564, out _out4565);
                _9662_recursiveGen = _out4563;
                _9663___v83 = _out4564;
                _9664_recIdents = _out4565;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_9661_rhsType)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::NumCast>::from(")), (_9662_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()")));
                RAST._IExpr _out4566;
                DCOMPUTF16._IOwnership _out4567;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4566, out _out4567);
                r = _out4566;
                resultingOwnership = _out4567;
                readIdents = _9664_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _9665___mcc_h912 = _source387.dtor_TypeArg_a0;
              {
                RAST._IExpr _9666_recursiveGen;
                DCOMPUTF16._IOwnership _9667_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9668_recIdents;
                RAST._IExpr _out4568;
                DCOMPUTF16._IOwnership _out4569;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4570;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4568, out _out4569, out _out4570);
                _9666_recursiveGen = _out4568;
                _9667_recOwned = _out4569;
                _9668_recIdents = _out4570;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9666_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4571;
                DCOMPUTF16._IOwnership _out4572;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4571, out _out4572);
                r = _out4571;
                resultingOwnership = _out4572;
                readIdents = _9668_recIdents;
              }
            }
          } else if (_source386.is_Real) {
            DAST._IType _source393 = _7827___mcc_h1;
            if (_source393.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9669___mcc_h914 = _source393.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _9670___mcc_h915 = _source393.dtor_typeArgs;
              DAST._IResolvedType _9671___mcc_h916 = _source393.dtor_resolved;
              DAST._IResolvedType _source394 = _9671___mcc_h916;
              if (_source394.is_Datatype) {
                DAST._IDatatypeType _9672___mcc_h920 = _source394.dtor_datatypeType;
                {
                  RAST._IExpr _9673_recursiveGen;
                  DCOMPUTF16._IOwnership _9674_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9675_recIdents;
                  RAST._IExpr _out4573;
                  DCOMPUTF16._IOwnership _out4574;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4575;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4573, out _out4574, out _out4575);
                  _9673_recursiveGen = _out4573;
                  _9674_recOwned = _out4574;
                  _9675_recIdents = _out4575;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9673_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4576;
                  DCOMPUTF16._IOwnership _out4577;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4576, out _out4577);
                  r = _out4576;
                  resultingOwnership = _out4577;
                  readIdents = _9675_recIdents;
                }
              } else if (_source394.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9676___mcc_h922 = _source394.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _9677___mcc_h923 = _source394.dtor_attributes;
                {
                  RAST._IExpr _9678_recursiveGen;
                  DCOMPUTF16._IOwnership _9679_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9680_recIdents;
                  RAST._IExpr _out4578;
                  DCOMPUTF16._IOwnership _out4579;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4580;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4578, out _out4579, out _out4580);
                  _9678_recursiveGen = _out4578;
                  _9679_recOwned = _out4579;
                  _9680_recIdents = _out4580;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9678_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4581;
                  DCOMPUTF16._IOwnership _out4582;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4581, out _out4582);
                  r = _out4581;
                  resultingOwnership = _out4582;
                  readIdents = _9680_recIdents;
                }
              } else {
                DAST._IType _9681___mcc_h926 = _source394.dtor_baseType;
                DAST._INewtypeRange _9682___mcc_h927 = _source394.dtor_range;
                bool _9683___mcc_h928 = _source394.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _9684___mcc_h929 = _source394.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _9685_attributes = _9684___mcc_h929;
                bool _9686_erase = _9683___mcc_h928;
                DAST._INewtypeRange _9687_range = _9682___mcc_h927;
                DAST._IType _9688_b = _9681___mcc_h926;
                {
                  Std.Wrappers._IOption<RAST._IType> _9689_nativeToType;
                  _9689_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_9688_b, _9687_range);
                  if (object.Equals(_7821_fromTpe, _9688_b)) {
                    RAST._IExpr _9690_recursiveGen;
                    DCOMPUTF16._IOwnership _9691_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9692_recIdents;
                    RAST._IExpr _out4583;
                    DCOMPUTF16._IOwnership _out4584;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4585;
                    DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4583, out _out4584, out _out4585);
                    _9690_recursiveGen = _out4583;
                    _9691_recOwned = _out4584;
                    _9692_recIdents = _out4585;
                    Std.Wrappers._IOption<RAST._IType> _source395 = _9689_nativeToType;
                    if (_source395.is_None) {
                      if (_9686_erase) {
                        r = _9690_recursiveGen;
                      } else {
                        RAST._IType _9693_rhsType;
                        RAST._IType _out4586;
                        _out4586 = DCOMPUTF16.COMP.GenType(_7822_toTpe, true, false);
                        _9693_rhsType = _out4586;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_9693_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_9690_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out4587;
                      DCOMPUTF16._IOwnership _out4588;
                      DCOMPUTF16.COMP.FromOwnership(r, _9691_recOwned, expectedOwnership, out _out4587, out _out4588);
                      r = _out4587;
                      resultingOwnership = _out4588;
                    } else {
                      RAST._IType _9694___mcc_h1975 = _source395.dtor_value;
                      RAST._IType _9695_v = _9694___mcc_h1975;
                      r = (((_9690_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_9695_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                      RAST._IExpr _out4589;
                      DCOMPUTF16._IOwnership _out4590;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4589, out _out4590);
                      r = _out4589;
                      resultingOwnership = _out4590;
                    }
                    readIdents = _9692_recIdents;
                  } else {
                    if ((_9689_nativeToType).is_Some) {
                      DAST._IType _source396 = _7821_fromTpe;
                      if (_source396.is_Path) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9696___mcc_h1976 = _source396.dtor_Path_a0;
                        Dafny.ISequence<DAST._IType> _9697___mcc_h1977 = _source396.dtor_typeArgs;
                        DAST._IResolvedType _9698___mcc_h1978 = _source396.dtor_resolved;
                        DAST._IResolvedType _source397 = _9698___mcc_h1978;
                        if (_source397.is_Datatype) {
                          DAST._IDatatypeType _9699___mcc_h1982 = _source397.dtor_datatypeType;
                        } else if (_source397.is_Trait) {
                          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9700___mcc_h1984 = _source397.dtor_path;
                          Dafny.ISequence<DAST._IAttribute> _9701___mcc_h1985 = _source397.dtor_attributes;
                        } else {
                          DAST._IType _9702___mcc_h1988 = _source397.dtor_baseType;
                          DAST._INewtypeRange _9703___mcc_h1989 = _source397.dtor_range;
                          bool _9704___mcc_h1990 = _source397.dtor_erase;
                          Dafny.ISequence<DAST._IAttribute> _9705___mcc_h1991 = _source397.dtor_attributes;
                          Dafny.ISequence<DAST._IAttribute> _9706_attributes0 = _9705___mcc_h1991;
                          bool _9707_erase0 = _9704___mcc_h1990;
                          DAST._INewtypeRange _9708_range0 = _9703___mcc_h1989;
                          DAST._IType _9709_b0 = _9702___mcc_h1988;
                          {
                            Std.Wrappers._IOption<RAST._IType> _9710_nativeFromType;
                            _9710_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_9709_b0, _9708_range0);
                            if ((_9710_nativeFromType).is_Some) {
                              RAST._IExpr _9711_recursiveGen;
                              DCOMPUTF16._IOwnership _9712_recOwned;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9713_recIdents;
                              RAST._IExpr _out4591;
                              DCOMPUTF16._IOwnership _out4592;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4593;
                              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4591, out _out4592, out _out4593);
                              _9711_recursiveGen = _out4591;
                              _9712_recOwned = _out4592;
                              _9713_recIdents = _out4593;
                              RAST._IExpr _out4594;
                              DCOMPUTF16._IOwnership _out4595;
                              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_9711_recursiveGen, (_9689_nativeToType).dtor_value), _9712_recOwned, expectedOwnership, out _out4594, out _out4595);
                              r = _out4594;
                              resultingOwnership = _out4595;
                              readIdents = _9713_recIdents;
                              return ;
                            }
                          }
                        }
                      } else if (_source396.is_Nullable) {
                        DAST._IType _9714___mcc_h1996 = _source396.dtor_Nullable_a0;
                      } else if (_source396.is_Tuple) {
                        Dafny.ISequence<DAST._IType> _9715___mcc_h1998 = _source396.dtor_Tuple_a0;
                      } else if (_source396.is_Array) {
                        DAST._IType _9716___mcc_h2000 = _source396.dtor_element;
                        BigInteger _9717___mcc_h2001 = _source396.dtor_dims;
                      } else if (_source396.is_Seq) {
                        DAST._IType _9718___mcc_h2004 = _source396.dtor_element;
                      } else if (_source396.is_Set) {
                        DAST._IType _9719___mcc_h2006 = _source396.dtor_element;
                      } else if (_source396.is_Multiset) {
                        DAST._IType _9720___mcc_h2008 = _source396.dtor_element;
                      } else if (_source396.is_Map) {
                        DAST._IType _9721___mcc_h2010 = _source396.dtor_key;
                        DAST._IType _9722___mcc_h2011 = _source396.dtor_value;
                      } else if (_source396.is_SetBuilder) {
                        DAST._IType _9723___mcc_h2014 = _source396.dtor_element;
                      } else if (_source396.is_MapBuilder) {
                        DAST._IType _9724___mcc_h2016 = _source396.dtor_key;
                        DAST._IType _9725___mcc_h2017 = _source396.dtor_value;
                      } else if (_source396.is_Arrow) {
                        Dafny.ISequence<DAST._IType> _9726___mcc_h2020 = _source396.dtor_args;
                        DAST._IType _9727___mcc_h2021 = _source396.dtor_result;
                      } else if (_source396.is_Primitive) {
                        DAST._IPrimitive _9728___mcc_h2024 = _source396.dtor_Primitive_a0;
                      } else if (_source396.is_Passthrough) {
                        Dafny.ISequence<Dafny.Rune> _9729___mcc_h2026 = _source396.dtor_Passthrough_a0;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _9730___mcc_h2028 = _source396.dtor_TypeArg_a0;
                      }
                      if (object.Equals(_7821_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _9731_recursiveGen;
                        DCOMPUTF16._IOwnership _9732_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9733_recIdents;
                        RAST._IExpr _out4596;
                        DCOMPUTF16._IOwnership _out4597;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4598;
                        DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4596, out _out4597, out _out4598);
                        _9731_recursiveGen = _out4596;
                        _9732_recOwned = _out4597;
                        _9733_recIdents = _out4598;
                        RAST._IExpr _out4599;
                        DCOMPUTF16._IOwnership _out4600;
                        DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_9731_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_9689_nativeToType).dtor_value), _9732_recOwned, expectedOwnership, out _out4599, out _out4600);
                        r = _out4599;
                        resultingOwnership = _out4600;
                        readIdents = _9733_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out4601;
                    DCOMPUTF16._IOwnership _out4602;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4603;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7820_expr, _7821_fromTpe, _9688_b), _9688_b, _7822_toTpe), selfIdent, env, expectedOwnership, out _out4601, out _out4602, out _out4603);
                    r = _out4601;
                    resultingOwnership = _out4602;
                    readIdents = _out4603;
                  }
                }
              }
            } else if (_source393.is_Nullable) {
              DAST._IType _9734___mcc_h934 = _source393.dtor_Nullable_a0;
              {
                RAST._IExpr _9735_recursiveGen;
                DCOMPUTF16._IOwnership _9736_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9737_recIdents;
                RAST._IExpr _out4604;
                DCOMPUTF16._IOwnership _out4605;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4606;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4604, out _out4605, out _out4606);
                _9735_recursiveGen = _out4604;
                _9736_recOwned = _out4605;
                _9737_recIdents = _out4606;
                r = _9735_recursiveGen;
                if (object.Equals(_9736_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out4607;
                DCOMPUTF16._IOwnership _out4608;
                DCOMPUTF16.COMP.FromOwnership(r, _9736_recOwned, expectedOwnership, out _out4607, out _out4608);
                r = _out4607;
                resultingOwnership = _out4608;
                readIdents = _9737_recIdents;
              }
            } else if (_source393.is_Tuple) {
              Dafny.ISequence<DAST._IType> _9738___mcc_h936 = _source393.dtor_Tuple_a0;
              {
                RAST._IExpr _9739_recursiveGen;
                DCOMPUTF16._IOwnership _9740_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9741_recIdents;
                RAST._IExpr _out4609;
                DCOMPUTF16._IOwnership _out4610;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4611;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4609, out _out4610, out _out4611);
                _9739_recursiveGen = _out4609;
                _9740_recOwned = _out4610;
                _9741_recIdents = _out4611;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9739_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4612;
                DCOMPUTF16._IOwnership _out4613;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4612, out _out4613);
                r = _out4612;
                resultingOwnership = _out4613;
                readIdents = _9741_recIdents;
              }
            } else if (_source393.is_Array) {
              DAST._IType _9742___mcc_h938 = _source393.dtor_element;
              BigInteger _9743___mcc_h939 = _source393.dtor_dims;
              {
                RAST._IExpr _9744_recursiveGen;
                DCOMPUTF16._IOwnership _9745_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9746_recIdents;
                RAST._IExpr _out4614;
                DCOMPUTF16._IOwnership _out4615;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4616;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4614, out _out4615, out _out4616);
                _9744_recursiveGen = _out4614;
                _9745_recOwned = _out4615;
                _9746_recIdents = _out4616;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9744_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4617;
                DCOMPUTF16._IOwnership _out4618;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4617, out _out4618);
                r = _out4617;
                resultingOwnership = _out4618;
                readIdents = _9746_recIdents;
              }
            } else if (_source393.is_Seq) {
              DAST._IType _9747___mcc_h942 = _source393.dtor_element;
              {
                RAST._IExpr _9748_recursiveGen;
                DCOMPUTF16._IOwnership _9749_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9750_recIdents;
                RAST._IExpr _out4619;
                DCOMPUTF16._IOwnership _out4620;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4621;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4619, out _out4620, out _out4621);
                _9748_recursiveGen = _out4619;
                _9749_recOwned = _out4620;
                _9750_recIdents = _out4621;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9748_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4622;
                DCOMPUTF16._IOwnership _out4623;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4622, out _out4623);
                r = _out4622;
                resultingOwnership = _out4623;
                readIdents = _9750_recIdents;
              }
            } else if (_source393.is_Set) {
              DAST._IType _9751___mcc_h944 = _source393.dtor_element;
              {
                RAST._IExpr _9752_recursiveGen;
                DCOMPUTF16._IOwnership _9753_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9754_recIdents;
                RAST._IExpr _out4624;
                DCOMPUTF16._IOwnership _out4625;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4626;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4624, out _out4625, out _out4626);
                _9752_recursiveGen = _out4624;
                _9753_recOwned = _out4625;
                _9754_recIdents = _out4626;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9752_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4627;
                DCOMPUTF16._IOwnership _out4628;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4627, out _out4628);
                r = _out4627;
                resultingOwnership = _out4628;
                readIdents = _9754_recIdents;
              }
            } else if (_source393.is_Multiset) {
              DAST._IType _9755___mcc_h946 = _source393.dtor_element;
              {
                RAST._IExpr _9756_recursiveGen;
                DCOMPUTF16._IOwnership _9757_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9758_recIdents;
                RAST._IExpr _out4629;
                DCOMPUTF16._IOwnership _out4630;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4631;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4629, out _out4630, out _out4631);
                _9756_recursiveGen = _out4629;
                _9757_recOwned = _out4630;
                _9758_recIdents = _out4631;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9756_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4632;
                DCOMPUTF16._IOwnership _out4633;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4632, out _out4633);
                r = _out4632;
                resultingOwnership = _out4633;
                readIdents = _9758_recIdents;
              }
            } else if (_source393.is_Map) {
              DAST._IType _9759___mcc_h948 = _source393.dtor_key;
              DAST._IType _9760___mcc_h949 = _source393.dtor_value;
              {
                RAST._IExpr _9761_recursiveGen;
                DCOMPUTF16._IOwnership _9762_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9763_recIdents;
                RAST._IExpr _out4634;
                DCOMPUTF16._IOwnership _out4635;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4636;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4634, out _out4635, out _out4636);
                _9761_recursiveGen = _out4634;
                _9762_recOwned = _out4635;
                _9763_recIdents = _out4636;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9761_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4637;
                DCOMPUTF16._IOwnership _out4638;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4637, out _out4638);
                r = _out4637;
                resultingOwnership = _out4638;
                readIdents = _9763_recIdents;
              }
            } else if (_source393.is_SetBuilder) {
              DAST._IType _9764___mcc_h952 = _source393.dtor_element;
              {
                RAST._IExpr _9765_recursiveGen;
                DCOMPUTF16._IOwnership _9766_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9767_recIdents;
                RAST._IExpr _out4639;
                DCOMPUTF16._IOwnership _out4640;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4641;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4639, out _out4640, out _out4641);
                _9765_recursiveGen = _out4639;
                _9766_recOwned = _out4640;
                _9767_recIdents = _out4641;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9765_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4642;
                DCOMPUTF16._IOwnership _out4643;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4642, out _out4643);
                r = _out4642;
                resultingOwnership = _out4643;
                readIdents = _9767_recIdents;
              }
            } else if (_source393.is_MapBuilder) {
              DAST._IType _9768___mcc_h954 = _source393.dtor_key;
              DAST._IType _9769___mcc_h955 = _source393.dtor_value;
              {
                RAST._IExpr _9770_recursiveGen;
                DCOMPUTF16._IOwnership _9771_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9772_recIdents;
                RAST._IExpr _out4644;
                DCOMPUTF16._IOwnership _out4645;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4646;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4644, out _out4645, out _out4646);
                _9770_recursiveGen = _out4644;
                _9771_recOwned = _out4645;
                _9772_recIdents = _out4646;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9770_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4647;
                DCOMPUTF16._IOwnership _out4648;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4647, out _out4648);
                r = _out4647;
                resultingOwnership = _out4648;
                readIdents = _9772_recIdents;
              }
            } else if (_source393.is_Arrow) {
              Dafny.ISequence<DAST._IType> _9773___mcc_h958 = _source393.dtor_args;
              DAST._IType _9774___mcc_h959 = _source393.dtor_result;
              {
                RAST._IExpr _9775_recursiveGen;
                DCOMPUTF16._IOwnership _9776_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9777_recIdents;
                RAST._IExpr _out4649;
                DCOMPUTF16._IOwnership _out4650;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4651;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4649, out _out4650, out _out4651);
                _9775_recursiveGen = _out4649;
                _9776_recOwned = _out4650;
                _9777_recIdents = _out4651;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9775_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4652;
                DCOMPUTF16._IOwnership _out4653;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4652, out _out4653);
                r = _out4652;
                resultingOwnership = _out4653;
                readIdents = _9777_recIdents;
              }
            } else if (_source393.is_Primitive) {
              DAST._IPrimitive _9778___mcc_h962 = _source393.dtor_Primitive_a0;
              DAST._IPrimitive _source398 = _9778___mcc_h962;
              if (_source398.is_Int) {
                {
                  RAST._IExpr _9779_recursiveGen;
                  DCOMPUTF16._IOwnership _9780___v81;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9781_recIdents;
                  RAST._IExpr _out4654;
                  DCOMPUTF16._IOwnership _out4655;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4656;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4654, out _out4655, out _out4656);
                  _9779_recursiveGen = _out4654;
                  _9780___v81 = _out4655;
                  _9781_recIdents = _out4656;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::dafny_rational_to_int("), (_9779_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  RAST._IExpr _out4657;
                  DCOMPUTF16._IOwnership _out4658;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4657, out _out4658);
                  r = _out4657;
                  resultingOwnership = _out4658;
                  readIdents = _9781_recIdents;
                }
              } else if (_source398.is_Real) {
                {
                  RAST._IExpr _9782_recursiveGen;
                  DCOMPUTF16._IOwnership _9783_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9784_recIdents;
                  RAST._IExpr _out4659;
                  DCOMPUTF16._IOwnership _out4660;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4661;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4659, out _out4660, out _out4661);
                  _9782_recursiveGen = _out4659;
                  _9783_recOwned = _out4660;
                  _9784_recIdents = _out4661;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9782_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4662;
                  DCOMPUTF16._IOwnership _out4663;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4662, out _out4663);
                  r = _out4662;
                  resultingOwnership = _out4663;
                  readIdents = _9784_recIdents;
                }
              } else if (_source398.is_String) {
                {
                  RAST._IExpr _9785_recursiveGen;
                  DCOMPUTF16._IOwnership _9786_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9787_recIdents;
                  RAST._IExpr _out4664;
                  DCOMPUTF16._IOwnership _out4665;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4666;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4664, out _out4665, out _out4666);
                  _9785_recursiveGen = _out4664;
                  _9786_recOwned = _out4665;
                  _9787_recIdents = _out4666;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9785_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4667;
                  DCOMPUTF16._IOwnership _out4668;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4667, out _out4668);
                  r = _out4667;
                  resultingOwnership = _out4668;
                  readIdents = _9787_recIdents;
                }
              } else if (_source398.is_Bool) {
                {
                  RAST._IExpr _9788_recursiveGen;
                  DCOMPUTF16._IOwnership _9789_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9790_recIdents;
                  RAST._IExpr _out4669;
                  DCOMPUTF16._IOwnership _out4670;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4671;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4669, out _out4670, out _out4671);
                  _9788_recursiveGen = _out4669;
                  _9789_recOwned = _out4670;
                  _9790_recIdents = _out4671;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9788_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4672;
                  DCOMPUTF16._IOwnership _out4673;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4672, out _out4673);
                  r = _out4672;
                  resultingOwnership = _out4673;
                  readIdents = _9790_recIdents;
                }
              } else {
                {
                  RAST._IExpr _9791_recursiveGen;
                  DCOMPUTF16._IOwnership _9792_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9793_recIdents;
                  RAST._IExpr _out4674;
                  DCOMPUTF16._IOwnership _out4675;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4676;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4674, out _out4675, out _out4676);
                  _9791_recursiveGen = _out4674;
                  _9792_recOwned = _out4675;
                  _9793_recIdents = _out4676;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9791_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4677;
                  DCOMPUTF16._IOwnership _out4678;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4677, out _out4678);
                  r = _out4677;
                  resultingOwnership = _out4678;
                  readIdents = _9793_recIdents;
                }
              }
            } else if (_source393.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _9794___mcc_h964 = _source393.dtor_Passthrough_a0;
              {
                RAST._IExpr _9795_recursiveGen;
                DCOMPUTF16._IOwnership _9796_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9797_recIdents;
                RAST._IExpr _out4679;
                DCOMPUTF16._IOwnership _out4680;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4681;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4679, out _out4680, out _out4681);
                _9795_recursiveGen = _out4679;
                _9796_recOwned = _out4680;
                _9797_recIdents = _out4681;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9795_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4682;
                DCOMPUTF16._IOwnership _out4683;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4682, out _out4683);
                r = _out4682;
                resultingOwnership = _out4683;
                readIdents = _9797_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _9798___mcc_h966 = _source393.dtor_TypeArg_a0;
              {
                RAST._IExpr _9799_recursiveGen;
                DCOMPUTF16._IOwnership _9800_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9801_recIdents;
                RAST._IExpr _out4684;
                DCOMPUTF16._IOwnership _out4685;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4686;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4684, out _out4685, out _out4686);
                _9799_recursiveGen = _out4684;
                _9800_recOwned = _out4685;
                _9801_recIdents = _out4686;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9799_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4687;
                DCOMPUTF16._IOwnership _out4688;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4687, out _out4688);
                r = _out4687;
                resultingOwnership = _out4688;
                readIdents = _9801_recIdents;
              }
            }
          } else if (_source386.is_String) {
            DAST._IType _source399 = _7827___mcc_h1;
            if (_source399.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9802___mcc_h968 = _source399.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _9803___mcc_h969 = _source399.dtor_typeArgs;
              DAST._IResolvedType _9804___mcc_h970 = _source399.dtor_resolved;
              DAST._IResolvedType _source400 = _9804___mcc_h970;
              if (_source400.is_Datatype) {
                DAST._IDatatypeType _9805___mcc_h974 = _source400.dtor_datatypeType;
                {
                  RAST._IExpr _9806_recursiveGen;
                  DCOMPUTF16._IOwnership _9807_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9808_recIdents;
                  RAST._IExpr _out4689;
                  DCOMPUTF16._IOwnership _out4690;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4691;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4689, out _out4690, out _out4691);
                  _9806_recursiveGen = _out4689;
                  _9807_recOwned = _out4690;
                  _9808_recIdents = _out4691;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9806_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4692;
                  DCOMPUTF16._IOwnership _out4693;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4692, out _out4693);
                  r = _out4692;
                  resultingOwnership = _out4693;
                  readIdents = _9808_recIdents;
                }
              } else if (_source400.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9809___mcc_h976 = _source400.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _9810___mcc_h977 = _source400.dtor_attributes;
                {
                  RAST._IExpr _9811_recursiveGen;
                  DCOMPUTF16._IOwnership _9812_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9813_recIdents;
                  RAST._IExpr _out4694;
                  DCOMPUTF16._IOwnership _out4695;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4696;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4694, out _out4695, out _out4696);
                  _9811_recursiveGen = _out4694;
                  _9812_recOwned = _out4695;
                  _9813_recIdents = _out4696;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9811_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4697;
                  DCOMPUTF16._IOwnership _out4698;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4697, out _out4698);
                  r = _out4697;
                  resultingOwnership = _out4698;
                  readIdents = _9813_recIdents;
                }
              } else {
                DAST._IType _9814___mcc_h980 = _source400.dtor_baseType;
                DAST._INewtypeRange _9815___mcc_h981 = _source400.dtor_range;
                bool _9816___mcc_h982 = _source400.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _9817___mcc_h983 = _source400.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _9818_attributes = _9817___mcc_h983;
                bool _9819_erase = _9816___mcc_h982;
                DAST._INewtypeRange _9820_range = _9815___mcc_h981;
                DAST._IType _9821_b = _9814___mcc_h980;
                {
                  Std.Wrappers._IOption<RAST._IType> _9822_nativeToType;
                  _9822_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_9821_b, _9820_range);
                  if (object.Equals(_7821_fromTpe, _9821_b)) {
                    RAST._IExpr _9823_recursiveGen;
                    DCOMPUTF16._IOwnership _9824_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9825_recIdents;
                    RAST._IExpr _out4699;
                    DCOMPUTF16._IOwnership _out4700;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4701;
                    DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4699, out _out4700, out _out4701);
                    _9823_recursiveGen = _out4699;
                    _9824_recOwned = _out4700;
                    _9825_recIdents = _out4701;
                    Std.Wrappers._IOption<RAST._IType> _source401 = _9822_nativeToType;
                    if (_source401.is_None) {
                      if (_9819_erase) {
                        r = _9823_recursiveGen;
                      } else {
                        RAST._IType _9826_rhsType;
                        RAST._IType _out4702;
                        _out4702 = DCOMPUTF16.COMP.GenType(_7822_toTpe, true, false);
                        _9826_rhsType = _out4702;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_9826_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_9823_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out4703;
                      DCOMPUTF16._IOwnership _out4704;
                      DCOMPUTF16.COMP.FromOwnership(r, _9824_recOwned, expectedOwnership, out _out4703, out _out4704);
                      r = _out4703;
                      resultingOwnership = _out4704;
                    } else {
                      RAST._IType _9827___mcc_h2030 = _source401.dtor_value;
                      RAST._IType _9828_v = _9827___mcc_h2030;
                      r = (((_9823_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_9828_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                      RAST._IExpr _out4705;
                      DCOMPUTF16._IOwnership _out4706;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4705, out _out4706);
                      r = _out4705;
                      resultingOwnership = _out4706;
                    }
                    readIdents = _9825_recIdents;
                  } else {
                    if ((_9822_nativeToType).is_Some) {
                      DAST._IType _source402 = _7821_fromTpe;
                      if (_source402.is_Path) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9829___mcc_h2031 = _source402.dtor_Path_a0;
                        Dafny.ISequence<DAST._IType> _9830___mcc_h2032 = _source402.dtor_typeArgs;
                        DAST._IResolvedType _9831___mcc_h2033 = _source402.dtor_resolved;
                        DAST._IResolvedType _source403 = _9831___mcc_h2033;
                        if (_source403.is_Datatype) {
                          DAST._IDatatypeType _9832___mcc_h2037 = _source403.dtor_datatypeType;
                        } else if (_source403.is_Trait) {
                          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9833___mcc_h2039 = _source403.dtor_path;
                          Dafny.ISequence<DAST._IAttribute> _9834___mcc_h2040 = _source403.dtor_attributes;
                        } else {
                          DAST._IType _9835___mcc_h2043 = _source403.dtor_baseType;
                          DAST._INewtypeRange _9836___mcc_h2044 = _source403.dtor_range;
                          bool _9837___mcc_h2045 = _source403.dtor_erase;
                          Dafny.ISequence<DAST._IAttribute> _9838___mcc_h2046 = _source403.dtor_attributes;
                          Dafny.ISequence<DAST._IAttribute> _9839_attributes0 = _9838___mcc_h2046;
                          bool _9840_erase0 = _9837___mcc_h2045;
                          DAST._INewtypeRange _9841_range0 = _9836___mcc_h2044;
                          DAST._IType _9842_b0 = _9835___mcc_h2043;
                          {
                            Std.Wrappers._IOption<RAST._IType> _9843_nativeFromType;
                            _9843_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_9842_b0, _9841_range0);
                            if ((_9843_nativeFromType).is_Some) {
                              RAST._IExpr _9844_recursiveGen;
                              DCOMPUTF16._IOwnership _9845_recOwned;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9846_recIdents;
                              RAST._IExpr _out4707;
                              DCOMPUTF16._IOwnership _out4708;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4709;
                              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4707, out _out4708, out _out4709);
                              _9844_recursiveGen = _out4707;
                              _9845_recOwned = _out4708;
                              _9846_recIdents = _out4709;
                              RAST._IExpr _out4710;
                              DCOMPUTF16._IOwnership _out4711;
                              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_9844_recursiveGen, (_9822_nativeToType).dtor_value), _9845_recOwned, expectedOwnership, out _out4710, out _out4711);
                              r = _out4710;
                              resultingOwnership = _out4711;
                              readIdents = _9846_recIdents;
                              return ;
                            }
                          }
                        }
                      } else if (_source402.is_Nullable) {
                        DAST._IType _9847___mcc_h2051 = _source402.dtor_Nullable_a0;
                      } else if (_source402.is_Tuple) {
                        Dafny.ISequence<DAST._IType> _9848___mcc_h2053 = _source402.dtor_Tuple_a0;
                      } else if (_source402.is_Array) {
                        DAST._IType _9849___mcc_h2055 = _source402.dtor_element;
                        BigInteger _9850___mcc_h2056 = _source402.dtor_dims;
                      } else if (_source402.is_Seq) {
                        DAST._IType _9851___mcc_h2059 = _source402.dtor_element;
                      } else if (_source402.is_Set) {
                        DAST._IType _9852___mcc_h2061 = _source402.dtor_element;
                      } else if (_source402.is_Multiset) {
                        DAST._IType _9853___mcc_h2063 = _source402.dtor_element;
                      } else if (_source402.is_Map) {
                        DAST._IType _9854___mcc_h2065 = _source402.dtor_key;
                        DAST._IType _9855___mcc_h2066 = _source402.dtor_value;
                      } else if (_source402.is_SetBuilder) {
                        DAST._IType _9856___mcc_h2069 = _source402.dtor_element;
                      } else if (_source402.is_MapBuilder) {
                        DAST._IType _9857___mcc_h2071 = _source402.dtor_key;
                        DAST._IType _9858___mcc_h2072 = _source402.dtor_value;
                      } else if (_source402.is_Arrow) {
                        Dafny.ISequence<DAST._IType> _9859___mcc_h2075 = _source402.dtor_args;
                        DAST._IType _9860___mcc_h2076 = _source402.dtor_result;
                      } else if (_source402.is_Primitive) {
                        DAST._IPrimitive _9861___mcc_h2079 = _source402.dtor_Primitive_a0;
                      } else if (_source402.is_Passthrough) {
                        Dafny.ISequence<Dafny.Rune> _9862___mcc_h2081 = _source402.dtor_Passthrough_a0;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _9863___mcc_h2083 = _source402.dtor_TypeArg_a0;
                      }
                      if (object.Equals(_7821_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _9864_recursiveGen;
                        DCOMPUTF16._IOwnership _9865_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9866_recIdents;
                        RAST._IExpr _out4712;
                        DCOMPUTF16._IOwnership _out4713;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4714;
                        DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4712, out _out4713, out _out4714);
                        _9864_recursiveGen = _out4712;
                        _9865_recOwned = _out4713;
                        _9866_recIdents = _out4714;
                        RAST._IExpr _out4715;
                        DCOMPUTF16._IOwnership _out4716;
                        DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_9864_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_9822_nativeToType).dtor_value), _9865_recOwned, expectedOwnership, out _out4715, out _out4716);
                        r = _out4715;
                        resultingOwnership = _out4716;
                        readIdents = _9866_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out4717;
                    DCOMPUTF16._IOwnership _out4718;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4719;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7820_expr, _7821_fromTpe, _9821_b), _9821_b, _7822_toTpe), selfIdent, env, expectedOwnership, out _out4717, out _out4718, out _out4719);
                    r = _out4717;
                    resultingOwnership = _out4718;
                    readIdents = _out4719;
                  }
                }
              }
            } else if (_source399.is_Nullable) {
              DAST._IType _9867___mcc_h988 = _source399.dtor_Nullable_a0;
              {
                RAST._IExpr _9868_recursiveGen;
                DCOMPUTF16._IOwnership _9869_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9870_recIdents;
                RAST._IExpr _out4720;
                DCOMPUTF16._IOwnership _out4721;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4722;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4720, out _out4721, out _out4722);
                _9868_recursiveGen = _out4720;
                _9869_recOwned = _out4721;
                _9870_recIdents = _out4722;
                r = _9868_recursiveGen;
                if (object.Equals(_9869_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out4723;
                DCOMPUTF16._IOwnership _out4724;
                DCOMPUTF16.COMP.FromOwnership(r, _9869_recOwned, expectedOwnership, out _out4723, out _out4724);
                r = _out4723;
                resultingOwnership = _out4724;
                readIdents = _9870_recIdents;
              }
            } else if (_source399.is_Tuple) {
              Dafny.ISequence<DAST._IType> _9871___mcc_h990 = _source399.dtor_Tuple_a0;
              {
                RAST._IExpr _9872_recursiveGen;
                DCOMPUTF16._IOwnership _9873_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9874_recIdents;
                RAST._IExpr _out4725;
                DCOMPUTF16._IOwnership _out4726;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4727;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4725, out _out4726, out _out4727);
                _9872_recursiveGen = _out4725;
                _9873_recOwned = _out4726;
                _9874_recIdents = _out4727;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9872_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4728;
                DCOMPUTF16._IOwnership _out4729;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4728, out _out4729);
                r = _out4728;
                resultingOwnership = _out4729;
                readIdents = _9874_recIdents;
              }
            } else if (_source399.is_Array) {
              DAST._IType _9875___mcc_h992 = _source399.dtor_element;
              BigInteger _9876___mcc_h993 = _source399.dtor_dims;
              {
                RAST._IExpr _9877_recursiveGen;
                DCOMPUTF16._IOwnership _9878_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9879_recIdents;
                RAST._IExpr _out4730;
                DCOMPUTF16._IOwnership _out4731;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4732;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4730, out _out4731, out _out4732);
                _9877_recursiveGen = _out4730;
                _9878_recOwned = _out4731;
                _9879_recIdents = _out4732;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9877_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4733;
                DCOMPUTF16._IOwnership _out4734;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4733, out _out4734);
                r = _out4733;
                resultingOwnership = _out4734;
                readIdents = _9879_recIdents;
              }
            } else if (_source399.is_Seq) {
              DAST._IType _9880___mcc_h996 = _source399.dtor_element;
              {
                RAST._IExpr _9881_recursiveGen;
                DCOMPUTF16._IOwnership _9882_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9883_recIdents;
                RAST._IExpr _out4735;
                DCOMPUTF16._IOwnership _out4736;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4737;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4735, out _out4736, out _out4737);
                _9881_recursiveGen = _out4735;
                _9882_recOwned = _out4736;
                _9883_recIdents = _out4737;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9881_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4738;
                DCOMPUTF16._IOwnership _out4739;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4738, out _out4739);
                r = _out4738;
                resultingOwnership = _out4739;
                readIdents = _9883_recIdents;
              }
            } else if (_source399.is_Set) {
              DAST._IType _9884___mcc_h998 = _source399.dtor_element;
              {
                RAST._IExpr _9885_recursiveGen;
                DCOMPUTF16._IOwnership _9886_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9887_recIdents;
                RAST._IExpr _out4740;
                DCOMPUTF16._IOwnership _out4741;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4742;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4740, out _out4741, out _out4742);
                _9885_recursiveGen = _out4740;
                _9886_recOwned = _out4741;
                _9887_recIdents = _out4742;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9885_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4743;
                DCOMPUTF16._IOwnership _out4744;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4743, out _out4744);
                r = _out4743;
                resultingOwnership = _out4744;
                readIdents = _9887_recIdents;
              }
            } else if (_source399.is_Multiset) {
              DAST._IType _9888___mcc_h1000 = _source399.dtor_element;
              {
                RAST._IExpr _9889_recursiveGen;
                DCOMPUTF16._IOwnership _9890_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9891_recIdents;
                RAST._IExpr _out4745;
                DCOMPUTF16._IOwnership _out4746;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4747;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4745, out _out4746, out _out4747);
                _9889_recursiveGen = _out4745;
                _9890_recOwned = _out4746;
                _9891_recIdents = _out4747;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9889_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4748;
                DCOMPUTF16._IOwnership _out4749;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4748, out _out4749);
                r = _out4748;
                resultingOwnership = _out4749;
                readIdents = _9891_recIdents;
              }
            } else if (_source399.is_Map) {
              DAST._IType _9892___mcc_h1002 = _source399.dtor_key;
              DAST._IType _9893___mcc_h1003 = _source399.dtor_value;
              {
                RAST._IExpr _9894_recursiveGen;
                DCOMPUTF16._IOwnership _9895_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9896_recIdents;
                RAST._IExpr _out4750;
                DCOMPUTF16._IOwnership _out4751;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4752;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4750, out _out4751, out _out4752);
                _9894_recursiveGen = _out4750;
                _9895_recOwned = _out4751;
                _9896_recIdents = _out4752;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9894_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4753;
                DCOMPUTF16._IOwnership _out4754;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4753, out _out4754);
                r = _out4753;
                resultingOwnership = _out4754;
                readIdents = _9896_recIdents;
              }
            } else if (_source399.is_SetBuilder) {
              DAST._IType _9897___mcc_h1006 = _source399.dtor_element;
              {
                RAST._IExpr _9898_recursiveGen;
                DCOMPUTF16._IOwnership _9899_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9900_recIdents;
                RAST._IExpr _out4755;
                DCOMPUTF16._IOwnership _out4756;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4757;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4755, out _out4756, out _out4757);
                _9898_recursiveGen = _out4755;
                _9899_recOwned = _out4756;
                _9900_recIdents = _out4757;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9898_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4758;
                DCOMPUTF16._IOwnership _out4759;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4758, out _out4759);
                r = _out4758;
                resultingOwnership = _out4759;
                readIdents = _9900_recIdents;
              }
            } else if (_source399.is_MapBuilder) {
              DAST._IType _9901___mcc_h1008 = _source399.dtor_key;
              DAST._IType _9902___mcc_h1009 = _source399.dtor_value;
              {
                RAST._IExpr _9903_recursiveGen;
                DCOMPUTF16._IOwnership _9904_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9905_recIdents;
                RAST._IExpr _out4760;
                DCOMPUTF16._IOwnership _out4761;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4762;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4760, out _out4761, out _out4762);
                _9903_recursiveGen = _out4760;
                _9904_recOwned = _out4761;
                _9905_recIdents = _out4762;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9903_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4763;
                DCOMPUTF16._IOwnership _out4764;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4763, out _out4764);
                r = _out4763;
                resultingOwnership = _out4764;
                readIdents = _9905_recIdents;
              }
            } else if (_source399.is_Arrow) {
              Dafny.ISequence<DAST._IType> _9906___mcc_h1012 = _source399.dtor_args;
              DAST._IType _9907___mcc_h1013 = _source399.dtor_result;
              {
                RAST._IExpr _9908_recursiveGen;
                DCOMPUTF16._IOwnership _9909_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9910_recIdents;
                RAST._IExpr _out4765;
                DCOMPUTF16._IOwnership _out4766;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4767;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4765, out _out4766, out _out4767);
                _9908_recursiveGen = _out4765;
                _9909_recOwned = _out4766;
                _9910_recIdents = _out4767;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9908_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4768;
                DCOMPUTF16._IOwnership _out4769;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4768, out _out4769);
                r = _out4768;
                resultingOwnership = _out4769;
                readIdents = _9910_recIdents;
              }
            } else if (_source399.is_Primitive) {
              DAST._IPrimitive _9911___mcc_h1016 = _source399.dtor_Primitive_a0;
              {
                RAST._IExpr _9912_recursiveGen;
                DCOMPUTF16._IOwnership _9913_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9914_recIdents;
                RAST._IExpr _out4770;
                DCOMPUTF16._IOwnership _out4771;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4772;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4770, out _out4771, out _out4772);
                _9912_recursiveGen = _out4770;
                _9913_recOwned = _out4771;
                _9914_recIdents = _out4772;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9912_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4773;
                DCOMPUTF16._IOwnership _out4774;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4773, out _out4774);
                r = _out4773;
                resultingOwnership = _out4774;
                readIdents = _9914_recIdents;
              }
            } else if (_source399.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _9915___mcc_h1018 = _source399.dtor_Passthrough_a0;
              {
                RAST._IExpr _9916_recursiveGen;
                DCOMPUTF16._IOwnership _9917_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9918_recIdents;
                RAST._IExpr _out4775;
                DCOMPUTF16._IOwnership _out4776;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4777;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4775, out _out4776, out _out4777);
                _9916_recursiveGen = _out4775;
                _9917_recOwned = _out4776;
                _9918_recIdents = _out4777;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9916_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4778;
                DCOMPUTF16._IOwnership _out4779;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4778, out _out4779);
                r = _out4778;
                resultingOwnership = _out4779;
                readIdents = _9918_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _9919___mcc_h1020 = _source399.dtor_TypeArg_a0;
              {
                RAST._IExpr _9920_recursiveGen;
                DCOMPUTF16._IOwnership _9921_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9922_recIdents;
                RAST._IExpr _out4780;
                DCOMPUTF16._IOwnership _out4781;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4782;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4780, out _out4781, out _out4782);
                _9920_recursiveGen = _out4780;
                _9921_recOwned = _out4781;
                _9922_recIdents = _out4782;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9920_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4783;
                DCOMPUTF16._IOwnership _out4784;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4783, out _out4784);
                r = _out4783;
                resultingOwnership = _out4784;
                readIdents = _9922_recIdents;
              }
            }
          } else if (_source386.is_Bool) {
            DAST._IType _source404 = _7827___mcc_h1;
            if (_source404.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9923___mcc_h1022 = _source404.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _9924___mcc_h1023 = _source404.dtor_typeArgs;
              DAST._IResolvedType _9925___mcc_h1024 = _source404.dtor_resolved;
              DAST._IResolvedType _source405 = _9925___mcc_h1024;
              if (_source405.is_Datatype) {
                DAST._IDatatypeType _9926___mcc_h1028 = _source405.dtor_datatypeType;
                {
                  RAST._IExpr _9927_recursiveGen;
                  DCOMPUTF16._IOwnership _9928_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9929_recIdents;
                  RAST._IExpr _out4785;
                  DCOMPUTF16._IOwnership _out4786;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4787;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4785, out _out4786, out _out4787);
                  _9927_recursiveGen = _out4785;
                  _9928_recOwned = _out4786;
                  _9929_recIdents = _out4787;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9927_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4788;
                  DCOMPUTF16._IOwnership _out4789;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4788, out _out4789);
                  r = _out4788;
                  resultingOwnership = _out4789;
                  readIdents = _9929_recIdents;
                }
              } else if (_source405.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9930___mcc_h1030 = _source405.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _9931___mcc_h1031 = _source405.dtor_attributes;
                {
                  RAST._IExpr _9932_recursiveGen;
                  DCOMPUTF16._IOwnership _9933_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9934_recIdents;
                  RAST._IExpr _out4790;
                  DCOMPUTF16._IOwnership _out4791;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4792;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4790, out _out4791, out _out4792);
                  _9932_recursiveGen = _out4790;
                  _9933_recOwned = _out4791;
                  _9934_recIdents = _out4792;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9932_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4793;
                  DCOMPUTF16._IOwnership _out4794;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4793, out _out4794);
                  r = _out4793;
                  resultingOwnership = _out4794;
                  readIdents = _9934_recIdents;
                }
              } else {
                DAST._IType _9935___mcc_h1034 = _source405.dtor_baseType;
                DAST._INewtypeRange _9936___mcc_h1035 = _source405.dtor_range;
                bool _9937___mcc_h1036 = _source405.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _9938___mcc_h1037 = _source405.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _9939_attributes = _9938___mcc_h1037;
                bool _9940_erase = _9937___mcc_h1036;
                DAST._INewtypeRange _9941_range = _9936___mcc_h1035;
                DAST._IType _9942_b = _9935___mcc_h1034;
                {
                  Std.Wrappers._IOption<RAST._IType> _9943_nativeToType;
                  _9943_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_9942_b, _9941_range);
                  if (object.Equals(_7821_fromTpe, _9942_b)) {
                    RAST._IExpr _9944_recursiveGen;
                    DCOMPUTF16._IOwnership _9945_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9946_recIdents;
                    RAST._IExpr _out4795;
                    DCOMPUTF16._IOwnership _out4796;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4797;
                    DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4795, out _out4796, out _out4797);
                    _9944_recursiveGen = _out4795;
                    _9945_recOwned = _out4796;
                    _9946_recIdents = _out4797;
                    Std.Wrappers._IOption<RAST._IType> _source406 = _9943_nativeToType;
                    if (_source406.is_None) {
                      if (_9940_erase) {
                        r = _9944_recursiveGen;
                      } else {
                        RAST._IType _9947_rhsType;
                        RAST._IType _out4798;
                        _out4798 = DCOMPUTF16.COMP.GenType(_7822_toTpe, true, false);
                        _9947_rhsType = _out4798;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_9947_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_9944_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out4799;
                      DCOMPUTF16._IOwnership _out4800;
                      DCOMPUTF16.COMP.FromOwnership(r, _9945_recOwned, expectedOwnership, out _out4799, out _out4800);
                      r = _out4799;
                      resultingOwnership = _out4800;
                    } else {
                      RAST._IType _9948___mcc_h2085 = _source406.dtor_value;
                      RAST._IType _9949_v = _9948___mcc_h2085;
                      r = (((_9944_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_9949_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                      RAST._IExpr _out4801;
                      DCOMPUTF16._IOwnership _out4802;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4801, out _out4802);
                      r = _out4801;
                      resultingOwnership = _out4802;
                    }
                    readIdents = _9946_recIdents;
                  } else {
                    if ((_9943_nativeToType).is_Some) {
                      DAST._IType _source407 = _7821_fromTpe;
                      if (_source407.is_Path) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9950___mcc_h2086 = _source407.dtor_Path_a0;
                        Dafny.ISequence<DAST._IType> _9951___mcc_h2087 = _source407.dtor_typeArgs;
                        DAST._IResolvedType _9952___mcc_h2088 = _source407.dtor_resolved;
                        DAST._IResolvedType _source408 = _9952___mcc_h2088;
                        if (_source408.is_Datatype) {
                          DAST._IDatatypeType _9953___mcc_h2092 = _source408.dtor_datatypeType;
                        } else if (_source408.is_Trait) {
                          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9954___mcc_h2094 = _source408.dtor_path;
                          Dafny.ISequence<DAST._IAttribute> _9955___mcc_h2095 = _source408.dtor_attributes;
                        } else {
                          DAST._IType _9956___mcc_h2098 = _source408.dtor_baseType;
                          DAST._INewtypeRange _9957___mcc_h2099 = _source408.dtor_range;
                          bool _9958___mcc_h2100 = _source408.dtor_erase;
                          Dafny.ISequence<DAST._IAttribute> _9959___mcc_h2101 = _source408.dtor_attributes;
                          Dafny.ISequence<DAST._IAttribute> _9960_attributes0 = _9959___mcc_h2101;
                          bool _9961_erase0 = _9958___mcc_h2100;
                          DAST._INewtypeRange _9962_range0 = _9957___mcc_h2099;
                          DAST._IType _9963_b0 = _9956___mcc_h2098;
                          {
                            Std.Wrappers._IOption<RAST._IType> _9964_nativeFromType;
                            _9964_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_9963_b0, _9962_range0);
                            if ((_9964_nativeFromType).is_Some) {
                              RAST._IExpr _9965_recursiveGen;
                              DCOMPUTF16._IOwnership _9966_recOwned;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9967_recIdents;
                              RAST._IExpr _out4803;
                              DCOMPUTF16._IOwnership _out4804;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4805;
                              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4803, out _out4804, out _out4805);
                              _9965_recursiveGen = _out4803;
                              _9966_recOwned = _out4804;
                              _9967_recIdents = _out4805;
                              RAST._IExpr _out4806;
                              DCOMPUTF16._IOwnership _out4807;
                              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_9965_recursiveGen, (_9943_nativeToType).dtor_value), _9966_recOwned, expectedOwnership, out _out4806, out _out4807);
                              r = _out4806;
                              resultingOwnership = _out4807;
                              readIdents = _9967_recIdents;
                              return ;
                            }
                          }
                        }
                      } else if (_source407.is_Nullable) {
                        DAST._IType _9968___mcc_h2106 = _source407.dtor_Nullable_a0;
                      } else if (_source407.is_Tuple) {
                        Dafny.ISequence<DAST._IType> _9969___mcc_h2108 = _source407.dtor_Tuple_a0;
                      } else if (_source407.is_Array) {
                        DAST._IType _9970___mcc_h2110 = _source407.dtor_element;
                        BigInteger _9971___mcc_h2111 = _source407.dtor_dims;
                      } else if (_source407.is_Seq) {
                        DAST._IType _9972___mcc_h2114 = _source407.dtor_element;
                      } else if (_source407.is_Set) {
                        DAST._IType _9973___mcc_h2116 = _source407.dtor_element;
                      } else if (_source407.is_Multiset) {
                        DAST._IType _9974___mcc_h2118 = _source407.dtor_element;
                      } else if (_source407.is_Map) {
                        DAST._IType _9975___mcc_h2120 = _source407.dtor_key;
                        DAST._IType _9976___mcc_h2121 = _source407.dtor_value;
                      } else if (_source407.is_SetBuilder) {
                        DAST._IType _9977___mcc_h2124 = _source407.dtor_element;
                      } else if (_source407.is_MapBuilder) {
                        DAST._IType _9978___mcc_h2126 = _source407.dtor_key;
                        DAST._IType _9979___mcc_h2127 = _source407.dtor_value;
                      } else if (_source407.is_Arrow) {
                        Dafny.ISequence<DAST._IType> _9980___mcc_h2130 = _source407.dtor_args;
                        DAST._IType _9981___mcc_h2131 = _source407.dtor_result;
                      } else if (_source407.is_Primitive) {
                        DAST._IPrimitive _9982___mcc_h2134 = _source407.dtor_Primitive_a0;
                      } else if (_source407.is_Passthrough) {
                        Dafny.ISequence<Dafny.Rune> _9983___mcc_h2136 = _source407.dtor_Passthrough_a0;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _9984___mcc_h2138 = _source407.dtor_TypeArg_a0;
                      }
                      if (object.Equals(_7821_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _9985_recursiveGen;
                        DCOMPUTF16._IOwnership _9986_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9987_recIdents;
                        RAST._IExpr _out4808;
                        DCOMPUTF16._IOwnership _out4809;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4810;
                        DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4808, out _out4809, out _out4810);
                        _9985_recursiveGen = _out4808;
                        _9986_recOwned = _out4809;
                        _9987_recIdents = _out4810;
                        RAST._IExpr _out4811;
                        DCOMPUTF16._IOwnership _out4812;
                        DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_9985_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_9943_nativeToType).dtor_value), _9986_recOwned, expectedOwnership, out _out4811, out _out4812);
                        r = _out4811;
                        resultingOwnership = _out4812;
                        readIdents = _9987_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out4813;
                    DCOMPUTF16._IOwnership _out4814;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4815;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7820_expr, _7821_fromTpe, _9942_b), _9942_b, _7822_toTpe), selfIdent, env, expectedOwnership, out _out4813, out _out4814, out _out4815);
                    r = _out4813;
                    resultingOwnership = _out4814;
                    readIdents = _out4815;
                  }
                }
              }
            } else if (_source404.is_Nullable) {
              DAST._IType _9988___mcc_h1042 = _source404.dtor_Nullable_a0;
              {
                RAST._IExpr _9989_recursiveGen;
                DCOMPUTF16._IOwnership _9990_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9991_recIdents;
                RAST._IExpr _out4816;
                DCOMPUTF16._IOwnership _out4817;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4818;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4816, out _out4817, out _out4818);
                _9989_recursiveGen = _out4816;
                _9990_recOwned = _out4817;
                _9991_recIdents = _out4818;
                r = _9989_recursiveGen;
                if (object.Equals(_9990_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out4819;
                DCOMPUTF16._IOwnership _out4820;
                DCOMPUTF16.COMP.FromOwnership(r, _9990_recOwned, expectedOwnership, out _out4819, out _out4820);
                r = _out4819;
                resultingOwnership = _out4820;
                readIdents = _9991_recIdents;
              }
            } else if (_source404.is_Tuple) {
              Dafny.ISequence<DAST._IType> _9992___mcc_h1044 = _source404.dtor_Tuple_a0;
              {
                RAST._IExpr _9993_recursiveGen;
                DCOMPUTF16._IOwnership _9994_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9995_recIdents;
                RAST._IExpr _out4821;
                DCOMPUTF16._IOwnership _out4822;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4823;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4821, out _out4822, out _out4823);
                _9993_recursiveGen = _out4821;
                _9994_recOwned = _out4822;
                _9995_recIdents = _out4823;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9993_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4824;
                DCOMPUTF16._IOwnership _out4825;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4824, out _out4825);
                r = _out4824;
                resultingOwnership = _out4825;
                readIdents = _9995_recIdents;
              }
            } else if (_source404.is_Array) {
              DAST._IType _9996___mcc_h1046 = _source404.dtor_element;
              BigInteger _9997___mcc_h1047 = _source404.dtor_dims;
              {
                RAST._IExpr _9998_recursiveGen;
                DCOMPUTF16._IOwnership _9999_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10000_recIdents;
                RAST._IExpr _out4826;
                DCOMPUTF16._IOwnership _out4827;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4828;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4826, out _out4827, out _out4828);
                _9998_recursiveGen = _out4826;
                _9999_recOwned = _out4827;
                _10000_recIdents = _out4828;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9998_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4829;
                DCOMPUTF16._IOwnership _out4830;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4829, out _out4830);
                r = _out4829;
                resultingOwnership = _out4830;
                readIdents = _10000_recIdents;
              }
            } else if (_source404.is_Seq) {
              DAST._IType _10001___mcc_h1050 = _source404.dtor_element;
              {
                RAST._IExpr _10002_recursiveGen;
                DCOMPUTF16._IOwnership _10003_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10004_recIdents;
                RAST._IExpr _out4831;
                DCOMPUTF16._IOwnership _out4832;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4833;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4831, out _out4832, out _out4833);
                _10002_recursiveGen = _out4831;
                _10003_recOwned = _out4832;
                _10004_recIdents = _out4833;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10002_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4834;
                DCOMPUTF16._IOwnership _out4835;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4834, out _out4835);
                r = _out4834;
                resultingOwnership = _out4835;
                readIdents = _10004_recIdents;
              }
            } else if (_source404.is_Set) {
              DAST._IType _10005___mcc_h1052 = _source404.dtor_element;
              {
                RAST._IExpr _10006_recursiveGen;
                DCOMPUTF16._IOwnership _10007_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10008_recIdents;
                RAST._IExpr _out4836;
                DCOMPUTF16._IOwnership _out4837;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4838;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4836, out _out4837, out _out4838);
                _10006_recursiveGen = _out4836;
                _10007_recOwned = _out4837;
                _10008_recIdents = _out4838;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10006_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4839;
                DCOMPUTF16._IOwnership _out4840;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4839, out _out4840);
                r = _out4839;
                resultingOwnership = _out4840;
                readIdents = _10008_recIdents;
              }
            } else if (_source404.is_Multiset) {
              DAST._IType _10009___mcc_h1054 = _source404.dtor_element;
              {
                RAST._IExpr _10010_recursiveGen;
                DCOMPUTF16._IOwnership _10011_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10012_recIdents;
                RAST._IExpr _out4841;
                DCOMPUTF16._IOwnership _out4842;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4843;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4841, out _out4842, out _out4843);
                _10010_recursiveGen = _out4841;
                _10011_recOwned = _out4842;
                _10012_recIdents = _out4843;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10010_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4844;
                DCOMPUTF16._IOwnership _out4845;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4844, out _out4845);
                r = _out4844;
                resultingOwnership = _out4845;
                readIdents = _10012_recIdents;
              }
            } else if (_source404.is_Map) {
              DAST._IType _10013___mcc_h1056 = _source404.dtor_key;
              DAST._IType _10014___mcc_h1057 = _source404.dtor_value;
              {
                RAST._IExpr _10015_recursiveGen;
                DCOMPUTF16._IOwnership _10016_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10017_recIdents;
                RAST._IExpr _out4846;
                DCOMPUTF16._IOwnership _out4847;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4848;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4846, out _out4847, out _out4848);
                _10015_recursiveGen = _out4846;
                _10016_recOwned = _out4847;
                _10017_recIdents = _out4848;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10015_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4849;
                DCOMPUTF16._IOwnership _out4850;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4849, out _out4850);
                r = _out4849;
                resultingOwnership = _out4850;
                readIdents = _10017_recIdents;
              }
            } else if (_source404.is_SetBuilder) {
              DAST._IType _10018___mcc_h1060 = _source404.dtor_element;
              {
                RAST._IExpr _10019_recursiveGen;
                DCOMPUTF16._IOwnership _10020_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10021_recIdents;
                RAST._IExpr _out4851;
                DCOMPUTF16._IOwnership _out4852;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4853;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4851, out _out4852, out _out4853);
                _10019_recursiveGen = _out4851;
                _10020_recOwned = _out4852;
                _10021_recIdents = _out4853;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10019_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4854;
                DCOMPUTF16._IOwnership _out4855;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4854, out _out4855);
                r = _out4854;
                resultingOwnership = _out4855;
                readIdents = _10021_recIdents;
              }
            } else if (_source404.is_MapBuilder) {
              DAST._IType _10022___mcc_h1062 = _source404.dtor_key;
              DAST._IType _10023___mcc_h1063 = _source404.dtor_value;
              {
                RAST._IExpr _10024_recursiveGen;
                DCOMPUTF16._IOwnership _10025_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10026_recIdents;
                RAST._IExpr _out4856;
                DCOMPUTF16._IOwnership _out4857;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4858;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4856, out _out4857, out _out4858);
                _10024_recursiveGen = _out4856;
                _10025_recOwned = _out4857;
                _10026_recIdents = _out4858;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10024_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4859;
                DCOMPUTF16._IOwnership _out4860;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4859, out _out4860);
                r = _out4859;
                resultingOwnership = _out4860;
                readIdents = _10026_recIdents;
              }
            } else if (_source404.is_Arrow) {
              Dafny.ISequence<DAST._IType> _10027___mcc_h1066 = _source404.dtor_args;
              DAST._IType _10028___mcc_h1067 = _source404.dtor_result;
              {
                RAST._IExpr _10029_recursiveGen;
                DCOMPUTF16._IOwnership _10030_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10031_recIdents;
                RAST._IExpr _out4861;
                DCOMPUTF16._IOwnership _out4862;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4863;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4861, out _out4862, out _out4863);
                _10029_recursiveGen = _out4861;
                _10030_recOwned = _out4862;
                _10031_recIdents = _out4863;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10029_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4864;
                DCOMPUTF16._IOwnership _out4865;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4864, out _out4865);
                r = _out4864;
                resultingOwnership = _out4865;
                readIdents = _10031_recIdents;
              }
            } else if (_source404.is_Primitive) {
              DAST._IPrimitive _10032___mcc_h1070 = _source404.dtor_Primitive_a0;
              {
                RAST._IExpr _10033_recursiveGen;
                DCOMPUTF16._IOwnership _10034_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10035_recIdents;
                RAST._IExpr _out4866;
                DCOMPUTF16._IOwnership _out4867;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4868;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4866, out _out4867, out _out4868);
                _10033_recursiveGen = _out4866;
                _10034_recOwned = _out4867;
                _10035_recIdents = _out4868;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10033_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4869;
                DCOMPUTF16._IOwnership _out4870;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4869, out _out4870);
                r = _out4869;
                resultingOwnership = _out4870;
                readIdents = _10035_recIdents;
              }
            } else if (_source404.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _10036___mcc_h1072 = _source404.dtor_Passthrough_a0;
              {
                RAST._IExpr _10037_recursiveGen;
                DCOMPUTF16._IOwnership _10038_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10039_recIdents;
                RAST._IExpr _out4871;
                DCOMPUTF16._IOwnership _out4872;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4873;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4871, out _out4872, out _out4873);
                _10037_recursiveGen = _out4871;
                _10038_recOwned = _out4872;
                _10039_recIdents = _out4873;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10037_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4874;
                DCOMPUTF16._IOwnership _out4875;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4874, out _out4875);
                r = _out4874;
                resultingOwnership = _out4875;
                readIdents = _10039_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _10040___mcc_h1074 = _source404.dtor_TypeArg_a0;
              {
                RAST._IExpr _10041_recursiveGen;
                DCOMPUTF16._IOwnership _10042_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10043_recIdents;
                RAST._IExpr _out4876;
                DCOMPUTF16._IOwnership _out4877;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4878;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4876, out _out4877, out _out4878);
                _10041_recursiveGen = _out4876;
                _10042_recOwned = _out4877;
                _10043_recIdents = _out4878;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10041_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4879;
                DCOMPUTF16._IOwnership _out4880;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4879, out _out4880);
                r = _out4879;
                resultingOwnership = _out4880;
                readIdents = _10043_recIdents;
              }
            }
          } else {
            DAST._IType _source409 = _7827___mcc_h1;
            if (_source409.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10044___mcc_h1076 = _source409.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _10045___mcc_h1077 = _source409.dtor_typeArgs;
              DAST._IResolvedType _10046___mcc_h1078 = _source409.dtor_resolved;
              DAST._IResolvedType _source410 = _10046___mcc_h1078;
              if (_source410.is_Datatype) {
                DAST._IDatatypeType _10047___mcc_h1082 = _source410.dtor_datatypeType;
                {
                  RAST._IExpr _10048_recursiveGen;
                  DCOMPUTF16._IOwnership _10049_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10050_recIdents;
                  RAST._IExpr _out4881;
                  DCOMPUTF16._IOwnership _out4882;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4883;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4881, out _out4882, out _out4883);
                  _10048_recursiveGen = _out4881;
                  _10049_recOwned = _out4882;
                  _10050_recIdents = _out4883;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10048_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4884;
                  DCOMPUTF16._IOwnership _out4885;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4884, out _out4885);
                  r = _out4884;
                  resultingOwnership = _out4885;
                  readIdents = _10050_recIdents;
                }
              } else if (_source410.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10051___mcc_h1084 = _source410.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _10052___mcc_h1085 = _source410.dtor_attributes;
                {
                  RAST._IExpr _10053_recursiveGen;
                  DCOMPUTF16._IOwnership _10054_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10055_recIdents;
                  RAST._IExpr _out4886;
                  DCOMPUTF16._IOwnership _out4887;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4888;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4886, out _out4887, out _out4888);
                  _10053_recursiveGen = _out4886;
                  _10054_recOwned = _out4887;
                  _10055_recIdents = _out4888;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10053_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4889;
                  DCOMPUTF16._IOwnership _out4890;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4889, out _out4890);
                  r = _out4889;
                  resultingOwnership = _out4890;
                  readIdents = _10055_recIdents;
                }
              } else {
                DAST._IType _10056___mcc_h1088 = _source410.dtor_baseType;
                DAST._INewtypeRange _10057___mcc_h1089 = _source410.dtor_range;
                bool _10058___mcc_h1090 = _source410.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _10059___mcc_h1091 = _source410.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _10060_attributes = _10059___mcc_h1091;
                bool _10061_erase = _10058___mcc_h1090;
                DAST._INewtypeRange _10062_range = _10057___mcc_h1089;
                DAST._IType _10063_b = _10056___mcc_h1088;
                {
                  Std.Wrappers._IOption<RAST._IType> _10064_nativeToType;
                  _10064_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_10063_b, _10062_range);
                  if (object.Equals(_7821_fromTpe, _10063_b)) {
                    RAST._IExpr _10065_recursiveGen;
                    DCOMPUTF16._IOwnership _10066_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10067_recIdents;
                    RAST._IExpr _out4891;
                    DCOMPUTF16._IOwnership _out4892;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4893;
                    DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4891, out _out4892, out _out4893);
                    _10065_recursiveGen = _out4891;
                    _10066_recOwned = _out4892;
                    _10067_recIdents = _out4893;
                    Std.Wrappers._IOption<RAST._IType> _source411 = _10064_nativeToType;
                    if (_source411.is_None) {
                      if (_10061_erase) {
                        r = _10065_recursiveGen;
                      } else {
                        RAST._IType _10068_rhsType;
                        RAST._IType _out4894;
                        _out4894 = DCOMPUTF16.COMP.GenType(_7822_toTpe, true, false);
                        _10068_rhsType = _out4894;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_10068_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_10065_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out4895;
                      DCOMPUTF16._IOwnership _out4896;
                      DCOMPUTF16.COMP.FromOwnership(r, _10066_recOwned, expectedOwnership, out _out4895, out _out4896);
                      r = _out4895;
                      resultingOwnership = _out4896;
                    } else {
                      RAST._IType _10069___mcc_h2140 = _source411.dtor_value;
                      RAST._IType _10070_v = _10069___mcc_h2140;
                      r = (((_10065_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_10070_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                      RAST._IExpr _out4897;
                      DCOMPUTF16._IOwnership _out4898;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4897, out _out4898);
                      r = _out4897;
                      resultingOwnership = _out4898;
                    }
                    readIdents = _10067_recIdents;
                  } else {
                    if ((_10064_nativeToType).is_Some) {
                      DAST._IType _source412 = _7821_fromTpe;
                      if (_source412.is_Path) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10071___mcc_h2141 = _source412.dtor_Path_a0;
                        Dafny.ISequence<DAST._IType> _10072___mcc_h2142 = _source412.dtor_typeArgs;
                        DAST._IResolvedType _10073___mcc_h2143 = _source412.dtor_resolved;
                        DAST._IResolvedType _source413 = _10073___mcc_h2143;
                        if (_source413.is_Datatype) {
                          DAST._IDatatypeType _10074___mcc_h2147 = _source413.dtor_datatypeType;
                        } else if (_source413.is_Trait) {
                          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10075___mcc_h2149 = _source413.dtor_path;
                          Dafny.ISequence<DAST._IAttribute> _10076___mcc_h2150 = _source413.dtor_attributes;
                        } else {
                          DAST._IType _10077___mcc_h2153 = _source413.dtor_baseType;
                          DAST._INewtypeRange _10078___mcc_h2154 = _source413.dtor_range;
                          bool _10079___mcc_h2155 = _source413.dtor_erase;
                          Dafny.ISequence<DAST._IAttribute> _10080___mcc_h2156 = _source413.dtor_attributes;
                          Dafny.ISequence<DAST._IAttribute> _10081_attributes0 = _10080___mcc_h2156;
                          bool _10082_erase0 = _10079___mcc_h2155;
                          DAST._INewtypeRange _10083_range0 = _10078___mcc_h2154;
                          DAST._IType _10084_b0 = _10077___mcc_h2153;
                          {
                            Std.Wrappers._IOption<RAST._IType> _10085_nativeFromType;
                            _10085_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_10084_b0, _10083_range0);
                            if ((_10085_nativeFromType).is_Some) {
                              RAST._IExpr _10086_recursiveGen;
                              DCOMPUTF16._IOwnership _10087_recOwned;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10088_recIdents;
                              RAST._IExpr _out4899;
                              DCOMPUTF16._IOwnership _out4900;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4901;
                              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4899, out _out4900, out _out4901);
                              _10086_recursiveGen = _out4899;
                              _10087_recOwned = _out4900;
                              _10088_recIdents = _out4901;
                              RAST._IExpr _out4902;
                              DCOMPUTF16._IOwnership _out4903;
                              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_10086_recursiveGen, (_10064_nativeToType).dtor_value), _10087_recOwned, expectedOwnership, out _out4902, out _out4903);
                              r = _out4902;
                              resultingOwnership = _out4903;
                              readIdents = _10088_recIdents;
                              return ;
                            }
                          }
                        }
                      } else if (_source412.is_Nullable) {
                        DAST._IType _10089___mcc_h2161 = _source412.dtor_Nullable_a0;
                      } else if (_source412.is_Tuple) {
                        Dafny.ISequence<DAST._IType> _10090___mcc_h2163 = _source412.dtor_Tuple_a0;
                      } else if (_source412.is_Array) {
                        DAST._IType _10091___mcc_h2165 = _source412.dtor_element;
                        BigInteger _10092___mcc_h2166 = _source412.dtor_dims;
                      } else if (_source412.is_Seq) {
                        DAST._IType _10093___mcc_h2169 = _source412.dtor_element;
                      } else if (_source412.is_Set) {
                        DAST._IType _10094___mcc_h2171 = _source412.dtor_element;
                      } else if (_source412.is_Multiset) {
                        DAST._IType _10095___mcc_h2173 = _source412.dtor_element;
                      } else if (_source412.is_Map) {
                        DAST._IType _10096___mcc_h2175 = _source412.dtor_key;
                        DAST._IType _10097___mcc_h2176 = _source412.dtor_value;
                      } else if (_source412.is_SetBuilder) {
                        DAST._IType _10098___mcc_h2179 = _source412.dtor_element;
                      } else if (_source412.is_MapBuilder) {
                        DAST._IType _10099___mcc_h2181 = _source412.dtor_key;
                        DAST._IType _10100___mcc_h2182 = _source412.dtor_value;
                      } else if (_source412.is_Arrow) {
                        Dafny.ISequence<DAST._IType> _10101___mcc_h2185 = _source412.dtor_args;
                        DAST._IType _10102___mcc_h2186 = _source412.dtor_result;
                      } else if (_source412.is_Primitive) {
                        DAST._IPrimitive _10103___mcc_h2189 = _source412.dtor_Primitive_a0;
                      } else if (_source412.is_Passthrough) {
                        Dafny.ISequence<Dafny.Rune> _10104___mcc_h2191 = _source412.dtor_Passthrough_a0;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _10105___mcc_h2193 = _source412.dtor_TypeArg_a0;
                      }
                      if (object.Equals(_7821_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _10106_recursiveGen;
                        DCOMPUTF16._IOwnership _10107_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10108_recIdents;
                        RAST._IExpr _out4904;
                        DCOMPUTF16._IOwnership _out4905;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4906;
                        DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4904, out _out4905, out _out4906);
                        _10106_recursiveGen = _out4904;
                        _10107_recOwned = _out4905;
                        _10108_recIdents = _out4906;
                        RAST._IExpr _out4907;
                        DCOMPUTF16._IOwnership _out4908;
                        DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_10106_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_10064_nativeToType).dtor_value), _10107_recOwned, expectedOwnership, out _out4907, out _out4908);
                        r = _out4907;
                        resultingOwnership = _out4908;
                        readIdents = _10108_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out4909;
                    DCOMPUTF16._IOwnership _out4910;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4911;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7820_expr, _7821_fromTpe, _10063_b), _10063_b, _7822_toTpe), selfIdent, env, expectedOwnership, out _out4909, out _out4910, out _out4911);
                    r = _out4909;
                    resultingOwnership = _out4910;
                    readIdents = _out4911;
                  }
                }
              }
            } else if (_source409.is_Nullable) {
              DAST._IType _10109___mcc_h1096 = _source409.dtor_Nullable_a0;
              {
                RAST._IExpr _10110_recursiveGen;
                DCOMPUTF16._IOwnership _10111_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10112_recIdents;
                RAST._IExpr _out4912;
                DCOMPUTF16._IOwnership _out4913;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4914;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4912, out _out4913, out _out4914);
                _10110_recursiveGen = _out4912;
                _10111_recOwned = _out4913;
                _10112_recIdents = _out4914;
                r = _10110_recursiveGen;
                if (object.Equals(_10111_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out4915;
                DCOMPUTF16._IOwnership _out4916;
                DCOMPUTF16.COMP.FromOwnership(r, _10111_recOwned, expectedOwnership, out _out4915, out _out4916);
                r = _out4915;
                resultingOwnership = _out4916;
                readIdents = _10112_recIdents;
              }
            } else if (_source409.is_Tuple) {
              Dafny.ISequence<DAST._IType> _10113___mcc_h1098 = _source409.dtor_Tuple_a0;
              {
                RAST._IExpr _10114_recursiveGen;
                DCOMPUTF16._IOwnership _10115_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10116_recIdents;
                RAST._IExpr _out4917;
                DCOMPUTF16._IOwnership _out4918;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4919;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4917, out _out4918, out _out4919);
                _10114_recursiveGen = _out4917;
                _10115_recOwned = _out4918;
                _10116_recIdents = _out4919;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10114_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4920;
                DCOMPUTF16._IOwnership _out4921;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4920, out _out4921);
                r = _out4920;
                resultingOwnership = _out4921;
                readIdents = _10116_recIdents;
              }
            } else if (_source409.is_Array) {
              DAST._IType _10117___mcc_h1100 = _source409.dtor_element;
              BigInteger _10118___mcc_h1101 = _source409.dtor_dims;
              {
                RAST._IExpr _10119_recursiveGen;
                DCOMPUTF16._IOwnership _10120_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10121_recIdents;
                RAST._IExpr _out4922;
                DCOMPUTF16._IOwnership _out4923;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4924;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4922, out _out4923, out _out4924);
                _10119_recursiveGen = _out4922;
                _10120_recOwned = _out4923;
                _10121_recIdents = _out4924;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10119_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4925;
                DCOMPUTF16._IOwnership _out4926;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4925, out _out4926);
                r = _out4925;
                resultingOwnership = _out4926;
                readIdents = _10121_recIdents;
              }
            } else if (_source409.is_Seq) {
              DAST._IType _10122___mcc_h1104 = _source409.dtor_element;
              {
                RAST._IExpr _10123_recursiveGen;
                DCOMPUTF16._IOwnership _10124_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10125_recIdents;
                RAST._IExpr _out4927;
                DCOMPUTF16._IOwnership _out4928;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4929;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4927, out _out4928, out _out4929);
                _10123_recursiveGen = _out4927;
                _10124_recOwned = _out4928;
                _10125_recIdents = _out4929;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10123_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4930;
                DCOMPUTF16._IOwnership _out4931;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4930, out _out4931);
                r = _out4930;
                resultingOwnership = _out4931;
                readIdents = _10125_recIdents;
              }
            } else if (_source409.is_Set) {
              DAST._IType _10126___mcc_h1106 = _source409.dtor_element;
              {
                RAST._IExpr _10127_recursiveGen;
                DCOMPUTF16._IOwnership _10128_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10129_recIdents;
                RAST._IExpr _out4932;
                DCOMPUTF16._IOwnership _out4933;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4934;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4932, out _out4933, out _out4934);
                _10127_recursiveGen = _out4932;
                _10128_recOwned = _out4933;
                _10129_recIdents = _out4934;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10127_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4935;
                DCOMPUTF16._IOwnership _out4936;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4935, out _out4936);
                r = _out4935;
                resultingOwnership = _out4936;
                readIdents = _10129_recIdents;
              }
            } else if (_source409.is_Multiset) {
              DAST._IType _10130___mcc_h1108 = _source409.dtor_element;
              {
                RAST._IExpr _10131_recursiveGen;
                DCOMPUTF16._IOwnership _10132_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10133_recIdents;
                RAST._IExpr _out4937;
                DCOMPUTF16._IOwnership _out4938;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4939;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4937, out _out4938, out _out4939);
                _10131_recursiveGen = _out4937;
                _10132_recOwned = _out4938;
                _10133_recIdents = _out4939;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10131_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4940;
                DCOMPUTF16._IOwnership _out4941;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4940, out _out4941);
                r = _out4940;
                resultingOwnership = _out4941;
                readIdents = _10133_recIdents;
              }
            } else if (_source409.is_Map) {
              DAST._IType _10134___mcc_h1110 = _source409.dtor_key;
              DAST._IType _10135___mcc_h1111 = _source409.dtor_value;
              {
                RAST._IExpr _10136_recursiveGen;
                DCOMPUTF16._IOwnership _10137_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10138_recIdents;
                RAST._IExpr _out4942;
                DCOMPUTF16._IOwnership _out4943;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4944;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4942, out _out4943, out _out4944);
                _10136_recursiveGen = _out4942;
                _10137_recOwned = _out4943;
                _10138_recIdents = _out4944;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10136_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4945;
                DCOMPUTF16._IOwnership _out4946;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4945, out _out4946);
                r = _out4945;
                resultingOwnership = _out4946;
                readIdents = _10138_recIdents;
              }
            } else if (_source409.is_SetBuilder) {
              DAST._IType _10139___mcc_h1114 = _source409.dtor_element;
              {
                RAST._IExpr _10140_recursiveGen;
                DCOMPUTF16._IOwnership _10141_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10142_recIdents;
                RAST._IExpr _out4947;
                DCOMPUTF16._IOwnership _out4948;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4949;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4947, out _out4948, out _out4949);
                _10140_recursiveGen = _out4947;
                _10141_recOwned = _out4948;
                _10142_recIdents = _out4949;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10140_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4950;
                DCOMPUTF16._IOwnership _out4951;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4950, out _out4951);
                r = _out4950;
                resultingOwnership = _out4951;
                readIdents = _10142_recIdents;
              }
            } else if (_source409.is_MapBuilder) {
              DAST._IType _10143___mcc_h1116 = _source409.dtor_key;
              DAST._IType _10144___mcc_h1117 = _source409.dtor_value;
              {
                RAST._IExpr _10145_recursiveGen;
                DCOMPUTF16._IOwnership _10146_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10147_recIdents;
                RAST._IExpr _out4952;
                DCOMPUTF16._IOwnership _out4953;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4954;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4952, out _out4953, out _out4954);
                _10145_recursiveGen = _out4952;
                _10146_recOwned = _out4953;
                _10147_recIdents = _out4954;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10145_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4955;
                DCOMPUTF16._IOwnership _out4956;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4955, out _out4956);
                r = _out4955;
                resultingOwnership = _out4956;
                readIdents = _10147_recIdents;
              }
            } else if (_source409.is_Arrow) {
              Dafny.ISequence<DAST._IType> _10148___mcc_h1120 = _source409.dtor_args;
              DAST._IType _10149___mcc_h1121 = _source409.dtor_result;
              {
                RAST._IExpr _10150_recursiveGen;
                DCOMPUTF16._IOwnership _10151_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10152_recIdents;
                RAST._IExpr _out4957;
                DCOMPUTF16._IOwnership _out4958;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4959;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4957, out _out4958, out _out4959);
                _10150_recursiveGen = _out4957;
                _10151_recOwned = _out4958;
                _10152_recIdents = _out4959;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10150_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4960;
                DCOMPUTF16._IOwnership _out4961;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4960, out _out4961);
                r = _out4960;
                resultingOwnership = _out4961;
                readIdents = _10152_recIdents;
              }
            } else if (_source409.is_Primitive) {
              DAST._IPrimitive _10153___mcc_h1124 = _source409.dtor_Primitive_a0;
              DAST._IPrimitive _source414 = _10153___mcc_h1124;
              if (_source414.is_Int) {
                {
                  RAST._IType _10154_rhsType;
                  RAST._IType _out4962;
                  _out4962 = DCOMPUTF16.COMP.GenType(_7821_fromTpe, true, false);
                  _10154_rhsType = _out4962;
                  RAST._IExpr _10155_recursiveGen;
                  DCOMPUTF16._IOwnership _10156___v87;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10157_recIdents;
                  RAST._IExpr _out4963;
                  DCOMPUTF16._IOwnership _out4964;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4965;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4963, out _out4964, out _out4965);
                  _10155_recursiveGen = _out4963;
                  _10156___v87 = _out4964;
                  _10157_recIdents = _out4965;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyInt{data: ::dafny_runtime::BigInt::from("), (_10155_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as u32)}")));
                  RAST._IExpr _out4966;
                  DCOMPUTF16._IOwnership _out4967;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4966, out _out4967);
                  r = _out4966;
                  resultingOwnership = _out4967;
                  readIdents = _10157_recIdents;
                }
              } else if (_source414.is_Real) {
                {
                  RAST._IExpr _10158_recursiveGen;
                  DCOMPUTF16._IOwnership _10159_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10160_recIdents;
                  RAST._IExpr _out4968;
                  DCOMPUTF16._IOwnership _out4969;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4970;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4968, out _out4969, out _out4970);
                  _10158_recursiveGen = _out4968;
                  _10159_recOwned = _out4969;
                  _10160_recIdents = _out4970;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10158_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4971;
                  DCOMPUTF16._IOwnership _out4972;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4971, out _out4972);
                  r = _out4971;
                  resultingOwnership = _out4972;
                  readIdents = _10160_recIdents;
                }
              } else if (_source414.is_String) {
                {
                  RAST._IExpr _10161_recursiveGen;
                  DCOMPUTF16._IOwnership _10162_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10163_recIdents;
                  RAST._IExpr _out4973;
                  DCOMPUTF16._IOwnership _out4974;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4975;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4973, out _out4974, out _out4975);
                  _10161_recursiveGen = _out4973;
                  _10162_recOwned = _out4974;
                  _10163_recIdents = _out4975;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10161_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4976;
                  DCOMPUTF16._IOwnership _out4977;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4976, out _out4977);
                  r = _out4976;
                  resultingOwnership = _out4977;
                  readIdents = _10163_recIdents;
                }
              } else if (_source414.is_Bool) {
                {
                  RAST._IExpr _10164_recursiveGen;
                  DCOMPUTF16._IOwnership _10165_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10166_recIdents;
                  RAST._IExpr _out4978;
                  DCOMPUTF16._IOwnership _out4979;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4980;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4978, out _out4979, out _out4980);
                  _10164_recursiveGen = _out4978;
                  _10165_recOwned = _out4979;
                  _10166_recIdents = _out4980;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10164_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4981;
                  DCOMPUTF16._IOwnership _out4982;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4981, out _out4982);
                  r = _out4981;
                  resultingOwnership = _out4982;
                  readIdents = _10166_recIdents;
                }
              } else {
                {
                  RAST._IExpr _10167_recursiveGen;
                  DCOMPUTF16._IOwnership _10168_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10169_recIdents;
                  RAST._IExpr _out4983;
                  DCOMPUTF16._IOwnership _out4984;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4985;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4983, out _out4984, out _out4985);
                  _10167_recursiveGen = _out4983;
                  _10168_recOwned = _out4984;
                  _10169_recIdents = _out4985;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10167_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4986;
                  DCOMPUTF16._IOwnership _out4987;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4986, out _out4987);
                  r = _out4986;
                  resultingOwnership = _out4987;
                  readIdents = _10169_recIdents;
                }
              }
            } else if (_source409.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _10170___mcc_h1126 = _source409.dtor_Passthrough_a0;
              {
                RAST._IExpr _10171_recursiveGen;
                DCOMPUTF16._IOwnership _10172_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10173_recIdents;
                RAST._IExpr _out4988;
                DCOMPUTF16._IOwnership _out4989;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4990;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4988, out _out4989, out _out4990);
                _10171_recursiveGen = _out4988;
                _10172_recOwned = _out4989;
                _10173_recIdents = _out4990;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10171_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4991;
                DCOMPUTF16._IOwnership _out4992;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4991, out _out4992);
                r = _out4991;
                resultingOwnership = _out4992;
                readIdents = _10173_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _10174___mcc_h1128 = _source409.dtor_TypeArg_a0;
              {
                RAST._IExpr _10175_recursiveGen;
                DCOMPUTF16._IOwnership _10176_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10177_recIdents;
                RAST._IExpr _out4993;
                DCOMPUTF16._IOwnership _out4994;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4995;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4993, out _out4994, out _out4995);
                _10175_recursiveGen = _out4993;
                _10176_recOwned = _out4994;
                _10177_recIdents = _out4995;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10175_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4996;
                DCOMPUTF16._IOwnership _out4997;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4996, out _out4997);
                r = _out4996;
                resultingOwnership = _out4997;
                readIdents = _10177_recIdents;
              }
            }
          }
        } else if (_source308.is_Passthrough) {
          Dafny.ISequence<Dafny.Rune> _10178___mcc_h1130 = _source308.dtor_Passthrough_a0;
          DAST._IType _source415 = _7827___mcc_h1;
          if (_source415.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10179___mcc_h1134 = _source415.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _10180___mcc_h1135 = _source415.dtor_typeArgs;
            DAST._IResolvedType _10181___mcc_h1136 = _source415.dtor_resolved;
            DAST._IResolvedType _source416 = _10181___mcc_h1136;
            if (_source416.is_Datatype) {
              DAST._IDatatypeType _10182___mcc_h1140 = _source416.dtor_datatypeType;
              {
                RAST._IExpr _10183_recursiveGen;
                DCOMPUTF16._IOwnership _10184_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10185_recIdents;
                RAST._IExpr _out4998;
                DCOMPUTF16._IOwnership _out4999;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5000;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out4998, out _out4999, out _out5000);
                _10183_recursiveGen = _out4998;
                _10184_recOwned = _out4999;
                _10185_recIdents = _out5000;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10183_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out5001;
                DCOMPUTF16._IOwnership _out5002;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5001, out _out5002);
                r = _out5001;
                resultingOwnership = _out5002;
                readIdents = _10185_recIdents;
              }
            } else if (_source416.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10186___mcc_h1142 = _source416.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _10187___mcc_h1143 = _source416.dtor_attributes;
              {
                RAST._IExpr _10188_recursiveGen;
                DCOMPUTF16._IOwnership _10189_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10190_recIdents;
                RAST._IExpr _out5003;
                DCOMPUTF16._IOwnership _out5004;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5005;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out5003, out _out5004, out _out5005);
                _10188_recursiveGen = _out5003;
                _10189_recOwned = _out5004;
                _10190_recIdents = _out5005;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10188_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out5006;
                DCOMPUTF16._IOwnership _out5007;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5006, out _out5007);
                r = _out5006;
                resultingOwnership = _out5007;
                readIdents = _10190_recIdents;
              }
            } else {
              DAST._IType _10191___mcc_h1146 = _source416.dtor_baseType;
              DAST._INewtypeRange _10192___mcc_h1147 = _source416.dtor_range;
              bool _10193___mcc_h1148 = _source416.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _10194___mcc_h1149 = _source416.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _10195_attributes = _10194___mcc_h1149;
              bool _10196_erase = _10193___mcc_h1148;
              DAST._INewtypeRange _10197_range = _10192___mcc_h1147;
              DAST._IType _10198_b = _10191___mcc_h1146;
              {
                Std.Wrappers._IOption<RAST._IType> _10199_nativeToType;
                _10199_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_10198_b, _10197_range);
                if (object.Equals(_7821_fromTpe, _10198_b)) {
                  RAST._IExpr _10200_recursiveGen;
                  DCOMPUTF16._IOwnership _10201_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10202_recIdents;
                  RAST._IExpr _out5008;
                  DCOMPUTF16._IOwnership _out5009;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5010;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out5008, out _out5009, out _out5010);
                  _10200_recursiveGen = _out5008;
                  _10201_recOwned = _out5009;
                  _10202_recIdents = _out5010;
                  Std.Wrappers._IOption<RAST._IType> _source417 = _10199_nativeToType;
                  if (_source417.is_None) {
                    if (_10196_erase) {
                      r = _10200_recursiveGen;
                    } else {
                      RAST._IType _10203_rhsType;
                      RAST._IType _out5011;
                      _out5011 = DCOMPUTF16.COMP.GenType(_7822_toTpe, true, false);
                      _10203_rhsType = _out5011;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_10203_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_10200_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out5012;
                    DCOMPUTF16._IOwnership _out5013;
                    DCOMPUTF16.COMP.FromOwnership(r, _10201_recOwned, expectedOwnership, out _out5012, out _out5013);
                    r = _out5012;
                    resultingOwnership = _out5013;
                  } else {
                    RAST._IType _10204___mcc_h2195 = _source417.dtor_value;
                    RAST._IType _10205_v = _10204___mcc_h2195;
                    r = (((_10200_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_10205_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out5014;
                    DCOMPUTF16._IOwnership _out5015;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5014, out _out5015);
                    r = _out5014;
                    resultingOwnership = _out5015;
                  }
                  readIdents = _10202_recIdents;
                } else {
                  if ((_10199_nativeToType).is_Some) {
                    DAST._IType _source418 = _7821_fromTpe;
                    if (_source418.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10206___mcc_h2196 = _source418.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _10207___mcc_h2197 = _source418.dtor_typeArgs;
                      DAST._IResolvedType _10208___mcc_h2198 = _source418.dtor_resolved;
                      DAST._IResolvedType _source419 = _10208___mcc_h2198;
                      if (_source419.is_Datatype) {
                        DAST._IDatatypeType _10209___mcc_h2202 = _source419.dtor_datatypeType;
                      } else if (_source419.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10210___mcc_h2204 = _source419.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _10211___mcc_h2205 = _source419.dtor_attributes;
                      } else {
                        DAST._IType _10212___mcc_h2208 = _source419.dtor_baseType;
                        DAST._INewtypeRange _10213___mcc_h2209 = _source419.dtor_range;
                        bool _10214___mcc_h2210 = _source419.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _10215___mcc_h2211 = _source419.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _10216_attributes0 = _10215___mcc_h2211;
                        bool _10217_erase0 = _10214___mcc_h2210;
                        DAST._INewtypeRange _10218_range0 = _10213___mcc_h2209;
                        DAST._IType _10219_b0 = _10212___mcc_h2208;
                        {
                          Std.Wrappers._IOption<RAST._IType> _10220_nativeFromType;
                          _10220_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_10219_b0, _10218_range0);
                          if ((_10220_nativeFromType).is_Some) {
                            RAST._IExpr _10221_recursiveGen;
                            DCOMPUTF16._IOwnership _10222_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10223_recIdents;
                            RAST._IExpr _out5016;
                            DCOMPUTF16._IOwnership _out5017;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5018;
                            DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out5016, out _out5017, out _out5018);
                            _10221_recursiveGen = _out5016;
                            _10222_recOwned = _out5017;
                            _10223_recIdents = _out5018;
                            RAST._IExpr _out5019;
                            DCOMPUTF16._IOwnership _out5020;
                            DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_10221_recursiveGen, (_10199_nativeToType).dtor_value), _10222_recOwned, expectedOwnership, out _out5019, out _out5020);
                            r = _out5019;
                            resultingOwnership = _out5020;
                            readIdents = _10223_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source418.is_Nullable) {
                      DAST._IType _10224___mcc_h2216 = _source418.dtor_Nullable_a0;
                    } else if (_source418.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _10225___mcc_h2218 = _source418.dtor_Tuple_a0;
                    } else if (_source418.is_Array) {
                      DAST._IType _10226___mcc_h2220 = _source418.dtor_element;
                      BigInteger _10227___mcc_h2221 = _source418.dtor_dims;
                    } else if (_source418.is_Seq) {
                      DAST._IType _10228___mcc_h2224 = _source418.dtor_element;
                    } else if (_source418.is_Set) {
                      DAST._IType _10229___mcc_h2226 = _source418.dtor_element;
                    } else if (_source418.is_Multiset) {
                      DAST._IType _10230___mcc_h2228 = _source418.dtor_element;
                    } else if (_source418.is_Map) {
                      DAST._IType _10231___mcc_h2230 = _source418.dtor_key;
                      DAST._IType _10232___mcc_h2231 = _source418.dtor_value;
                    } else if (_source418.is_SetBuilder) {
                      DAST._IType _10233___mcc_h2234 = _source418.dtor_element;
                    } else if (_source418.is_MapBuilder) {
                      DAST._IType _10234___mcc_h2236 = _source418.dtor_key;
                      DAST._IType _10235___mcc_h2237 = _source418.dtor_value;
                    } else if (_source418.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _10236___mcc_h2240 = _source418.dtor_args;
                      DAST._IType _10237___mcc_h2241 = _source418.dtor_result;
                    } else if (_source418.is_Primitive) {
                      DAST._IPrimitive _10238___mcc_h2244 = _source418.dtor_Primitive_a0;
                    } else if (_source418.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _10239___mcc_h2246 = _source418.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _10240___mcc_h2248 = _source418.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_7821_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _10241_recursiveGen;
                      DCOMPUTF16._IOwnership _10242_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10243_recIdents;
                      RAST._IExpr _out5021;
                      DCOMPUTF16._IOwnership _out5022;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5023;
                      DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out5021, out _out5022, out _out5023);
                      _10241_recursiveGen = _out5021;
                      _10242_recOwned = _out5022;
                      _10243_recIdents = _out5023;
                      RAST._IExpr _out5024;
                      DCOMPUTF16._IOwnership _out5025;
                      DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_10241_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_10199_nativeToType).dtor_value), _10242_recOwned, expectedOwnership, out _out5024, out _out5025);
                      r = _out5024;
                      resultingOwnership = _out5025;
                      readIdents = _10243_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out5026;
                  DCOMPUTF16._IOwnership _out5027;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5028;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7820_expr, _7821_fromTpe, _10198_b), _10198_b, _7822_toTpe), selfIdent, env, expectedOwnership, out _out5026, out _out5027, out _out5028);
                  r = _out5026;
                  resultingOwnership = _out5027;
                  readIdents = _out5028;
                }
              }
            }
          } else if (_source415.is_Nullable) {
            DAST._IType _10244___mcc_h1154 = _source415.dtor_Nullable_a0;
            {
              RAST._IExpr _10245_recursiveGen;
              DCOMPUTF16._IOwnership _10246_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10247_recIdents;
              RAST._IExpr _out5029;
              DCOMPUTF16._IOwnership _out5030;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5031;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out5029, out _out5030, out _out5031);
              _10245_recursiveGen = _out5029;
              _10246_recOwned = _out5030;
              _10247_recIdents = _out5031;
              r = _10245_recursiveGen;
              if (object.Equals(_10246_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out5032;
              DCOMPUTF16._IOwnership _out5033;
              DCOMPUTF16.COMP.FromOwnership(r, _10246_recOwned, expectedOwnership, out _out5032, out _out5033);
              r = _out5032;
              resultingOwnership = _out5033;
              readIdents = _10247_recIdents;
            }
          } else if (_source415.is_Tuple) {
            Dafny.ISequence<DAST._IType> _10248___mcc_h1156 = _source415.dtor_Tuple_a0;
            {
              RAST._IExpr _10249_recursiveGen;
              DCOMPUTF16._IOwnership _10250_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10251_recIdents;
              RAST._IExpr _out5034;
              DCOMPUTF16._IOwnership _out5035;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5036;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out5034, out _out5035, out _out5036);
              _10249_recursiveGen = _out5034;
              _10250_recOwned = _out5035;
              _10251_recIdents = _out5036;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10249_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5037;
              DCOMPUTF16._IOwnership _out5038;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5037, out _out5038);
              r = _out5037;
              resultingOwnership = _out5038;
              readIdents = _10251_recIdents;
            }
          } else if (_source415.is_Array) {
            DAST._IType _10252___mcc_h1158 = _source415.dtor_element;
            BigInteger _10253___mcc_h1159 = _source415.dtor_dims;
            {
              RAST._IExpr _10254_recursiveGen;
              DCOMPUTF16._IOwnership _10255_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10256_recIdents;
              RAST._IExpr _out5039;
              DCOMPUTF16._IOwnership _out5040;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5041;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out5039, out _out5040, out _out5041);
              _10254_recursiveGen = _out5039;
              _10255_recOwned = _out5040;
              _10256_recIdents = _out5041;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10254_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5042;
              DCOMPUTF16._IOwnership _out5043;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5042, out _out5043);
              r = _out5042;
              resultingOwnership = _out5043;
              readIdents = _10256_recIdents;
            }
          } else if (_source415.is_Seq) {
            DAST._IType _10257___mcc_h1162 = _source415.dtor_element;
            {
              RAST._IExpr _10258_recursiveGen;
              DCOMPUTF16._IOwnership _10259_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10260_recIdents;
              RAST._IExpr _out5044;
              DCOMPUTF16._IOwnership _out5045;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5046;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out5044, out _out5045, out _out5046);
              _10258_recursiveGen = _out5044;
              _10259_recOwned = _out5045;
              _10260_recIdents = _out5046;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10258_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5047;
              DCOMPUTF16._IOwnership _out5048;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5047, out _out5048);
              r = _out5047;
              resultingOwnership = _out5048;
              readIdents = _10260_recIdents;
            }
          } else if (_source415.is_Set) {
            DAST._IType _10261___mcc_h1164 = _source415.dtor_element;
            {
              RAST._IExpr _10262_recursiveGen;
              DCOMPUTF16._IOwnership _10263_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10264_recIdents;
              RAST._IExpr _out5049;
              DCOMPUTF16._IOwnership _out5050;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5051;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out5049, out _out5050, out _out5051);
              _10262_recursiveGen = _out5049;
              _10263_recOwned = _out5050;
              _10264_recIdents = _out5051;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10262_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5052;
              DCOMPUTF16._IOwnership _out5053;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5052, out _out5053);
              r = _out5052;
              resultingOwnership = _out5053;
              readIdents = _10264_recIdents;
            }
          } else if (_source415.is_Multiset) {
            DAST._IType _10265___mcc_h1166 = _source415.dtor_element;
            {
              RAST._IExpr _10266_recursiveGen;
              DCOMPUTF16._IOwnership _10267_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10268_recIdents;
              RAST._IExpr _out5054;
              DCOMPUTF16._IOwnership _out5055;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5056;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out5054, out _out5055, out _out5056);
              _10266_recursiveGen = _out5054;
              _10267_recOwned = _out5055;
              _10268_recIdents = _out5056;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10266_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5057;
              DCOMPUTF16._IOwnership _out5058;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5057, out _out5058);
              r = _out5057;
              resultingOwnership = _out5058;
              readIdents = _10268_recIdents;
            }
          } else if (_source415.is_Map) {
            DAST._IType _10269___mcc_h1168 = _source415.dtor_key;
            DAST._IType _10270___mcc_h1169 = _source415.dtor_value;
            {
              RAST._IExpr _10271_recursiveGen;
              DCOMPUTF16._IOwnership _10272_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10273_recIdents;
              RAST._IExpr _out5059;
              DCOMPUTF16._IOwnership _out5060;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5061;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out5059, out _out5060, out _out5061);
              _10271_recursiveGen = _out5059;
              _10272_recOwned = _out5060;
              _10273_recIdents = _out5061;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10271_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5062;
              DCOMPUTF16._IOwnership _out5063;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5062, out _out5063);
              r = _out5062;
              resultingOwnership = _out5063;
              readIdents = _10273_recIdents;
            }
          } else if (_source415.is_SetBuilder) {
            DAST._IType _10274___mcc_h1172 = _source415.dtor_element;
            {
              RAST._IExpr _10275_recursiveGen;
              DCOMPUTF16._IOwnership _10276_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10277_recIdents;
              RAST._IExpr _out5064;
              DCOMPUTF16._IOwnership _out5065;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5066;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out5064, out _out5065, out _out5066);
              _10275_recursiveGen = _out5064;
              _10276_recOwned = _out5065;
              _10277_recIdents = _out5066;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10275_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5067;
              DCOMPUTF16._IOwnership _out5068;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5067, out _out5068);
              r = _out5067;
              resultingOwnership = _out5068;
              readIdents = _10277_recIdents;
            }
          } else if (_source415.is_MapBuilder) {
            DAST._IType _10278___mcc_h1174 = _source415.dtor_key;
            DAST._IType _10279___mcc_h1175 = _source415.dtor_value;
            {
              RAST._IExpr _10280_recursiveGen;
              DCOMPUTF16._IOwnership _10281_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10282_recIdents;
              RAST._IExpr _out5069;
              DCOMPUTF16._IOwnership _out5070;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5071;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out5069, out _out5070, out _out5071);
              _10280_recursiveGen = _out5069;
              _10281_recOwned = _out5070;
              _10282_recIdents = _out5071;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10280_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5072;
              DCOMPUTF16._IOwnership _out5073;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5072, out _out5073);
              r = _out5072;
              resultingOwnership = _out5073;
              readIdents = _10282_recIdents;
            }
          } else if (_source415.is_Arrow) {
            Dafny.ISequence<DAST._IType> _10283___mcc_h1178 = _source415.dtor_args;
            DAST._IType _10284___mcc_h1179 = _source415.dtor_result;
            {
              RAST._IExpr _10285_recursiveGen;
              DCOMPUTF16._IOwnership _10286_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10287_recIdents;
              RAST._IExpr _out5074;
              DCOMPUTF16._IOwnership _out5075;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5076;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out5074, out _out5075, out _out5076);
              _10285_recursiveGen = _out5074;
              _10286_recOwned = _out5075;
              _10287_recIdents = _out5076;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10285_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5077;
              DCOMPUTF16._IOwnership _out5078;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5077, out _out5078);
              r = _out5077;
              resultingOwnership = _out5078;
              readIdents = _10287_recIdents;
            }
          } else if (_source415.is_Primitive) {
            DAST._IPrimitive _10288___mcc_h1182 = _source415.dtor_Primitive_a0;
            DAST._IPrimitive _source420 = _10288___mcc_h1182;
            if (_source420.is_Int) {
              {
                RAST._IType _10289_rhsType;
                RAST._IType _out5079;
                _out5079 = DCOMPUTF16.COMP.GenType(_7821_fromTpe, true, false);
                _10289_rhsType = _out5079;
                RAST._IExpr _10290_recursiveGen;
                DCOMPUTF16._IOwnership _10291___v85;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10292_recIdents;
                RAST._IExpr _out5080;
                DCOMPUTF16._IOwnership _out5081;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5082;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5080, out _out5081, out _out5082);
                _10290_recursiveGen = _out5080;
                _10291___v85 = _out5081;
                _10292_recIdents = _out5082;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyInt{data: ::dafny_runtime::BigInt::from("), (_10290_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")}")));
                RAST._IExpr _out5083;
                DCOMPUTF16._IOwnership _out5084;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5083, out _out5084);
                r = _out5083;
                resultingOwnership = _out5084;
                readIdents = _10292_recIdents;
              }
            } else if (_source420.is_Real) {
              {
                RAST._IExpr _10293_recursiveGen;
                DCOMPUTF16._IOwnership _10294_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10295_recIdents;
                RAST._IExpr _out5085;
                DCOMPUTF16._IOwnership _out5086;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5087;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out5085, out _out5086, out _out5087);
                _10293_recursiveGen = _out5085;
                _10294_recOwned = _out5086;
                _10295_recIdents = _out5087;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10293_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out5088;
                DCOMPUTF16._IOwnership _out5089;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5088, out _out5089);
                r = _out5088;
                resultingOwnership = _out5089;
                readIdents = _10295_recIdents;
              }
            } else if (_source420.is_String) {
              {
                RAST._IExpr _10296_recursiveGen;
                DCOMPUTF16._IOwnership _10297_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10298_recIdents;
                RAST._IExpr _out5090;
                DCOMPUTF16._IOwnership _out5091;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5092;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out5090, out _out5091, out _out5092);
                _10296_recursiveGen = _out5090;
                _10297_recOwned = _out5091;
                _10298_recIdents = _out5092;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10296_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out5093;
                DCOMPUTF16._IOwnership _out5094;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5093, out _out5094);
                r = _out5093;
                resultingOwnership = _out5094;
                readIdents = _10298_recIdents;
              }
            } else if (_source420.is_Bool) {
              {
                RAST._IExpr _10299_recursiveGen;
                DCOMPUTF16._IOwnership _10300_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10301_recIdents;
                RAST._IExpr _out5095;
                DCOMPUTF16._IOwnership _out5096;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5097;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out5095, out _out5096, out _out5097);
                _10299_recursiveGen = _out5095;
                _10300_recOwned = _out5096;
                _10301_recIdents = _out5097;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10299_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out5098;
                DCOMPUTF16._IOwnership _out5099;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5098, out _out5099);
                r = _out5098;
                resultingOwnership = _out5099;
                readIdents = _10301_recIdents;
              }
            } else {
              {
                RAST._IExpr _10302_recursiveGen;
                DCOMPUTF16._IOwnership _10303_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10304_recIdents;
                RAST._IExpr _out5100;
                DCOMPUTF16._IOwnership _out5101;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5102;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out5100, out _out5101, out _out5102);
                _10302_recursiveGen = _out5100;
                _10303_recOwned = _out5101;
                _10304_recIdents = _out5102;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10302_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out5103;
                DCOMPUTF16._IOwnership _out5104;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5103, out _out5104);
                r = _out5103;
                resultingOwnership = _out5104;
                readIdents = _10304_recIdents;
              }
            }
          } else if (_source415.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _10305___mcc_h1184 = _source415.dtor_Passthrough_a0;
            {
              RAST._IExpr _10306_recursiveGen;
              DCOMPUTF16._IOwnership _10307___v90;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10308_recIdents;
              RAST._IExpr _out5105;
              DCOMPUTF16._IOwnership _out5106;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5107;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5105, out _out5106, out _out5107);
              _10306_recursiveGen = _out5105;
              _10307___v90 = _out5106;
              _10308_recIdents = _out5107;
              RAST._IType _10309_toTpeGen;
              RAST._IType _out5108;
              _out5108 = DCOMPUTF16.COMP.GenType(_7822_toTpe, true, false);
              _10309_toTpeGen = _out5108;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), (_10306_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_10309_toTpeGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              RAST._IExpr _out5109;
              DCOMPUTF16._IOwnership _out5110;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5109, out _out5110);
              r = _out5109;
              resultingOwnership = _out5110;
              readIdents = _10308_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _10310___mcc_h1186 = _source415.dtor_TypeArg_a0;
            {
              RAST._IExpr _10311_recursiveGen;
              DCOMPUTF16._IOwnership _10312_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10313_recIdents;
              RAST._IExpr _out5111;
              DCOMPUTF16._IOwnership _out5112;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5113;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out5111, out _out5112, out _out5113);
              _10311_recursiveGen = _out5111;
              _10312_recOwned = _out5112;
              _10313_recIdents = _out5113;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10311_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5114;
              DCOMPUTF16._IOwnership _out5115;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5114, out _out5115);
              r = _out5114;
              resultingOwnership = _out5115;
              readIdents = _10313_recIdents;
            }
          }
        } else {
          Dafny.ISequence<Dafny.Rune> _10314___mcc_h1188 = _source308.dtor_TypeArg_a0;
          DAST._IType _source421 = _7827___mcc_h1;
          if (_source421.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10315___mcc_h1192 = _source421.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _10316___mcc_h1193 = _source421.dtor_typeArgs;
            DAST._IResolvedType _10317___mcc_h1194 = _source421.dtor_resolved;
            DAST._IResolvedType _source422 = _10317___mcc_h1194;
            if (_source422.is_Datatype) {
              DAST._IDatatypeType _10318___mcc_h1198 = _source422.dtor_datatypeType;
              {
                RAST._IExpr _10319_recursiveGen;
                DCOMPUTF16._IOwnership _10320_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10321_recIdents;
                RAST._IExpr _out5116;
                DCOMPUTF16._IOwnership _out5117;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5118;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out5116, out _out5117, out _out5118);
                _10319_recursiveGen = _out5116;
                _10320_recOwned = _out5117;
                _10321_recIdents = _out5118;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10319_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out5119;
                DCOMPUTF16._IOwnership _out5120;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5119, out _out5120);
                r = _out5119;
                resultingOwnership = _out5120;
                readIdents = _10321_recIdents;
              }
            } else if (_source422.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10322___mcc_h1200 = _source422.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _10323___mcc_h1201 = _source422.dtor_attributes;
              {
                RAST._IExpr _10324_recursiveGen;
                DCOMPUTF16._IOwnership _10325_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10326_recIdents;
                RAST._IExpr _out5121;
                DCOMPUTF16._IOwnership _out5122;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5123;
                DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out5121, out _out5122, out _out5123);
                _10324_recursiveGen = _out5121;
                _10325_recOwned = _out5122;
                _10326_recIdents = _out5123;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10324_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out5124;
                DCOMPUTF16._IOwnership _out5125;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5124, out _out5125);
                r = _out5124;
                resultingOwnership = _out5125;
                readIdents = _10326_recIdents;
              }
            } else {
              DAST._IType _10327___mcc_h1204 = _source422.dtor_baseType;
              DAST._INewtypeRange _10328___mcc_h1205 = _source422.dtor_range;
              bool _10329___mcc_h1206 = _source422.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _10330___mcc_h1207 = _source422.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _10331_attributes = _10330___mcc_h1207;
              bool _10332_erase = _10329___mcc_h1206;
              DAST._INewtypeRange _10333_range = _10328___mcc_h1205;
              DAST._IType _10334_b = _10327___mcc_h1204;
              {
                Std.Wrappers._IOption<RAST._IType> _10335_nativeToType;
                _10335_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_10334_b, _10333_range);
                if (object.Equals(_7821_fromTpe, _10334_b)) {
                  RAST._IExpr _10336_recursiveGen;
                  DCOMPUTF16._IOwnership _10337_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10338_recIdents;
                  RAST._IExpr _out5126;
                  DCOMPUTF16._IOwnership _out5127;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5128;
                  DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out5126, out _out5127, out _out5128);
                  _10336_recursiveGen = _out5126;
                  _10337_recOwned = _out5127;
                  _10338_recIdents = _out5128;
                  Std.Wrappers._IOption<RAST._IType> _source423 = _10335_nativeToType;
                  if (_source423.is_None) {
                    if (_10332_erase) {
                      r = _10336_recursiveGen;
                    } else {
                      RAST._IType _10339_rhsType;
                      RAST._IType _out5129;
                      _out5129 = DCOMPUTF16.COMP.GenType(_7822_toTpe, true, false);
                      _10339_rhsType = _out5129;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_10339_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_10336_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out5130;
                    DCOMPUTF16._IOwnership _out5131;
                    DCOMPUTF16.COMP.FromOwnership(r, _10337_recOwned, expectedOwnership, out _out5130, out _out5131);
                    r = _out5130;
                    resultingOwnership = _out5131;
                  } else {
                    RAST._IType _10340___mcc_h2250 = _source423.dtor_value;
                    RAST._IType _10341_v = _10340___mcc_h2250;
                    r = (((_10336_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_10341_v))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out5132;
                    DCOMPUTF16._IOwnership _out5133;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5132, out _out5133);
                    r = _out5132;
                    resultingOwnership = _out5133;
                  }
                  readIdents = _10338_recIdents;
                } else {
                  if ((_10335_nativeToType).is_Some) {
                    DAST._IType _source424 = _7821_fromTpe;
                    if (_source424.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10342___mcc_h2251 = _source424.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _10343___mcc_h2252 = _source424.dtor_typeArgs;
                      DAST._IResolvedType _10344___mcc_h2253 = _source424.dtor_resolved;
                      DAST._IResolvedType _source425 = _10344___mcc_h2253;
                      if (_source425.is_Datatype) {
                        DAST._IDatatypeType _10345___mcc_h2257 = _source425.dtor_datatypeType;
                      } else if (_source425.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10346___mcc_h2259 = _source425.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _10347___mcc_h2260 = _source425.dtor_attributes;
                      } else {
                        DAST._IType _10348___mcc_h2263 = _source425.dtor_baseType;
                        DAST._INewtypeRange _10349___mcc_h2264 = _source425.dtor_range;
                        bool _10350___mcc_h2265 = _source425.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _10351___mcc_h2266 = _source425.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _10352_attributes0 = _10351___mcc_h2266;
                        bool _10353_erase0 = _10350___mcc_h2265;
                        DAST._INewtypeRange _10354_range0 = _10349___mcc_h2264;
                        DAST._IType _10355_b0 = _10348___mcc_h2263;
                        {
                          Std.Wrappers._IOption<RAST._IType> _10356_nativeFromType;
                          _10356_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_10355_b0, _10354_range0);
                          if ((_10356_nativeFromType).is_Some) {
                            RAST._IExpr _10357_recursiveGen;
                            DCOMPUTF16._IOwnership _10358_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10359_recIdents;
                            RAST._IExpr _out5134;
                            DCOMPUTF16._IOwnership _out5135;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5136;
                            DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out5134, out _out5135, out _out5136);
                            _10357_recursiveGen = _out5134;
                            _10358_recOwned = _out5135;
                            _10359_recIdents = _out5136;
                            RAST._IExpr _out5137;
                            DCOMPUTF16._IOwnership _out5138;
                            DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_10357_recursiveGen, (_10335_nativeToType).dtor_value), _10358_recOwned, expectedOwnership, out _out5137, out _out5138);
                            r = _out5137;
                            resultingOwnership = _out5138;
                            readIdents = _10359_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source424.is_Nullable) {
                      DAST._IType _10360___mcc_h2271 = _source424.dtor_Nullable_a0;
                    } else if (_source424.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _10361___mcc_h2273 = _source424.dtor_Tuple_a0;
                    } else if (_source424.is_Array) {
                      DAST._IType _10362___mcc_h2275 = _source424.dtor_element;
                      BigInteger _10363___mcc_h2276 = _source424.dtor_dims;
                    } else if (_source424.is_Seq) {
                      DAST._IType _10364___mcc_h2279 = _source424.dtor_element;
                    } else if (_source424.is_Set) {
                      DAST._IType _10365___mcc_h2281 = _source424.dtor_element;
                    } else if (_source424.is_Multiset) {
                      DAST._IType _10366___mcc_h2283 = _source424.dtor_element;
                    } else if (_source424.is_Map) {
                      DAST._IType _10367___mcc_h2285 = _source424.dtor_key;
                      DAST._IType _10368___mcc_h2286 = _source424.dtor_value;
                    } else if (_source424.is_SetBuilder) {
                      DAST._IType _10369___mcc_h2289 = _source424.dtor_element;
                    } else if (_source424.is_MapBuilder) {
                      DAST._IType _10370___mcc_h2291 = _source424.dtor_key;
                      DAST._IType _10371___mcc_h2292 = _source424.dtor_value;
                    } else if (_source424.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _10372___mcc_h2295 = _source424.dtor_args;
                      DAST._IType _10373___mcc_h2296 = _source424.dtor_result;
                    } else if (_source424.is_Primitive) {
                      DAST._IPrimitive _10374___mcc_h2299 = _source424.dtor_Primitive_a0;
                    } else if (_source424.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _10375___mcc_h2301 = _source424.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _10376___mcc_h2303 = _source424.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_7821_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _10377_recursiveGen;
                      DCOMPUTF16._IOwnership _10378_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10379_recIdents;
                      RAST._IExpr _out5139;
                      DCOMPUTF16._IOwnership _out5140;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5141;
                      DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out5139, out _out5140, out _out5141);
                      _10377_recursiveGen = _out5139;
                      _10378_recOwned = _out5140;
                      _10379_recIdents = _out5141;
                      RAST._IExpr _out5142;
                      DCOMPUTF16._IOwnership _out5143;
                      DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_10377_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_10335_nativeToType).dtor_value), _10378_recOwned, expectedOwnership, out _out5142, out _out5143);
                      r = _out5142;
                      resultingOwnership = _out5143;
                      readIdents = _10379_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out5144;
                  DCOMPUTF16._IOwnership _out5145;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5146;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7820_expr, _7821_fromTpe, _10334_b), _10334_b, _7822_toTpe), selfIdent, env, expectedOwnership, out _out5144, out _out5145, out _out5146);
                  r = _out5144;
                  resultingOwnership = _out5145;
                  readIdents = _out5146;
                }
              }
            }
          } else if (_source421.is_Nullable) {
            DAST._IType _10380___mcc_h1212 = _source421.dtor_Nullable_a0;
            {
              RAST._IExpr _10381_recursiveGen;
              DCOMPUTF16._IOwnership _10382_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10383_recIdents;
              RAST._IExpr _out5147;
              DCOMPUTF16._IOwnership _out5148;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5149;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out5147, out _out5148, out _out5149);
              _10381_recursiveGen = _out5147;
              _10382_recOwned = _out5148;
              _10383_recIdents = _out5149;
              r = _10381_recursiveGen;
              if (object.Equals(_10382_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out5150;
              DCOMPUTF16._IOwnership _out5151;
              DCOMPUTF16.COMP.FromOwnership(r, _10382_recOwned, expectedOwnership, out _out5150, out _out5151);
              r = _out5150;
              resultingOwnership = _out5151;
              readIdents = _10383_recIdents;
            }
          } else if (_source421.is_Tuple) {
            Dafny.ISequence<DAST._IType> _10384___mcc_h1214 = _source421.dtor_Tuple_a0;
            {
              RAST._IExpr _10385_recursiveGen;
              DCOMPUTF16._IOwnership _10386_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10387_recIdents;
              RAST._IExpr _out5152;
              DCOMPUTF16._IOwnership _out5153;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5154;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out5152, out _out5153, out _out5154);
              _10385_recursiveGen = _out5152;
              _10386_recOwned = _out5153;
              _10387_recIdents = _out5154;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10385_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5155;
              DCOMPUTF16._IOwnership _out5156;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5155, out _out5156);
              r = _out5155;
              resultingOwnership = _out5156;
              readIdents = _10387_recIdents;
            }
          } else if (_source421.is_Array) {
            DAST._IType _10388___mcc_h1216 = _source421.dtor_element;
            BigInteger _10389___mcc_h1217 = _source421.dtor_dims;
            {
              RAST._IExpr _10390_recursiveGen;
              DCOMPUTF16._IOwnership _10391_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10392_recIdents;
              RAST._IExpr _out5157;
              DCOMPUTF16._IOwnership _out5158;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5159;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out5157, out _out5158, out _out5159);
              _10390_recursiveGen = _out5157;
              _10391_recOwned = _out5158;
              _10392_recIdents = _out5159;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10390_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5160;
              DCOMPUTF16._IOwnership _out5161;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5160, out _out5161);
              r = _out5160;
              resultingOwnership = _out5161;
              readIdents = _10392_recIdents;
            }
          } else if (_source421.is_Seq) {
            DAST._IType _10393___mcc_h1220 = _source421.dtor_element;
            {
              RAST._IExpr _10394_recursiveGen;
              DCOMPUTF16._IOwnership _10395_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10396_recIdents;
              RAST._IExpr _out5162;
              DCOMPUTF16._IOwnership _out5163;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5164;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out5162, out _out5163, out _out5164);
              _10394_recursiveGen = _out5162;
              _10395_recOwned = _out5163;
              _10396_recIdents = _out5164;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10394_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5165;
              DCOMPUTF16._IOwnership _out5166;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5165, out _out5166);
              r = _out5165;
              resultingOwnership = _out5166;
              readIdents = _10396_recIdents;
            }
          } else if (_source421.is_Set) {
            DAST._IType _10397___mcc_h1222 = _source421.dtor_element;
            {
              RAST._IExpr _10398_recursiveGen;
              DCOMPUTF16._IOwnership _10399_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10400_recIdents;
              RAST._IExpr _out5167;
              DCOMPUTF16._IOwnership _out5168;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5169;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out5167, out _out5168, out _out5169);
              _10398_recursiveGen = _out5167;
              _10399_recOwned = _out5168;
              _10400_recIdents = _out5169;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10398_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5170;
              DCOMPUTF16._IOwnership _out5171;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5170, out _out5171);
              r = _out5170;
              resultingOwnership = _out5171;
              readIdents = _10400_recIdents;
            }
          } else if (_source421.is_Multiset) {
            DAST._IType _10401___mcc_h1224 = _source421.dtor_element;
            {
              RAST._IExpr _10402_recursiveGen;
              DCOMPUTF16._IOwnership _10403_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10404_recIdents;
              RAST._IExpr _out5172;
              DCOMPUTF16._IOwnership _out5173;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5174;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out5172, out _out5173, out _out5174);
              _10402_recursiveGen = _out5172;
              _10403_recOwned = _out5173;
              _10404_recIdents = _out5174;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10402_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5175;
              DCOMPUTF16._IOwnership _out5176;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5175, out _out5176);
              r = _out5175;
              resultingOwnership = _out5176;
              readIdents = _10404_recIdents;
            }
          } else if (_source421.is_Map) {
            DAST._IType _10405___mcc_h1226 = _source421.dtor_key;
            DAST._IType _10406___mcc_h1227 = _source421.dtor_value;
            {
              RAST._IExpr _10407_recursiveGen;
              DCOMPUTF16._IOwnership _10408_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10409_recIdents;
              RAST._IExpr _out5177;
              DCOMPUTF16._IOwnership _out5178;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5179;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out5177, out _out5178, out _out5179);
              _10407_recursiveGen = _out5177;
              _10408_recOwned = _out5178;
              _10409_recIdents = _out5179;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10407_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5180;
              DCOMPUTF16._IOwnership _out5181;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5180, out _out5181);
              r = _out5180;
              resultingOwnership = _out5181;
              readIdents = _10409_recIdents;
            }
          } else if (_source421.is_SetBuilder) {
            DAST._IType _10410___mcc_h1230 = _source421.dtor_element;
            {
              RAST._IExpr _10411_recursiveGen;
              DCOMPUTF16._IOwnership _10412_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10413_recIdents;
              RAST._IExpr _out5182;
              DCOMPUTF16._IOwnership _out5183;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5184;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out5182, out _out5183, out _out5184);
              _10411_recursiveGen = _out5182;
              _10412_recOwned = _out5183;
              _10413_recIdents = _out5184;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10411_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5185;
              DCOMPUTF16._IOwnership _out5186;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5185, out _out5186);
              r = _out5185;
              resultingOwnership = _out5186;
              readIdents = _10413_recIdents;
            }
          } else if (_source421.is_MapBuilder) {
            DAST._IType _10414___mcc_h1232 = _source421.dtor_key;
            DAST._IType _10415___mcc_h1233 = _source421.dtor_value;
            {
              RAST._IExpr _10416_recursiveGen;
              DCOMPUTF16._IOwnership _10417_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10418_recIdents;
              RAST._IExpr _out5187;
              DCOMPUTF16._IOwnership _out5188;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5189;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out5187, out _out5188, out _out5189);
              _10416_recursiveGen = _out5187;
              _10417_recOwned = _out5188;
              _10418_recIdents = _out5189;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10416_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5190;
              DCOMPUTF16._IOwnership _out5191;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5190, out _out5191);
              r = _out5190;
              resultingOwnership = _out5191;
              readIdents = _10418_recIdents;
            }
          } else if (_source421.is_Arrow) {
            Dafny.ISequence<DAST._IType> _10419___mcc_h1236 = _source421.dtor_args;
            DAST._IType _10420___mcc_h1237 = _source421.dtor_result;
            {
              RAST._IExpr _10421_recursiveGen;
              DCOMPUTF16._IOwnership _10422_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10423_recIdents;
              RAST._IExpr _out5192;
              DCOMPUTF16._IOwnership _out5193;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5194;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out5192, out _out5193, out _out5194);
              _10421_recursiveGen = _out5192;
              _10422_recOwned = _out5193;
              _10423_recIdents = _out5194;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10421_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5195;
              DCOMPUTF16._IOwnership _out5196;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5195, out _out5196);
              r = _out5195;
              resultingOwnership = _out5196;
              readIdents = _10423_recIdents;
            }
          } else if (_source421.is_Primitive) {
            DAST._IPrimitive _10424___mcc_h1240 = _source421.dtor_Primitive_a0;
            {
              RAST._IExpr _10425_recursiveGen;
              DCOMPUTF16._IOwnership _10426_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10427_recIdents;
              RAST._IExpr _out5197;
              DCOMPUTF16._IOwnership _out5198;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5199;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out5197, out _out5198, out _out5199);
              _10425_recursiveGen = _out5197;
              _10426_recOwned = _out5198;
              _10427_recIdents = _out5199;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10425_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5200;
              DCOMPUTF16._IOwnership _out5201;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5200, out _out5201);
              r = _out5200;
              resultingOwnership = _out5201;
              readIdents = _10427_recIdents;
            }
          } else if (_source421.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _10428___mcc_h1242 = _source421.dtor_Passthrough_a0;
            {
              RAST._IExpr _10429_recursiveGen;
              DCOMPUTF16._IOwnership _10430_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10431_recIdents;
              RAST._IExpr _out5202;
              DCOMPUTF16._IOwnership _out5203;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5204;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out5202, out _out5203, out _out5204);
              _10429_recursiveGen = _out5202;
              _10430_recOwned = _out5203;
              _10431_recIdents = _out5204;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10429_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5205;
              DCOMPUTF16._IOwnership _out5206;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5205, out _out5206);
              r = _out5205;
              resultingOwnership = _out5206;
              readIdents = _10431_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _10432___mcc_h1244 = _source421.dtor_TypeArg_a0;
            {
              RAST._IExpr _10433_recursiveGen;
              DCOMPUTF16._IOwnership _10434_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10435_recIdents;
              RAST._IExpr _out5207;
              DCOMPUTF16._IOwnership _out5208;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5209;
              DCOMPUTF16.COMP.GenExpr(_7820_expr, selfIdent, env, expectedOwnership, out _out5207, out _out5208, out _out5209);
              _10433_recursiveGen = _out5207;
              _10434_recOwned = _out5208;
              _10435_recIdents = _out5209;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10433_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5210;
              DCOMPUTF16._IOwnership _out5211;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5210, out _out5211);
              r = _out5210;
              resultingOwnership = _out5211;
              readIdents = _10435_recIdents;
            }
          }
        }
      }
      return ;
    }
    public static void GenExpr(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMPUTF16._IEnvironment env, DCOMPUTF16._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMPUTF16._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMPUTF16.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source426 = e;
      if (_source426.is_Literal) {
        DAST._ILiteral _10436___mcc_h0 = _source426.dtor_Literal_a0;
        RAST._IExpr _out5212;
        DCOMPUTF16._IOwnership _out5213;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5214;
        DCOMPUTF16.COMP.GenExprLiteral(e, selfIdent, env, expectedOwnership, out _out5212, out _out5213, out _out5214);
        r = _out5212;
        resultingOwnership = _out5213;
        readIdents = _out5214;
      } else if (_source426.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _10437___mcc_h1 = _source426.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _10438_name = _10437___mcc_h1;
        {
          r = RAST.Expr.create_Identifier(DCOMPUTF16.__default.escapeIdent(_10438_name));
          bool _10439_currentlyBorrowed;
          _10439_currentlyBorrowed = (env).IsBorrowed(_10438_name);
          if (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed())) {
            resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipOwned();
          } else if (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipBorrowedMut())) {
            r = RAST.__default.BorrowMut(r);
            resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowedMut();
          } else if (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
            r = RAST.__default.Clone(r);
            resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipOwned();
          } else if (_10439_currentlyBorrowed) {
            resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowed();
          } else {
            r = RAST.__default.Borrow(r);
            resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowed();
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_10438_name);
          return ;
        }
      } else if (_source426.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10440___mcc_h2 = _source426.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10441_path = _10440___mcc_h2;
        {
          RAST._IExpr _out5215;
          _out5215 = DCOMPUTF16.COMP.GenPathExpr(_10441_path);
          r = _out5215;
          RAST._IExpr _out5216;
          DCOMPUTF16._IOwnership _out5217;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5216, out _out5217);
          r = _out5216;
          resultingOwnership = _out5217;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source426.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _10442___mcc_h3 = _source426.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IExpression> _10443_values = _10442___mcc_h3;
        {
          Dafny.ISequence<Dafny.Rune> _10444_s;
          _10444_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _10445_i;
          _10445_i = BigInteger.Zero;
          while ((_10445_i) < (new BigInteger((_10443_values).Count))) {
            if ((_10445_i).Sign == 1) {
              _10444_s = Dafny.Sequence<Dafny.Rune>.Concat(_10444_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            RAST._IExpr _10446_recursiveGen;
            DCOMPUTF16._IOwnership _10447___v93;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10448_recIdents;
            RAST._IExpr _out5218;
            DCOMPUTF16._IOwnership _out5219;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5220;
            DCOMPUTF16.COMP.GenExpr((_10443_values).Select(_10445_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5218, out _out5219, out _out5220);
            _10446_recursiveGen = _out5218;
            _10447___v93 = _out5219;
            _10448_recIdents = _out5220;
            _10444_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_10444_s, (_10446_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _10448_recIdents);
            _10445_i = (_10445_i) + (BigInteger.One);
          }
          _10444_s = Dafny.Sequence<Dafny.Rune>.Concat(_10444_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          r = RAST.Expr.create_RawExpr(_10444_s);
          RAST._IExpr _out5221;
          DCOMPUTF16._IOwnership _out5222;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5221, out _out5222);
          r = _out5221;
          resultingOwnership = _out5222;
          return ;
        }
      } else if (_source426.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10449___mcc_h4 = _source426.dtor_path;
        Dafny.ISequence<DAST._IType> _10450___mcc_h5 = _source426.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _10451___mcc_h6 = _source426.dtor_args;
        Dafny.ISequence<DAST._IExpression> _10452_args = _10451___mcc_h6;
        Dafny.ISequence<DAST._IType> _10453_typeArgs = _10450___mcc_h5;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10454_path = _10449___mcc_h4;
        {
          RAST._IExpr _out5223;
          _out5223 = DCOMPUTF16.COMP.GenPathExpr(_10454_path);
          r = _out5223;
          if ((new BigInteger((_10453_typeArgs).Count)).Sign == 1) {
            Dafny.ISequence<RAST._IType> _10455_typeExprs;
            _10455_typeExprs = Dafny.Sequence<RAST._IType>.FromElements();
            BigInteger _hi12 = new BigInteger((_10453_typeArgs).Count);
            for (BigInteger _10456_i = BigInteger.Zero; _10456_i < _hi12; _10456_i++) {
              RAST._IType _10457_typeExpr;
              RAST._IType _out5224;
              _out5224 = DCOMPUTF16.COMP.GenType((_10453_typeArgs).Select(_10456_i), false, false);
              _10457_typeExpr = _out5224;
              _10455_typeExprs = Dafny.Sequence<RAST._IType>.Concat(_10455_typeExprs, Dafny.Sequence<RAST._IType>.FromElements(_10457_typeExpr));
            }
            r = (r).ApplyType(_10455_typeExprs);
          }
          r = (r).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<RAST._IExpr> _10458_arguments;
          _10458_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          BigInteger _hi13 = new BigInteger((_10452_args).Count);
          for (BigInteger _10459_i = BigInteger.Zero; _10459_i < _hi13; _10459_i++) {
            RAST._IExpr _10460_recursiveGen;
            DCOMPUTF16._IOwnership _10461___v94;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10462_recIdents;
            RAST._IExpr _out5225;
            DCOMPUTF16._IOwnership _out5226;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5227;
            DCOMPUTF16.COMP.GenExpr((_10452_args).Select(_10459_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5225, out _out5226, out _out5227);
            _10460_recursiveGen = _out5225;
            _10461___v94 = _out5226;
            _10462_recIdents = _out5227;
            _10458_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_10458_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(_10460_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _10462_recIdents);
          }
          r = (r).Apply(_10458_arguments);
          r = RAST.__default.RcNew(r);
          RAST._IExpr _out5228;
          DCOMPUTF16._IOwnership _out5229;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5228, out _out5229);
          r = _out5228;
          resultingOwnership = _out5229;
          return ;
        }
      } else if (_source426.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _10463___mcc_h7 = _source426.dtor_dims;
        DAST._IType _10464___mcc_h8 = _source426.dtor_typ;
        DAST._IType _10465_typ = _10464___mcc_h8;
        Dafny.ISequence<DAST._IExpression> _10466_dims = _10463___mcc_h7;
        {
          BigInteger _10467_i;
          _10467_i = (new BigInteger((_10466_dims).Count)) - (BigInteger.One);
          RAST._IType _10468_genTyp;
          RAST._IType _out5230;
          _out5230 = DCOMPUTF16.COMP.GenType(_10465_typ, false, false);
          _10468_genTyp = _out5230;
          Dafny.ISequence<Dafny.Rune> _10469_s;
          _10469_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_10468_genTyp)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::std::default::Default>::default()"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          while ((_10467_i).Sign != -1) {
            RAST._IExpr _10470_recursiveGen;
            DCOMPUTF16._IOwnership _10471___v95;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10472_recIdents;
            RAST._IExpr _out5231;
            DCOMPUTF16._IOwnership _out5232;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5233;
            DCOMPUTF16.COMP.GenExpr((_10466_dims).Select(_10467_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5231, out _out5232, out _out5233);
            _10470_recursiveGen = _out5231;
            _10471___v95 = _out5232;
            _10472_recIdents = _out5233;
            _10469_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(::std::cell::RefCell::new(vec!["), _10469_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("; <usize as ::dafny_runtime::NumCast>::from(")), (_10470_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]))"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _10472_recIdents);
            _10467_i = (_10467_i) - (BigInteger.One);
          }
          r = RAST.Expr.create_RawExpr(_10469_s);
          RAST._IExpr _out5234;
          DCOMPUTF16._IOwnership _out5235;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5234, out _out5235);
          r = _out5234;
          resultingOwnership = _out5235;
          return ;
        }
      } else if (_source426.is_DatatypeValue) {
        DAST._IDatatypeType _10473___mcc_h9 = _source426.dtor_datatypeType;
        Dafny.ISequence<DAST._IType> _10474___mcc_h10 = _source426.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _10475___mcc_h11 = _source426.dtor_variant;
        bool _10476___mcc_h12 = _source426.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _10477___mcc_h13 = _source426.dtor_contents;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _10478_values = _10477___mcc_h13;
        bool _10479_isCo = _10476___mcc_h12;
        Dafny.ISequence<Dafny.Rune> _10480_variant = _10475___mcc_h11;
        Dafny.ISequence<DAST._IType> _10481_typeArgs = _10474___mcc_h10;
        DAST._IDatatypeType _10482_datatypeType = _10473___mcc_h9;
        {
          RAST._IExpr _out5236;
          _out5236 = DCOMPUTF16.COMP.GenPathExpr((_10482_datatypeType).dtor_path);
          r = _out5236;
          Dafny.ISequence<RAST._IType> _10483_genTypeArgs;
          _10483_genTypeArgs = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _hi14 = new BigInteger((_10481_typeArgs).Count);
          for (BigInteger _10484_i = BigInteger.Zero; _10484_i < _hi14; _10484_i++) {
            RAST._IType _10485_typeExpr;
            RAST._IType _out5237;
            _out5237 = DCOMPUTF16.COMP.GenType((_10481_typeArgs).Select(_10484_i), false, false);
            _10485_typeExpr = _out5237;
            _10483_genTypeArgs = Dafny.Sequence<RAST._IType>.Concat(_10483_genTypeArgs, Dafny.Sequence<RAST._IType>.FromElements(_10485_typeExpr));
          }
          if ((new BigInteger((_10481_typeArgs).Count)).Sign == 1) {
            r = (r).ApplyType(_10483_genTypeArgs);
          }
          r = (r).MSel(DCOMPUTF16.__default.escapeIdent(_10480_variant));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<RAST._IAssignIdentifier> _10486_assignments;
          _10486_assignments = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
          BigInteger _hi15 = new BigInteger((_10478_values).Count);
          for (BigInteger _10487_i = BigInteger.Zero; _10487_i < _hi15; _10487_i++) {
            _System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression> _let_tmp_rhs55 = (_10478_values).Select(_10487_i);
            Dafny.ISequence<Dafny.Rune> _10488_name = _let_tmp_rhs55.dtor__0;
            DAST._IExpression _10489_value = _let_tmp_rhs55.dtor__1;
            if (_10479_isCo) {
              RAST._IExpr _10490_recursiveGen;
              DCOMPUTF16._IOwnership _10491___v96;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10492_recIdents;
              RAST._IExpr _out5238;
              DCOMPUTF16._IOwnership _out5239;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5240;
              DCOMPUTF16.COMP.GenExpr(_10489_value, selfIdent, DCOMPUTF16.Environment.Empty(), DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5238, out _out5239, out _out5240);
              _10490_recursiveGen = _out5238;
              _10491___v96 = _out5239;
              _10492_recIdents = _out5240;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _10492_recIdents);
              Dafny.ISequence<Dafny.Rune> _10493_allReadCloned;
              _10493_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              while (!(_10492_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
                Dafny.ISequence<Dafny.Rune> _10494_next;
                foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_4 in (_10492_recIdents).Elements) {
                  _10494_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_4;
                  if ((_10492_recIdents).Contains(_10494_next)) {
                    goto after__ASSIGN_SUCH_THAT_4;
                  }
                }
                throw new System.Exception("assign-such-that search produced no value (line 2854)");
              after__ASSIGN_SUCH_THAT_4: ;
                _10493_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_10493_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMPUTF16.__default.escapeIdent(_10494_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMPUTF16.__default.escapeIdent(_10494_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
                _10492_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_10492_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_10494_next));
              }
              Dafny.ISequence<Dafny.Rune> _10495_assigned;
              _10495_assigned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::LazyFieldWrapper(::dafny_runtime::Lazy::new(::std::boxed::Box::new({\n"), _10493_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move || (")), (_10490_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")})))"));
              _10486_assignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_10486_assignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMPUTF16.__default.escapeIdent(_10488_name), RAST.Expr.create_RawExpr(_10495_assigned))));
            } else {
              RAST._IExpr _10496_recursiveGen;
              DCOMPUTF16._IOwnership _10497___v97;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10498_recIdents;
              RAST._IExpr _out5241;
              DCOMPUTF16._IOwnership _out5242;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5243;
              DCOMPUTF16.COMP.GenExpr(_10489_value, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5241, out _out5242, out _out5243);
              _10496_recursiveGen = _out5241;
              _10497___v97 = _out5242;
              _10498_recIdents = _out5243;
              _10486_assignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_10486_assignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMPUTF16.__default.escapeIdent(_10488_name), _10496_recursiveGen)));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _10498_recIdents);
            }
          }
          r = RAST.Expr.create_StructBuild(r, _10486_assignments);
          if (DCOMPUTF16.COMP.IsRcWrapped((_10482_datatypeType).dtor_attributes)) {
            r = RAST.__default.RcNew(r);
          }
          RAST._IExpr _out5244;
          DCOMPUTF16._IOwnership _out5245;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5244, out _out5245);
          r = _out5244;
          resultingOwnership = _out5245;
          return ;
        }
      } else if (_source426.is_Convert) {
        DAST._IExpression _10499___mcc_h14 = _source426.dtor_value;
        DAST._IType _10500___mcc_h15 = _source426.dtor_from;
        DAST._IType _10501___mcc_h16 = _source426.dtor_typ;
        {
          RAST._IExpr _out5246;
          DCOMPUTF16._IOwnership _out5247;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5248;
          DCOMPUTF16.COMP.GenExprConvert(e, selfIdent, env, expectedOwnership, out _out5246, out _out5247, out _out5248);
          r = _out5246;
          resultingOwnership = _out5247;
          readIdents = _out5248;
        }
      } else if (_source426.is_SeqConstruct) {
        DAST._IExpression _10502___mcc_h17 = _source426.dtor_length;
        DAST._IExpression _10503___mcc_h18 = _source426.dtor_elem;
        DAST._IExpression _10504_expr = _10503___mcc_h18;
        DAST._IExpression _10505_length = _10502___mcc_h17;
        {
          RAST._IExpr _10506_recursiveGen;
          DCOMPUTF16._IOwnership _10507___v101;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10508_recIdents;
          RAST._IExpr _out5249;
          DCOMPUTF16._IOwnership _out5250;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5251;
          DCOMPUTF16.COMP.GenExpr(_10504_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5249, out _out5250, out _out5251);
          _10506_recursiveGen = _out5249;
          _10507___v101 = _out5250;
          _10508_recIdents = _out5251;
          RAST._IExpr _10509_lengthGen;
          DCOMPUTF16._IOwnership _10510___v102;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10511_lengthIdents;
          RAST._IExpr _out5252;
          DCOMPUTF16._IOwnership _out5253;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5254;
          DCOMPUTF16.COMP.GenExpr(_10505_length, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5252, out _out5253, out _out5254);
          _10509_lengthGen = _out5252;
          _10510___v102 = _out5253;
          _10511_lengthIdents = _out5254;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet _initializer = "), (_10506_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), ")), (_10509_lengthGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").map(|i| _initializer.0(&i)).collect::<::dafny_runtime::Sequence<_>>()\n}")));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_10508_recIdents, _10511_lengthIdents);
          RAST._IExpr _out5255;
          DCOMPUTF16._IOwnership _out5256;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5255, out _out5256);
          r = _out5255;
          resultingOwnership = _out5256;
          return ;
        }
      } else if (_source426.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _10512___mcc_h19 = _source426.dtor_elements;
        DAST._IType _10513___mcc_h20 = _source426.dtor_typ;
        DAST._IType _10514_typ = _10513___mcc_h20;
        Dafny.ISequence<DAST._IExpression> _10515_exprs = _10512___mcc_h19;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          RAST._IType _10516_genTpe;
          RAST._IType _out5257;
          _out5257 = DCOMPUTF16.COMP.GenType(_10514_typ, false, false);
          _10516_genTpe = _out5257;
          BigInteger _10517_i;
          _10517_i = BigInteger.Zero;
          Dafny.ISequence<RAST._IExpr> _10518_args;
          _10518_args = Dafny.Sequence<RAST._IExpr>.FromElements();
          while ((_10517_i) < (new BigInteger((_10515_exprs).Count))) {
            RAST._IExpr _10519_recursiveGen;
            DCOMPUTF16._IOwnership _10520___v103;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10521_recIdents;
            RAST._IExpr _out5258;
            DCOMPUTF16._IOwnership _out5259;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5260;
            DCOMPUTF16.COMP.GenExpr((_10515_exprs).Select(_10517_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5258, out _out5259, out _out5260);
            _10519_recursiveGen = _out5258;
            _10520___v103 = _out5259;
            _10521_recIdents = _out5260;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _10521_recIdents);
            _10518_args = Dafny.Sequence<RAST._IExpr>.Concat(_10518_args, Dafny.Sequence<RAST._IExpr>.FromElements(_10519_recursiveGen));
            _10517_i = (_10517_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("seq!"))).Apply(_10518_args);
          if ((new BigInteger((_10518_args).Count)).Sign == 0) {
            r = RAST.Expr.create_TypeAscription(r, ((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence"))).Apply1(_10516_genTpe));
          }
          RAST._IExpr _out5261;
          DCOMPUTF16._IOwnership _out5262;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5261, out _out5262);
          r = _out5261;
          resultingOwnership = _out5262;
          return ;
        }
      } else if (_source426.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _10522___mcc_h21 = _source426.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _10523_exprs = _10522___mcc_h21;
        {
          Dafny.ISequence<RAST._IExpr> _10524_generatedValues;
          _10524_generatedValues = Dafny.Sequence<RAST._IExpr>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _10525_i;
          _10525_i = BigInteger.Zero;
          while ((_10525_i) < (new BigInteger((_10523_exprs).Count))) {
            RAST._IExpr _10526_recursiveGen;
            DCOMPUTF16._IOwnership _10527___v104;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10528_recIdents;
            RAST._IExpr _out5263;
            DCOMPUTF16._IOwnership _out5264;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5265;
            DCOMPUTF16.COMP.GenExpr((_10523_exprs).Select(_10525_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5263, out _out5264, out _out5265);
            _10526_recursiveGen = _out5263;
            _10527___v104 = _out5264;
            _10528_recIdents = _out5265;
            _10524_generatedValues = Dafny.Sequence<RAST._IExpr>.Concat(_10524_generatedValues, Dafny.Sequence<RAST._IExpr>.FromElements(_10526_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _10528_recIdents);
            _10525_i = (_10525_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("set!"))).Apply(_10524_generatedValues);
          RAST._IExpr _out5266;
          DCOMPUTF16._IOwnership _out5267;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5266, out _out5267);
          r = _out5266;
          resultingOwnership = _out5267;
          return ;
        }
      } else if (_source426.is_MultisetValue) {
        Dafny.ISequence<DAST._IExpression> _10529___mcc_h22 = _source426.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _10530_exprs = _10529___mcc_h22;
        {
          Dafny.ISequence<RAST._IExpr> _10531_generatedValues;
          _10531_generatedValues = Dafny.Sequence<RAST._IExpr>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _10532_i;
          _10532_i = BigInteger.Zero;
          while ((_10532_i) < (new BigInteger((_10530_exprs).Count))) {
            RAST._IExpr _10533_recursiveGen;
            DCOMPUTF16._IOwnership _10534___v105;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10535_recIdents;
            RAST._IExpr _out5268;
            DCOMPUTF16._IOwnership _out5269;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5270;
            DCOMPUTF16.COMP.GenExpr((_10530_exprs).Select(_10532_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5268, out _out5269, out _out5270);
            _10533_recursiveGen = _out5268;
            _10534___v105 = _out5269;
            _10535_recIdents = _out5270;
            _10531_generatedValues = Dafny.Sequence<RAST._IExpr>.Concat(_10531_generatedValues, Dafny.Sequence<RAST._IExpr>.FromElements(_10533_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _10535_recIdents);
            _10532_i = (_10532_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("multiset!"))).Apply(_10531_generatedValues);
          RAST._IExpr _out5271;
          DCOMPUTF16._IOwnership _out5272;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5271, out _out5272);
          r = _out5271;
          resultingOwnership = _out5272;
          return ;
        }
      } else if (_source426.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _10536___mcc_h23 = _source426.dtor_mapElems;
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _10537_mapElems = _10536___mcc_h23;
        {
          Dafny.ISequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>> _10538_generatedValues;
          _10538_generatedValues = Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _10539_i;
          _10539_i = BigInteger.Zero;
          while ((_10539_i) < (new BigInteger((_10537_mapElems).Count))) {
            RAST._IExpr _10540_recursiveGenKey;
            DCOMPUTF16._IOwnership _10541___v107;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10542_recIdentsKey;
            RAST._IExpr _out5273;
            DCOMPUTF16._IOwnership _out5274;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5275;
            DCOMPUTF16.COMP.GenExpr(((_10537_mapElems).Select(_10539_i)).dtor__0, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5273, out _out5274, out _out5275);
            _10540_recursiveGenKey = _out5273;
            _10541___v107 = _out5274;
            _10542_recIdentsKey = _out5275;
            RAST._IExpr _10543_recursiveGenValue;
            DCOMPUTF16._IOwnership _10544___v108;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10545_recIdentsValue;
            RAST._IExpr _out5276;
            DCOMPUTF16._IOwnership _out5277;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5278;
            DCOMPUTF16.COMP.GenExpr(((_10537_mapElems).Select(_10539_i)).dtor__1, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5276, out _out5277, out _out5278);
            _10543_recursiveGenValue = _out5276;
            _10544___v108 = _out5277;
            _10545_recIdentsValue = _out5278;
            _10538_generatedValues = Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.Concat(_10538_generatedValues, Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.FromElements(_System.Tuple2<RAST._IExpr, RAST._IExpr>.create(_10540_recursiveGenKey, _10543_recursiveGenValue)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _10542_recIdentsKey), _10545_recIdentsValue);
            _10539_i = (_10539_i) + (BigInteger.One);
          }
          _10539_i = BigInteger.Zero;
          Dafny.ISequence<RAST._IExpr> _10546_arguments;
          _10546_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          while ((_10539_i) < (new BigInteger((_10538_generatedValues).Count))) {
            RAST._IExpr _10547_genKey;
            _10547_genKey = ((_10538_generatedValues).Select(_10539_i)).dtor__0;
            RAST._IExpr _10548_genValue;
            _10548_genValue = ((_10538_generatedValues).Select(_10539_i)).dtor__1;
            _10546_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_10546_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=>"), _10547_genKey, _10548_genValue, DAST.Format.BinOpFormat.create_NoFormat())));
            _10539_i = (_10539_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("map!"))).Apply(_10546_arguments);
          RAST._IExpr _out5279;
          DCOMPUTF16._IOwnership _out5280;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5279, out _out5280);
          r = _out5279;
          resultingOwnership = _out5280;
          return ;
        }
      } else if (_source426.is_MapBuilder) {
        DAST._IType _10549___mcc_h24 = _source426.dtor_keyType;
        DAST._IType _10550___mcc_h25 = _source426.dtor_valueType;
        DAST._IType _10551_valueType = _10550___mcc_h25;
        DAST._IType _10552_keyType = _10549___mcc_h24;
        {
          RAST._IType _10553_kType;
          RAST._IType _out5281;
          _out5281 = DCOMPUTF16.COMP.GenType(_10552_keyType, false, false);
          _10553_kType = _out5281;
          RAST._IType _10554_vType;
          RAST._IType _out5282;
          _out5282 = DCOMPUTF16.COMP.GenType(_10551_valueType, false, false);
          _10554_vType = _out5282;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::MapBuilder::<"), (_10553_kType)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_10554_vType)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::new()")));
          RAST._IExpr _out5283;
          DCOMPUTF16._IOwnership _out5284;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5283, out _out5284);
          r = _out5283;
          resultingOwnership = _out5284;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source426.is_SeqUpdate) {
        DAST._IExpression _10555___mcc_h26 = _source426.dtor_expr;
        DAST._IExpression _10556___mcc_h27 = _source426.dtor_indexExpr;
        DAST._IExpression _10557___mcc_h28 = _source426.dtor_value;
        DAST._IExpression _10558_value = _10557___mcc_h28;
        DAST._IExpression _10559_index = _10556___mcc_h27;
        DAST._IExpression _10560_expr = _10555___mcc_h26;
        {
          RAST._IExpr _10561_exprR;
          DCOMPUTF16._IOwnership _10562___v109;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10563_exprIdents;
          RAST._IExpr _out5285;
          DCOMPUTF16._IOwnership _out5286;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5287;
          DCOMPUTF16.COMP.GenExpr(_10560_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out5285, out _out5286, out _out5287);
          _10561_exprR = _out5285;
          _10562___v109 = _out5286;
          _10563_exprIdents = _out5287;
          RAST._IExpr _10564_indexR;
          DCOMPUTF16._IOwnership _10565_indexOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10566_indexIdents;
          RAST._IExpr _out5288;
          DCOMPUTF16._IOwnership _out5289;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5290;
          DCOMPUTF16.COMP.GenExpr(_10559_index, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5288, out _out5289, out _out5290);
          _10564_indexR = _out5288;
          _10565_indexOwnership = _out5289;
          _10566_indexIdents = _out5290;
          RAST._IExpr _10567_valueR;
          DCOMPUTF16._IOwnership _10568_valueOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10569_valueIdents;
          RAST._IExpr _out5291;
          DCOMPUTF16._IOwnership _out5292;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5293;
          DCOMPUTF16.COMP.GenExpr(_10558_value, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5291, out _out5292, out _out5293);
          _10567_valueR = _out5291;
          _10568_valueOwnership = _out5292;
          _10569_valueIdents = _out5293;
          r = ((_10561_exprR).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("update_index"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_10564_indexR, _10567_valueR));
          RAST._IExpr _out5294;
          DCOMPUTF16._IOwnership _out5295;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5294, out _out5295);
          r = _out5294;
          resultingOwnership = _out5295;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_10563_exprIdents, _10566_indexIdents), _10569_valueIdents);
          return ;
        }
      } else if (_source426.is_MapUpdate) {
        DAST._IExpression _10570___mcc_h29 = _source426.dtor_expr;
        DAST._IExpression _10571___mcc_h30 = _source426.dtor_indexExpr;
        DAST._IExpression _10572___mcc_h31 = _source426.dtor_value;
        DAST._IExpression _10573_value = _10572___mcc_h31;
        DAST._IExpression _10574_index = _10571___mcc_h30;
        DAST._IExpression _10575_expr = _10570___mcc_h29;
        {
          RAST._IExpr _10576_exprR;
          DCOMPUTF16._IOwnership _10577___v110;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10578_exprIdents;
          RAST._IExpr _out5296;
          DCOMPUTF16._IOwnership _out5297;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5298;
          DCOMPUTF16.COMP.GenExpr(_10575_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out5296, out _out5297, out _out5298);
          _10576_exprR = _out5296;
          _10577___v110 = _out5297;
          _10578_exprIdents = _out5298;
          RAST._IExpr _10579_indexR;
          DCOMPUTF16._IOwnership _10580_indexOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10581_indexIdents;
          RAST._IExpr _out5299;
          DCOMPUTF16._IOwnership _out5300;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5301;
          DCOMPUTF16.COMP.GenExpr(_10574_index, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5299, out _out5300, out _out5301);
          _10579_indexR = _out5299;
          _10580_indexOwnership = _out5300;
          _10581_indexIdents = _out5301;
          RAST._IExpr _10582_valueR;
          DCOMPUTF16._IOwnership _10583_valueOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10584_valueIdents;
          RAST._IExpr _out5302;
          DCOMPUTF16._IOwnership _out5303;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5304;
          DCOMPUTF16.COMP.GenExpr(_10573_value, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5302, out _out5303, out _out5304);
          _10582_valueR = _out5302;
          _10583_valueOwnership = _out5303;
          _10584_valueIdents = _out5304;
          r = ((_10576_exprR).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("update_index"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_10579_indexR, _10582_valueR));
          RAST._IExpr _out5305;
          DCOMPUTF16._IOwnership _out5306;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5305, out _out5306);
          r = _out5305;
          resultingOwnership = _out5306;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_10578_exprIdents, _10581_indexIdents), _10584_valueIdents);
          return ;
        }
      } else if (_source426.is_SetBuilder) {
        DAST._IType _10585___mcc_h32 = _source426.dtor_elemType;
        DAST._IType _10586_elemType = _10585___mcc_h32;
        {
          RAST._IType _10587_eType;
          RAST._IType _out5307;
          _out5307 = DCOMPUTF16.COMP.GenType(_10586_elemType, false, false);
          _10587_eType = _out5307;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::SetBuilder::<"), (_10587_eType)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::new()")));
          RAST._IExpr _out5308;
          DCOMPUTF16._IOwnership _out5309;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5308, out _out5309);
          r = _out5308;
          resultingOwnership = _out5309;
          return ;
        }
      } else if (_source426.is_ToMultiset) {
        DAST._IExpression _10588___mcc_h33 = _source426.dtor_ToMultiset_a0;
        DAST._IExpression _10589_expr = _10588___mcc_h33;
        {
          RAST._IExpr _10590_recursiveGen;
          DCOMPUTF16._IOwnership _10591___v106;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10592_recIdents;
          RAST._IExpr _out5310;
          DCOMPUTF16._IOwnership _out5311;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5312;
          DCOMPUTF16.COMP.GenExpr(_10589_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out5310, out _out5311, out _out5312);
          _10590_recursiveGen = _out5310;
          _10591___v106 = _out5311;
          _10592_recIdents = _out5312;
          r = ((_10590_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_dafny_multiset"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          readIdents = _10592_recIdents;
          RAST._IExpr _out5313;
          DCOMPUTF16._IOwnership _out5314;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5313, out _out5314);
          r = _out5313;
          resultingOwnership = _out5314;
          return ;
        }
      } else if (_source426.is_This) {
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source427 = selfIdent;
          if (_source427.is_None) {
            {
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"this outside of a method\")"));
              RAST._IExpr _out5315;
              DCOMPUTF16._IOwnership _out5316;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5315, out _out5316);
              r = _out5315;
              resultingOwnership = _out5316;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _10593___mcc_h273 = _source427.dtor_value;
            Dafny.ISequence<Dafny.Rune> _10594_id = _10593___mcc_h273;
            {
              r = RAST.Expr.create_RawExpr(_10594_id);
              if (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipOwned();
              } else if ((object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipBorrowed())) || (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed()))) {
                if (!(_10594_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  r = RAST.__default.Borrow(r);
                }
                resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowed();
              } else {
                if (!(_10594_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  r = RAST.__default.BorrowMut(r);
                }
                resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowedMut();
              }
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_10594_id);
            }
          }
          return ;
        }
      } else if (_source426.is_Ite) {
        DAST._IExpression _10595___mcc_h34 = _source426.dtor_cond;
        DAST._IExpression _10596___mcc_h35 = _source426.dtor_thn;
        DAST._IExpression _10597___mcc_h36 = _source426.dtor_els;
        DAST._IExpression _10598_f = _10597___mcc_h36;
        DAST._IExpression _10599_t = _10596___mcc_h35;
        DAST._IExpression _10600_cond = _10595___mcc_h34;
        {
          RAST._IExpr _10601_cond;
          DCOMPUTF16._IOwnership _10602___v111;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10603_recIdentsCond;
          RAST._IExpr _out5317;
          DCOMPUTF16._IOwnership _out5318;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5319;
          DCOMPUTF16.COMP.GenExpr(_10600_cond, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5317, out _out5318, out _out5319);
          _10601_cond = _out5317;
          _10602___v111 = _out5318;
          _10603_recIdentsCond = _out5319;
          Dafny.ISequence<Dafny.Rune> _10604_condString;
          _10604_condString = (_10601_cond)._ToString(DCOMPUTF16.__default.IND);
          RAST._IExpr _10605___v112;
          DCOMPUTF16._IOwnership _10606_tHasToBeOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10607___v113;
          RAST._IExpr _out5320;
          DCOMPUTF16._IOwnership _out5321;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5322;
          DCOMPUTF16.COMP.GenExpr(_10599_t, selfIdent, env, expectedOwnership, out _out5320, out _out5321, out _out5322);
          _10605___v112 = _out5320;
          _10606_tHasToBeOwned = _out5321;
          _10607___v113 = _out5322;
          RAST._IExpr _10608_fExpr;
          DCOMPUTF16._IOwnership _10609_fOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10610_recIdentsF;
          RAST._IExpr _out5323;
          DCOMPUTF16._IOwnership _out5324;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5325;
          DCOMPUTF16.COMP.GenExpr(_10598_f, selfIdent, env, _10606_tHasToBeOwned, out _out5323, out _out5324, out _out5325);
          _10608_fExpr = _out5323;
          _10609_fOwned = _out5324;
          _10610_recIdentsF = _out5325;
          Dafny.ISequence<Dafny.Rune> _10611_fString;
          _10611_fString = (_10608_fExpr)._ToString(DCOMPUTF16.__default.IND);
          RAST._IExpr _10612_tExpr;
          DCOMPUTF16._IOwnership _10613___v114;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10614_recIdentsT;
          RAST._IExpr _out5326;
          DCOMPUTF16._IOwnership _out5327;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5328;
          DCOMPUTF16.COMP.GenExpr(_10599_t, selfIdent, env, _10609_fOwned, out _out5326, out _out5327, out _out5328);
          _10612_tExpr = _out5326;
          _10613___v114 = _out5327;
          _10614_recIdentsT = _out5328;
          Dafny.ISequence<Dafny.Rune> _10615_tString;
          _10615_tString = (_10612_tExpr)._ToString(DCOMPUTF16.__default.IND);
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(if "), _10604_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _10615_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _10611_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})")));
          RAST._IExpr _out5329;
          DCOMPUTF16._IOwnership _out5330;
          DCOMPUTF16.COMP.FromOwnership(r, _10609_fOwned, expectedOwnership, out _out5329, out _out5330);
          r = _out5329;
          resultingOwnership = _out5330;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_10603_recIdentsCond, _10614_recIdentsT), _10610_recIdentsF);
          return ;
        }
      } else if (_source426.is_UnOp) {
        DAST._IUnaryOp _10616___mcc_h37 = _source426.dtor_unOp;
        DAST._IExpression _10617___mcc_h38 = _source426.dtor_expr;
        DAST.Format._IUnOpFormat _10618___mcc_h39 = _source426.dtor_format1;
        DAST._IUnaryOp _source428 = _10616___mcc_h37;
        if (_source428.is_Not) {
          DAST.Format._IUnOpFormat _10619_format = _10618___mcc_h39;
          DAST._IExpression _10620_e = _10617___mcc_h38;
          {
            RAST._IExpr _10621_recursiveGen;
            DCOMPUTF16._IOwnership _10622___v115;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10623_recIdents;
            RAST._IExpr _out5331;
            DCOMPUTF16._IOwnership _out5332;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5333;
            DCOMPUTF16.COMP.GenExpr(_10620_e, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5331, out _out5332, out _out5333);
            _10621_recursiveGen = _out5331;
            _10622___v115 = _out5332;
            _10623_recIdents = _out5333;
            r = RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!"), _10621_recursiveGen, _10619_format);
            RAST._IExpr _out5334;
            DCOMPUTF16._IOwnership _out5335;
            DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5334, out _out5335);
            r = _out5334;
            resultingOwnership = _out5335;
            readIdents = _10623_recIdents;
            return ;
          }
        } else if (_source428.is_BitwiseNot) {
          DAST.Format._IUnOpFormat _10624_format = _10618___mcc_h39;
          DAST._IExpression _10625_e = _10617___mcc_h38;
          {
            RAST._IExpr _10626_recursiveGen;
            DCOMPUTF16._IOwnership _10627___v116;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10628_recIdents;
            RAST._IExpr _out5336;
            DCOMPUTF16._IOwnership _out5337;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5338;
            DCOMPUTF16.COMP.GenExpr(_10625_e, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5336, out _out5337, out _out5338);
            _10626_recursiveGen = _out5336;
            _10627___v116 = _out5337;
            _10628_recIdents = _out5338;
            r = RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("~"), _10626_recursiveGen, _10624_format);
            RAST._IExpr _out5339;
            DCOMPUTF16._IOwnership _out5340;
            DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5339, out _out5340);
            r = _out5339;
            resultingOwnership = _out5340;
            readIdents = _10628_recIdents;
            return ;
          }
        } else {
          DAST.Format._IUnOpFormat _10629_format = _10618___mcc_h39;
          DAST._IExpression _10630_e = _10617___mcc_h38;
          {
            RAST._IExpr _10631_recursiveGen;
            DCOMPUTF16._IOwnership _10632_recOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10633_recIdents;
            RAST._IExpr _out5341;
            DCOMPUTF16._IOwnership _out5342;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5343;
            DCOMPUTF16.COMP.GenExpr(_10630_e, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out5341, out _out5342, out _out5343);
            _10631_recursiveGen = _out5341;
            _10632_recOwned = _out5342;
            _10633_recIdents = _out5343;
            r = ((_10631_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cardinality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
            RAST._IExpr _out5344;
            DCOMPUTF16._IOwnership _out5345;
            DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5344, out _out5345);
            r = _out5344;
            resultingOwnership = _out5345;
            readIdents = _10633_recIdents;
            return ;
          }
        }
      } else if (_source426.is_BinOp) {
        DAST._IBinOp _10634___mcc_h40 = _source426.dtor_op;
        DAST._IExpression _10635___mcc_h41 = _source426.dtor_left;
        DAST._IExpression _10636___mcc_h42 = _source426.dtor_right;
        DAST.Format._IBinOpFormat _10637___mcc_h43 = _source426.dtor_format2;
        RAST._IExpr _out5346;
        DCOMPUTF16._IOwnership _out5347;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5348;
        DCOMPUTF16.COMP.GenExprBinary(e, selfIdent, env, expectedOwnership, out _out5346, out _out5347, out _out5348);
        r = _out5346;
        resultingOwnership = _out5347;
        readIdents = _out5348;
      } else if (_source426.is_ArrayLen) {
        DAST._IExpression _10638___mcc_h44 = _source426.dtor_expr;
        BigInteger _10639___mcc_h45 = _source426.dtor_dim;
        BigInteger _10640_dim = _10639___mcc_h45;
        DAST._IExpression _10641_expr = _10638___mcc_h44;
        {
          RAST._IExpr _10642_recursiveGen;
          DCOMPUTF16._IOwnership _10643___v121;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10644_recIdents;
          RAST._IExpr _out5349;
          DCOMPUTF16._IOwnership _out5350;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5351;
          DCOMPUTF16.COMP.GenExpr(_10641_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5349, out _out5350, out _out5351);
          _10642_recursiveGen = _out5349;
          _10643___v121 = _out5350;
          _10644_recIdents = _out5351;
          if ((_10640_dim).Sign == 0) {
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), (_10642_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow().len())")));
          } else {
            Dafny.ISequence<Dafny.Rune> _10645_s;
            _10645_s = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(m.borrow().len())")))._ToString(DCOMPUTF16.__default.IND);
            BigInteger _10646_i;
            _10646_i = BigInteger.One;
            while ((_10646_i) < (_10640_dim)) {
              _10645_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("m.borrow().get(0).map(|m| "), _10645_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
              _10646_i = (_10646_i) + (BigInteger.One);
            }
            r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10642_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow().get(0).map(|m| ")), _10645_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"))));
          }
          RAST._IExpr _out5352;
          DCOMPUTF16._IOwnership _out5353;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5352, out _out5353);
          r = _out5352;
          resultingOwnership = _out5353;
          readIdents = _10644_recIdents;
          return ;
        }
      } else if (_source426.is_MapKeys) {
        DAST._IExpression _10647___mcc_h46 = _source426.dtor_expr;
        DAST._IExpression _10648_expr = _10647___mcc_h46;
        {
          RAST._IExpr _10649_recursiveGen;
          DCOMPUTF16._IOwnership _10650___v122;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10651_recIdents;
          RAST._IExpr _out5354;
          DCOMPUTF16._IOwnership _out5355;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5356;
          DCOMPUTF16.COMP.GenExpr(_10648_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5354, out _out5355, out _out5356);
          _10649_recursiveGen = _out5354;
          _10650___v122 = _out5355;
          _10651_recIdents = _out5356;
          readIdents = _10651_recIdents;
          r = ((_10649_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("keys"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          RAST._IExpr _out5357;
          DCOMPUTF16._IOwnership _out5358;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5357, out _out5358);
          r = _out5357;
          resultingOwnership = _out5358;
          return ;
        }
      } else if (_source426.is_MapValues) {
        DAST._IExpression _10652___mcc_h47 = _source426.dtor_expr;
        DAST._IExpression _10653_expr = _10652___mcc_h47;
        {
          RAST._IExpr _10654_recursiveGen;
          DCOMPUTF16._IOwnership _10655___v123;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10656_recIdents;
          RAST._IExpr _out5359;
          DCOMPUTF16._IOwnership _out5360;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5361;
          DCOMPUTF16.COMP.GenExpr(_10653_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5359, out _out5360, out _out5361);
          _10654_recursiveGen = _out5359;
          _10655___v123 = _out5360;
          _10656_recIdents = _out5361;
          readIdents = _10656_recIdents;
          r = ((_10654_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("values"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          RAST._IExpr _out5362;
          DCOMPUTF16._IOwnership _out5363;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5362, out _out5363);
          r = _out5362;
          resultingOwnership = _out5363;
          return ;
        }
      } else if (_source426.is_Select) {
        DAST._IExpression _10657___mcc_h48 = _source426.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _10658___mcc_h49 = _source426.dtor_field;
        bool _10659___mcc_h50 = _source426.dtor_isConstant;
        bool _10660___mcc_h51 = _source426.dtor_onDatatype;
        DAST._IExpression _source429 = _10657___mcc_h48;
        if (_source429.is_Literal) {
          DAST._ILiteral _10661___mcc_h52 = _source429.dtor_Literal_a0;
          bool _10662_isDatatype = _10660___mcc_h51;
          bool _10663_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10664_field = _10658___mcc_h49;
          DAST._IExpression _10665_on = _10657___mcc_h48;
          {
            RAST._IExpr _10666_onExpr;
            DCOMPUTF16._IOwnership _10667_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10668_recIdents;
            RAST._IExpr _out5364;
            DCOMPUTF16._IOwnership _out5365;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5366;
            DCOMPUTF16.COMP.GenExpr(_10665_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5364, out _out5365, out _out5366);
            _10666_onExpr = _out5364;
            _10667_onOwned = _out5365;
            _10668_recIdents = _out5366;
            if ((_10662_isDatatype) || (_10663_isConstant)) {
              r = ((_10666_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10664_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5367;
              DCOMPUTF16._IOwnership _out5368;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5367, out _out5368);
              r = _out5367;
              resultingOwnership = _out5368;
            } else {
              Dafny.ISequence<Dafny.Rune> _10669_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10669_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10666_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10664_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5369;
              DCOMPUTF16._IOwnership _out5370;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10669_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5369, out _out5370);
              r = _out5369;
              resultingOwnership = _out5370;
            }
            readIdents = _10668_recIdents;
            return ;
          }
        } else if (_source429.is_Ident) {
          Dafny.ISequence<Dafny.Rune> _10670___mcc_h54 = _source429.dtor_Ident_a0;
          bool _10671_isDatatype = _10660___mcc_h51;
          bool _10672_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10673_field = _10658___mcc_h49;
          DAST._IExpression _10674_on = _10657___mcc_h48;
          {
            RAST._IExpr _10675_onExpr;
            DCOMPUTF16._IOwnership _10676_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10677_recIdents;
            RAST._IExpr _out5371;
            DCOMPUTF16._IOwnership _out5372;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5373;
            DCOMPUTF16.COMP.GenExpr(_10674_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5371, out _out5372, out _out5373);
            _10675_onExpr = _out5371;
            _10676_onOwned = _out5372;
            _10677_recIdents = _out5373;
            if ((_10671_isDatatype) || (_10672_isConstant)) {
              r = ((_10675_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10673_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5374;
              DCOMPUTF16._IOwnership _out5375;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5374, out _out5375);
              r = _out5374;
              resultingOwnership = _out5375;
            } else {
              Dafny.ISequence<Dafny.Rune> _10678_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10678_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10675_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10673_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5376;
              DCOMPUTF16._IOwnership _out5377;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10678_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5376, out _out5377);
              r = _out5376;
              resultingOwnership = _out5377;
            }
            readIdents = _10677_recIdents;
            return ;
          }
        } else if (_source429.is_Companion) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10679___mcc_h56 = _source429.dtor_Companion_a0;
          bool _10680_isDatatype = _10660___mcc_h51;
          bool _10681_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10682_field = _10658___mcc_h49;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10683_c = _10679___mcc_h56;
          {
            RAST._IExpr _10684_onExpr;
            DCOMPUTF16._IOwnership _10685_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10686_recIdents;
            RAST._IExpr _out5378;
            DCOMPUTF16._IOwnership _out5379;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5380;
            DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Companion(_10683_c), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5378, out _out5379, out _out5380);
            _10684_onExpr = _out5378;
            _10685_onOwned = _out5379;
            _10686_recIdents = _out5380;
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_10684_onExpr)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMPUTF16.__default.escapeIdent(_10682_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()")));
            RAST._IExpr _out5381;
            DCOMPUTF16._IOwnership _out5382;
            DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5381, out _out5382);
            r = _out5381;
            resultingOwnership = _out5382;
            readIdents = _10686_recIdents;
            return ;
          }
        } else if (_source429.is_Tuple) {
          Dafny.ISequence<DAST._IExpression> _10687___mcc_h58 = _source429.dtor_Tuple_a0;
          bool _10688_isDatatype = _10660___mcc_h51;
          bool _10689_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10690_field = _10658___mcc_h49;
          DAST._IExpression _10691_on = _10657___mcc_h48;
          {
            RAST._IExpr _10692_onExpr;
            DCOMPUTF16._IOwnership _10693_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10694_recIdents;
            RAST._IExpr _out5383;
            DCOMPUTF16._IOwnership _out5384;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5385;
            DCOMPUTF16.COMP.GenExpr(_10691_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5383, out _out5384, out _out5385);
            _10692_onExpr = _out5383;
            _10693_onOwned = _out5384;
            _10694_recIdents = _out5385;
            if ((_10688_isDatatype) || (_10689_isConstant)) {
              r = ((_10692_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10690_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5386;
              DCOMPUTF16._IOwnership _out5387;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5386, out _out5387);
              r = _out5386;
              resultingOwnership = _out5387;
            } else {
              Dafny.ISequence<Dafny.Rune> _10695_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10695_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10692_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10690_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5388;
              DCOMPUTF16._IOwnership _out5389;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10695_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5388, out _out5389);
              r = _out5388;
              resultingOwnership = _out5389;
            }
            readIdents = _10694_recIdents;
            return ;
          }
        } else if (_source429.is_New) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10696___mcc_h60 = _source429.dtor_path;
          Dafny.ISequence<DAST._IType> _10697___mcc_h61 = _source429.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _10698___mcc_h62 = _source429.dtor_args;
          bool _10699_isDatatype = _10660___mcc_h51;
          bool _10700_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10701_field = _10658___mcc_h49;
          DAST._IExpression _10702_on = _10657___mcc_h48;
          {
            RAST._IExpr _10703_onExpr;
            DCOMPUTF16._IOwnership _10704_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10705_recIdents;
            RAST._IExpr _out5390;
            DCOMPUTF16._IOwnership _out5391;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5392;
            DCOMPUTF16.COMP.GenExpr(_10702_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5390, out _out5391, out _out5392);
            _10703_onExpr = _out5390;
            _10704_onOwned = _out5391;
            _10705_recIdents = _out5392;
            if ((_10699_isDatatype) || (_10700_isConstant)) {
              r = ((_10703_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10701_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5393;
              DCOMPUTF16._IOwnership _out5394;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5393, out _out5394);
              r = _out5393;
              resultingOwnership = _out5394;
            } else {
              Dafny.ISequence<Dafny.Rune> _10706_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10706_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10703_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10701_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5395;
              DCOMPUTF16._IOwnership _out5396;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10706_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5395, out _out5396);
              r = _out5395;
              resultingOwnership = _out5396;
            }
            readIdents = _10705_recIdents;
            return ;
          }
        } else if (_source429.is_NewArray) {
          Dafny.ISequence<DAST._IExpression> _10707___mcc_h66 = _source429.dtor_dims;
          DAST._IType _10708___mcc_h67 = _source429.dtor_typ;
          bool _10709_isDatatype = _10660___mcc_h51;
          bool _10710_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10711_field = _10658___mcc_h49;
          DAST._IExpression _10712_on = _10657___mcc_h48;
          {
            RAST._IExpr _10713_onExpr;
            DCOMPUTF16._IOwnership _10714_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10715_recIdents;
            RAST._IExpr _out5397;
            DCOMPUTF16._IOwnership _out5398;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5399;
            DCOMPUTF16.COMP.GenExpr(_10712_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5397, out _out5398, out _out5399);
            _10713_onExpr = _out5397;
            _10714_onOwned = _out5398;
            _10715_recIdents = _out5399;
            if ((_10709_isDatatype) || (_10710_isConstant)) {
              r = ((_10713_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10711_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5400;
              DCOMPUTF16._IOwnership _out5401;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5400, out _out5401);
              r = _out5400;
              resultingOwnership = _out5401;
            } else {
              Dafny.ISequence<Dafny.Rune> _10716_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10716_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10713_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10711_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5402;
              DCOMPUTF16._IOwnership _out5403;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10716_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5402, out _out5403);
              r = _out5402;
              resultingOwnership = _out5403;
            }
            readIdents = _10715_recIdents;
            return ;
          }
        } else if (_source429.is_DatatypeValue) {
          DAST._IDatatypeType _10717___mcc_h70 = _source429.dtor_datatypeType;
          Dafny.ISequence<DAST._IType> _10718___mcc_h71 = _source429.dtor_typeArgs;
          Dafny.ISequence<Dafny.Rune> _10719___mcc_h72 = _source429.dtor_variant;
          bool _10720___mcc_h73 = _source429.dtor_isCo;
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _10721___mcc_h74 = _source429.dtor_contents;
          bool _10722_isDatatype = _10660___mcc_h51;
          bool _10723_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10724_field = _10658___mcc_h49;
          DAST._IExpression _10725_on = _10657___mcc_h48;
          {
            RAST._IExpr _10726_onExpr;
            DCOMPUTF16._IOwnership _10727_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10728_recIdents;
            RAST._IExpr _out5404;
            DCOMPUTF16._IOwnership _out5405;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5406;
            DCOMPUTF16.COMP.GenExpr(_10725_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5404, out _out5405, out _out5406);
            _10726_onExpr = _out5404;
            _10727_onOwned = _out5405;
            _10728_recIdents = _out5406;
            if ((_10722_isDatatype) || (_10723_isConstant)) {
              r = ((_10726_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10724_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5407;
              DCOMPUTF16._IOwnership _out5408;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5407, out _out5408);
              r = _out5407;
              resultingOwnership = _out5408;
            } else {
              Dafny.ISequence<Dafny.Rune> _10729_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10729_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10726_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10724_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5409;
              DCOMPUTF16._IOwnership _out5410;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10729_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5409, out _out5410);
              r = _out5409;
              resultingOwnership = _out5410;
            }
            readIdents = _10728_recIdents;
            return ;
          }
        } else if (_source429.is_Convert) {
          DAST._IExpression _10730___mcc_h80 = _source429.dtor_value;
          DAST._IType _10731___mcc_h81 = _source429.dtor_from;
          DAST._IType _10732___mcc_h82 = _source429.dtor_typ;
          bool _10733_isDatatype = _10660___mcc_h51;
          bool _10734_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10735_field = _10658___mcc_h49;
          DAST._IExpression _10736_on = _10657___mcc_h48;
          {
            RAST._IExpr _10737_onExpr;
            DCOMPUTF16._IOwnership _10738_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10739_recIdents;
            RAST._IExpr _out5411;
            DCOMPUTF16._IOwnership _out5412;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5413;
            DCOMPUTF16.COMP.GenExpr(_10736_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5411, out _out5412, out _out5413);
            _10737_onExpr = _out5411;
            _10738_onOwned = _out5412;
            _10739_recIdents = _out5413;
            if ((_10733_isDatatype) || (_10734_isConstant)) {
              r = ((_10737_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10735_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5414;
              DCOMPUTF16._IOwnership _out5415;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5414, out _out5415);
              r = _out5414;
              resultingOwnership = _out5415;
            } else {
              Dafny.ISequence<Dafny.Rune> _10740_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10740_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10737_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10735_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5416;
              DCOMPUTF16._IOwnership _out5417;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10740_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5416, out _out5417);
              r = _out5416;
              resultingOwnership = _out5417;
            }
            readIdents = _10739_recIdents;
            return ;
          }
        } else if (_source429.is_SeqConstruct) {
          DAST._IExpression _10741___mcc_h86 = _source429.dtor_length;
          DAST._IExpression _10742___mcc_h87 = _source429.dtor_elem;
          bool _10743_isDatatype = _10660___mcc_h51;
          bool _10744_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10745_field = _10658___mcc_h49;
          DAST._IExpression _10746_on = _10657___mcc_h48;
          {
            RAST._IExpr _10747_onExpr;
            DCOMPUTF16._IOwnership _10748_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10749_recIdents;
            RAST._IExpr _out5418;
            DCOMPUTF16._IOwnership _out5419;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5420;
            DCOMPUTF16.COMP.GenExpr(_10746_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5418, out _out5419, out _out5420);
            _10747_onExpr = _out5418;
            _10748_onOwned = _out5419;
            _10749_recIdents = _out5420;
            if ((_10743_isDatatype) || (_10744_isConstant)) {
              r = ((_10747_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10745_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5421;
              DCOMPUTF16._IOwnership _out5422;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5421, out _out5422);
              r = _out5421;
              resultingOwnership = _out5422;
            } else {
              Dafny.ISequence<Dafny.Rune> _10750_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10750_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10747_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10745_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5423;
              DCOMPUTF16._IOwnership _out5424;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10750_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5423, out _out5424);
              r = _out5423;
              resultingOwnership = _out5424;
            }
            readIdents = _10749_recIdents;
            return ;
          }
        } else if (_source429.is_SeqValue) {
          Dafny.ISequence<DAST._IExpression> _10751___mcc_h90 = _source429.dtor_elements;
          DAST._IType _10752___mcc_h91 = _source429.dtor_typ;
          bool _10753_isDatatype = _10660___mcc_h51;
          bool _10754_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10755_field = _10658___mcc_h49;
          DAST._IExpression _10756_on = _10657___mcc_h48;
          {
            RAST._IExpr _10757_onExpr;
            DCOMPUTF16._IOwnership _10758_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10759_recIdents;
            RAST._IExpr _out5425;
            DCOMPUTF16._IOwnership _out5426;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5427;
            DCOMPUTF16.COMP.GenExpr(_10756_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5425, out _out5426, out _out5427);
            _10757_onExpr = _out5425;
            _10758_onOwned = _out5426;
            _10759_recIdents = _out5427;
            if ((_10753_isDatatype) || (_10754_isConstant)) {
              r = ((_10757_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10755_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5428;
              DCOMPUTF16._IOwnership _out5429;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5428, out _out5429);
              r = _out5428;
              resultingOwnership = _out5429;
            } else {
              Dafny.ISequence<Dafny.Rune> _10760_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10760_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10757_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10755_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5430;
              DCOMPUTF16._IOwnership _out5431;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10760_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5430, out _out5431);
              r = _out5430;
              resultingOwnership = _out5431;
            }
            readIdents = _10759_recIdents;
            return ;
          }
        } else if (_source429.is_SetValue) {
          Dafny.ISequence<DAST._IExpression> _10761___mcc_h94 = _source429.dtor_elements;
          bool _10762_isDatatype = _10660___mcc_h51;
          bool _10763_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10764_field = _10658___mcc_h49;
          DAST._IExpression _10765_on = _10657___mcc_h48;
          {
            RAST._IExpr _10766_onExpr;
            DCOMPUTF16._IOwnership _10767_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10768_recIdents;
            RAST._IExpr _out5432;
            DCOMPUTF16._IOwnership _out5433;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5434;
            DCOMPUTF16.COMP.GenExpr(_10765_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5432, out _out5433, out _out5434);
            _10766_onExpr = _out5432;
            _10767_onOwned = _out5433;
            _10768_recIdents = _out5434;
            if ((_10762_isDatatype) || (_10763_isConstant)) {
              r = ((_10766_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10764_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5435;
              DCOMPUTF16._IOwnership _out5436;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5435, out _out5436);
              r = _out5435;
              resultingOwnership = _out5436;
            } else {
              Dafny.ISequence<Dafny.Rune> _10769_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10769_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10766_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10764_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5437;
              DCOMPUTF16._IOwnership _out5438;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10769_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5437, out _out5438);
              r = _out5437;
              resultingOwnership = _out5438;
            }
            readIdents = _10768_recIdents;
            return ;
          }
        } else if (_source429.is_MultisetValue) {
          Dafny.ISequence<DAST._IExpression> _10770___mcc_h96 = _source429.dtor_elements;
          bool _10771_isDatatype = _10660___mcc_h51;
          bool _10772_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10773_field = _10658___mcc_h49;
          DAST._IExpression _10774_on = _10657___mcc_h48;
          {
            RAST._IExpr _10775_onExpr;
            DCOMPUTF16._IOwnership _10776_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10777_recIdents;
            RAST._IExpr _out5439;
            DCOMPUTF16._IOwnership _out5440;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5441;
            DCOMPUTF16.COMP.GenExpr(_10774_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5439, out _out5440, out _out5441);
            _10775_onExpr = _out5439;
            _10776_onOwned = _out5440;
            _10777_recIdents = _out5441;
            if ((_10771_isDatatype) || (_10772_isConstant)) {
              r = ((_10775_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10773_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5442;
              DCOMPUTF16._IOwnership _out5443;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5442, out _out5443);
              r = _out5442;
              resultingOwnership = _out5443;
            } else {
              Dafny.ISequence<Dafny.Rune> _10778_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10778_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10775_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10773_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5444;
              DCOMPUTF16._IOwnership _out5445;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10778_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5444, out _out5445);
              r = _out5444;
              resultingOwnership = _out5445;
            }
            readIdents = _10777_recIdents;
            return ;
          }
        } else if (_source429.is_MapValue) {
          Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _10779___mcc_h98 = _source429.dtor_mapElems;
          bool _10780_isDatatype = _10660___mcc_h51;
          bool _10781_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10782_field = _10658___mcc_h49;
          DAST._IExpression _10783_on = _10657___mcc_h48;
          {
            RAST._IExpr _10784_onExpr;
            DCOMPUTF16._IOwnership _10785_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10786_recIdents;
            RAST._IExpr _out5446;
            DCOMPUTF16._IOwnership _out5447;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5448;
            DCOMPUTF16.COMP.GenExpr(_10783_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5446, out _out5447, out _out5448);
            _10784_onExpr = _out5446;
            _10785_onOwned = _out5447;
            _10786_recIdents = _out5448;
            if ((_10780_isDatatype) || (_10781_isConstant)) {
              r = ((_10784_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10782_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5449;
              DCOMPUTF16._IOwnership _out5450;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5449, out _out5450);
              r = _out5449;
              resultingOwnership = _out5450;
            } else {
              Dafny.ISequence<Dafny.Rune> _10787_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10787_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10784_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10782_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5451;
              DCOMPUTF16._IOwnership _out5452;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10787_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5451, out _out5452);
              r = _out5451;
              resultingOwnership = _out5452;
            }
            readIdents = _10786_recIdents;
            return ;
          }
        } else if (_source429.is_MapBuilder) {
          DAST._IType _10788___mcc_h100 = _source429.dtor_keyType;
          DAST._IType _10789___mcc_h101 = _source429.dtor_valueType;
          bool _10790_isDatatype = _10660___mcc_h51;
          bool _10791_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10792_field = _10658___mcc_h49;
          DAST._IExpression _10793_on = _10657___mcc_h48;
          {
            RAST._IExpr _10794_onExpr;
            DCOMPUTF16._IOwnership _10795_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10796_recIdents;
            RAST._IExpr _out5453;
            DCOMPUTF16._IOwnership _out5454;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5455;
            DCOMPUTF16.COMP.GenExpr(_10793_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5453, out _out5454, out _out5455);
            _10794_onExpr = _out5453;
            _10795_onOwned = _out5454;
            _10796_recIdents = _out5455;
            if ((_10790_isDatatype) || (_10791_isConstant)) {
              r = ((_10794_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10792_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5456;
              DCOMPUTF16._IOwnership _out5457;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5456, out _out5457);
              r = _out5456;
              resultingOwnership = _out5457;
            } else {
              Dafny.ISequence<Dafny.Rune> _10797_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10797_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10794_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10792_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5458;
              DCOMPUTF16._IOwnership _out5459;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10797_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5458, out _out5459);
              r = _out5458;
              resultingOwnership = _out5459;
            }
            readIdents = _10796_recIdents;
            return ;
          }
        } else if (_source429.is_SeqUpdate) {
          DAST._IExpression _10798___mcc_h104 = _source429.dtor_expr;
          DAST._IExpression _10799___mcc_h105 = _source429.dtor_indexExpr;
          DAST._IExpression _10800___mcc_h106 = _source429.dtor_value;
          bool _10801_isDatatype = _10660___mcc_h51;
          bool _10802_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10803_field = _10658___mcc_h49;
          DAST._IExpression _10804_on = _10657___mcc_h48;
          {
            RAST._IExpr _10805_onExpr;
            DCOMPUTF16._IOwnership _10806_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10807_recIdents;
            RAST._IExpr _out5460;
            DCOMPUTF16._IOwnership _out5461;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5462;
            DCOMPUTF16.COMP.GenExpr(_10804_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5460, out _out5461, out _out5462);
            _10805_onExpr = _out5460;
            _10806_onOwned = _out5461;
            _10807_recIdents = _out5462;
            if ((_10801_isDatatype) || (_10802_isConstant)) {
              r = ((_10805_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10803_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5463;
              DCOMPUTF16._IOwnership _out5464;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5463, out _out5464);
              r = _out5463;
              resultingOwnership = _out5464;
            } else {
              Dafny.ISequence<Dafny.Rune> _10808_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10808_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10805_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10803_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5465;
              DCOMPUTF16._IOwnership _out5466;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10808_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5465, out _out5466);
              r = _out5465;
              resultingOwnership = _out5466;
            }
            readIdents = _10807_recIdents;
            return ;
          }
        } else if (_source429.is_MapUpdate) {
          DAST._IExpression _10809___mcc_h110 = _source429.dtor_expr;
          DAST._IExpression _10810___mcc_h111 = _source429.dtor_indexExpr;
          DAST._IExpression _10811___mcc_h112 = _source429.dtor_value;
          bool _10812_isDatatype = _10660___mcc_h51;
          bool _10813_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10814_field = _10658___mcc_h49;
          DAST._IExpression _10815_on = _10657___mcc_h48;
          {
            RAST._IExpr _10816_onExpr;
            DCOMPUTF16._IOwnership _10817_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10818_recIdents;
            RAST._IExpr _out5467;
            DCOMPUTF16._IOwnership _out5468;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5469;
            DCOMPUTF16.COMP.GenExpr(_10815_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5467, out _out5468, out _out5469);
            _10816_onExpr = _out5467;
            _10817_onOwned = _out5468;
            _10818_recIdents = _out5469;
            if ((_10812_isDatatype) || (_10813_isConstant)) {
              r = ((_10816_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10814_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5470;
              DCOMPUTF16._IOwnership _out5471;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5470, out _out5471);
              r = _out5470;
              resultingOwnership = _out5471;
            } else {
              Dafny.ISequence<Dafny.Rune> _10819_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10819_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10816_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10814_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5472;
              DCOMPUTF16._IOwnership _out5473;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10819_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5472, out _out5473);
              r = _out5472;
              resultingOwnership = _out5473;
            }
            readIdents = _10818_recIdents;
            return ;
          }
        } else if (_source429.is_SetBuilder) {
          DAST._IType _10820___mcc_h116 = _source429.dtor_elemType;
          bool _10821_isDatatype = _10660___mcc_h51;
          bool _10822_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10823_field = _10658___mcc_h49;
          DAST._IExpression _10824_on = _10657___mcc_h48;
          {
            RAST._IExpr _10825_onExpr;
            DCOMPUTF16._IOwnership _10826_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10827_recIdents;
            RAST._IExpr _out5474;
            DCOMPUTF16._IOwnership _out5475;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5476;
            DCOMPUTF16.COMP.GenExpr(_10824_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5474, out _out5475, out _out5476);
            _10825_onExpr = _out5474;
            _10826_onOwned = _out5475;
            _10827_recIdents = _out5476;
            if ((_10821_isDatatype) || (_10822_isConstant)) {
              r = ((_10825_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10823_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5477;
              DCOMPUTF16._IOwnership _out5478;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5477, out _out5478);
              r = _out5477;
              resultingOwnership = _out5478;
            } else {
              Dafny.ISequence<Dafny.Rune> _10828_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10828_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10825_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10823_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5479;
              DCOMPUTF16._IOwnership _out5480;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10828_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5479, out _out5480);
              r = _out5479;
              resultingOwnership = _out5480;
            }
            readIdents = _10827_recIdents;
            return ;
          }
        } else if (_source429.is_ToMultiset) {
          DAST._IExpression _10829___mcc_h118 = _source429.dtor_ToMultiset_a0;
          bool _10830_isDatatype = _10660___mcc_h51;
          bool _10831_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10832_field = _10658___mcc_h49;
          DAST._IExpression _10833_on = _10657___mcc_h48;
          {
            RAST._IExpr _10834_onExpr;
            DCOMPUTF16._IOwnership _10835_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10836_recIdents;
            RAST._IExpr _out5481;
            DCOMPUTF16._IOwnership _out5482;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5483;
            DCOMPUTF16.COMP.GenExpr(_10833_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5481, out _out5482, out _out5483);
            _10834_onExpr = _out5481;
            _10835_onOwned = _out5482;
            _10836_recIdents = _out5483;
            if ((_10830_isDatatype) || (_10831_isConstant)) {
              r = ((_10834_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10832_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5484;
              DCOMPUTF16._IOwnership _out5485;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5484, out _out5485);
              r = _out5484;
              resultingOwnership = _out5485;
            } else {
              Dafny.ISequence<Dafny.Rune> _10837_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10837_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10834_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10832_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5486;
              DCOMPUTF16._IOwnership _out5487;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10837_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5486, out _out5487);
              r = _out5486;
              resultingOwnership = _out5487;
            }
            readIdents = _10836_recIdents;
            return ;
          }
        } else if (_source429.is_This) {
          bool _10838_isDatatype = _10660___mcc_h51;
          bool _10839_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10840_field = _10658___mcc_h49;
          DAST._IExpression _10841_on = _10657___mcc_h48;
          {
            RAST._IExpr _10842_onExpr;
            DCOMPUTF16._IOwnership _10843_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10844_recIdents;
            RAST._IExpr _out5488;
            DCOMPUTF16._IOwnership _out5489;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5490;
            DCOMPUTF16.COMP.GenExpr(_10841_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5488, out _out5489, out _out5490);
            _10842_onExpr = _out5488;
            _10843_onOwned = _out5489;
            _10844_recIdents = _out5490;
            if ((_10838_isDatatype) || (_10839_isConstant)) {
              r = ((_10842_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10840_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5491;
              DCOMPUTF16._IOwnership _out5492;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5491, out _out5492);
              r = _out5491;
              resultingOwnership = _out5492;
            } else {
              Dafny.ISequence<Dafny.Rune> _10845_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10845_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10842_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10840_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5493;
              DCOMPUTF16._IOwnership _out5494;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10845_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5493, out _out5494);
              r = _out5493;
              resultingOwnership = _out5494;
            }
            readIdents = _10844_recIdents;
            return ;
          }
        } else if (_source429.is_Ite) {
          DAST._IExpression _10846___mcc_h120 = _source429.dtor_cond;
          DAST._IExpression _10847___mcc_h121 = _source429.dtor_thn;
          DAST._IExpression _10848___mcc_h122 = _source429.dtor_els;
          bool _10849_isDatatype = _10660___mcc_h51;
          bool _10850_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10851_field = _10658___mcc_h49;
          DAST._IExpression _10852_on = _10657___mcc_h48;
          {
            RAST._IExpr _10853_onExpr;
            DCOMPUTF16._IOwnership _10854_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10855_recIdents;
            RAST._IExpr _out5495;
            DCOMPUTF16._IOwnership _out5496;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5497;
            DCOMPUTF16.COMP.GenExpr(_10852_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5495, out _out5496, out _out5497);
            _10853_onExpr = _out5495;
            _10854_onOwned = _out5496;
            _10855_recIdents = _out5497;
            if ((_10849_isDatatype) || (_10850_isConstant)) {
              r = ((_10853_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10851_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5498;
              DCOMPUTF16._IOwnership _out5499;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5498, out _out5499);
              r = _out5498;
              resultingOwnership = _out5499;
            } else {
              Dafny.ISequence<Dafny.Rune> _10856_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10856_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10853_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10851_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5500;
              DCOMPUTF16._IOwnership _out5501;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10856_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5500, out _out5501);
              r = _out5500;
              resultingOwnership = _out5501;
            }
            readIdents = _10855_recIdents;
            return ;
          }
        } else if (_source429.is_UnOp) {
          DAST._IUnaryOp _10857___mcc_h126 = _source429.dtor_unOp;
          DAST._IExpression _10858___mcc_h127 = _source429.dtor_expr;
          DAST.Format._IUnOpFormat _10859___mcc_h128 = _source429.dtor_format1;
          bool _10860_isDatatype = _10660___mcc_h51;
          bool _10861_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10862_field = _10658___mcc_h49;
          DAST._IExpression _10863_on = _10657___mcc_h48;
          {
            RAST._IExpr _10864_onExpr;
            DCOMPUTF16._IOwnership _10865_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10866_recIdents;
            RAST._IExpr _out5502;
            DCOMPUTF16._IOwnership _out5503;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5504;
            DCOMPUTF16.COMP.GenExpr(_10863_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5502, out _out5503, out _out5504);
            _10864_onExpr = _out5502;
            _10865_onOwned = _out5503;
            _10866_recIdents = _out5504;
            if ((_10860_isDatatype) || (_10861_isConstant)) {
              r = ((_10864_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10862_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5505;
              DCOMPUTF16._IOwnership _out5506;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5505, out _out5506);
              r = _out5505;
              resultingOwnership = _out5506;
            } else {
              Dafny.ISequence<Dafny.Rune> _10867_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10867_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10864_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10862_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5507;
              DCOMPUTF16._IOwnership _out5508;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10867_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5507, out _out5508);
              r = _out5507;
              resultingOwnership = _out5508;
            }
            readIdents = _10866_recIdents;
            return ;
          }
        } else if (_source429.is_BinOp) {
          DAST._IBinOp _10868___mcc_h132 = _source429.dtor_op;
          DAST._IExpression _10869___mcc_h133 = _source429.dtor_left;
          DAST._IExpression _10870___mcc_h134 = _source429.dtor_right;
          DAST.Format._IBinOpFormat _10871___mcc_h135 = _source429.dtor_format2;
          bool _10872_isDatatype = _10660___mcc_h51;
          bool _10873_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10874_field = _10658___mcc_h49;
          DAST._IExpression _10875_on = _10657___mcc_h48;
          {
            RAST._IExpr _10876_onExpr;
            DCOMPUTF16._IOwnership _10877_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10878_recIdents;
            RAST._IExpr _out5509;
            DCOMPUTF16._IOwnership _out5510;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5511;
            DCOMPUTF16.COMP.GenExpr(_10875_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5509, out _out5510, out _out5511);
            _10876_onExpr = _out5509;
            _10877_onOwned = _out5510;
            _10878_recIdents = _out5511;
            if ((_10872_isDatatype) || (_10873_isConstant)) {
              r = ((_10876_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10874_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5512;
              DCOMPUTF16._IOwnership _out5513;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5512, out _out5513);
              r = _out5512;
              resultingOwnership = _out5513;
            } else {
              Dafny.ISequence<Dafny.Rune> _10879_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10879_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10876_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10874_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5514;
              DCOMPUTF16._IOwnership _out5515;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10879_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5514, out _out5515);
              r = _out5514;
              resultingOwnership = _out5515;
            }
            readIdents = _10878_recIdents;
            return ;
          }
        } else if (_source429.is_ArrayLen) {
          DAST._IExpression _10880___mcc_h140 = _source429.dtor_expr;
          BigInteger _10881___mcc_h141 = _source429.dtor_dim;
          bool _10882_isDatatype = _10660___mcc_h51;
          bool _10883_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10884_field = _10658___mcc_h49;
          DAST._IExpression _10885_on = _10657___mcc_h48;
          {
            RAST._IExpr _10886_onExpr;
            DCOMPUTF16._IOwnership _10887_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10888_recIdents;
            RAST._IExpr _out5516;
            DCOMPUTF16._IOwnership _out5517;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5518;
            DCOMPUTF16.COMP.GenExpr(_10885_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5516, out _out5517, out _out5518);
            _10886_onExpr = _out5516;
            _10887_onOwned = _out5517;
            _10888_recIdents = _out5518;
            if ((_10882_isDatatype) || (_10883_isConstant)) {
              r = ((_10886_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10884_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5519;
              DCOMPUTF16._IOwnership _out5520;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5519, out _out5520);
              r = _out5519;
              resultingOwnership = _out5520;
            } else {
              Dafny.ISequence<Dafny.Rune> _10889_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10889_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10886_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10884_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5521;
              DCOMPUTF16._IOwnership _out5522;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10889_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5521, out _out5522);
              r = _out5521;
              resultingOwnership = _out5522;
            }
            readIdents = _10888_recIdents;
            return ;
          }
        } else if (_source429.is_MapKeys) {
          DAST._IExpression _10890___mcc_h144 = _source429.dtor_expr;
          bool _10891_isDatatype = _10660___mcc_h51;
          bool _10892_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10893_field = _10658___mcc_h49;
          DAST._IExpression _10894_on = _10657___mcc_h48;
          {
            RAST._IExpr _10895_onExpr;
            DCOMPUTF16._IOwnership _10896_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10897_recIdents;
            RAST._IExpr _out5523;
            DCOMPUTF16._IOwnership _out5524;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5525;
            DCOMPUTF16.COMP.GenExpr(_10894_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5523, out _out5524, out _out5525);
            _10895_onExpr = _out5523;
            _10896_onOwned = _out5524;
            _10897_recIdents = _out5525;
            if ((_10891_isDatatype) || (_10892_isConstant)) {
              r = ((_10895_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10893_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5526;
              DCOMPUTF16._IOwnership _out5527;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5526, out _out5527);
              r = _out5526;
              resultingOwnership = _out5527;
            } else {
              Dafny.ISequence<Dafny.Rune> _10898_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10898_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10895_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10893_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5528;
              DCOMPUTF16._IOwnership _out5529;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10898_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5528, out _out5529);
              r = _out5528;
              resultingOwnership = _out5529;
            }
            readIdents = _10897_recIdents;
            return ;
          }
        } else if (_source429.is_MapValues) {
          DAST._IExpression _10899___mcc_h146 = _source429.dtor_expr;
          bool _10900_isDatatype = _10660___mcc_h51;
          bool _10901_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10902_field = _10658___mcc_h49;
          DAST._IExpression _10903_on = _10657___mcc_h48;
          {
            RAST._IExpr _10904_onExpr;
            DCOMPUTF16._IOwnership _10905_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10906_recIdents;
            RAST._IExpr _out5530;
            DCOMPUTF16._IOwnership _out5531;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5532;
            DCOMPUTF16.COMP.GenExpr(_10903_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5530, out _out5531, out _out5532);
            _10904_onExpr = _out5530;
            _10905_onOwned = _out5531;
            _10906_recIdents = _out5532;
            if ((_10900_isDatatype) || (_10901_isConstant)) {
              r = ((_10904_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10902_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5533;
              DCOMPUTF16._IOwnership _out5534;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5533, out _out5534);
              r = _out5533;
              resultingOwnership = _out5534;
            } else {
              Dafny.ISequence<Dafny.Rune> _10907_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10907_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10904_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10902_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5535;
              DCOMPUTF16._IOwnership _out5536;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10907_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5535, out _out5536);
              r = _out5535;
              resultingOwnership = _out5536;
            }
            readIdents = _10906_recIdents;
            return ;
          }
        } else if (_source429.is_Select) {
          DAST._IExpression _10908___mcc_h148 = _source429.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _10909___mcc_h149 = _source429.dtor_field;
          bool _10910___mcc_h150 = _source429.dtor_isConstant;
          bool _10911___mcc_h151 = _source429.dtor_onDatatype;
          bool _10912_isDatatype = _10660___mcc_h51;
          bool _10913_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10914_field = _10658___mcc_h49;
          DAST._IExpression _10915_on = _10657___mcc_h48;
          {
            RAST._IExpr _10916_onExpr;
            DCOMPUTF16._IOwnership _10917_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10918_recIdents;
            RAST._IExpr _out5537;
            DCOMPUTF16._IOwnership _out5538;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5539;
            DCOMPUTF16.COMP.GenExpr(_10915_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5537, out _out5538, out _out5539);
            _10916_onExpr = _out5537;
            _10917_onOwned = _out5538;
            _10918_recIdents = _out5539;
            if ((_10912_isDatatype) || (_10913_isConstant)) {
              r = ((_10916_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10914_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5540;
              DCOMPUTF16._IOwnership _out5541;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5540, out _out5541);
              r = _out5540;
              resultingOwnership = _out5541;
            } else {
              Dafny.ISequence<Dafny.Rune> _10919_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10919_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10916_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10914_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5542;
              DCOMPUTF16._IOwnership _out5543;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10919_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5542, out _out5543);
              r = _out5542;
              resultingOwnership = _out5543;
            }
            readIdents = _10918_recIdents;
            return ;
          }
        } else if (_source429.is_SelectFn) {
          DAST._IExpression _10920___mcc_h156 = _source429.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _10921___mcc_h157 = _source429.dtor_field;
          bool _10922___mcc_h158 = _source429.dtor_onDatatype;
          bool _10923___mcc_h159 = _source429.dtor_isStatic;
          BigInteger _10924___mcc_h160 = _source429.dtor_arity;
          bool _10925_isDatatype = _10660___mcc_h51;
          bool _10926_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10927_field = _10658___mcc_h49;
          DAST._IExpression _10928_on = _10657___mcc_h48;
          {
            RAST._IExpr _10929_onExpr;
            DCOMPUTF16._IOwnership _10930_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10931_recIdents;
            RAST._IExpr _out5544;
            DCOMPUTF16._IOwnership _out5545;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5546;
            DCOMPUTF16.COMP.GenExpr(_10928_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5544, out _out5545, out _out5546);
            _10929_onExpr = _out5544;
            _10930_onOwned = _out5545;
            _10931_recIdents = _out5546;
            if ((_10925_isDatatype) || (_10926_isConstant)) {
              r = ((_10929_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10927_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5547;
              DCOMPUTF16._IOwnership _out5548;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5547, out _out5548);
              r = _out5547;
              resultingOwnership = _out5548;
            } else {
              Dafny.ISequence<Dafny.Rune> _10932_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10932_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10929_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10927_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5549;
              DCOMPUTF16._IOwnership _out5550;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10932_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5549, out _out5550);
              r = _out5549;
              resultingOwnership = _out5550;
            }
            readIdents = _10931_recIdents;
            return ;
          }
        } else if (_source429.is_Index) {
          DAST._IExpression _10933___mcc_h166 = _source429.dtor_expr;
          DAST._ICollKind _10934___mcc_h167 = _source429.dtor_collKind;
          Dafny.ISequence<DAST._IExpression> _10935___mcc_h168 = _source429.dtor_indices;
          bool _10936_isDatatype = _10660___mcc_h51;
          bool _10937_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10938_field = _10658___mcc_h49;
          DAST._IExpression _10939_on = _10657___mcc_h48;
          {
            RAST._IExpr _10940_onExpr;
            DCOMPUTF16._IOwnership _10941_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10942_recIdents;
            RAST._IExpr _out5551;
            DCOMPUTF16._IOwnership _out5552;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5553;
            DCOMPUTF16.COMP.GenExpr(_10939_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5551, out _out5552, out _out5553);
            _10940_onExpr = _out5551;
            _10941_onOwned = _out5552;
            _10942_recIdents = _out5553;
            if ((_10936_isDatatype) || (_10937_isConstant)) {
              r = ((_10940_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10938_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5554;
              DCOMPUTF16._IOwnership _out5555;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5554, out _out5555);
              r = _out5554;
              resultingOwnership = _out5555;
            } else {
              Dafny.ISequence<Dafny.Rune> _10943_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10943_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10940_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10938_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5556;
              DCOMPUTF16._IOwnership _out5557;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10943_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5556, out _out5557);
              r = _out5556;
              resultingOwnership = _out5557;
            }
            readIdents = _10942_recIdents;
            return ;
          }
        } else if (_source429.is_IndexRange) {
          DAST._IExpression _10944___mcc_h172 = _source429.dtor_expr;
          bool _10945___mcc_h173 = _source429.dtor_isArray;
          Std.Wrappers._IOption<DAST._IExpression> _10946___mcc_h174 = _source429.dtor_low;
          Std.Wrappers._IOption<DAST._IExpression> _10947___mcc_h175 = _source429.dtor_high;
          bool _10948_isDatatype = _10660___mcc_h51;
          bool _10949_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10950_field = _10658___mcc_h49;
          DAST._IExpression _10951_on = _10657___mcc_h48;
          {
            RAST._IExpr _10952_onExpr;
            DCOMPUTF16._IOwnership _10953_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10954_recIdents;
            RAST._IExpr _out5558;
            DCOMPUTF16._IOwnership _out5559;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5560;
            DCOMPUTF16.COMP.GenExpr(_10951_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5558, out _out5559, out _out5560);
            _10952_onExpr = _out5558;
            _10953_onOwned = _out5559;
            _10954_recIdents = _out5560;
            if ((_10948_isDatatype) || (_10949_isConstant)) {
              r = ((_10952_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10950_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5561;
              DCOMPUTF16._IOwnership _out5562;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5561, out _out5562);
              r = _out5561;
              resultingOwnership = _out5562;
            } else {
              Dafny.ISequence<Dafny.Rune> _10955_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10955_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10952_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10950_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5563;
              DCOMPUTF16._IOwnership _out5564;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10955_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5563, out _out5564);
              r = _out5563;
              resultingOwnership = _out5564;
            }
            readIdents = _10954_recIdents;
            return ;
          }
        } else if (_source429.is_TupleSelect) {
          DAST._IExpression _10956___mcc_h180 = _source429.dtor_expr;
          BigInteger _10957___mcc_h181 = _source429.dtor_index;
          bool _10958_isDatatype = _10660___mcc_h51;
          bool _10959_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10960_field = _10658___mcc_h49;
          DAST._IExpression _10961_on = _10657___mcc_h48;
          {
            RAST._IExpr _10962_onExpr;
            DCOMPUTF16._IOwnership _10963_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10964_recIdents;
            RAST._IExpr _out5565;
            DCOMPUTF16._IOwnership _out5566;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5567;
            DCOMPUTF16.COMP.GenExpr(_10961_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5565, out _out5566, out _out5567);
            _10962_onExpr = _out5565;
            _10963_onOwned = _out5566;
            _10964_recIdents = _out5567;
            if ((_10958_isDatatype) || (_10959_isConstant)) {
              r = ((_10962_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10960_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5568;
              DCOMPUTF16._IOwnership _out5569;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5568, out _out5569);
              r = _out5568;
              resultingOwnership = _out5569;
            } else {
              Dafny.ISequence<Dafny.Rune> _10965_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10965_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10962_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10960_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5570;
              DCOMPUTF16._IOwnership _out5571;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10965_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5570, out _out5571);
              r = _out5570;
              resultingOwnership = _out5571;
            }
            readIdents = _10964_recIdents;
            return ;
          }
        } else if (_source429.is_Call) {
          DAST._IExpression _10966___mcc_h184 = _source429.dtor_on;
          DAST._ICallName _10967___mcc_h185 = _source429.dtor_callName;
          Dafny.ISequence<DAST._IType> _10968___mcc_h186 = _source429.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _10969___mcc_h187 = _source429.dtor_args;
          bool _10970_isDatatype = _10660___mcc_h51;
          bool _10971_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10972_field = _10658___mcc_h49;
          DAST._IExpression _10973_on = _10657___mcc_h48;
          {
            RAST._IExpr _10974_onExpr;
            DCOMPUTF16._IOwnership _10975_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10976_recIdents;
            RAST._IExpr _out5572;
            DCOMPUTF16._IOwnership _out5573;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5574;
            DCOMPUTF16.COMP.GenExpr(_10973_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5572, out _out5573, out _out5574);
            _10974_onExpr = _out5572;
            _10975_onOwned = _out5573;
            _10976_recIdents = _out5574;
            if ((_10970_isDatatype) || (_10971_isConstant)) {
              r = ((_10974_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10972_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5575;
              DCOMPUTF16._IOwnership _out5576;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5575, out _out5576);
              r = _out5575;
              resultingOwnership = _out5576;
            } else {
              Dafny.ISequence<Dafny.Rune> _10977_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10977_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10974_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10972_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5577;
              DCOMPUTF16._IOwnership _out5578;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10977_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5577, out _out5578);
              r = _out5577;
              resultingOwnership = _out5578;
            }
            readIdents = _10976_recIdents;
            return ;
          }
        } else if (_source429.is_Lambda) {
          Dafny.ISequence<DAST._IFormal> _10978___mcc_h192 = _source429.dtor_params;
          DAST._IType _10979___mcc_h193 = _source429.dtor_retType;
          Dafny.ISequence<DAST._IStatement> _10980___mcc_h194 = _source429.dtor_body;
          bool _10981_isDatatype = _10660___mcc_h51;
          bool _10982_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10983_field = _10658___mcc_h49;
          DAST._IExpression _10984_on = _10657___mcc_h48;
          {
            RAST._IExpr _10985_onExpr;
            DCOMPUTF16._IOwnership _10986_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10987_recIdents;
            RAST._IExpr _out5579;
            DCOMPUTF16._IOwnership _out5580;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5581;
            DCOMPUTF16.COMP.GenExpr(_10984_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5579, out _out5580, out _out5581);
            _10985_onExpr = _out5579;
            _10986_onOwned = _out5580;
            _10987_recIdents = _out5581;
            if ((_10981_isDatatype) || (_10982_isConstant)) {
              r = ((_10985_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10983_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5582;
              DCOMPUTF16._IOwnership _out5583;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5582, out _out5583);
              r = _out5582;
              resultingOwnership = _out5583;
            } else {
              Dafny.ISequence<Dafny.Rune> _10988_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10988_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10985_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10983_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5584;
              DCOMPUTF16._IOwnership _out5585;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10988_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5584, out _out5585);
              r = _out5584;
              resultingOwnership = _out5585;
            }
            readIdents = _10987_recIdents;
            return ;
          }
        } else if (_source429.is_BetaRedex) {
          Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _10989___mcc_h198 = _source429.dtor_values;
          DAST._IType _10990___mcc_h199 = _source429.dtor_retType;
          DAST._IExpression _10991___mcc_h200 = _source429.dtor_expr;
          bool _10992_isDatatype = _10660___mcc_h51;
          bool _10993_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10994_field = _10658___mcc_h49;
          DAST._IExpression _10995_on = _10657___mcc_h48;
          {
            RAST._IExpr _10996_onExpr;
            DCOMPUTF16._IOwnership _10997_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10998_recIdents;
            RAST._IExpr _out5586;
            DCOMPUTF16._IOwnership _out5587;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5588;
            DCOMPUTF16.COMP.GenExpr(_10995_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5586, out _out5587, out _out5588);
            _10996_onExpr = _out5586;
            _10997_onOwned = _out5587;
            _10998_recIdents = _out5588;
            if ((_10992_isDatatype) || (_10993_isConstant)) {
              r = ((_10996_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10994_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5589;
              DCOMPUTF16._IOwnership _out5590;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5589, out _out5590);
              r = _out5589;
              resultingOwnership = _out5590;
            } else {
              Dafny.ISequence<Dafny.Rune> _10999_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10999_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10996_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10994_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5591;
              DCOMPUTF16._IOwnership _out5592;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10999_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5591, out _out5592);
              r = _out5591;
              resultingOwnership = _out5592;
            }
            readIdents = _10998_recIdents;
            return ;
          }
        } else if (_source429.is_IIFE) {
          Dafny.ISequence<Dafny.Rune> _11000___mcc_h204 = _source429.dtor_name;
          DAST._IType _11001___mcc_h205 = _source429.dtor_typ;
          DAST._IExpression _11002___mcc_h206 = _source429.dtor_value;
          DAST._IExpression _11003___mcc_h207 = _source429.dtor_iifeBody;
          bool _11004_isDatatype = _10660___mcc_h51;
          bool _11005_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _11006_field = _10658___mcc_h49;
          DAST._IExpression _11007_on = _10657___mcc_h48;
          {
            RAST._IExpr _11008_onExpr;
            DCOMPUTF16._IOwnership _11009_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11010_recIdents;
            RAST._IExpr _out5593;
            DCOMPUTF16._IOwnership _out5594;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5595;
            DCOMPUTF16.COMP.GenExpr(_11007_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5593, out _out5594, out _out5595);
            _11008_onExpr = _out5593;
            _11009_onOwned = _out5594;
            _11010_recIdents = _out5595;
            if ((_11004_isDatatype) || (_11005_isConstant)) {
              r = ((_11008_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_11006_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5596;
              DCOMPUTF16._IOwnership _out5597;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5596, out _out5597);
              r = _out5596;
              resultingOwnership = _out5597;
            } else {
              Dafny.ISequence<Dafny.Rune> _11011_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _11011_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_11008_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_11006_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5598;
              DCOMPUTF16._IOwnership _out5599;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_11011_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5598, out _out5599);
              r = _out5598;
              resultingOwnership = _out5599;
            }
            readIdents = _11010_recIdents;
            return ;
          }
        } else if (_source429.is_Apply) {
          DAST._IExpression _11012___mcc_h212 = _source429.dtor_expr;
          Dafny.ISequence<DAST._IExpression> _11013___mcc_h213 = _source429.dtor_args;
          bool _11014_isDatatype = _10660___mcc_h51;
          bool _11015_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _11016_field = _10658___mcc_h49;
          DAST._IExpression _11017_on = _10657___mcc_h48;
          {
            RAST._IExpr _11018_onExpr;
            DCOMPUTF16._IOwnership _11019_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11020_recIdents;
            RAST._IExpr _out5600;
            DCOMPUTF16._IOwnership _out5601;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5602;
            DCOMPUTF16.COMP.GenExpr(_11017_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5600, out _out5601, out _out5602);
            _11018_onExpr = _out5600;
            _11019_onOwned = _out5601;
            _11020_recIdents = _out5602;
            if ((_11014_isDatatype) || (_11015_isConstant)) {
              r = ((_11018_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_11016_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5603;
              DCOMPUTF16._IOwnership _out5604;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5603, out _out5604);
              r = _out5603;
              resultingOwnership = _out5604;
            } else {
              Dafny.ISequence<Dafny.Rune> _11021_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _11021_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_11018_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_11016_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5605;
              DCOMPUTF16._IOwnership _out5606;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_11021_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5605, out _out5606);
              r = _out5605;
              resultingOwnership = _out5606;
            }
            readIdents = _11020_recIdents;
            return ;
          }
        } else if (_source429.is_TypeTest) {
          DAST._IExpression _11022___mcc_h216 = _source429.dtor_on;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _11023___mcc_h217 = _source429.dtor_dType;
          Dafny.ISequence<Dafny.Rune> _11024___mcc_h218 = _source429.dtor_variant;
          bool _11025_isDatatype = _10660___mcc_h51;
          bool _11026_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _11027_field = _10658___mcc_h49;
          DAST._IExpression _11028_on = _10657___mcc_h48;
          {
            RAST._IExpr _11029_onExpr;
            DCOMPUTF16._IOwnership _11030_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11031_recIdents;
            RAST._IExpr _out5607;
            DCOMPUTF16._IOwnership _out5608;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5609;
            DCOMPUTF16.COMP.GenExpr(_11028_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5607, out _out5608, out _out5609);
            _11029_onExpr = _out5607;
            _11030_onOwned = _out5608;
            _11031_recIdents = _out5609;
            if ((_11025_isDatatype) || (_11026_isConstant)) {
              r = ((_11029_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_11027_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5610;
              DCOMPUTF16._IOwnership _out5611;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5610, out _out5611);
              r = _out5610;
              resultingOwnership = _out5611;
            } else {
              Dafny.ISequence<Dafny.Rune> _11032_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _11032_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_11029_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_11027_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5612;
              DCOMPUTF16._IOwnership _out5613;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_11032_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5612, out _out5613);
              r = _out5612;
              resultingOwnership = _out5613;
            }
            readIdents = _11031_recIdents;
            return ;
          }
        } else if (_source429.is_InitializationValue) {
          DAST._IType _11033___mcc_h222 = _source429.dtor_typ;
          bool _11034_isDatatype = _10660___mcc_h51;
          bool _11035_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _11036_field = _10658___mcc_h49;
          DAST._IExpression _11037_on = _10657___mcc_h48;
          {
            RAST._IExpr _11038_onExpr;
            DCOMPUTF16._IOwnership _11039_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11040_recIdents;
            RAST._IExpr _out5614;
            DCOMPUTF16._IOwnership _out5615;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5616;
            DCOMPUTF16.COMP.GenExpr(_11037_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5614, out _out5615, out _out5616);
            _11038_onExpr = _out5614;
            _11039_onOwned = _out5615;
            _11040_recIdents = _out5616;
            if ((_11034_isDatatype) || (_11035_isConstant)) {
              r = ((_11038_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_11036_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5617;
              DCOMPUTF16._IOwnership _out5618;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5617, out _out5618);
              r = _out5617;
              resultingOwnership = _out5618;
            } else {
              Dafny.ISequence<Dafny.Rune> _11041_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _11041_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_11038_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_11036_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5619;
              DCOMPUTF16._IOwnership _out5620;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_11041_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5619, out _out5620);
              r = _out5619;
              resultingOwnership = _out5620;
            }
            readIdents = _11040_recIdents;
            return ;
          }
        } else if (_source429.is_BoolBoundedPool) {
          bool _11042_isDatatype = _10660___mcc_h51;
          bool _11043_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _11044_field = _10658___mcc_h49;
          DAST._IExpression _11045_on = _10657___mcc_h48;
          {
            RAST._IExpr _11046_onExpr;
            DCOMPUTF16._IOwnership _11047_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11048_recIdents;
            RAST._IExpr _out5621;
            DCOMPUTF16._IOwnership _out5622;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5623;
            DCOMPUTF16.COMP.GenExpr(_11045_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5621, out _out5622, out _out5623);
            _11046_onExpr = _out5621;
            _11047_onOwned = _out5622;
            _11048_recIdents = _out5623;
            if ((_11042_isDatatype) || (_11043_isConstant)) {
              r = ((_11046_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_11044_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5624;
              DCOMPUTF16._IOwnership _out5625;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5624, out _out5625);
              r = _out5624;
              resultingOwnership = _out5625;
            } else {
              Dafny.ISequence<Dafny.Rune> _11049_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _11049_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_11046_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_11044_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5626;
              DCOMPUTF16._IOwnership _out5627;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_11049_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5626, out _out5627);
              r = _out5626;
              resultingOwnership = _out5627;
            }
            readIdents = _11048_recIdents;
            return ;
          }
        } else if (_source429.is_SetBoundedPool) {
          DAST._IExpression _11050___mcc_h224 = _source429.dtor_of;
          bool _11051_isDatatype = _10660___mcc_h51;
          bool _11052_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _11053_field = _10658___mcc_h49;
          DAST._IExpression _11054_on = _10657___mcc_h48;
          {
            RAST._IExpr _11055_onExpr;
            DCOMPUTF16._IOwnership _11056_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11057_recIdents;
            RAST._IExpr _out5628;
            DCOMPUTF16._IOwnership _out5629;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5630;
            DCOMPUTF16.COMP.GenExpr(_11054_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5628, out _out5629, out _out5630);
            _11055_onExpr = _out5628;
            _11056_onOwned = _out5629;
            _11057_recIdents = _out5630;
            if ((_11051_isDatatype) || (_11052_isConstant)) {
              r = ((_11055_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_11053_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5631;
              DCOMPUTF16._IOwnership _out5632;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5631, out _out5632);
              r = _out5631;
              resultingOwnership = _out5632;
            } else {
              Dafny.ISequence<Dafny.Rune> _11058_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _11058_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_11055_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_11053_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5633;
              DCOMPUTF16._IOwnership _out5634;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_11058_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5633, out _out5634);
              r = _out5633;
              resultingOwnership = _out5634;
            }
            readIdents = _11057_recIdents;
            return ;
          }
        } else if (_source429.is_SeqBoundedPool) {
          DAST._IExpression _11059___mcc_h226 = _source429.dtor_of;
          bool _11060___mcc_h227 = _source429.dtor_includeDuplicates;
          bool _11061_isDatatype = _10660___mcc_h51;
          bool _11062_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _11063_field = _10658___mcc_h49;
          DAST._IExpression _11064_on = _10657___mcc_h48;
          {
            RAST._IExpr _11065_onExpr;
            DCOMPUTF16._IOwnership _11066_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11067_recIdents;
            RAST._IExpr _out5635;
            DCOMPUTF16._IOwnership _out5636;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5637;
            DCOMPUTF16.COMP.GenExpr(_11064_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5635, out _out5636, out _out5637);
            _11065_onExpr = _out5635;
            _11066_onOwned = _out5636;
            _11067_recIdents = _out5637;
            if ((_11061_isDatatype) || (_11062_isConstant)) {
              r = ((_11065_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_11063_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5638;
              DCOMPUTF16._IOwnership _out5639;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5638, out _out5639);
              r = _out5638;
              resultingOwnership = _out5639;
            } else {
              Dafny.ISequence<Dafny.Rune> _11068_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _11068_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_11065_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_11063_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5640;
              DCOMPUTF16._IOwnership _out5641;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_11068_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5640, out _out5641);
              r = _out5640;
              resultingOwnership = _out5641;
            }
            readIdents = _11067_recIdents;
            return ;
          }
        } else {
          DAST._IExpression _11069___mcc_h230 = _source429.dtor_lo;
          DAST._IExpression _11070___mcc_h231 = _source429.dtor_hi;
          bool _11071_isDatatype = _10660___mcc_h51;
          bool _11072_isConstant = _10659___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _11073_field = _10658___mcc_h49;
          DAST._IExpression _11074_on = _10657___mcc_h48;
          {
            RAST._IExpr _11075_onExpr;
            DCOMPUTF16._IOwnership _11076_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11077_recIdents;
            RAST._IExpr _out5642;
            DCOMPUTF16._IOwnership _out5643;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5644;
            DCOMPUTF16.COMP.GenExpr(_11074_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5642, out _out5643, out _out5644);
            _11075_onExpr = _out5642;
            _11076_onOwned = _out5643;
            _11077_recIdents = _out5644;
            if ((_11071_isDatatype) || (_11072_isConstant)) {
              r = ((_11075_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_11073_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5645;
              DCOMPUTF16._IOwnership _out5646;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5645, out _out5646);
              r = _out5645;
              resultingOwnership = _out5646;
            } else {
              Dafny.ISequence<Dafny.Rune> _11078_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _11078_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_11075_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_11073_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5647;
              DCOMPUTF16._IOwnership _out5648;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_11078_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5647, out _out5648);
              r = _out5647;
              resultingOwnership = _out5648;
            }
            readIdents = _11077_recIdents;
            return ;
          }
        }
      } else if (_source426.is_SelectFn) {
        DAST._IExpression _11079___mcc_h234 = _source426.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _11080___mcc_h235 = _source426.dtor_field;
        bool _11081___mcc_h236 = _source426.dtor_onDatatype;
        bool _11082___mcc_h237 = _source426.dtor_isStatic;
        BigInteger _11083___mcc_h238 = _source426.dtor_arity;
        BigInteger _11084_arity = _11083___mcc_h238;
        bool _11085_isStatic = _11082___mcc_h237;
        bool _11086_isDatatype = _11081___mcc_h236;
        Dafny.ISequence<Dafny.Rune> _11087_field = _11080___mcc_h235;
        DAST._IExpression _11088_on = _11079___mcc_h234;
        {
          RAST._IExpr _11089_onExpr;
          DCOMPUTF16._IOwnership _11090_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11091_recIdents;
          RAST._IExpr _out5649;
          DCOMPUTF16._IOwnership _out5650;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5651;
          DCOMPUTF16.COMP.GenExpr(_11088_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5649, out _out5650, out _out5651);
          _11089_onExpr = _out5649;
          _11090_onOwned = _out5650;
          _11091_recIdents = _out5651;
          Dafny.ISequence<Dafny.Rune> _11092_s = Dafny.Sequence<Dafny.Rune>.Empty;
          Dafny.ISequence<Dafny.Rune> _11093_onString;
          _11093_onString = (_11089_onExpr)._ToString(DCOMPUTF16.__default.IND);
          if (_11085_isStatic) {
            _11092_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_11093_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMPUTF16.__default.escapeIdent(_11087_field));
          } else {
            _11092_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
            _11092_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_11092_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let callTarget = (")), _11093_onString), ((object.Equals(_11090_onOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            Dafny.ISequence<Dafny.Rune> _11094_args;
            _11094_args = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            BigInteger _11095_i;
            _11095_i = BigInteger.Zero;
            while ((_11095_i) < (_11084_arity)) {
              if ((_11095_i).Sign == 1) {
                _11094_args = Dafny.Sequence<Dafny.Rune>.Concat(_11094_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _11094_args = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_11094_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("arg")), Std.Strings.__default.OfNat(_11095_i));
              _11095_i = (_11095_i) + (BigInteger.One);
            }
            _11092_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_11092_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move |")), _11094_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| {\n"));
            _11092_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_11092_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("callTarget.")), _11087_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _11094_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
            _11092_s = Dafny.Sequence<Dafny.Rune>.Concat(_11092_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            _11092_s = Dafny.Sequence<Dafny.Rune>.Concat(_11092_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
          }
          Dafny.ISequence<Dafny.Rune> _11096_typeShape;
          _11096_typeShape = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::ops::Fn(");
          BigInteger _11097_i;
          _11097_i = BigInteger.Zero;
          while ((_11097_i) < (_11084_arity)) {
            if ((_11097_i).Sign == 1) {
              _11096_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_11096_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            _11096_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_11096_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&_"));
            _11097_i = (_11097_i) + (BigInteger.One);
          }
          _11096_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_11096_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> _"));
          _11092_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper(::std::rc::Rc::new("), _11092_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ::std::rc::Rc<")), _11096_typeShape), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          r = RAST.Expr.create_RawExpr(_11092_s);
          RAST._IExpr _out5652;
          DCOMPUTF16._IOwnership _out5653;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5652, out _out5653);
          r = _out5652;
          resultingOwnership = _out5653;
          readIdents = _11091_recIdents;
          return ;
        }
      } else if (_source426.is_Index) {
        DAST._IExpression _11098___mcc_h239 = _source426.dtor_expr;
        DAST._ICollKind _11099___mcc_h240 = _source426.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _11100___mcc_h241 = _source426.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _11101_indices = _11100___mcc_h241;
        DAST._ICollKind _11102_collKind = _11099___mcc_h240;
        DAST._IExpression _11103_on = _11098___mcc_h239;
        {
          RAST._IExpr _11104_onExpr;
          DCOMPUTF16._IOwnership _11105_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11106_recIdents;
          RAST._IExpr _out5654;
          DCOMPUTF16._IOwnership _out5655;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5656;
          DCOMPUTF16.COMP.GenExpr(_11103_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out5654, out _out5655, out _out5656);
          _11104_onExpr = _out5654;
          _11105_onOwned = _out5655;
          _11106_recIdents = _out5656;
          readIdents = _11106_recIdents;
          r = _11104_onExpr;
          BigInteger _11107_i;
          _11107_i = BigInteger.Zero;
          while ((_11107_i) < (new BigInteger((_11101_indices).Count))) {
            if (object.Equals(_11102_collKind, DAST.CollKind.create_Array())) {
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("borrow"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
            }
            RAST._IExpr _11108_idx;
            DCOMPUTF16._IOwnership _11109_idxOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11110_recIdentsIdx;
            RAST._IExpr _out5657;
            DCOMPUTF16._IOwnership _out5658;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5659;
            DCOMPUTF16.COMP.GenExpr((_11101_indices).Select(_11107_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5657, out _out5658, out _out5659);
            _11108_idx = _out5657;
            _11109_idxOwned = _out5658;
            _11110_recIdentsIdx = _out5659;
            r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("get"))).Apply1(_11108_idx);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _11110_recIdentsIdx);
            _11107_i = (_11107_i) + (BigInteger.One);
          }
          RAST._IExpr _out5660;
          DCOMPUTF16._IOwnership _out5661;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5660, out _out5661);
          r = _out5660;
          resultingOwnership = _out5661;
          return ;
        }
      } else if (_source426.is_IndexRange) {
        DAST._IExpression _11111___mcc_h242 = _source426.dtor_expr;
        bool _11112___mcc_h243 = _source426.dtor_isArray;
        Std.Wrappers._IOption<DAST._IExpression> _11113___mcc_h244 = _source426.dtor_low;
        Std.Wrappers._IOption<DAST._IExpression> _11114___mcc_h245 = _source426.dtor_high;
        Std.Wrappers._IOption<DAST._IExpression> _11115_high = _11114___mcc_h245;
        Std.Wrappers._IOption<DAST._IExpression> _11116_low = _11113___mcc_h244;
        bool _11117_isArray = _11112___mcc_h243;
        DAST._IExpression _11118_on = _11111___mcc_h242;
        {
          RAST._IExpr _11119_onExpr;
          DCOMPUTF16._IOwnership _11120_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11121_recIdents;
          RAST._IExpr _out5662;
          DCOMPUTF16._IOwnership _out5663;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5664;
          DCOMPUTF16.COMP.GenExpr(_11118_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out5662, out _out5663, out _out5664);
          _11119_onExpr = _out5662;
          _11120_onOwned = _out5663;
          _11121_recIdents = _out5664;
          readIdents = _11121_recIdents;
          Dafny.ISequence<Dafny.Rune> _11122_methodName;
          _11122_methodName = (((_11116_low).is_Some) ? ((((_11115_high).is_Some) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("slice")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("drop")))) : ((((_11115_high).is_Some) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("take")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))));
          Dafny.ISequence<RAST._IExpr> _11123_arguments;
          _11123_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          Std.Wrappers._IOption<DAST._IExpression> _source430 = _11116_low;
          if (_source430.is_None) {
          } else {
            DAST._IExpression _11124___mcc_h274 = _source430.dtor_value;
            DAST._IExpression _11125_l = _11124___mcc_h274;
            {
              RAST._IExpr _11126_lExpr;
              DCOMPUTF16._IOwnership _11127___v124;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11128_recIdentsL;
              RAST._IExpr _out5665;
              DCOMPUTF16._IOwnership _out5666;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5667;
              DCOMPUTF16.COMP.GenExpr(_11125_l, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5665, out _out5666, out _out5667);
              _11126_lExpr = _out5665;
              _11127___v124 = _out5666;
              _11128_recIdentsL = _out5667;
              _11123_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_11123_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(_11126_lExpr));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _11128_recIdentsL);
            }
          }
          Std.Wrappers._IOption<DAST._IExpression> _source431 = _11115_high;
          if (_source431.is_None) {
          } else {
            DAST._IExpression _11129___mcc_h275 = _source431.dtor_value;
            DAST._IExpression _11130_h = _11129___mcc_h275;
            {
              RAST._IExpr _11131_hExpr;
              DCOMPUTF16._IOwnership _11132___v125;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11133_recIdentsH;
              RAST._IExpr _out5668;
              DCOMPUTF16._IOwnership _out5669;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5670;
              DCOMPUTF16.COMP.GenExpr(_11130_h, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5668, out _out5669, out _out5670);
              _11131_hExpr = _out5668;
              _11132___v125 = _out5669;
              _11133_recIdentsH = _out5670;
              _11123_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_11123_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(_11131_hExpr));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _11133_recIdentsH);
            }
          }
          r = _11119_onExpr;
          if (_11117_isArray) {
            if (!(_11122_methodName).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) {
              _11122_methodName = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"), _11122_methodName);
            }
            r = ((RAST.__default.dafny__runtime__Sequence).MSel(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array"), _11122_methodName))).Apply(_11123_arguments);
          } else {
            if (!(_11122_methodName).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) {
              r = ((r).Sel(_11122_methodName)).Apply(_11123_arguments);
            }
          }
          RAST._IExpr _out5671;
          DCOMPUTF16._IOwnership _out5672;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5671, out _out5672);
          r = _out5671;
          resultingOwnership = _out5672;
          return ;
        }
      } else if (_source426.is_TupleSelect) {
        DAST._IExpression _11134___mcc_h246 = _source426.dtor_expr;
        BigInteger _11135___mcc_h247 = _source426.dtor_index;
        BigInteger _11136_idx = _11135___mcc_h247;
        DAST._IExpression _11137_on = _11134___mcc_h246;
        {
          RAST._IExpr _11138_onExpr;
          DCOMPUTF16._IOwnership _11139_onOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11140_recIdents;
          RAST._IExpr _out5673;
          DCOMPUTF16._IOwnership _out5674;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5675;
          DCOMPUTF16.COMP.GenExpr(_11137_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out5673, out _out5674, out _out5675);
          _11138_onExpr = _out5673;
          _11139_onOwnership = _out5674;
          _11140_recIdents = _out5675;
          r = (_11138_onExpr).Sel(Std.Strings.__default.OfNat(_11136_idx));
          RAST._IExpr _out5676;
          DCOMPUTF16._IOwnership _out5677;
          DCOMPUTF16.COMP.FromOwnership(r, _11139_onOwnership, expectedOwnership, out _out5676, out _out5677);
          r = _out5676;
          resultingOwnership = _out5677;
          readIdents = _11140_recIdents;
          return ;
        }
      } else if (_source426.is_Call) {
        DAST._IExpression _11141___mcc_h248 = _source426.dtor_on;
        DAST._ICallName _11142___mcc_h249 = _source426.dtor_callName;
        Dafny.ISequence<DAST._IType> _11143___mcc_h250 = _source426.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _11144___mcc_h251 = _source426.dtor_args;
        Dafny.ISequence<DAST._IExpression> _11145_args = _11144___mcc_h251;
        Dafny.ISequence<DAST._IType> _11146_typeArgs = _11143___mcc_h250;
        DAST._ICallName _11147_name = _11142___mcc_h249;
        DAST._IExpression _11148_on = _11141___mcc_h248;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<RAST._IType> _11149_typeExprs;
          _11149_typeExprs = Dafny.Sequence<RAST._IType>.FromElements();
          if ((new BigInteger((_11146_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _11150_typeI;
            _11150_typeI = BigInteger.Zero;
            while ((_11150_typeI) < (new BigInteger((_11146_typeArgs).Count))) {
              RAST._IType _11151_typeExpr;
              RAST._IType _out5678;
              _out5678 = DCOMPUTF16.COMP.GenType((_11146_typeArgs).Select(_11150_typeI), false, false);
              _11151_typeExpr = _out5678;
              _11149_typeExprs = Dafny.Sequence<RAST._IType>.Concat(_11149_typeExprs, Dafny.Sequence<RAST._IType>.FromElements(_11151_typeExpr));
              _11150_typeI = (_11150_typeI) + (BigInteger.One);
            }
          }
          Dafny.ISequence<RAST._IExpr> _11152_argExprs;
          _11152_argExprs = Dafny.Sequence<RAST._IExpr>.FromElements();
          BigInteger _11153_i;
          _11153_i = BigInteger.Zero;
          while ((_11153_i) < (new BigInteger((_11145_args).Count))) {
            RAST._IExpr _11154_argExpr;
            DCOMPUTF16._IOwnership _11155_argOwnership;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11156_argIdents;
            RAST._IExpr _out5679;
            DCOMPUTF16._IOwnership _out5680;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5681;
            DCOMPUTF16.COMP.GenExpr((_11145_args).Select(_11153_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5679, out _out5680, out _out5681);
            _11154_argExpr = _out5679;
            _11155_argOwnership = _out5680;
            _11156_argIdents = _out5681;
            _11152_argExprs = Dafny.Sequence<RAST._IExpr>.Concat(_11152_argExprs, Dafny.Sequence<RAST._IExpr>.FromElements(_11154_argExpr));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _11156_argIdents);
            _11153_i = (_11153_i) + (BigInteger.One);
          }
          RAST._IExpr _11157_onExpr;
          DCOMPUTF16._IOwnership _11158___v126;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11159_recIdents;
          RAST._IExpr _out5682;
          DCOMPUTF16._IOwnership _out5683;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5684;
          DCOMPUTF16.COMP.GenExpr(_11148_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out5682, out _out5683, out _out5684);
          _11157_onExpr = _out5682;
          _11158___v126 = _out5683;
          _11159_recIdents = _out5684;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _11159_recIdents);
          Dafny.ISequence<Dafny.Rune> _11160_renderedName;
          _11160_renderedName = ((System.Func<DAST._ICallName, Dafny.ISequence<Dafny.Rune>>)((_source432) => {
            if (_source432.is_Name) {
              Dafny.ISequence<Dafny.Rune> _11161___mcc_h276 = _source432.dtor_name;
              Dafny.ISequence<Dafny.Rune> _11162_ident = _11161___mcc_h276;
              return DCOMPUTF16.__default.escapeIdent(_11162_ident);
            } else if (_source432.is_MapBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else if (_source432.is_MapBuilderBuild) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            } else if (_source432.is_SetBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            }
          }))(_11147_name);
          DAST._IExpression _source433 = _11148_on;
          if (_source433.is_Literal) {
            DAST._ILiteral _11163___mcc_h277 = _source433.dtor_Literal_a0;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _11164___mcc_h279 = _source433.dtor_Ident_a0;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _11165___mcc_h281 = _source433.dtor_Companion_a0;
            {
              _11157_onExpr = (_11157_onExpr).MSel(_11160_renderedName);
            }
          } else if (_source433.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _11166___mcc_h283 = _source433.dtor_Tuple_a0;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _11167___mcc_h285 = _source433.dtor_path;
            Dafny.ISequence<DAST._IType> _11168___mcc_h286 = _source433.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _11169___mcc_h287 = _source433.dtor_args;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _11170___mcc_h291 = _source433.dtor_dims;
            DAST._IType _11171___mcc_h292 = _source433.dtor_typ;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_DatatypeValue) {
            DAST._IDatatypeType _11172___mcc_h295 = _source433.dtor_datatypeType;
            Dafny.ISequence<DAST._IType> _11173___mcc_h296 = _source433.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _11174___mcc_h297 = _source433.dtor_variant;
            bool _11175___mcc_h298 = _source433.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _11176___mcc_h299 = _source433.dtor_contents;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_Convert) {
            DAST._IExpression _11177___mcc_h305 = _source433.dtor_value;
            DAST._IType _11178___mcc_h306 = _source433.dtor_from;
            DAST._IType _11179___mcc_h307 = _source433.dtor_typ;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_SeqConstruct) {
            DAST._IExpression _11180___mcc_h311 = _source433.dtor_length;
            DAST._IExpression _11181___mcc_h312 = _source433.dtor_elem;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _11182___mcc_h315 = _source433.dtor_elements;
            DAST._IType _11183___mcc_h316 = _source433.dtor_typ;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _11184___mcc_h319 = _source433.dtor_elements;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_MultisetValue) {
            Dafny.ISequence<DAST._IExpression> _11185___mcc_h321 = _source433.dtor_elements;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _11186___mcc_h323 = _source433.dtor_mapElems;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_MapBuilder) {
            DAST._IType _11187___mcc_h325 = _source433.dtor_keyType;
            DAST._IType _11188___mcc_h326 = _source433.dtor_valueType;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_SeqUpdate) {
            DAST._IExpression _11189___mcc_h329 = _source433.dtor_expr;
            DAST._IExpression _11190___mcc_h330 = _source433.dtor_indexExpr;
            DAST._IExpression _11191___mcc_h331 = _source433.dtor_value;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_MapUpdate) {
            DAST._IExpression _11192___mcc_h335 = _source433.dtor_expr;
            DAST._IExpression _11193___mcc_h336 = _source433.dtor_indexExpr;
            DAST._IExpression _11194___mcc_h337 = _source433.dtor_value;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_SetBuilder) {
            DAST._IType _11195___mcc_h341 = _source433.dtor_elemType;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_ToMultiset) {
            DAST._IExpression _11196___mcc_h343 = _source433.dtor_ToMultiset_a0;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_This) {
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_Ite) {
            DAST._IExpression _11197___mcc_h345 = _source433.dtor_cond;
            DAST._IExpression _11198___mcc_h346 = _source433.dtor_thn;
            DAST._IExpression _11199___mcc_h347 = _source433.dtor_els;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_UnOp) {
            DAST._IUnaryOp _11200___mcc_h351 = _source433.dtor_unOp;
            DAST._IExpression _11201___mcc_h352 = _source433.dtor_expr;
            DAST.Format._IUnOpFormat _11202___mcc_h353 = _source433.dtor_format1;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_BinOp) {
            DAST._IBinOp _11203___mcc_h357 = _source433.dtor_op;
            DAST._IExpression _11204___mcc_h358 = _source433.dtor_left;
            DAST._IExpression _11205___mcc_h359 = _source433.dtor_right;
            DAST.Format._IBinOpFormat _11206___mcc_h360 = _source433.dtor_format2;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_ArrayLen) {
            DAST._IExpression _11207___mcc_h365 = _source433.dtor_expr;
            BigInteger _11208___mcc_h366 = _source433.dtor_dim;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_MapKeys) {
            DAST._IExpression _11209___mcc_h369 = _source433.dtor_expr;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_MapValues) {
            DAST._IExpression _11210___mcc_h371 = _source433.dtor_expr;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_Select) {
            DAST._IExpression _11211___mcc_h373 = _source433.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _11212___mcc_h374 = _source433.dtor_field;
            bool _11213___mcc_h375 = _source433.dtor_isConstant;
            bool _11214___mcc_h376 = _source433.dtor_onDatatype;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_SelectFn) {
            DAST._IExpression _11215___mcc_h381 = _source433.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _11216___mcc_h382 = _source433.dtor_field;
            bool _11217___mcc_h383 = _source433.dtor_onDatatype;
            bool _11218___mcc_h384 = _source433.dtor_isStatic;
            BigInteger _11219___mcc_h385 = _source433.dtor_arity;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_Index) {
            DAST._IExpression _11220___mcc_h391 = _source433.dtor_expr;
            DAST._ICollKind _11221___mcc_h392 = _source433.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _11222___mcc_h393 = _source433.dtor_indices;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_IndexRange) {
            DAST._IExpression _11223___mcc_h397 = _source433.dtor_expr;
            bool _11224___mcc_h398 = _source433.dtor_isArray;
            Std.Wrappers._IOption<DAST._IExpression> _11225___mcc_h399 = _source433.dtor_low;
            Std.Wrappers._IOption<DAST._IExpression> _11226___mcc_h400 = _source433.dtor_high;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_TupleSelect) {
            DAST._IExpression _11227___mcc_h405 = _source433.dtor_expr;
            BigInteger _11228___mcc_h406 = _source433.dtor_index;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_Call) {
            DAST._IExpression _11229___mcc_h409 = _source433.dtor_on;
            DAST._ICallName _11230___mcc_h410 = _source433.dtor_callName;
            Dafny.ISequence<DAST._IType> _11231___mcc_h411 = _source433.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _11232___mcc_h412 = _source433.dtor_args;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _11233___mcc_h417 = _source433.dtor_params;
            DAST._IType _11234___mcc_h418 = _source433.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _11235___mcc_h419 = _source433.dtor_body;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _11236___mcc_h423 = _source433.dtor_values;
            DAST._IType _11237___mcc_h424 = _source433.dtor_retType;
            DAST._IExpression _11238___mcc_h425 = _source433.dtor_expr;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _11239___mcc_h429 = _source433.dtor_name;
            DAST._IType _11240___mcc_h430 = _source433.dtor_typ;
            DAST._IExpression _11241___mcc_h431 = _source433.dtor_value;
            DAST._IExpression _11242___mcc_h432 = _source433.dtor_iifeBody;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_Apply) {
            DAST._IExpression _11243___mcc_h437 = _source433.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _11244___mcc_h438 = _source433.dtor_args;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_TypeTest) {
            DAST._IExpression _11245___mcc_h441 = _source433.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _11246___mcc_h442 = _source433.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _11247___mcc_h443 = _source433.dtor_variant;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_InitializationValue) {
            DAST._IType _11248___mcc_h447 = _source433.dtor_typ;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_BoolBoundedPool) {
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_SetBoundedPool) {
            DAST._IExpression _11249___mcc_h449 = _source433.dtor_of;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else if (_source433.is_SeqBoundedPool) {
            DAST._IExpression _11250___mcc_h451 = _source433.dtor_of;
            bool _11251___mcc_h452 = _source433.dtor_includeDuplicates;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          } else {
            DAST._IExpression _11252___mcc_h455 = _source433.dtor_lo;
            DAST._IExpression _11253___mcc_h456 = _source433.dtor_hi;
            {
              _11157_onExpr = (_11157_onExpr).Sel(_11160_renderedName);
            }
          }
          r = _11157_onExpr;
          if ((new BigInteger((_11149_typeExprs).Count)).Sign == 1) {
            r = (r).ApplyType(_11149_typeExprs);
          }
          r = (r).Apply(_11152_argExprs);
          RAST._IExpr _out5685;
          DCOMPUTF16._IOwnership _out5686;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5685, out _out5686);
          r = _out5685;
          resultingOwnership = _out5686;
          return ;
        }
      } else if (_source426.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _11254___mcc_h252 = _source426.dtor_params;
        DAST._IType _11255___mcc_h253 = _source426.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _11256___mcc_h254 = _source426.dtor_body;
        Dafny.ISequence<DAST._IStatement> _11257_body = _11256___mcc_h254;
        DAST._IType _11258_retType = _11255___mcc_h253;
        Dafny.ISequence<DAST._IFormal> _11259_params = _11254___mcc_h252;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _11260_paramNames;
          _11260_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMPUTF16._IOwnership> _11261_paramOwnerships;
          _11261_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.FromElements();
          BigInteger _11262_i;
          _11262_i = BigInteger.Zero;
          while ((_11262_i) < (new BigInteger((_11259_params).Count))) {
            Dafny.ISequence<Dafny.Rune> _11263_name;
            _11263_name = ((_11259_params).Select(_11262_i)).dtor_name;
            _11260_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_11260_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_11263_name));
            _11261_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.Update(_11261_paramOwnerships, _11263_name, DCOMPUTF16.Ownership.create_OwnershipBorrowed());
            _11262_i = (_11262_i) + (BigInteger.One);
          }
          DCOMPUTF16._IEnvironment _11264_env;
          _11264_env = DCOMPUTF16.Environment.create(_11260_paramNames, _11261_paramOwnerships);
          RAST._IExpr _11265_recursiveGen;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11266_recIdents;
          RAST._IExpr _out5687;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5688;
          DCOMPUTF16.COMP.GenStmts(_11257_body, ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())), _11264_env, true, RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")), out _out5687, out _out5688);
          _11265_recursiveGen = _out5687;
          _11266_recIdents = _out5688;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _11267_allReadCloned;
          _11267_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          while (!(_11266_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
            Dafny.ISequence<Dafny.Rune> _11268_next;
            foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_5 in (_11266_recIdents).Elements) {
              _11268_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_5;
              if ((_11266_recIdents).Contains(_11268_next)) {
                goto after__ASSIGN_SUCH_THAT_5;
              }
            }
            throw new System.Exception("assign-such-that search produced no value (line 3294)");
          after__ASSIGN_SUCH_THAT_5: ;
            if ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) && ((_11268_next).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this")))) {
              if (!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) {
                _11267_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(_11267_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let _this = self.clone();\n"));
              }
            } else if (!((_11260_paramNames).Contains(_11268_next))) {
              _11267_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_11267_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMPUTF16.__default.escapeIdent(_11268_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMPUTF16.__default.escapeIdent(_11268_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_11268_next));
            }
            _11266_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_11266_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_11268_next));
          }
          Dafny.ISequence<Dafny.Rune> _11269_paramsString;
          _11269_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Dafny.ISequence<Dafny.Rune> _11270_paramTypes;
          _11270_paramTypes = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _11262_i = BigInteger.Zero;
          while ((_11262_i) < (new BigInteger((_11259_params).Count))) {
            if ((_11262_i).Sign == 1) {
              _11269_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_11269_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              _11270_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_11270_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IType _11271_typStr;
            RAST._IType _out5689;
            _out5689 = DCOMPUTF16.COMP.GenType(((_11259_params).Select(_11262_i)).dtor_typ, false, true);
            _11271_typStr = _out5689;
            _11269_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_11269_paramsString, DCOMPUTF16.__default.escapeIdent(((_11259_params).Select(_11262_i)).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (RAST.Type.create_Borrowed(_11271_typStr))._ToString(DCOMPUTF16.__default.IND));
            _11270_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_11270_paramTypes, (RAST.Type.create_Borrowed(_11271_typStr))._ToString(DCOMPUTF16.__default.IND));
            _11262_i = (_11262_i) + (BigInteger.One);
          }
          RAST._IType _11272_retTypeGen;
          RAST._IType _out5690;
          _out5690 = DCOMPUTF16.COMP.GenType(_11258_retType, false, true);
          _11272_retTypeGen = _out5690;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper::<::std::rc::Rc<dyn ::std::ops::Fn("), _11270_paramTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), (_11272_retTypeGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>({\n")), _11267_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(move |")), _11269_paramsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| -> ")), (_11272_retTypeGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), (_11265_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})})")));
          RAST._IExpr _out5691;
          DCOMPUTF16._IOwnership _out5692;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5691, out _out5692);
          r = _out5691;
          resultingOwnership = _out5692;
          return ;
        }
      } else if (_source426.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _11273___mcc_h255 = _source426.dtor_values;
        DAST._IType _11274___mcc_h256 = _source426.dtor_retType;
        DAST._IExpression _11275___mcc_h257 = _source426.dtor_expr;
        DAST._IExpression _11276_expr = _11275___mcc_h257;
        DAST._IType _11277_retType = _11274___mcc_h256;
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _11278_values = _11273___mcc_h255;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _11279_paramNames;
          _11279_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMPUTF16._IOwnership> _11280_paramOwnerships;
          _11280_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.FromElements();
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11281_paramNamesSet;
          _11281_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _11282_i;
          _11282_i = BigInteger.Zero;
          while ((_11282_i) < (new BigInteger((_11278_values).Count))) {
            Dafny.ISequence<Dafny.Rune> _11283_name;
            _11283_name = (((_11278_values).Select(_11282_i)).dtor__0).dtor_name;
            _11279_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_11279_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_11283_name));
            _11280_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.Update(_11280_paramOwnerships, _11283_name, DCOMPUTF16.Ownership.create_OwnershipBorrowed());
            _11281_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_11281_paramNamesSet, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_11283_name));
            _11282_i = (_11282_i) + (BigInteger.One);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _11284_s;
          _11284_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          Dafny.ISequence<Dafny.Rune> _11285_paramsString;
          _11285_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _11282_i = BigInteger.Zero;
          while ((_11282_i) < (new BigInteger((_11278_values).Count))) {
            if ((_11282_i).Sign == 1) {
              _11285_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_11285_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IType _11286_typStr;
            RAST._IType _out5693;
            _out5693 = DCOMPUTF16.COMP.GenType((((_11278_values).Select(_11282_i)).dtor__0).dtor_typ, false, true);
            _11286_typStr = _out5693;
            RAST._IExpr _11287_valueGen;
            DCOMPUTF16._IOwnership _11288___v129;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11289_recIdents;
            RAST._IExpr _out5694;
            DCOMPUTF16._IOwnership _out5695;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5696;
            DCOMPUTF16.COMP.GenExpr(((_11278_values).Select(_11282_i)).dtor__1, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5694, out _out5695, out _out5696);
            _11287_valueGen = _out5694;
            _11288___v129 = _out5695;
            _11289_recIdents = _out5696;
            _11284_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_11284_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMPUTF16.__default.escapeIdent((((_11278_values).Select(_11282_i)).dtor__0).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (_11286_typStr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _11289_recIdents);
            _11284_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_11284_s, (_11287_valueGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            _11282_i = (_11282_i) + (BigInteger.One);
          }
          DCOMPUTF16._IEnvironment _11290_newEnv;
          _11290_newEnv = DCOMPUTF16.Environment.create(_11279_paramNames, _11280_paramOwnerships);
          RAST._IExpr _11291_recGen;
          DCOMPUTF16._IOwnership _11292_recOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11293_recIdents;
          RAST._IExpr _out5697;
          DCOMPUTF16._IOwnership _out5698;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5699;
          DCOMPUTF16.COMP.GenExpr(_11276_expr, selfIdent, _11290_newEnv, expectedOwnership, out _out5697, out _out5698, out _out5699);
          _11291_recGen = _out5697;
          _11292_recOwned = _out5698;
          _11293_recIdents = _out5699;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_11293_recIdents, _11281_paramNamesSet);
          _11284_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_11284_s, (_11291_recGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          r = RAST.Expr.create_RawExpr(_11284_s);
          RAST._IExpr _out5700;
          DCOMPUTF16._IOwnership _out5701;
          DCOMPUTF16.COMP.FromOwnership(r, _11292_recOwned, expectedOwnership, out _out5700, out _out5701);
          r = _out5700;
          resultingOwnership = _out5701;
          return ;
        }
      } else if (_source426.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _11294___mcc_h258 = _source426.dtor_name;
        DAST._IType _11295___mcc_h259 = _source426.dtor_typ;
        DAST._IExpression _11296___mcc_h260 = _source426.dtor_value;
        DAST._IExpression _11297___mcc_h261 = _source426.dtor_iifeBody;
        DAST._IExpression _11298_iifeBody = _11297___mcc_h261;
        DAST._IExpression _11299_value = _11296___mcc_h260;
        DAST._IType _11300_tpe = _11295___mcc_h259;
        Dafny.ISequence<Dafny.Rune> _11301_name = _11294___mcc_h258;
        {
          RAST._IExpr _11302_valueGen;
          DCOMPUTF16._IOwnership _11303___v130;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11304_recIdents;
          RAST._IExpr _out5702;
          DCOMPUTF16._IOwnership _out5703;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5704;
          DCOMPUTF16.COMP.GenExpr(_11299_value, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5702, out _out5703, out _out5704);
          _11302_valueGen = _out5702;
          _11303___v130 = _out5703;
          _11304_recIdents = _out5704;
          readIdents = _11304_recIdents;
          RAST._IType _11305_valueTypeGen;
          RAST._IType _out5705;
          _out5705 = DCOMPUTF16.COMP.GenType(_11300_tpe, false, true);
          _11305_valueTypeGen = _out5705;
          RAST._IExpr _11306_bodyGen;
          DCOMPUTF16._IOwnership _11307___v131;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11308_bodyIdents;
          RAST._IExpr _out5706;
          DCOMPUTF16._IOwnership _out5707;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5708;
          DCOMPUTF16.COMP.GenExpr(_11298_iifeBody, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5706, out _out5707, out _out5708);
          _11306_bodyGen = _out5706;
          _11307___v131 = _out5707;
          _11308_bodyIdents = _out5708;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_11308_bodyIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_11301_name))));
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet "), DCOMPUTF16.__default.escapeIdent((_11301_name))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (_11305_valueTypeGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), (_11302_valueGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), (_11306_bodyGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}")));
          RAST._IExpr _out5709;
          DCOMPUTF16._IOwnership _out5710;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5709, out _out5710);
          r = _out5709;
          resultingOwnership = _out5710;
          return ;
        }
      } else if (_source426.is_Apply) {
        DAST._IExpression _11309___mcc_h262 = _source426.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _11310___mcc_h263 = _source426.dtor_args;
        Dafny.ISequence<DAST._IExpression> _11311_args = _11310___mcc_h263;
        DAST._IExpression _11312_func = _11309___mcc_h262;
        {
          RAST._IExpr _11313_funcExpr;
          DCOMPUTF16._IOwnership _11314___v132;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11315_recIdents;
          RAST._IExpr _out5711;
          DCOMPUTF16._IOwnership _out5712;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5713;
          DCOMPUTF16.COMP.GenExpr(_11312_func, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5711, out _out5712, out _out5713);
          _11313_funcExpr = _out5711;
          _11314___v132 = _out5712;
          _11315_recIdents = _out5713;
          readIdents = _11315_recIdents;
          Dafny.ISequence<Dafny.Rune> _11316_argString;
          _11316_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _11317_i;
          _11317_i = BigInteger.Zero;
          while ((_11317_i) < (new BigInteger((_11311_args).Count))) {
            if ((_11317_i).Sign == 1) {
              _11316_argString = Dafny.Sequence<Dafny.Rune>.Concat(_11316_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _11318_argExpr;
            DCOMPUTF16._IOwnership _11319_argOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11320_argIdents;
            RAST._IExpr _out5714;
            DCOMPUTF16._IOwnership _out5715;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5716;
            DCOMPUTF16.COMP.GenExpr((_11311_args).Select(_11317_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5714, out _out5715, out _out5716);
            _11318_argExpr = _out5714;
            _11319_argOwned = _out5715;
            _11320_argIdents = _out5716;
            Dafny.ISequence<Dafny.Rune> _11321_argExprString;
            _11321_argExprString = (_11318_argExpr)._ToString(DCOMPUTF16.__default.IND);
            if (object.Equals(_11319_argOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
              _11321_argExprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _11321_argExprString);
            }
            _11316_argString = Dafny.Sequence<Dafny.Rune>.Concat(_11316_argString, _11321_argExprString);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _11320_argIdents);
            _11317_i = (_11317_i) + (BigInteger.One);
          }
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), (_11313_funcExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _11316_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))")));
          RAST._IExpr _out5717;
          DCOMPUTF16._IOwnership _out5718;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5717, out _out5718);
          r = _out5717;
          resultingOwnership = _out5718;
          return ;
        }
      } else if (_source426.is_TypeTest) {
        DAST._IExpression _11322___mcc_h264 = _source426.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _11323___mcc_h265 = _source426.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _11324___mcc_h266 = _source426.dtor_variant;
        Dafny.ISequence<Dafny.Rune> _11325_variant = _11324___mcc_h266;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _11326_dType = _11323___mcc_h265;
        DAST._IExpression _11327_on = _11322___mcc_h264;
        {
          RAST._IExpr _11328_exprGen;
          DCOMPUTF16._IOwnership _11329___v133;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11330_recIdents;
          RAST._IExpr _out5719;
          DCOMPUTF16._IOwnership _out5720;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5721;
          DCOMPUTF16.COMP.GenExpr(_11327_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5719, out _out5720, out _out5721);
          _11328_exprGen = _out5719;
          _11329___v133 = _out5720;
          _11330_recIdents = _out5721;
          RAST._IType _11331_dTypePath;
          RAST._IType _out5722;
          _out5722 = DCOMPUTF16.COMP.GenPath(_11326_dType);
          _11331_dTypePath = _out5722;
          r = (RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("matches!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(((_11328_exprGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(((_11331_dTypePath).MSel(DCOMPUTF16.__default.escapeIdent(_11325_variant)))._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{ .. }")))));
          RAST._IExpr _out5723;
          DCOMPUTF16._IOwnership _out5724;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5723, out _out5724);
          r = _out5723;
          resultingOwnership = _out5724;
          readIdents = _11330_recIdents;
          return ;
        }
      } else if (_source426.is_InitializationValue) {
        DAST._IType _11332___mcc_h267 = _source426.dtor_typ;
        DAST._IType _11333_typ = _11332___mcc_h267;
        {
          RAST._IType _11334_typExpr;
          RAST._IType _out5725;
          _out5725 = DCOMPUTF16.COMP.GenType(_11333_typ, false, false);
          _11334_typExpr = _out5725;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_11334_typExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as std::default::Default>::default()")));
          RAST._IExpr _out5726;
          DCOMPUTF16._IOwnership _out5727;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5726, out _out5727);
          r = _out5726;
          resultingOwnership = _out5727;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source426.is_BoolBoundedPool) {
        {
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[false, true]"));
          RAST._IExpr _out5728;
          DCOMPUTF16._IOwnership _out5729;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5728, out _out5729);
          r = _out5728;
          resultingOwnership = _out5729;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source426.is_SetBoundedPool) {
        DAST._IExpression _11335___mcc_h268 = _source426.dtor_of;
        DAST._IExpression _11336_of = _11335___mcc_h268;
        {
          RAST._IExpr _11337_exprGen;
          DCOMPUTF16._IOwnership _11338___v134;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11339_recIdents;
          RAST._IExpr _out5730;
          DCOMPUTF16._IOwnership _out5731;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5732;
          DCOMPUTF16.COMP.GenExpr(_11336_of, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5730, out _out5731, out _out5732);
          _11337_exprGen = _out5730;
          _11338___v134 = _out5731;
          _11339_recIdents = _out5732;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_11337_exprGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()")));
          RAST._IExpr _out5733;
          DCOMPUTF16._IOwnership _out5734;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5733, out _out5734);
          r = _out5733;
          resultingOwnership = _out5734;
          readIdents = _11339_recIdents;
          return ;
        }
      } else if (_source426.is_SeqBoundedPool) {
        DAST._IExpression _11340___mcc_h269 = _source426.dtor_of;
        bool _11341___mcc_h270 = _source426.dtor_includeDuplicates;
        bool _11342_includeDuplicates = _11341___mcc_h270;
        DAST._IExpression _11343_of = _11340___mcc_h269;
        {
          RAST._IExpr _11344_exprGen;
          DCOMPUTF16._IOwnership _11345___v135;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11346_recIdents;
          RAST._IExpr _out5735;
          DCOMPUTF16._IOwnership _out5736;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5737;
          DCOMPUTF16.COMP.GenExpr(_11343_of, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5735, out _out5736, out _out5737);
          _11344_exprGen = _out5735;
          _11345___v135 = _out5736;
          _11346_recIdents = _out5737;
          Dafny.ISequence<Dafny.Rune> _11347_s;
          _11347_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_11344_exprGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          if (!(_11342_includeDuplicates)) {
            _11347_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::itertools::Itertools::unique("), _11347_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          r = RAST.Expr.create_RawExpr(_11347_s);
          RAST._IExpr _out5738;
          DCOMPUTF16._IOwnership _out5739;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5738, out _out5739);
          r = _out5738;
          resultingOwnership = _out5739;
          readIdents = _11346_recIdents;
          return ;
        }
      } else {
        DAST._IExpression _11348___mcc_h271 = _source426.dtor_lo;
        DAST._IExpression _11349___mcc_h272 = _source426.dtor_hi;
        DAST._IExpression _11350_hi = _11349___mcc_h272;
        DAST._IExpression _11351_lo = _11348___mcc_h271;
        {
          RAST._IExpr _11352_lo;
          DCOMPUTF16._IOwnership _11353___v136;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11354_recIdentsLo;
          RAST._IExpr _out5740;
          DCOMPUTF16._IOwnership _out5741;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5742;
          DCOMPUTF16.COMP.GenExpr(_11351_lo, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5740, out _out5741, out _out5742);
          _11352_lo = _out5740;
          _11353___v136 = _out5741;
          _11354_recIdentsLo = _out5742;
          RAST._IExpr _11355_hi;
          DCOMPUTF16._IOwnership _11356___v137;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11357_recIdentsHi;
          RAST._IExpr _out5743;
          DCOMPUTF16._IOwnership _out5744;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5745;
          DCOMPUTF16.COMP.GenExpr(_11350_hi, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5743, out _out5744, out _out5745);
          _11355_hi = _out5743;
          _11356___v137 = _out5744;
          _11357_recIdentsHi = _out5745;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::integer_range("), (_11352_lo)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_11355_hi)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
          RAST._IExpr _out5746;
          DCOMPUTF16._IOwnership _out5747;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5746, out _out5747);
          r = _out5746;
          resultingOwnership = _out5747;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_11354_recIdentsLo, _11357_recIdentsHi);
          return ;
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(warnings, unconditional_panic)]\n");
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(nonstandard_style)]\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern crate dafny_runtime;\n"));
      BigInteger _11358_i;
      _11358_i = BigInteger.Zero;
      while ((_11358_i) < (new BigInteger((p).Count))) {
        Dafny.ISequence<Dafny.Rune> _11359_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        RAST._IMod _11360_m;
        RAST._IMod _out5748;
        _out5748 = DCOMPUTF16.COMP.GenModule((p).Select(_11358_i), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
        _11360_m = _out5748;
        _11359_generated = (_11360_m)._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        if ((_11358_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _11359_generated);
        _11358_i = (_11358_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nfn main() {\n");
      BigInteger _11361_i;
      _11361_i = BigInteger.Zero;
      while ((_11361_i) < (new BigInteger((fullName).Count))) {
        if ((_11361_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMPUTF16.__default.escapeIdent((fullName).Select(_11361_i)));
        _11361_i = (_11361_i) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("();\n}"));
      return s;
    }
    public static Dafny.IMap<DAST._IBinOp,Dafny.ISequence<Dafny.Rune>> OpTable { get {
      return Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.FromElements(new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Mod(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("%")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_And(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&&")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Or(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("||")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Div(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Lt(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_LtChar(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Plus(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Minus(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Times(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseAnd(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseOr(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("|")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseXor(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("^")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseShiftRight(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseShiftLeft(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<<")));
    } }
  }
} // end of namespace DCOMPUTF16

